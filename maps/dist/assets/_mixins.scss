//
// Mixins
// --------------------------------------------------

// Utilities
// -------------------------

// CSS3 PROPERTIES
// --------------------------------------------------

// Single side border-radius
@mixin border-top-radius($radius) {
  border-top-right-radius: $radius;
  border-top-left-radius: $radius;
}

@mixin border-right-radius($radius) {
  border-bottom-right-radius: $radius;
  border-top-right-radius: $radius;
}

@mixin border-bottom-radius($radius) {
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}

@mixin border-left-radius($radius) {
  border-bottom-left-radius: $radius;
  border-top-left-radius: $radius;
}

@mixin border-all-radius($radius) {
  @include border-top-radius($radius);
  @include border-bottom-radius($radius);
}

// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline-px: 13px;

@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem * 1;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem;
  } @else {
    // Create an empty list that we can dump values into
    $rem-values: ();
    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of( $value ) != "number" {
        $rem-values: append($rem-values, $value);
      } @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}

@mixin callout-background-gradient($borderColor, $gradientColor, $direction: top) {
  background: $white;
  background: -moz-linear-gradient($direction, $white 0%, $white 75%, $white 75%, $gradientColor 100%);
  background: -webkit-linear-gradient($direction, $white 0%, $white 75%, $white 75%, $gradientColor 100%);
  background: -o-linear-gradient($direction, $white 0%, $white 75%, $white 75%, $gradientColor 100%);
  background: -ms-linear-gradient($direction, $white 0%, $white 75%, $white 75%, $gradientColor 100%);
  background: linear-gradient($direction, $white 0%, $white 75%, $white 75%, $gradientColor 100%);
}

@mixin evergreen-callout-primary($borderColor, $borderHoverColor, $gradientColor, $direction: top) {
  border: 1px solid $borderColor;
  @include callout-background-gradient($borderColor, $gradientColor, $direction);
  &:hover.standard-callouthover {
    @include callout-background-gradient($borderColor, $gradientColor, bottom);
    border: 1px solid $borderHoverColor;
  }
  -moz-box-shadow: 0 2px 4px $light-gray;
  -webkit-box-shadow: 0 2px 4px $light-gray;
  box-shadow: 0 2px 4px $light-gray;
}

// rotates the element
@mixin rotate($deg) {
  -webkit-transform: rotate($deg);
  -moz-transform: rotate($deg);
  -ms-transform: rotate($deg);
  -o-transform: rotate($deg);
  transform: rotate($deg);
}

@mixin button-gradient-coloring($base-color, $text-color) {

  $gradient-49: darken(saturate(adjust-hue($base-color, -10.5), 32), 5.5);
  $gradient-50: darken(saturate(adjust-hue($base-color, -8.5), 11.5), 12);
  $gradient-100: darken(saturate(adjust-hue($base-color, -8), 28), 7.5);

  $gradient-0-focus: darken(saturate(adjust-hue($base-color, -9), 17), 5.5) !default;
  $gradient-49-focus: darken(saturate(adjust-hue($base-color, 0), 12), 8);
  $gradient-50-focus: darken(desaturate(adjust-hue($base-color, 1), 1), 15);
  $gradient-100-focus: darken(saturate(adjust-hue($base-color, 1), 9), 11);

  border-color: darken(desaturate(adjust-hue($base-color, 63.5), 17), 40) !important;
  color: $text-color;
  background: $base-color;
  background: -moz-linear-gradient(top, $base-color 0%, $gradient-49 49.9%, $gradient-50 50%, $gradient-100 100%);
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $base-color), color-stop(49.9%, $gradient-49), color-stop(50%, $gradient-50), color-stop(100%, $gradient-100));
  background: -webkit-linear-gradient(top, $base-color 0%, $gradient-49 49.9%, $gradient-50 50%, $gradient-100 100%);
  background: -o-linear-gradient(top, $base-color 0%, $gradient-49 49.9%, $gradient-50 50%, $gradient-100 100%);
  background: -ms-linear-gradient(top, $base-color 0%, $gradient-49 49.9%, $gradient-50 50%, $gradient-100 100%);
  background: linear-gradient(top, $base-color 0%, $gradient-49 49.9%, $gradient-50 50%, $gradient-100 100%);

  &:active,
  &:hover,
  &:focus {
    color: $text-color;
    border-color: darken(saturate(adjust-hue($gradient-0-focus, 11), 7), 48);
    background: $gradient-0-focus;
    background: -moz-linear-gradient(top, $gradient-0-focus 0%, $gradient-49-focus 49.9%, $gradient-50-focus 50%, $gradient-100-focus 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $gradient-0-focus), color-stop(49.9%, $gradient-49-focus), color-stop(50%, $gradient-50), color-stop(100%, $gradient-100-focus));
    background: -webkit-linear-gradient(top, $gradient-0-focus 0%, $gradient-49-focus 49.9%, $gradient-50-focus 50%, $gradient-100-focus 100%);
    background: -o-linear-gradient(top, $gradient-0-focus 0%, $gradient-49-focus 49.9%, $gradient-50-focus 50%, $gradient-100-focus 100%);
    background: -ms-linear-gradient(top, $gradient-0-focus 0%, $gradient-49-focus 49.9%, $gradient-50-focus 50%, $gradient-100-focus 100%);
    background: linear-gradient(top, $gradient-0-focus 0%, $gradient-49-focus 49.9%, $gradient-50-focus 50%, $gradient-100-focus 100%);
  }
}

// takes a desired font size and returns the new font-size in em
// 14 as default font size in pixels
@mixin em($desired-font-size) {
  font-size: 1em * ($desired-font-size/14px);
}

// creates delay properties for a given number of seconds
// examples: spinner
@mixin delay($seconds) {
  -webkit-animation-delay: $seconds;
  animation-delay: $seconds;
}