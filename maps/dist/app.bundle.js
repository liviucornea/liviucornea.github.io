var ac_app =
webpackJsonpac__name_([0],{

/***/ "./node_modules/Chart.js/src/chart.js":
/***/ (function(module, exports, __webpack_require__) {

var Chart = __webpack_require__("./node_modules/Chart.js/src/core/core.js")();

__webpack_require__("./node_modules/Chart.js/src/core/core.helpers.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/core/core.element.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/core/core.animation.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/core/core.controller.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/core/core.datasetController.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/core/core.layoutService.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/core/core.legend.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/core/core.plugin.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/core/core.scale.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/core/core.scaleService.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/core/core.title.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/core/core.tooltip.js")(Chart);

__webpack_require__("./node_modules/Chart.js/src/controllers/controller.bar.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/controllers/controller.bubble.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/controllers/controller.doughnut.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/controllers/controller.line.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/controllers/controller.polarArea.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/controllers/controller.radar.js")(Chart);

__webpack_require__("./node_modules/Chart.js/src/scales/scale.category.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/scales/scale.linear.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/scales/scale.logarithmic.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/scales/scale.radialLinear.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/scales/scale.time.js")(Chart);

__webpack_require__("./node_modules/Chart.js/src/elements/element.arc.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/elements/element.line.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/elements/element.point.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/elements/element.rectangle.js")(Chart);

__webpack_require__("./node_modules/Chart.js/src/charts/Chart.Bar.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/charts/Chart.Bubble.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/charts/Chart.Doughnut.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/charts/Chart.Line.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/charts/Chart.PolarArea.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/charts/Chart.Radar.js")(Chart);
__webpack_require__("./node_modules/Chart.js/src/charts/Chart.Scatter.js")(Chart);

window.Chart = module.exports = Chart;


/***/ }),

/***/ "./node_modules/Chart.js/src/charts/Chart.Bar.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	Chart.Bar = function(context, config) {
		config.type = 'bar';

		return new Chart(context, config);
	};

};

/***/ }),

/***/ "./node_modules/Chart.js/src/charts/Chart.Bubble.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	Chart.Bubble = function(context, config) {
		config.type = 'bubble';
		return new Chart(context, config);
	};

};

/***/ }),

/***/ "./node_modules/Chart.js/src/charts/Chart.Doughnut.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	Chart.Doughnut = function(context, config) {
		config.type = 'doughnut';

		return new Chart(context, config);
	};

};

/***/ }),

/***/ "./node_modules/Chart.js/src/charts/Chart.Line.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	Chart.Line = function(context, config) {
		config.type = 'line';

		return new Chart(context, config);
	};

};

/***/ }),

/***/ "./node_modules/Chart.js/src/charts/Chart.PolarArea.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	Chart.PolarArea = function(context, config) {
		config.type = 'polarArea';

		return new Chart(context, config);
	};

};

/***/ }),

/***/ "./node_modules/Chart.js/src/charts/Chart.Radar.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	var defaultConfig = {
		aspectRatio: 1
	};

	Chart.Radar = function(context, config) {
		config.options = helpers.configMerge(defaultConfig, config.options);
		config.type = 'radar';

		return new Chart(context, config);
	};

};


/***/ }),

/***/ "./node_modules/Chart.js/src/charts/Chart.Scatter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var defaultConfig = {
		hover: {
			mode: 'single'
		},

		scales: {
			xAxes: [{
				type: "linear", // scatter should not use a category axis
				position: "bottom",
				id: "x-axis-1" // need an ID so datasets can reference the scale
			}],
			yAxes: [{
				type: "linear",
				position: "left",
				id: "y-axis-1"
			}]
		},

		tooltips: {
			callbacks: {
				title: function(tooltipItems, data) {
					// Title doesn't make sense for scatter since we format the data as a point
					return '';
				},
				label: function(tooltipItem, data) {
					return '(' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ')';
				}
			}
		}
	};

	// Register the default config for this type
	Chart.defaults.scatter = defaultConfig;

	// Scatter charts use line controllers
	Chart.controllers.scatter = Chart.controllers.line;

	Chart.Scatter = function(context, config) {
		config.type = 'scatter';
		return new Chart(context, config);
	};

};

/***/ }),

/***/ "./node_modules/Chart.js/src/controllers/controller.bar.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	Chart.defaults.bar = {
		hover: {
			mode: "label"
		},

		scales: {
			xAxes: [{
				type: "category",

				// Specific to Bar Controller
				categoryPercentage: 0.8,
				barPercentage: 0.9,

				// grid line settings
				gridLines: {
					offsetGridLines: true
				}
			}],
			yAxes: [{
				type: "linear"
			}]
		}
	};

	Chart.controllers.bar = Chart.DatasetController.extend({
		initialize: function(chart, datasetIndex) {
			Chart.DatasetController.prototype.initialize.call(this, chart, datasetIndex);

			// Use this to indicate that this is a bar dataset.
			this.getMeta().bar = true;
		},
		// Get the number of datasets that display bars. We use this to correctly calculate the bar width
		getBarCount: function getBarCount() {
			var barCount = 0;
			helpers.each(this.chart.data.datasets, function(dataset, datasetIndex) {
				var meta = this.chart.getDatasetMeta(datasetIndex);
				if (meta.bar && this.chart.isDatasetVisible(datasetIndex)) {
					++barCount;
				}
			}, this);
			return barCount;
		},

		addElements: function() {
			var meta = this.getMeta();
			helpers.each(this.getDataset().data, function(value, index) {
				meta.data[index] = meta.data[index] || new Chart.elements.Rectangle({
					_chart: this.chart.chart,
					_datasetIndex: this.index,
					_index: index
				});
			}, this);
		},

		addElementAndReset: function(index) {
			var rectangle = new Chart.elements.Rectangle({
				_chart: this.chart.chart,
				_datasetIndex: this.index,
				_index: index
			});

			var numBars = this.getBarCount();

			// Add to the points array and reset it
			this.getMeta().data.splice(index, 0, rectangle);
			this.updateElement(rectangle, index, true, numBars);
		},

		update: function update(reset) {
			var numBars = this.getBarCount();

			helpers.each(this.getMeta().data, function(rectangle, index) {
				this.updateElement(rectangle, index, reset, numBars);
			}, this);
		},

		updateElement: function updateElement(rectangle, index, reset, numBars) {
			var meta = this.getMeta();
			var xScale = this.getScaleForId(meta.xAxisID);
			var yScale = this.getScaleForId(meta.yAxisID);

			var yScalePoint;

			if (yScale.min < 0 && yScale.max < 0) {
				// all less than 0. use the top
				yScalePoint = yScale.getPixelForValue(yScale.max);
			} else if (yScale.min > 0 && yScale.max > 0) {
				yScalePoint = yScale.getPixelForValue(yScale.min);
			} else {
				yScalePoint = yScale.getPixelForValue(0);
			}

			helpers.extend(rectangle, {
				// Utility
				_chart: this.chart.chart,
				_xScale: xScale,
				_yScale: yScale,
				_datasetIndex: this.index,
				_index: index,


				// Desired view properties
				_model: {
					x: this.calculateBarX(index, this.index),
					y: reset ? yScalePoint : this.calculateBarY(index, this.index),

					// Tooltip
					label: this.chart.data.labels[index],
					datasetLabel: this.getDataset().label,

					// Appearance
					base: reset ? yScalePoint : this.calculateBarBase(this.index, index),
					width: this.calculateBarWidth(numBars),
					backgroundColor: rectangle.custom && rectangle.custom.backgroundColor ? rectangle.custom.backgroundColor : helpers.getValueAtIndexOrDefault(this.getDataset().backgroundColor, index, this.chart.options.elements.rectangle.backgroundColor),
					borderSkipped: rectangle.custom && rectangle.custom.borderSkipped ? rectangle.custom.borderSkipped : this.chart.options.elements.rectangle.borderSkipped,
					borderColor: rectangle.custom && rectangle.custom.borderColor ? rectangle.custom.borderColor : helpers.getValueAtIndexOrDefault(this.getDataset().borderColor, index, this.chart.options.elements.rectangle.borderColor),
					borderWidth: rectangle.custom && rectangle.custom.borderWidth ? rectangle.custom.borderWidth : helpers.getValueAtIndexOrDefault(this.getDataset().borderWidth, index, this.chart.options.elements.rectangle.borderWidth)
				}
			});
			rectangle.pivot();
		},

		calculateBarBase: function(datasetIndex, index) {
			var meta = this.getMeta();
			var xScale = this.getScaleForId(meta.xAxisID);
			var yScale = this.getScaleForId(meta.yAxisID);

			var base = 0;

			if (yScale.options.stacked) {

				var value = this.chart.data.datasets[datasetIndex].data[index];

				if (value < 0) {
					for (var i = 0; i < datasetIndex; i++) {
						var negDS = this.chart.data.datasets[i];
						var negDSMeta = this.chart.getDatasetMeta(i);
						if (negDSMeta.bar && negDSMeta.yAxisID === yScale.id && this.chart.isDatasetVisible(i)) {
							base += negDS.data[index] < 0 ? negDS.data[index] : 0;
						}
					}
				} else {
					for (var j = 0; j < datasetIndex; j++) {
						var posDS = this.chart.data.datasets[j];
						var posDSMeta = this.chart.getDatasetMeta(j);
						if (posDSMeta.bar && posDSMeta.yAxisID === yScale.id && this.chart.isDatasetVisible(j)) {
							base += posDS.data[index] > 0 ? posDS.data[index] : 0;
						}
					}
				}

				return yScale.getPixelForValue(base);
			}

			base = yScale.getPixelForValue(yScale.min);

			if (yScale.beginAtZero || ((yScale.min <= 0 && yScale.max >= 0) || (yScale.min >= 0 && yScale.max <= 0))) {
				base = yScale.getPixelForValue(0, 0);
				//base += yScale.options.gridLines.lineWidth;
			} else if (yScale.min < 0 && yScale.max < 0) {
				// All values are negative. Use the top as the base
				base = yScale.getPixelForValue(yScale.max);
			}

			return base;

		},

		getRuler: function() {
			var meta = this.getMeta();
			var xScale = this.getScaleForId(meta.xAxisID);
			var yScale = this.getScaleForId(meta.yAxisID);
			var datasetCount = this.getBarCount();

			var tickWidth = (function() {
				var min = xScale.getPixelForTick(1) - xScale.getPixelForTick(0);
				for (var i = 2; i < xScale.ticks.length; i++) {
					min = Math.min(xScale.getPixelForTick(i) - xScale.getPixelForTick(i - 1), min);
				}
				return min;
			}).call(this);
			var categoryWidth = tickWidth * xScale.options.categoryPercentage;
			var categorySpacing = (tickWidth - (tickWidth * xScale.options.categoryPercentage)) / 2;
			var fullBarWidth = categoryWidth / datasetCount;

			if (xScale.ticks.length !== this.chart.data.labels.length) {
			    var perc = xScale.ticks.length / this.chart.data.labels.length;
			    fullBarWidth = fullBarWidth * perc;
			}

			var barWidth = fullBarWidth * xScale.options.barPercentage;
			var barSpacing = fullBarWidth - (fullBarWidth * xScale.options.barPercentage);

			return {
				datasetCount: datasetCount,
				tickWidth: tickWidth,
				categoryWidth: categoryWidth,
				categorySpacing: categorySpacing,
				fullBarWidth: fullBarWidth,
				barWidth: barWidth,
				barSpacing: barSpacing
			};
		},

		calculateBarWidth: function() {
			var xScale = this.getScaleForId(this.getMeta().xAxisID);
			var ruler = this.getRuler();
			return xScale.options.stacked ? ruler.categoryWidth : ruler.barWidth;
		},

		// Get bar index from the given dataset index accounting for the fact that not all bars are visible
		getBarIndex: function(datasetIndex) {
			var barIndex = 0;
			var meta, j;

			for (j = 0; j < datasetIndex; ++j) {
				meta = this.chart.getDatasetMeta(j);
				if (meta.bar && this.chart.isDatasetVisible(j)) {
					++barIndex;
				}
			}

			return barIndex;
		},

		calculateBarX: function(index, datasetIndex) {
			var meta = this.getMeta();
			var yScale = this.getScaleForId(meta.yAxisID);
			var xScale = this.getScaleForId(meta.xAxisID);
			var barIndex = this.getBarIndex(datasetIndex);

			var ruler = this.getRuler();
			var leftTick = xScale.getPixelForValue(null, index, datasetIndex, this.chart.isCombo);
			leftTick -= this.chart.isCombo ? (ruler.tickWidth / 2) : 0;

			if (xScale.options.stacked) {
				return leftTick + (ruler.categoryWidth / 2) + ruler.categorySpacing;
			}

			return leftTick +
				(ruler.barWidth / 2) +
				ruler.categorySpacing +
				(ruler.barWidth * barIndex) +
				(ruler.barSpacing / 2) +
				(ruler.barSpacing * barIndex);
		},

		calculateBarY: function(index, datasetIndex) {
			var meta = this.getMeta();
			var xScale = this.getScaleForId(meta.xAxisID);
			var yScale = this.getScaleForId(meta.yAxisID);

			var value = this.getDataset().data[index];

			if (yScale.options.stacked) {

				var sumPos = 0,
					sumNeg = 0;

				for (var i = 0; i < datasetIndex; i++) {
					var ds = this.chart.data.datasets[i];
					var dsMeta = this.chart.getDatasetMeta(i);
					if (dsMeta.bar && dsMeta.yAxisID === yScale.id && this.chart.isDatasetVisible(i)) {
						if (ds.data[index] < 0) {
							sumNeg += ds.data[index] || 0;
						} else {
							sumPos += ds.data[index] || 0;
						}
					}
				}

				if (value < 0) {
					return yScale.getPixelForValue(sumNeg + value);
				} else {
					return yScale.getPixelForValue(sumPos + value);
				}
			}

			return yScale.getPixelForValue(value);
		},

		draw: function(ease) {
			var easingDecimal = ease || 1;
			helpers.each(this.getMeta().data, function(rectangle, index) {
				var d = this.getDataset().data[index];
				if (d !== null && d !== undefined && !isNaN(d)) {
					rectangle.transition(easingDecimal).draw();
				}
			}, this);
		},

		setHoverStyle: function(rectangle) {
			var dataset = this.chart.data.datasets[rectangle._datasetIndex];
			var index = rectangle._index;

			rectangle._model.backgroundColor = rectangle.custom && rectangle.custom.hoverBackgroundColor ? rectangle.custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(rectangle._model.backgroundColor));
			rectangle._model.borderColor = rectangle.custom && rectangle.custom.hoverBorderColor ? rectangle.custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(rectangle._model.borderColor));
			rectangle._model.borderWidth = rectangle.custom && rectangle.custom.hoverBorderWidth ? rectangle.custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, rectangle._model.borderWidth);
		},

		removeHoverStyle: function(rectangle) {
			var dataset = this.chart.data.datasets[rectangle._datasetIndex];
			var index = rectangle._index;

			rectangle._model.backgroundColor = rectangle.custom && rectangle.custom.backgroundColor ? rectangle.custom.backgroundColor : helpers.getValueAtIndexOrDefault(this.getDataset().backgroundColor, index, this.chart.options.elements.rectangle.backgroundColor);
			rectangle._model.borderColor = rectangle.custom && rectangle.custom.borderColor ? rectangle.custom.borderColor : helpers.getValueAtIndexOrDefault(this.getDataset().borderColor, index, this.chart.options.elements.rectangle.borderColor);
			rectangle._model.borderWidth = rectangle.custom && rectangle.custom.borderWidth ? rectangle.custom.borderWidth : helpers.getValueAtIndexOrDefault(this.getDataset().borderWidth, index, this.chart.options.elements.rectangle.borderWidth);
		}

	});


	// including horizontalBar in the bar file, instead of a file of its own
	// it extends bar (like pie extends doughnut)
	Chart.defaults.horizontalBar = {
		hover: {
			mode: "label"
		},

		scales: {
			xAxes: [{
				type: "linear",
				position: "bottom"
			}],
			yAxes: [{
				position: "left",
				type: "category",

				// Specific to Horizontal Bar Controller
				categoryPercentage: 0.8,
				barPercentage: 0.9,

				// grid line settings
				gridLines: {
					offsetGridLines: true
				}
			}]
		},
	};

	Chart.controllers.horizontalBar = Chart.controllers.bar.extend({
		updateElement: function updateElement(rectangle, index, reset, numBars) {
			var meta = this.getMeta();
			var xScale = this.getScaleForId(meta.xAxisID);
			var yScale = this.getScaleForId(meta.yAxisID);

			var xScalePoint;

			if (xScale.min < 0 && xScale.max < 0) {
				// all less than 0. use the right
				xScalePoint = xScale.getPixelForValue(xScale.max);
			} else if (xScale.min > 0 && xScale.max > 0) {
				xScalePoint = xScale.getPixelForValue(xScale.min);
			} else {
				xScalePoint = xScale.getPixelForValue(0);
			}

			helpers.extend(rectangle, {
				// Utility
				_chart: this.chart.chart,
				_xScale: xScale,
				_yScale: yScale,
				_datasetIndex: this.index,
				_index: index,

				// Desired view properties
				_model: {
					x: reset ? xScalePoint : this.calculateBarX(index, this.index),
					y: this.calculateBarY(index, this.index),

					// Tooltip
					label: this.chart.data.labels[index],
					datasetLabel: this.getDataset().label,

					// Appearance
					base: reset ? xScalePoint : this.calculateBarBase(this.index, index),
					height: this.calculateBarHeight(numBars),
					backgroundColor: rectangle.custom && rectangle.custom.backgroundColor ? rectangle.custom.backgroundColor : helpers.getValueAtIndexOrDefault(this.getDataset().backgroundColor, index, this.chart.options.elements.rectangle.backgroundColor),
					borderSkipped: rectangle.custom && rectangle.custom.borderSkipped ? rectangle.custom.borderSkipped : this.chart.options.elements.rectangle.borderSkipped,
					borderColor: rectangle.custom && rectangle.custom.borderColor ? rectangle.custom.borderColor : helpers.getValueAtIndexOrDefault(this.getDataset().borderColor, index, this.chart.options.elements.rectangle.borderColor),
					borderWidth: rectangle.custom && rectangle.custom.borderWidth ? rectangle.custom.borderWidth : helpers.getValueAtIndexOrDefault(this.getDataset().borderWidth, index, this.chart.options.elements.rectangle.borderWidth)
				},

				draw: function () {

					var ctx = this._chart.ctx;
					var vm = this._view;

					var halfHeight = vm.height / 2,
						topY = vm.y - halfHeight,
						bottomY = vm.y + halfHeight,
						right = vm.base - (vm.base - vm.x),
						halfStroke = vm.borderWidth / 2;

					// Canvas doesn't allow us to stroke inside the width so we can
					// adjust the sizes to fit if we're setting a stroke on the line
					if (vm.borderWidth) {
						topY += halfStroke;
						bottomY -= halfStroke;
						right += halfStroke;
					}

					ctx.beginPath();

					ctx.fillStyle = vm.backgroundColor;
					ctx.strokeStyle = vm.borderColor;
					ctx.lineWidth = vm.borderWidth;

					// Corner points, from bottom-left to bottom-right clockwise
					// | 1 2 |
					// | 0 3 |
					var corners = [
						[vm.base, bottomY],
						[vm.base, topY],
						[right, topY],
						[right, bottomY]
					];

					// Find first (starting) corner with fallback to 'bottom'
					var borders = ['bottom', 'left', 'top', 'right'];
					var startCorner = borders.indexOf(vm.borderSkipped, 0);
					if (startCorner === -1)
						startCorner = 0;

					function cornerAt(index) {
						return corners[(startCorner + index) % 4];
					}

					// Draw rectangle from 'startCorner'
					ctx.moveTo.apply(ctx, cornerAt(0));
					for (var i = 1; i < 4; i++)
						ctx.lineTo.apply(ctx, cornerAt(i));

					ctx.fill();
					if (vm.borderWidth) {
						ctx.stroke();
					}
				},

				inRange: function (mouseX, mouseY) {
					var vm = this._view;
					var inRange = false;

					if (vm) {
						if (vm.x < vm.base) {
							inRange = (mouseY >= vm.y - vm.height / 2 && mouseY <= vm.y + vm.height / 2) && (mouseX >= vm.x && mouseX <= vm.base);
						} else {
							inRange = (mouseY >= vm.y - vm.height / 2 && mouseY <= vm.y + vm.height / 2) && (mouseX >= vm.base && mouseX <= vm.x);
						}
					}

					return inRange;
				}
			});

			rectangle.pivot();
		},

		calculateBarBase: function (datasetIndex, index) {
			var meta = this.getMeta();
			var xScale = this.getScaleForId(meta.xAxisID);
			var yScale = this.getScaleForId(meta.yAxisID);

			var base = 0;

			if (xScale.options.stacked) {

				var value = this.chart.data.datasets[datasetIndex].data[index];

				if (value < 0) {
					for (var i = 0; i < datasetIndex; i++) {
						var negDS = this.chart.data.datasets[i];
						var negDSMeta = this.chart.getDatasetMeta(i);
						if (negDSMeta.bar && negDSMeta.xAxisID === xScale.id && this.chart.isDatasetVisible(i)) {
							base += negDS.data[index] < 0 ? negDS.data[index] : 0;
						}
					}
				} else {
					for (var j = 0; j < datasetIndex; j++) {
						var posDS = this.chart.data.datasets[j];
						var posDSMeta = this.chart.getDatasetMeta(j);
						if (posDSMeta.bar && posDSMeta.xAxisID === xScale.id && this.chart.isDatasetVisible(j)) {
							base += posDS.data[index] > 0 ? posDS.data[index] : 0;
						}
					}
				}

				return xScale.getPixelForValue(base);
			}

			base = xScale.getPixelForValue(xScale.min);

			if (xScale.beginAtZero || ((xScale.min <= 0 && xScale.max >= 0) || (xScale.min >= 0 && xScale.max <= 0))) {
				base = xScale.getPixelForValue(0, 0);
			} else if (xScale.min < 0 && xScale.max < 0) {
				// All values are negative. Use the right as the base
				base = xScale.getPixelForValue(xScale.max);
			}

			return base;
		},

		getRuler: function () {
			var meta = this.getMeta();
			var xScale = this.getScaleForId(meta.xAxisID);
			var yScale = this.getScaleForId(meta.yAxisID);
			var datasetCount = this.getBarCount();

			var tickHeight = (function () {
				var min = yScale.getPixelForTick(1) - yScale.getPixelForTick(0);
				for (var i = 2; i < this.getDataset().data.length; i++) {
					min = Math.min(yScale.getPixelForTick(i) - yScale.getPixelForTick(i - 1), min);
				}
				return min;
			}).call(this);
			var categoryHeight = tickHeight * yScale.options.categoryPercentage;
			var categorySpacing = (tickHeight - (tickHeight * yScale.options.categoryPercentage)) / 2;
			var fullBarHeight = categoryHeight / datasetCount;

			if (yScale.ticks.length !== this.chart.data.labels.length) {
				var perc = yScale.ticks.length / this.chart.data.labels.length;
				fullBarHeight = fullBarHeight * perc;
			}

			var barHeight = fullBarHeight * yScale.options.barPercentage;
			var barSpacing = fullBarHeight - (fullBarHeight * yScale.options.barPercentage);

			return {
				datasetCount: datasetCount,
				tickHeight: tickHeight,
				categoryHeight: categoryHeight,
				categorySpacing: categorySpacing,
				fullBarHeight: fullBarHeight,
				barHeight: barHeight,
				barSpacing: barSpacing,
			};
		},

		calculateBarHeight: function () {
			var yScale = this.getScaleForId(this.getMeta().yAxisID);
			var ruler = this.getRuler();
			return yScale.options.stacked ? ruler.categoryHeight : ruler.barHeight;
		},

		calculateBarX: function (index, datasetIndex) {
			var meta = this.getMeta();
			var xScale = this.getScaleForId(meta.xAxisID);
			var yScale = this.getScaleForId(meta.yAxisID);

			var value = this.getDataset().data[index];

			if (xScale.options.stacked) {

				var sumPos = 0,
					sumNeg = 0;

				for (var i = 0; i < datasetIndex; i++) {
					var ds = this.chart.data.datasets[i];
					var dsMeta = this.chart.getDatasetMeta(i);
					if (dsMeta.bar && dsMeta.xAxisID === xScale.id && this.chart.isDatasetVisible(i)) {
						if (ds.data[index] < 0) {
							sumNeg += ds.data[index] || 0;
						} else {
							sumPos += ds.data[index] || 0;
						}
					}
				}

				if (value < 0) {
					return xScale.getPixelForValue(sumNeg + value);
				} else {
					return xScale.getPixelForValue(sumPos + value);
				}
			}

			return xScale.getPixelForValue(value);
		},

		calculateBarY: function (index, datasetIndex) {
			var meta = this.getMeta();
			var yScale = this.getScaleForId(meta.yAxisID);
			var xScale = this.getScaleForId(meta.xAxisID);
			var barIndex = this.getBarIndex(datasetIndex);

			var ruler = this.getRuler();
			var topTick = yScale.getPixelForValue(null, index, datasetIndex, this.chart.isCombo);
			topTick -= this.chart.isCombo ? (ruler.tickHeight / 2) : 0;

			if (yScale.options.stacked) {
				return topTick + (ruler.categoryHeight / 2) + ruler.categorySpacing;
			}

			return topTick +
				(ruler.barHeight / 2) +
				ruler.categorySpacing +
				(ruler.barHeight * barIndex) +
				(ruler.barSpacing / 2) +
				(ruler.barSpacing * barIndex);
		}
	});
};


/***/ }),

/***/ "./node_modules/Chart.js/src/controllers/controller.bubble.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	Chart.defaults.bubble = {
		hover: {
			mode: "single"
		},

		scales: {
			xAxes: [{
				type: "linear", // bubble should probably use a linear scale by default
				position: "bottom",
				id: "x-axis-0" // need an ID so datasets can reference the scale
			}],
			yAxes: [{
				type: "linear",
				position: "left",
				id: "y-axis-0"
			}]
		},

		tooltips: {
			callbacks: {
				title: function(tooltipItems, data) {
					// Title doesn't make sense for scatter since we format the data as a point
					return '';
				},
				label: function(tooltipItem, data) {
					var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
					var dataPoint = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
					return datasetLabel + ': (' + dataPoint.x + ', ' + dataPoint.y + ', ' + dataPoint.r + ')';
				}
			}
		}
	};


	Chart.controllers.bubble = Chart.DatasetController.extend({
		addElements: function() {
			var meta = this.getMeta();
			helpers.each(this.getDataset().data, function(value, index) {
				meta.data[index] = meta.data[index] || new Chart.elements.Point({
					_chart: this.chart.chart,
					_datasetIndex: this.index,
					_index: index
				});
			}, this);
		},
		addElementAndReset: function(index) {
			var point = new Chart.elements.Point({
				_chart: this.chart.chart,
				_datasetIndex: this.index,
				_index: index
			});

			// Add to the points array and reset it
			this.getMeta().data.splice(index, 0, point);
			this.updateElement(point, index, true);
		},

		update: function update(reset) {
			var meta = this.getMeta();
			var points = meta.data;
			var yScale = this.getScaleForId(meta.yAxisID);
			var xScale = this.getScaleForId(meta.xAxisID);
			var scaleBase;

			if (yScale.min < 0 && yScale.max < 0) {
				scaleBase = yScale.getPixelForValue(yScale.max);
			} else if (yScale.min > 0 && yScale.max > 0) {
				scaleBase = yScale.getPixelForValue(yScale.min);
			} else {
				scaleBase = yScale.getPixelForValue(0);
			}

			// Update Points
			helpers.each(points, function(point, index) {
				this.updateElement(point, index, reset);
			}, this);

		},

		updateElement: function(point, index, reset) {
			var meta = this.getMeta();
			var yScale = this.getScaleForId(meta.yAxisID);
			var xScale = this.getScaleForId(meta.xAxisID);
			var scaleBase;

			if (yScale.min < 0 && yScale.max < 0) {
				scaleBase = yScale.getPixelForValue(yScale.max);
			} else if (yScale.min > 0 && yScale.max > 0) {
				scaleBase = yScale.getPixelForValue(yScale.min);
			} else {
				scaleBase = yScale.getPixelForValue(0);
			}

			helpers.extend(point, {
				// Utility
				_chart: this.chart.chart,
				_xScale: xScale,
				_yScale: yScale,
				_datasetIndex: this.index,
				_index: index,

				// Desired view properties
				_model: {
					x: reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(this.getDataset().data[index], index, this.index, this.chart.isCombo),
					y: reset ? scaleBase : yScale.getPixelForValue(this.getDataset().data[index], index, this.index),
					// Appearance
					radius: reset ? 0 : point.custom && point.custom.radius ? point.custom.radius : this.getRadius(this.getDataset().data[index]),
					backgroundColor: point.custom && point.custom.backgroundColor ? point.custom.backgroundColor : helpers.getValueAtIndexOrDefault(this.getDataset().backgroundColor, index, this.chart.options.elements.point.backgroundColor),
					borderColor: point.custom && point.custom.borderColor ? point.custom.borderColor : helpers.getValueAtIndexOrDefault(this.getDataset().borderColor, index, this.chart.options.elements.point.borderColor),
					borderWidth: point.custom && point.custom.borderWidth ? point.custom.borderWidth : helpers.getValueAtIndexOrDefault(this.getDataset().borderWidth, index, this.chart.options.elements.point.borderWidth),

					// Tooltip
					hitRadius: point.custom && point.custom.hitRadius ? point.custom.hitRadius : helpers.getValueAtIndexOrDefault(this.getDataset().hitRadius, index, this.chart.options.elements.point.hitRadius)
				}
			});

			point._model.skip = point.custom && point.custom.skip ? point.custom.skip : (isNaN(point._model.x) || isNaN(point._model.y));

			point.pivot();
		},

		getRadius: function(value) {
			return value.r || this.chart.options.elements.point.radius;
		},

		draw: function(ease) {
			var easingDecimal = ease || 1;

			// Transition and Draw the Points
			helpers.each(this.getMeta().data, function(point, index) {
				point.transition(easingDecimal);
				point.draw();
			});

		},

		setHoverStyle: function(point) {
			// Point
			var dataset = this.chart.data.datasets[point._datasetIndex];
			var index = point._index;

			point._model.radius = point.custom && point.custom.hoverRadius ? point.custom.hoverRadius : (helpers.getValueAtIndexOrDefault(dataset.hoverRadius, index, this.chart.options.elements.point.hoverRadius)) + this.getRadius(this.getDataset().data[point._index]);
			point._model.backgroundColor = point.custom && point.custom.hoverBackgroundColor ? point.custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(point._model.backgroundColor));
			point._model.borderColor = point.custom && point.custom.hoverBorderColor ? point.custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(point._model.borderColor));
			point._model.borderWidth = point.custom && point.custom.hoverBorderWidth ? point.custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, point._model.borderWidth);
		},

		removeHoverStyle: function(point) {
			var dataset = this.chart.data.datasets[point._datasetIndex];
			var index = point._index;

			point._model.radius = point.custom && point.custom.radius ? point.custom.radius : this.getRadius(this.getDataset().data[point._index]);
			point._model.backgroundColor = point.custom && point.custom.backgroundColor ? point.custom.backgroundColor : helpers.getValueAtIndexOrDefault(this.getDataset().backgroundColor, index, this.chart.options.elements.point.backgroundColor);
			point._model.borderColor = point.custom && point.custom.borderColor ? point.custom.borderColor : helpers.getValueAtIndexOrDefault(this.getDataset().borderColor, index, this.chart.options.elements.point.borderColor);
			point._model.borderWidth = point.custom && point.custom.borderWidth ? point.custom.borderWidth : helpers.getValueAtIndexOrDefault(this.getDataset().borderWidth, index, this.chart.options.elements.point.borderWidth);
		}
	});
};


/***/ }),

/***/ "./node_modules/Chart.js/src/controllers/controller.doughnut.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	Chart.defaults.doughnut = {
		animation: {
			//Boolean - Whether we animate the rotation of the Doughnut
			animateRotate: true,
			//Boolean - Whether we animate scaling the Doughnut from the centre
			animateScale: false
		},
		aspectRatio: 1,
		hover: {
			mode: 'single'
		},
		legendCallback: function(chart) {
			var text = [];
			text.push('<ul class="' + chart.id + '-legend">');

			if (chart.data.datasets.length) {
				for (var i = 0; i < chart.data.datasets[0].data.length; ++i) {
					text.push('<li><span style="background-color:' + chart.data.datasets[0].backgroundColor[i] + '"></span>');
					if (chart.data.labels[i]) {
						text.push(chart.data.labels[i]);
					}
					text.push('</li>');
				}
			}

			text.push('</ul>');
			return text.join("");
		},
		legend: {
			labels: {
				generateLabels: function(chart) {
					var data = chart.data;
					if (data.labels.length && data.datasets.length) {
						return data.labels.map(function(label, i) {
							var meta = chart.getDatasetMeta(0);
							var ds = data.datasets[0];
							var arc = meta.data[i];
							var fill = arc.custom && arc.custom.backgroundColor ? arc.custom.backgroundColor : helpers.getValueAtIndexOrDefault(ds.backgroundColor, i, this.chart.options.elements.arc.backgroundColor);
							var stroke = arc.custom && arc.custom.borderColor ? arc.custom.borderColor : helpers.getValueAtIndexOrDefault(ds.borderColor, i, this.chart.options.elements.arc.borderColor);
							var bw = arc.custom && arc.custom.borderWidth ? arc.custom.borderWidth : helpers.getValueAtIndexOrDefault(ds.borderWidth, i, this.chart.options.elements.arc.borderWidth);

							return {
								text: label,
								fillStyle: fill,
								strokeStyle: stroke,
								lineWidth: bw,
								hidden: isNaN(ds.data[i]) || meta.data[i].hidden,

								// Extra data used for toggling the correct item
								index: i
							};
						}, this);
					} else {
						return [];
					}
				}
			},

			onClick: function(e, legendItem) {
				var index = legendItem.index;
				var chart = this.chart;
				var i, ilen, meta;

				for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
					meta = chart.getDatasetMeta(i);
					meta.data[index].hidden = !meta.data[index].hidden;
				}

				chart.update();
			}
		},

		//The percentage of the chart that we cut out of the middle.
		cutoutPercentage: 50,

		//The rotation of the chart, where the first data arc begins.
		rotation: Math.PI * -0.5,

		//The total circumference of the chart.
		circumference: Math.PI * 2.0,

		// Need to override these to give a nice default
		tooltips: {
			callbacks: {
				title: function() {
					return '';
				},
				label: function(tooltipItem, data) {
					return data.labels[tooltipItem.index] + ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
				}
			}
		}
	};

	Chart.defaults.pie = helpers.clone(Chart.defaults.doughnut);
	helpers.extend(Chart.defaults.pie, {
		cutoutPercentage: 0
	});


	Chart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({
		linkScales: function() {
			// no scales for doughnut
		},

		addElements: function() {
			var meta = this.getMeta();
			helpers.each(this.getDataset().data, function(value, index) {
				meta.data[index] = meta.data[index] || new Chart.elements.Arc({
					_chart: this.chart.chart,
					_datasetIndex: this.index,
					_index: index
				});
			}, this);
		},

		addElementAndReset: function(index, colorForNewElement) {
			var arc = new Chart.elements.Arc({
				_chart: this.chart.chart,
				_datasetIndex: this.index,
				_index: index
			});

			if (colorForNewElement && helpers.isArray(this.getDataset().backgroundColor)) {
				this.getDataset().backgroundColor.splice(index, 0, colorForNewElement);
			}

			// Add to the points array and reset it
			this.getMeta().data.splice(index, 0, arc);
			this.updateElement(arc, index, true);
		},

		// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
		getRingIndex: function getRingIndex(datasetIndex) {
			var ringIndex = 0;

			for (var j = 0; j < datasetIndex; ++j) {
				if (this.chart.isDatasetVisible(j)) {
					++ringIndex;
				}
			}

			return ringIndex;
		},

		update: function update(reset) {
			var availableWidth = this.chart.chartArea.right - this.chart.chartArea.left - this.chart.options.elements.arc.borderWidth;
			var availableHeight = this.chart.chartArea.bottom - this.chart.chartArea.top - this.chart.options.elements.arc.borderWidth;
			var minSize = Math.min(availableWidth, availableHeight);
			var offset = {x: 0, y: 0};

			// If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc
			if (this.chart.options.circumference < Math.PI * 2.0) {
				var startAngle = this.chart.options.rotation % (Math.PI * 2.0);
				startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
				var endAngle = startAngle + this.chart.options.circumference;
				var start = {x: Math.cos(startAngle), y: Math.sin(startAngle)};
				var end = {x: Math.cos(endAngle), y: Math.sin(endAngle)};
				var contains0 = (startAngle <= 0 && 0 <= endAngle) || (startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle);
				var contains90 = (startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle);
				var contains180 = (startAngle <= -Math.PI && -Math.PI <= endAngle) || (startAngle <= Math.PI && Math.PI <= endAngle);
				var contains270 = (startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle);
				var cutout = this.chart.options.cutoutPercentage / 100.0;
				var min = {x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)), y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))};
				var max = {x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)), y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))};
				var size = {width: (max.x - min.x) * 0.5, height: (max.y - min.y) * 0.5};
				minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
				offset = {x: (max.x + min.x) * -0.5, y: (max.y + min.y) * -0.5};
			}

			this.chart.outerRadius = Math.max(minSize / 2, 0);
			this.chart.innerRadius = Math.max(this.chart.options.cutoutPercentage ? (this.chart.outerRadius / 100) * (this.chart.options.cutoutPercentage) : 1, 0);
			this.chart.radiusLength = (this.chart.outerRadius - this.chart.innerRadius) / this.chart.getVisibleDatasetCount();
			this.chart.offsetX = offset.x * this.chart.outerRadius;
			this.chart.offsetY = offset.y * this.chart.outerRadius;

			this.getMeta().total = this.calculateTotal();

			this.outerRadius = this.chart.outerRadius - (this.chart.radiusLength * this.getRingIndex(this.index));
			this.innerRadius = this.outerRadius - this.chart.radiusLength;

			helpers.each(this.getMeta().data, function(arc, index) {
				this.updateElement(arc, index, reset);
			}, this);
		},

		updateElement: function(arc, index, reset) {
			var centerX = (this.chart.chartArea.left + this.chart.chartArea.right) / 2;
			var centerY = (this.chart.chartArea.top + this.chart.chartArea.bottom) / 2;
			var startAngle = this.chart.options.rotation; // non reset case handled later
			var endAngle = this.chart.options.rotation; // non reset case handled later
			var circumference = reset && this.chart.options.animation.animateRotate ? 0 : arc.hidden? 0 : this.calculateCircumference(this.getDataset().data[index]) * (this.chart.options.circumference / (2.0 * Math.PI));
			var innerRadius = reset && this.chart.options.animation.animateScale ? 0 : this.innerRadius;
			var outerRadius = reset && this.chart.options.animation.animateScale ? 0 : this.outerRadius;

			helpers.extend(arc, {
				// Utility
				_chart: this.chart.chart,
				_datasetIndex: this.index,
				_index: index,

				// Desired view properties
				_model: {
					x: centerX + this.chart.offsetX,
					y: centerY + this.chart.offsetY,
					startAngle: startAngle,
					endAngle: endAngle,
					circumference: circumference,
					outerRadius: outerRadius,
					innerRadius: innerRadius,

					backgroundColor: arc.custom && arc.custom.backgroundColor ? arc.custom.backgroundColor : helpers.getValueAtIndexOrDefault(this.getDataset().backgroundColor, index, this.chart.options.elements.arc.backgroundColor),
					hoverBackgroundColor: arc.custom && arc.custom.hoverBackgroundColor ? arc.custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(this.getDataset().hoverBackgroundColor, index, this.chart.options.elements.arc.hoverBackgroundColor),
					borderWidth: arc.custom && arc.custom.borderWidth ? arc.custom.borderWidth : helpers.getValueAtIndexOrDefault(this.getDataset().borderWidth, index, this.chart.options.elements.arc.borderWidth),
					borderColor: arc.custom && arc.custom.borderColor ? arc.custom.borderColor : helpers.getValueAtIndexOrDefault(this.getDataset().borderColor, index, this.chart.options.elements.arc.borderColor),

					label: helpers.getValueAtIndexOrDefault(this.getDataset().label, index, this.chart.data.labels[index])
				}
			});

			// Set correct angles if not resetting
			if (!reset || !this.chart.options.animation.animateRotate) {

				if (index === 0) {
					arc._model.startAngle = this.chart.options.rotation;
				} else {
					arc._model.startAngle = this.getMeta().data[index - 1]._model.endAngle;
				}

				arc._model.endAngle = arc._model.startAngle + arc._model.circumference;
			}

			arc.pivot();
		},

		draw: function(ease) {
			var easingDecimal = ease || 1;
			helpers.each(this.getMeta().data, function(arc, index) {
				arc.transition(easingDecimal).draw();
			});
		},

		setHoverStyle: function(arc) {
			var dataset = this.chart.data.datasets[arc._datasetIndex];
			var index = arc._index;

			arc._model.backgroundColor = arc.custom && arc.custom.hoverBackgroundColor ? arc.custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(arc._model.backgroundColor));
			arc._model.borderColor = arc.custom && arc.custom.hoverBorderColor ? arc.custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(arc._model.borderColor));
			arc._model.borderWidth = arc.custom && arc.custom.hoverBorderWidth ? arc.custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, arc._model.borderWidth);
		},

		removeHoverStyle: function(arc) {
			var dataset = this.chart.data.datasets[arc._datasetIndex];
			var index = arc._index;

			arc._model.backgroundColor = arc.custom && arc.custom.backgroundColor ? arc.custom.backgroundColor : helpers.getValueAtIndexOrDefault(this.getDataset().backgroundColor, index, this.chart.options.elements.arc.backgroundColor);
			arc._model.borderColor = arc.custom && arc.custom.borderColor ? arc.custom.borderColor : helpers.getValueAtIndexOrDefault(this.getDataset().borderColor, index, this.chart.options.elements.arc.borderColor);
			arc._model.borderWidth = arc.custom && arc.custom.borderWidth ? arc.custom.borderWidth : helpers.getValueAtIndexOrDefault(this.getDataset().borderWidth, index, this.chart.options.elements.arc.borderWidth);
		},

		calculateTotal: function() {
			var dataset = this.getDataset();
			var meta = this.getMeta();
			var total = 0;
			var value;

			helpers.each(meta.data, function(element, index) {
				value = dataset.data[index];
				if (!isNaN(value) && !element.hidden) {
					total += Math.abs(value);
				}
			});

			return total;
		},

		calculateCircumference: function(value) {
			var total = this.getMeta().total;
			if (total > 0 && !isNaN(value)) {
				return (Math.PI * 2.0) * (value / total);
			} else {
				return 0;
			}
		}
	});
};


/***/ }),

/***/ "./node_modules/Chart.js/src/controllers/controller.line.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	Chart.defaults.line = {
		showLines: true,

		hover: {
			mode: "label"
		},

		scales: {
			xAxes: [{
				type: "category",
				id: 'x-axis-0'
			}],
			yAxes: [{
				type: "linear",
				id: 'y-axis-0'
			}]
		}
	};


	Chart.controllers.line = Chart.DatasetController.extend({
		addElements: function() {
			var meta = this.getMeta();
			meta.dataset = meta.dataset || new Chart.elements.Line({
				_chart: this.chart.chart,
				_datasetIndex: this.index,
				_points: meta.data
			});

			helpers.each(this.getDataset().data, function(value, index) {
				meta.data[index] = meta.data[index] || new Chart.elements.Point({
					_chart: this.chart.chart,
					_datasetIndex: this.index,
					_index: index
				});
			}, this);
		},

		addElementAndReset: function(index) {
			var point = new Chart.elements.Point({
				_chart: this.chart.chart,
				_datasetIndex: this.index,
				_index: index
			});

			// Add to the points array and reset it
			this.getMeta().data.splice(index, 0, point);
			this.updateElement(point, index, true);

			// Make sure bezier control points are updated
			if (this.chart.options.showLines && this.chart.options.elements.line.tension !== 0)
				this.updateBezierControlPoints();
		},

		update: function update(reset) {
			var meta = this.getMeta();
			var line = meta.dataset;
			var points = meta.data;

			var yScale = this.getScaleForId(meta.yAxisID);
			var xScale = this.getScaleForId(meta.xAxisID);
			var scaleBase;

			if (yScale.min < 0 && yScale.max < 0) {
				scaleBase = yScale.getPixelForValue(yScale.max);
			} else if (yScale.min > 0 && yScale.max > 0) {
				scaleBase = yScale.getPixelForValue(yScale.min);
			} else {
				scaleBase = yScale.getPixelForValue(0);
			}

			// Update Line
			if (this.chart.options.showLines) {
				// Utility
				line._scale = yScale;
				line._datasetIndex = this.index;
				// Data
				line._children = points;
				// Model

				// Compatibility: If the properties are defined with only the old name, use those values
				if ((this.getDataset().tension !== undefined) && (this.getDataset().lineTension === undefined))
				{
					this.getDataset().lineTension = this.getDataset().tension;
				}

				line._model = {
					// Appearance
					tension: line.custom && line.custom.tension ? line.custom.tension : helpers.getValueOrDefault(this.getDataset().lineTension, this.chart.options.elements.line.tension),
					backgroundColor: line.custom && line.custom.backgroundColor ? line.custom.backgroundColor : (this.getDataset().backgroundColor || this.chart.options.elements.line.backgroundColor),
					borderWidth: line.custom && line.custom.borderWidth ? line.custom.borderWidth : (this.getDataset().borderWidth || this.chart.options.elements.line.borderWidth),
					borderColor: line.custom && line.custom.borderColor ? line.custom.borderColor : (this.getDataset().borderColor || this.chart.options.elements.line.borderColor),
					borderCapStyle: line.custom && line.custom.borderCapStyle ? line.custom.borderCapStyle : (this.getDataset().borderCapStyle || this.chart.options.elements.line.borderCapStyle),
					borderDash: line.custom && line.custom.borderDash ? line.custom.borderDash : (this.getDataset().borderDash || this.chart.options.elements.line.borderDash),
					borderDashOffset: line.custom && line.custom.borderDashOffset ? line.custom.borderDashOffset : (this.getDataset().borderDashOffset || this.chart.options.elements.line.borderDashOffset),
					borderJoinStyle: line.custom && line.custom.borderJoinStyle ? line.custom.borderJoinStyle : (this.getDataset().borderJoinStyle || this.chart.options.elements.line.borderJoinStyle),
					fill: line.custom && line.custom.fill ? line.custom.fill : (this.getDataset().fill !== undefined ? this.getDataset().fill : this.chart.options.elements.line.fill),
					// Scale
					scaleTop: yScale.top,
					scaleBottom: yScale.bottom,
					scaleZero: scaleBase
				};
				line.pivot();
			}

			// Update Points
			helpers.each(points, function(point, index) {
				this.updateElement(point, index, reset);
			}, this);

			if (this.chart.options.showLines && this.chart.options.elements.line.tension !== 0)
				this.updateBezierControlPoints();
		},

		getPointBackgroundColor: function(point, index) {
			var backgroundColor = this.chart.options.elements.point.backgroundColor;
			var dataset = this.getDataset();

			if (point.custom && point.custom.backgroundColor) {
				backgroundColor = point.custom.backgroundColor;
			} else if (dataset.pointBackgroundColor) {
				backgroundColor = helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);
			} else if (dataset.backgroundColor) {
				backgroundColor = dataset.backgroundColor;
			}

			return backgroundColor;
		},
		getPointBorderColor: function(point, index) {
			var borderColor = this.chart.options.elements.point.borderColor;
			var dataset = this.getDataset();

			if (point.custom && point.custom.borderColor) {
				borderColor = point.custom.borderColor;
			} else if (dataset.pointBorderColor) {
				borderColor = helpers.getValueAtIndexOrDefault(this.getDataset().pointBorderColor, index, borderColor);
			} else if (dataset.borderColor) {
				borderColor = dataset.borderColor;
			}

			return borderColor;
		},
		getPointBorderWidth: function(point, index) {
			var borderWidth = this.chart.options.elements.point.borderWidth;
			var dataset = this.getDataset();

			if (point.custom && point.custom.borderWidth !== undefined) {
				borderWidth = point.custom.borderWidth;
			} else if (dataset.pointBorderWidth !== undefined) {
				borderWidth = helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);
			} else if (dataset.borderWidth !== undefined) {
				borderWidth = dataset.borderWidth;
			}

			return borderWidth;
		},

		updateElement: function(point, index, reset) {
			var meta = this.getMeta();
			var yScale = this.getScaleForId(meta.yAxisID);
			var xScale = this.getScaleForId(meta.xAxisID);
			var scaleBase;

			if (yScale.min < 0 && yScale.max < 0) {
				scaleBase = yScale.getPixelForValue(yScale.max);
			} else if (yScale.min > 0 && yScale.max > 0) {
				scaleBase = yScale.getPixelForValue(yScale.min);
			} else {
				scaleBase = yScale.getPixelForValue(0);
			}

			// Utility
			point._chart = this.chart.chart;
			point._xScale = xScale;
			point._yScale = yScale;
			point._datasetIndex = this.index;
			point._index = index;

			// Desired view properties

			// Compatibility: If the properties are defined with only the old name, use those values
			if ((this.getDataset().radius !== undefined) && (this.getDataset().pointRadius === undefined))
			{
				this.getDataset().pointRadius = this.getDataset().radius;
			}
			if ((this.getDataset().hitRadius !== undefined) && (this.getDataset().pointHitRadius === undefined))
			{
				this.getDataset().pointHitRadius = this.getDataset().hitRadius;
			}

			point._model = {
				x: xScale.getPixelForValue(this.getDataset().data[index], index, this.index, this.chart.isCombo),
				y: reset ? scaleBase : this.calculatePointY(this.getDataset().data[index], index, this.index, this.chart.isCombo),
				// Appearance
				radius: point.custom && point.custom.radius ? point.custom.radius : helpers.getValueAtIndexOrDefault(this.getDataset().pointRadius, index, this.chart.options.elements.point.radius),
				pointStyle: point.custom && point.custom.pointStyle ? point.custom.pointStyle : helpers.getValueAtIndexOrDefault(this.getDataset().pointStyle, index, this.chart.options.elements.point.pointStyle),
				backgroundColor: this.getPointBackgroundColor(point, index),
				borderColor: this.getPointBorderColor(point, index),
				borderWidth: this.getPointBorderWidth(point, index),
				tension: meta.dataset._model ? meta.dataset._model.tension : 0,
				// Tooltip
				hitRadius: point.custom && point.custom.hitRadius ? point.custom.hitRadius : helpers.getValueAtIndexOrDefault(this.getDataset().pointHitRadius, index, this.chart.options.elements.point.hitRadius)
			};

			point._model.skip = point.custom && point.custom.skip ? point.custom.skip : (isNaN(point._model.x) || isNaN(point._model.y));
		},

		calculatePointY: function(value, index, datasetIndex, isCombo) {
			var meta = this.getMeta();
			var xScale = this.getScaleForId(meta.xAxisID);
			var yScale = this.getScaleForId(meta.yAxisID);

			if (yScale.options.stacked) {

				var sumPos = 0,
					sumNeg = 0;

				for (var i = 0; i < datasetIndex; i++) {
					var ds = this.chart.data.datasets[i];
					var dsMeta = this.chart.getDatasetMeta(i);
					if (dsMeta.type === 'line' && this.chart.isDatasetVisible(i)) {
						if (ds.data[index] < 0) {
							sumNeg += ds.data[index] || 0;
						} else {
							sumPos += ds.data[index] || 0;
						}
					}
				}

				if (value < 0) {
					return yScale.getPixelForValue(sumNeg + value);
				} else {
					return yScale.getPixelForValue(sumPos + value);
				}
			}

			return yScale.getPixelForValue(value);
		},

		updateBezierControlPoints: function() {
			// Update bezier control points
			var meta = this.getMeta();
			helpers.each(meta.data, function(point, index) {
				var controlPoints = helpers.splineCurve(
					helpers.previousItem(meta.data, index)._model,
					point._model,
					helpers.nextItem(meta.data, index)._model,
					meta.dataset._model.tension
				);

				// Prevent the bezier going outside of the bounds of the graph
				point._model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, this.chart.chartArea.right), this.chart.chartArea.left);
				point._model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, this.chart.chartArea.bottom), this.chart.chartArea.top);

				point._model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, this.chart.chartArea.right), this.chart.chartArea.left);
				point._model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, this.chart.chartArea.bottom), this.chart.chartArea.top);

				// Now pivot the point for animation
				point.pivot();
			}, this);
		},

		draw: function(ease) {
			var meta = this.getMeta();
			var easingDecimal = ease || 1;

			// Transition Point Locations
			helpers.each(meta.data, function(point) {
				point.transition(easingDecimal);
			});

			// Transition and Draw the line
			if (this.chart.options.showLines)
				meta.dataset.transition(easingDecimal).draw();

			// Draw the points
			helpers.each(meta.data, function(point) {
				point.draw();
			});
		},

		setHoverStyle: function(point) {
			// Point
			var dataset = this.chart.data.datasets[point._datasetIndex];
			var index = point._index;

			point._model.radius = point.custom && point.custom.hoverRadius ? point.custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
			point._model.backgroundColor = point.custom && point.custom.hoverBackgroundColor ? point.custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(point._model.backgroundColor));
			point._model.borderColor = point.custom && point.custom.hoverBorderColor ? point.custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(point._model.borderColor));
			point._model.borderWidth = point.custom && point.custom.hoverBorderWidth ? point.custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, point._model.borderWidth);
		},

		removeHoverStyle: function(point) {
			var dataset = this.chart.data.datasets[point._datasetIndex];
			var index = point._index;

			// Compatibility: If the properties are defined with only the old name, use those values
			if ((this.getDataset().radius !== undefined) && (this.getDataset().pointRadius === undefined))
			{
				this.getDataset().pointRadius = this.getDataset().radius;
			}

			point._model.radius = point.custom && point.custom.radius ? point.custom.radius : helpers.getValueAtIndexOrDefault(this.getDataset().pointRadius, index, this.chart.options.elements.point.radius);
			point._model.backgroundColor = this.getPointBackgroundColor(point, index);
			point._model.borderColor = this.getPointBorderColor(point, index);
			point._model.borderWidth = this.getPointBorderWidth(point, index);
		}
	});
};


/***/ }),

/***/ "./node_modules/Chart.js/src/controllers/controller.polarArea.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	Chart.defaults.polarArea = {

		scale: {
			type: "radialLinear",
			lineArc: true // so that lines are circular
		},

		//Boolean - Whether to animate the rotation of the chart
		animation: {
			animateRotate: true,
			animateScale: true
		},

		aspectRatio: 1,
		legendCallback: function(chart) {
			var text = [];
			text.push('<ul class="' + chart.id + '-legend">');

			if (chart.data.datasets.length) {
				for (var i = 0; i < chart.data.datasets[0].data.length; ++i) {
					text.push('<li><span style="background-color:' + chart.data.datasets[0].backgroundColor[i] + '">');
					if (chart.data.labels[i]) {
						text.push(chart.data.labels[i]);
					}
					text.push('</span></li>');
				}
			}

			text.push('</ul>');
			return text.join("");
		},
		legend: {
			labels: {
				generateLabels: function(chart) {
					var data = chart.data;
					if (data.labels.length && data.datasets.length) {
						return data.labels.map(function(label, i) {
							var meta = chart.getDatasetMeta(0);
							var ds = data.datasets[0];
							var arc = meta.data[i];
							var fill = arc.custom && arc.custom.backgroundColor ? arc.custom.backgroundColor : helpers.getValueAtIndexOrDefault(ds.backgroundColor, i, this.chart.options.elements.arc.backgroundColor);
							var stroke = arc.custom && arc.custom.borderColor ? arc.custom.borderColor : helpers.getValueAtIndexOrDefault(ds.borderColor, i, this.chart.options.elements.arc.borderColor);
							var bw = arc.custom && arc.custom.borderWidth ? arc.custom.borderWidth : helpers.getValueAtIndexOrDefault(ds.borderWidth, i, this.chart.options.elements.arc.borderWidth);

							return {
								text: label,
								fillStyle: fill,
								strokeStyle: stroke,
								lineWidth: bw,
								hidden: isNaN(ds.data[i]) || meta.data[i].hidden,

								// Extra data used for toggling the correct item
								index: i
							};
						}, this);
					} else {
						return [];
					}
				}
			},

			onClick: function(e, legendItem) {
				var index = legendItem.index;
				var chart = this.chart;
				var i, ilen, meta;

				for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
					meta = chart.getDatasetMeta(i);
					meta.data[index].hidden = !meta.data[index].hidden;
				}

				chart.update();
			}
		},

		// Need to override these to give a nice default
		tooltips: {
			callbacks: {
				title: function() {
					return '';
				},
				label: function(tooltipItem, data) {
					return data.labels[tooltipItem.index] + ': ' + tooltipItem.yLabel;
				}
			}
		}
	};

	Chart.controllers.polarArea = Chart.DatasetController.extend({
		linkScales: function() {
			// no scales for doughnut
		},

		addElements: function() {
			var meta = this.getMeta();
			helpers.each(this.getDataset().data, function(value, index) {
				meta.data[index] = meta.data[index] || new Chart.elements.Arc({
					_chart: this.chart.chart,
					_datasetIndex: this.index,
					_index: index
				});
			}, this);
		},

		addElementAndReset: function(index) {
			var arc = new Chart.elements.Arc({
				_chart: this.chart.chart,
				_datasetIndex: this.index,
				_index: index
			});

			// Add to the points array and reset it
			this.getMeta().data.splice(index, 0, arc);
			this.updateElement(arc, index, true);
		},

		update: function update(reset) {
			var meta = this.getMeta();
			var minSize = Math.min(this.chart.chartArea.right - this.chart.chartArea.left, this.chart.chartArea.bottom - this.chart.chartArea.top);
			this.chart.outerRadius = Math.max((minSize - this.chart.options.elements.arc.borderWidth / 2) / 2, 0);
			this.chart.innerRadius = Math.max(this.chart.options.cutoutPercentage ? (this.chart.outerRadius / 100) * (this.chart.options.cutoutPercentage) : 1, 0);
			this.chart.radiusLength = (this.chart.outerRadius - this.chart.innerRadius) / this.chart.getVisibleDatasetCount();

			this.outerRadius = this.chart.outerRadius - (this.chart.radiusLength * this.index);
			this.innerRadius = this.outerRadius - this.chart.radiusLength;

			meta.count = this.countVisibleElements();

			helpers.each(meta.data, function(arc, index) {
				this.updateElement(arc, index, reset);
			}, this);
		},

		updateElement: function(arc, index, reset) {
			var circumference = this.calculateCircumference(this.getDataset().data[index]);
			var centerX = (this.chart.chartArea.left + this.chart.chartArea.right) / 2;
			var centerY = (this.chart.chartArea.top + this.chart.chartArea.bottom) / 2;

			// If there is NaN data before us, we need to calculate the starting angle correctly.
			// We could be way more efficient here, but its unlikely that the polar area chart will have a lot of data
			var visibleCount = 0;
			var meta = this.getMeta();
			for (var i = 0; i < index; ++i) {
				if (!isNaN(this.getDataset().data[i]) && !meta.data[i].hidden) {
					++visibleCount;
				}
			}

			var distance = arc.hidden? 0 : this.chart.scale.getDistanceFromCenterForValue(this.getDataset().data[index]);
			var startAngle = (-0.5 * Math.PI) + (circumference * visibleCount);
			var endAngle = startAngle + (arc.hidden? 0 : circumference);

			var resetModel = {
				x: centerX,
				y: centerY,
				innerRadius: 0,
				outerRadius: this.chart.options.animation.animateScale ? 0 : this.chart.scale.getDistanceFromCenterForValue(this.getDataset().data[index]),
				startAngle: this.chart.options.animation.animateRotate ? Math.PI * -0.5 : startAngle,
				endAngle: this.chart.options.animation.animateRotate ? Math.PI * -0.5 : endAngle,

				backgroundColor: arc.custom && arc.custom.backgroundColor ? arc.custom.backgroundColor : helpers.getValueAtIndexOrDefault(this.getDataset().backgroundColor, index, this.chart.options.elements.arc.backgroundColor),
				borderWidth: arc.custom && arc.custom.borderWidth ? arc.custom.borderWidth : helpers.getValueAtIndexOrDefault(this.getDataset().borderWidth, index, this.chart.options.elements.arc.borderWidth),
				borderColor: arc.custom && arc.custom.borderColor ? arc.custom.borderColor : helpers.getValueAtIndexOrDefault(this.getDataset().borderColor, index, this.chart.options.elements.arc.borderColor),

				label: helpers.getValueAtIndexOrDefault(this.chart.data.labels, index, this.chart.data.labels[index])
			};

			helpers.extend(arc, {
				// Utility
				_chart: this.chart.chart,
				_datasetIndex: this.index,
				_index: index,
				_scale: this.chart.scale,

				// Desired view properties
				_model: reset ? resetModel : {
					x: centerX,
					y: centerY,
					innerRadius: 0,
					outerRadius: distance,
					startAngle: startAngle,
					endAngle: endAngle,

					backgroundColor: arc.custom && arc.custom.backgroundColor ? arc.custom.backgroundColor : helpers.getValueAtIndexOrDefault(this.getDataset().backgroundColor, index, this.chart.options.elements.arc.backgroundColor),
					borderWidth: arc.custom && arc.custom.borderWidth ? arc.custom.borderWidth : helpers.getValueAtIndexOrDefault(this.getDataset().borderWidth, index, this.chart.options.elements.arc.borderWidth),
					borderColor: arc.custom && arc.custom.borderColor ? arc.custom.borderColor : helpers.getValueAtIndexOrDefault(this.getDataset().borderColor, index, this.chart.options.elements.arc.borderColor),

					label: helpers.getValueAtIndexOrDefault(this.chart.data.labels, index, this.chart.data.labels[index])
				}
			});

			arc.pivot();
		},

		draw: function(ease) {
			var easingDecimal = ease || 1;
			helpers.each(this.getMeta().data, function(arc, index) {
				arc.transition(easingDecimal).draw();
			});
		},

		setHoverStyle: function(arc) {
			var dataset = this.chart.data.datasets[arc._datasetIndex];
			var index = arc._index;

			arc._model.backgroundColor = arc.custom && arc.custom.hoverBackgroundColor ? arc.custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(arc._model.backgroundColor));
			arc._model.borderColor = arc.custom && arc.custom.hoverBorderColor ? arc.custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(arc._model.borderColor));
			arc._model.borderWidth = arc.custom && arc.custom.hoverBorderWidth ? arc.custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, arc._model.borderWidth);
		},

		removeHoverStyle: function(arc) {
			var dataset = this.chart.data.datasets[arc._datasetIndex];
			var index = arc._index;

			arc._model.backgroundColor = arc.custom && arc.custom.backgroundColor ? arc.custom.backgroundColor : helpers.getValueAtIndexOrDefault(this.getDataset().backgroundColor, index, this.chart.options.elements.arc.backgroundColor);
			arc._model.borderColor = arc.custom && arc.custom.borderColor ? arc.custom.borderColor : helpers.getValueAtIndexOrDefault(this.getDataset().borderColor, index, this.chart.options.elements.arc.borderColor);
			arc._model.borderWidth = arc.custom && arc.custom.borderWidth ? arc.custom.borderWidth : helpers.getValueAtIndexOrDefault(this.getDataset().borderWidth, index, this.chart.options.elements.arc.borderWidth);
		},

		countVisibleElements: function() {
			var dataset = this.getDataset();
			var meta = this.getMeta();
			var count = 0;

			helpers.each(meta.data, function(element, index) {
				if (!isNaN(dataset.data[index]) && !element.hidden) {
					count++;
				}
			});

			return count;
		},

		calculateCircumference: function(value) {
			var count = this.getMeta().count;
			if (count > 0 && !isNaN(value)) {
				return (2 * Math.PI) / count;
			} else {
				return 0;
			}
		}
	});
};


/***/ }),

/***/ "./node_modules/Chart.js/src/controllers/controller.radar.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;


	Chart.defaults.radar = {
		scale: {
			type: "radialLinear"
		},
		elements: {
			line: {
				tension: 0 // no bezier in radar
			}
		}
	};

	Chart.controllers.radar = Chart.DatasetController.extend({
		linkScales: function() {
			// No need. Single scale only
		},

		addElements: function() {
			var meta = this.getMeta();

			meta.dataset = meta.dataset || new Chart.elements.Line({
				_chart: this.chart.chart,
				_datasetIndex: this.index,
				_points: meta.data,
				_loop: true
			});

			helpers.each(this.getDataset().data, function(value, index) {
				meta.data[index] = meta.data[index] || new Chart.elements.Point({
					_chart: this.chart.chart,
					_datasetIndex: this.index,
					_index: index,
					_model: {
						x: 0, //xScale.getPixelForValue(null, index, true),
						y: 0 //this.chartArea.bottom,
					}
				});
			}, this);
		},
		addElementAndReset: function(index) {
			var point = new Chart.elements.Point({
				_chart: this.chart.chart,
				_datasetIndex: this.index,
				_index: index
			});

			// Add to the points array and reset it
			this.getMeta().data.splice(index, 0, point);
			this.updateElement(point, index, true);

			// Make sure bezier control points are updated
			this.updateBezierControlPoints();
		},

		update: function update(reset) {
			var meta = this.getMeta();
			var line = meta.dataset;
			var points = meta.data;

			var scale = this.chart.scale;
			var scaleBase;

			if (scale.min < 0 && scale.max < 0) {
				scaleBase = scale.getPointPositionForValue(0, scale.max);
			} else if (scale.min > 0 && scale.max > 0) {
				scaleBase = scale.getPointPositionForValue(0, scale.min);
			} else {
				scaleBase = scale.getPointPositionForValue(0, 0);
			}

			// Compatibility: If the properties are defined with only the old name, use those values
			if ((this.getDataset().tension !== undefined) && (this.getDataset().lineTension === undefined))
			{
				this.getDataset().lineTension = this.getDataset().tension;
			}

			helpers.extend(meta.dataset, {
				// Utility
				_datasetIndex: this.index,
				// Data
				_children: points,
				// Model
				_model: {
					// Appearance
					tension: line.custom && line.custom.tension ? line.custom.tension : helpers.getValueOrDefault(this.getDataset().lineTension, this.chart.options.elements.line.tension),
					backgroundColor: line.custom && line.custom.backgroundColor ? line.custom.backgroundColor : (this.getDataset().backgroundColor || this.chart.options.elements.line.backgroundColor),
					borderWidth: line.custom && line.custom.borderWidth ? line.custom.borderWidth : (this.getDataset().borderWidth || this.chart.options.elements.line.borderWidth),
					borderColor: line.custom && line.custom.borderColor ? line.custom.borderColor : (this.getDataset().borderColor || this.chart.options.elements.line.borderColor),
					fill: line.custom && line.custom.fill ? line.custom.fill : (this.getDataset().fill !== undefined ? this.getDataset().fill : this.chart.options.elements.line.fill),
					borderCapStyle: line.custom && line.custom.borderCapStyle ? line.custom.borderCapStyle : (this.getDataset().borderCapStyle || this.chart.options.elements.line.borderCapStyle),
					borderDash: line.custom && line.custom.borderDash ? line.custom.borderDash : (this.getDataset().borderDash || this.chart.options.elements.line.borderDash),
					borderDashOffset: line.custom && line.custom.borderDashOffset ? line.custom.borderDashOffset : (this.getDataset().borderDashOffset || this.chart.options.elements.line.borderDashOffset),
					borderJoinStyle: line.custom && line.custom.borderJoinStyle ? line.custom.borderJoinStyle : (this.getDataset().borderJoinStyle || this.chart.options.elements.line.borderJoinStyle),

					// Scale
					scaleTop: scale.top,
					scaleBottom: scale.bottom,
					scaleZero: scaleBase
				}
			});

			meta.dataset.pivot();

			// Update Points
			helpers.each(points, function(point, index) {
				this.updateElement(point, index, reset);
			}, this);


			// Update bezier control points
			this.updateBezierControlPoints();
		},
		updateElement: function(point, index, reset) {
			var pointPosition = this.chart.scale.getPointPositionForValue(index, this.getDataset().data[index]);

			helpers.extend(point, {
				// Utility
				_datasetIndex: this.index,
				_index: index,
				_scale: this.chart.scale,

				// Desired view properties
				_model: {
					x: reset ? this.chart.scale.xCenter : pointPosition.x, // value not used in dataset scale, but we want a consistent API between scales
					y: reset ? this.chart.scale.yCenter : pointPosition.y,

					// Appearance
					tension: point.custom && point.custom.tension ? point.custom.tension : helpers.getValueOrDefault(this.getDataset().tension, this.chart.options.elements.line.tension),
					radius: point.custom && point.custom.radius ? point.custom.radius : helpers.getValueAtIndexOrDefault(this.getDataset().pointRadius, index, this.chart.options.elements.point.radius),
					backgroundColor: point.custom && point.custom.backgroundColor ? point.custom.backgroundColor : helpers.getValueAtIndexOrDefault(this.getDataset().pointBackgroundColor, index, this.chart.options.elements.point.backgroundColor),
					borderColor: point.custom && point.custom.borderColor ? point.custom.borderColor : helpers.getValueAtIndexOrDefault(this.getDataset().pointBorderColor, index, this.chart.options.elements.point.borderColor),
					borderWidth: point.custom && point.custom.borderWidth ? point.custom.borderWidth : helpers.getValueAtIndexOrDefault(this.getDataset().pointBorderWidth, index, this.chart.options.elements.point.borderWidth),
					pointStyle: point.custom && point.custom.pointStyle ? point.custom.pointStyle : helpers.getValueAtIndexOrDefault(this.getDataset().pointStyle, index, this.chart.options.elements.point.pointStyle),

					// Tooltip
					hitRadius: point.custom && point.custom.hitRadius ? point.custom.hitRadius : helpers.getValueAtIndexOrDefault(this.getDataset().hitRadius, index, this.chart.options.elements.point.hitRadius)
				}
			});

			point._model.skip = point.custom && point.custom.skip ? point.custom.skip : (isNaN(point._model.x) || isNaN(point._model.y));
		},
		updateBezierControlPoints: function() {
			var meta = this.getMeta();
			helpers.each(meta.data, function(point, index) {
				var controlPoints = helpers.splineCurve(
					helpers.previousItem(meta.data, index, true)._model,
					point._model,
					helpers.nextItem(meta.data, index, true)._model,
					point._model.tension
				);

				// Prevent the bezier going outside of the bounds of the graph
				point._model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, this.chart.chartArea.right), this.chart.chartArea.left);
				point._model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, this.chart.chartArea.bottom), this.chart.chartArea.top);

				point._model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, this.chart.chartArea.right), this.chart.chartArea.left);
				point._model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, this.chart.chartArea.bottom), this.chart.chartArea.top);

				// Now pivot the point for animation
				point.pivot();
			}, this);
		},

		draw: function(ease) {
			var meta = this.getMeta();
			var easingDecimal = ease || 1;

			// Transition Point Locations
			helpers.each(meta.data, function(point, index) {
				point.transition(easingDecimal);
			});

			// Transition and Draw the line
			meta.dataset.transition(easingDecimal).draw();

			// Draw the points
			helpers.each(meta.data, function(point) {
				point.draw();
			});
		},

		setHoverStyle: function(point) {
			// Point
			var dataset = this.chart.data.datasets[point._datasetIndex];
			var index = point._index;

			point._model.radius = point.custom && point.custom.hoverRadius ? point.custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
			point._model.backgroundColor = point.custom && point.custom.hoverBackgroundColor ? point.custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(point._model.backgroundColor));
			point._model.borderColor = point.custom && point.custom.hoverBorderColor ? point.custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(point._model.borderColor));
			point._model.borderWidth = point.custom && point.custom.hoverBorderWidth ? point.custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, point._model.borderWidth);
		},

		removeHoverStyle: function(point) {
			var dataset = this.chart.data.datasets[point._datasetIndex];
			var index = point._index;

			point._model.radius = point.custom && point.custom.radius ? point.custom.radius : helpers.getValueAtIndexOrDefault(this.getDataset().radius, index, this.chart.options.elements.point.radius);
			point._model.backgroundColor = point.custom && point.custom.backgroundColor ? point.custom.backgroundColor : helpers.getValueAtIndexOrDefault(this.getDataset().pointBackgroundColor, index, this.chart.options.elements.point.backgroundColor);
			point._model.borderColor = point.custom && point.custom.borderColor ? point.custom.borderColor : helpers.getValueAtIndexOrDefault(this.getDataset().pointBorderColor, index, this.chart.options.elements.point.borderColor);
			point._model.borderWidth = point.custom && point.custom.borderWidth ? point.custom.borderWidth : helpers.getValueAtIndexOrDefault(this.getDataset().pointBorderWidth, index, this.chart.options.elements.point.borderWidth);
		}
	});
};


/***/ }),

/***/ "./node_modules/Chart.js/src/core/core.animation.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*global window: false */


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	Chart.defaults.global.animation = {
		duration: 1000,
		easing: "easeOutQuart",
		onProgress: helpers.noop,
		onComplete: helpers.noop
	};

	Chart.Animation = Chart.Element.extend({
		currentStep: null, // the current animation step
		numSteps: 60, // default number of steps
		easing: "", // the easing to use for this animation
		render: null, // render function used by the animation service

		onAnimationProgress: null, // user specified callback to fire on each step of the animation
		onAnimationComplete: null // user specified callback to fire when the animation finishes
	});

	Chart.animationService = {
		frameDuration: 17,
		animations: [],
		dropFrames: 0,
		request: null,
		addAnimation: function(chartInstance, animationObject, duration, lazy) {

			if (!lazy) {
				chartInstance.animating = true;
			}

			for (var index = 0; index < this.animations.length; ++index) {
				if (this.animations[index].chartInstance === chartInstance) {
					// replacing an in progress animation
					this.animations[index].animationObject = animationObject;
					return;
				}
			}

			this.animations.push({
				chartInstance: chartInstance,
				animationObject: animationObject
			});

			// If there are no animations queued, manually kickstart a digest, for lack of a better word
			if (this.animations.length === 1) {
				this.requestAnimationFrame();
			}
		},
		// Cancel the animation for a given chart instance
		cancelAnimation: function(chartInstance) {
			var index = helpers.findIndex(this.animations, function(animationWrapper) {
				return animationWrapper.chartInstance === chartInstance;
			});

			if (index !== -1) {
				this.animations.splice(index, 1);
				chartInstance.animating = false;
			}
		},
		requestAnimationFrame: function() {
			var me = this;
			if (me.request === null) {
				// Skip animation frame requests until the active one is executed.
				// This can happen when processing mouse events, e.g. 'mousemove'
				// and 'mouseout' events will trigger multiple renders.
				me.request = helpers.requestAnimFrame.call(window, function() {
					me.request = null;
					me.startDigest();
				});
			}
		},
		startDigest: function() {

			var startTime = Date.now();
			var framesToDrop = 0;

			if (this.dropFrames > 1) {
				framesToDrop = Math.floor(this.dropFrames);
				this.dropFrames = this.dropFrames % 1;
			}

			var i = 0;
			while (i < this.animations.length) {
				if (this.animations[i].animationObject.currentStep === null) {
					this.animations[i].animationObject.currentStep = 0;
				}

				this.animations[i].animationObject.currentStep += 1 + framesToDrop;

				if (this.animations[i].animationObject.currentStep > this.animations[i].animationObject.numSteps) {
					this.animations[i].animationObject.currentStep = this.animations[i].animationObject.numSteps;
				}

				this.animations[i].animationObject.render(this.animations[i].chartInstance, this.animations[i].animationObject);
				if (this.animations[i].animationObject.onAnimationProgress && this.animations[i].animationObject.onAnimationProgress.call) {
					this.animations[i].animationObject.onAnimationProgress.call(this.animations[i].chartInstance, this.animations[i]);
				}

				if (this.animations[i].animationObject.currentStep === this.animations[i].animationObject.numSteps) {
					if (this.animations[i].animationObject.onAnimationComplete && this.animations[i].animationObject.onAnimationComplete.call) {
						this.animations[i].animationObject.onAnimationComplete.call(this.animations[i].chartInstance, this.animations[i]);
					}

					// executed the last frame. Remove the animation.
					this.animations[i].chartInstance.animating = false;

					this.animations.splice(i, 1);
				} else {
					++i;
				}
			}

			var endTime = Date.now();
			var dropFrames = (endTime - startTime) / this.frameDuration;

			this.dropFrames += dropFrames;

			// Do we have more stuff to animate?
			if (this.animations.length > 0) {
				this.requestAnimationFrame();
			}
		}
	};
};

/***/ }),

/***/ "./node_modules/Chart.js/src/core/core.controller.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;
	//Create a dictionary of chart types, to allow for extension of existing types
	Chart.types = {};

	//Store a reference to each instance - allowing us to globally resize chart instances on window resize.
	//Destroy method on the chart will remove the instance of the chart from this reference.
	Chart.instances = {};

	// Controllers available for dataset visualization eg. bar, line, slice, etc.
	Chart.controllers = {};

	// The main controller of a chart
	Chart.Controller = function(instance) {

		this.chart = instance;
		this.config = instance.config;
		this.options = this.config.options = helpers.configMerge(Chart.defaults.global, Chart.defaults[this.config.type], this.config.options || {});
		this.id = helpers.uid();

		Object.defineProperty(this, 'data', {
			get: function() {
				return this.config.data;
			}
		});

		//Add the chart instance to the global namespace
		Chart.instances[this.id] = this;

		if (this.options.responsive) {
			// Silent resize before chart draws
			this.resize(true);
		}

		this.initialize();

		return this;
	};

	helpers.extend(Chart.Controller.prototype, {

		initialize: function initialize() {
			// Before init plugin notification
			Chart.pluginService.notifyPlugins('beforeInit', [this]);

			this.bindEvents();

			// Make sure controllers are built first so that each dataset is bound to an axis before the scales
			// are built
			this.ensureScalesHaveIDs();
			this.buildOrUpdateControllers();
			this.buildScales();
			this.buildSurroundingItems();
			this.updateLayout();
			this.resetElements();
			this.initToolTip();
			this.update();

			// After init plugin notification
			Chart.pluginService.notifyPlugins('afterInit', [this]);

			return this;
		},

		clear: function clear() {
			helpers.clear(this.chart);
			return this;
		},

		stop: function stop() {
			// Stops any current animation loop occuring
			Chart.animationService.cancelAnimation(this);
			return this;
		},

		resize: function resize(silent) {
			var canvas = this.chart.canvas;
			var newWidth = helpers.getMaximumWidth(this.chart.canvas);
			var newHeight = (this.options.maintainAspectRatio && isNaN(this.chart.aspectRatio) === false && isFinite(this.chart.aspectRatio) && this.chart.aspectRatio !== 0) ? newWidth / this.chart.aspectRatio : helpers.getMaximumHeight(this.chart.canvas);

			var sizeChanged = this.chart.width !== newWidth || this.chart.height !== newHeight;

			if (!sizeChanged)
				return this;

			canvas.width = this.chart.width = newWidth;
			canvas.height = this.chart.height = newHeight;

			helpers.retinaScale(this.chart);

			if (!silent) {
				this.stop();
				this.update(this.options.responsiveAnimationDuration);
			}

			return this;
		},
		ensureScalesHaveIDs: function ensureScalesHaveIDs() {
			var defaultXAxisID = 'x-axis-';
			var defaultYAxisID = 'y-axis-';

			if (this.options.scales) {
				if (this.options.scales.xAxes && this.options.scales.xAxes.length) {
					helpers.each(this.options.scales.xAxes, function(xAxisOptions, index) {
						xAxisOptions.id = xAxisOptions.id || (defaultXAxisID + index);
					});
				}

				if (this.options.scales.yAxes && this.options.scales.yAxes.length) {
					// Build the y axes
					helpers.each(this.options.scales.yAxes, function(yAxisOptions, index) {
						yAxisOptions.id = yAxisOptions.id || (defaultYAxisID + index);
					});
				}
			}
		},
		buildScales: function buildScales() {
			// Map of scale ID to scale object so we can lookup later
			this.scales = {};

			// Build the x axes
			if (this.options.scales) {
				if (this.options.scales.xAxes && this.options.scales.xAxes.length) {
					helpers.each(this.options.scales.xAxes, function(xAxisOptions, index) {
						var xType = helpers.getValueOrDefault(xAxisOptions.type, 'category');
						var ScaleClass = Chart.scaleService.getScaleConstructor(xType);
						if (ScaleClass) {
							var scale = new ScaleClass({
								ctx: this.chart.ctx,
								options: xAxisOptions,
								chart: this,
								id: xAxisOptions.id
							});

							this.scales[scale.id] = scale;
						}
					}, this);
				}

				if (this.options.scales.yAxes && this.options.scales.yAxes.length) {
					// Build the y axes
					helpers.each(this.options.scales.yAxes, function(yAxisOptions, index) {
						var yType = helpers.getValueOrDefault(yAxisOptions.type, 'linear');
						var ScaleClass = Chart.scaleService.getScaleConstructor(yType);
						if (ScaleClass) {
							var scale = new ScaleClass({
								ctx: this.chart.ctx,
								options: yAxisOptions,
								chart: this,
								id: yAxisOptions.id
							});

							this.scales[scale.id] = scale;
						}
					}, this);
				}
			}
			if (this.options.scale) {
				// Build radial axes
				var ScaleClass = Chart.scaleService.getScaleConstructor(this.options.scale.type);
				if (ScaleClass) {
					var scale = new ScaleClass({
						ctx: this.chart.ctx,
						options: this.options.scale,
						chart: this
					});

					this.scale = scale;

					this.scales.radialScale = scale;
				}
			}

			Chart.scaleService.addScalesToLayout(this);
		},

		buildSurroundingItems: function() {
			if (this.options.title) {
				this.titleBlock = new Chart.Title({
					ctx: this.chart.ctx,
					options: this.options.title,
					chart: this
				});

				Chart.layoutService.addBox(this, this.titleBlock);
			}

			if (this.options.legend) {
				this.legend = new Chart.Legend({
					ctx: this.chart.ctx,
					options: this.options.legend,
					chart: this
				});

				Chart.layoutService.addBox(this, this.legend);
			}
		},

		updateLayout: function() {
			Chart.layoutService.update(this, this.chart.width, this.chart.height);
		},

		buildOrUpdateControllers: function buildOrUpdateControllers() {
			var types = [];
			var newControllers = [];

			helpers.each(this.data.datasets, function(dataset, datasetIndex) {
				var meta = this.getDatasetMeta(datasetIndex);
				if (!meta.type) {
					meta.type = dataset.type || this.config.type;
				}

				types.push(meta.type);

				if (meta.controller) {
					meta.controller.updateIndex(datasetIndex);
				} else {
					meta.controller = new Chart.controllers[meta.type](this, datasetIndex);
					newControllers.push(meta.controller);
				}
			}, this);

			if (types.length > 1) {
				for (var i = 1; i < types.length; i++) {
					if (types[i] !== types[i - 1]) {
						this.isCombo = true;
						break;
					}
				}
			}

			return newControllers;
		},

		resetElements: function resetElements() {
			helpers.each(this.data.datasets, function(dataset, datasetIndex) {
				this.getDatasetMeta(datasetIndex).controller.reset();
			}, this);
		},

		update: function update(animationDuration, lazy) {
			Chart.pluginService.notifyPlugins('beforeUpdate', [this]);

			// In case the entire data object changed
			this.tooltip._data = this.data;

			// Make sure dataset controllers are updated and new controllers are reset
			var newControllers = this.buildOrUpdateControllers();

			// Make sure all dataset controllers have correct meta data counts
			helpers.each(this.data.datasets, function(dataset, datasetIndex) {
				this.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
			}, this);

			Chart.layoutService.update(this, this.chart.width, this.chart.height);

			// Apply changes to the dataets that require the scales to have been calculated i.e BorderColor chages
			Chart.pluginService.notifyPlugins('afterScaleUpdate', [this]);

			// Can only reset the new controllers after the scales have been updated
			helpers.each(newControllers, function(controller) {
				controller.reset();
			});

			// This will loop through any data and do the appropriate element update for the type
			helpers.each(this.data.datasets, function(dataset, datasetIndex) {
				this.getDatasetMeta(datasetIndex).controller.update();
			}, this);

			// Do this before render so that any plugins that need final scale updates can use it
			Chart.pluginService.notifyPlugins('afterUpdate', [this]);

			this.render(animationDuration, lazy);
		},

		render: function render(duration, lazy) {
			Chart.pluginService.notifyPlugins('beforeRender', [this]);

			if (this.options.animation && ((typeof duration !== 'undefined' && duration !== 0) || (typeof duration === 'undefined' && this.options.animation.duration !== 0))) {
				var animation = new Chart.Animation();
				animation.numSteps = (duration || this.options.animation.duration) / 16.66; //60 fps
				animation.easing = this.options.animation.easing;

				// render function
				animation.render = function(chartInstance, animationObject) {
					var easingFunction = helpers.easingEffects[animationObject.easing];
					var stepDecimal = animationObject.currentStep / animationObject.numSteps;
					var easeDecimal = easingFunction(stepDecimal);

					chartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);
				};

				// user events
				animation.onAnimationProgress = this.options.animation.onProgress;
				animation.onAnimationComplete = this.options.animation.onComplete;

				Chart.animationService.addAnimation(this, animation, duration, lazy);
			} else {
				this.draw();
				if (this.options.animation && this.options.animation.onComplete && this.options.animation.onComplete.call) {
					this.options.animation.onComplete.call(this);
				}
			}
			return this;
		},

		draw: function(ease) {
			var easingDecimal = ease || 1;
			this.clear();

			Chart.pluginService.notifyPlugins('beforeDraw', [this, easingDecimal]);

			// Draw all the scales
			helpers.each(this.boxes, function(box) {
				box.draw(this.chartArea);
			}, this);
			if (this.scale) {
				this.scale.draw();
			}

			// Clip out the chart area so that anything outside does not draw. This is necessary for zoom and pan to function
			this.chart.ctx.save();
			this.chart.ctx.beginPath();
			this.chart.ctx.rect(this.chartArea.left, this.chartArea.top, this.chartArea.right - this.chartArea.left, this.chartArea.bottom - this.chartArea.top);
			this.chart.ctx.clip();

			// Draw each dataset via its respective controller (reversed to support proper line stacking)
			helpers.each(this.data.datasets, function(dataset, datasetIndex) {
				if (this.isDatasetVisible(datasetIndex)) {
					this.getDatasetMeta(datasetIndex).controller.draw(ease);
				}
			}, this, true);

			// Restore from the clipping operation
			this.chart.ctx.restore();

			// Finally draw the tooltip
			this.tooltip.transition(easingDecimal).draw();

			Chart.pluginService.notifyPlugins('afterDraw', [this, easingDecimal]);
		},

		// Get the single element that was clicked on
		// @return : An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
		getElementAtEvent: function(e) {
			var eventPosition = helpers.getRelativePosition(e, this.chart);
			var elementsArray = [];

			helpers.each(this.data.datasets, function(dataset, datasetIndex) {
				if (this.isDatasetVisible(datasetIndex)) {
					var meta = this.getDatasetMeta(datasetIndex);
					helpers.each(meta.data, function(element, index) {
						if (element.inRange(eventPosition.x, eventPosition.y)) {
							elementsArray.push(element);
							return elementsArray;
						}
					});
				}
			}, this);

			return elementsArray;
		},

		getElementsAtEvent: function(e) {
			var eventPosition = helpers.getRelativePosition(e, this.chart);
			var elementsArray = [];

			var found = (function() {
				if (this.data.datasets) {
					for (var i = 0; i < this.data.datasets.length; i++) {
						var meta = this.getDatasetMeta(i);
						if (this.isDatasetVisible(i)) {
							for (var j = 0; j < meta.data.length; j++) {
								if (meta.data[j].inRange(eventPosition.x, eventPosition.y)) {
									return meta.data[j];
								}
							}
						}
					}
				}
			}).call(this);

			if (!found) {
				return elementsArray;
			}

			helpers.each(this.data.datasets, function(dataset, datasetIndex) {
				if (this.isDatasetVisible(datasetIndex)) {
					var meta = this.getDatasetMeta(datasetIndex);
					elementsArray.push(meta.data[found._index]);
				}
			}, this);

			return elementsArray;
		},

		getDatasetAtEvent: function(e) {
			var elementsArray = this.getElementAtEvent(e);

			if (elementsArray.length > 0) {
				elementsArray = this.getDatasetMeta(elementsArray[0]._datasetIndex).data;
			}

			return elementsArray;
		},

		getDatasetMeta: function(datasetIndex) {
			var dataset = this.data.datasets[datasetIndex];
			if (!dataset._meta) {
				dataset._meta = {};
			}

			var meta = dataset._meta[this.id];
			if (!meta) {
				meta = dataset._meta[this.id] = {
				type: null,
				data: [],
				dataset: null,
				controller: null,
				hidden: null,			// See isDatasetVisible() comment
				xAxisID: null,
				yAxisID: null
			};
			}

			return meta;
		},

		getVisibleDatasetCount: function() {
			var count = 0;
			for (var i = 0, ilen = this.data.datasets.length; i<ilen; ++i) {
				 if (this.isDatasetVisible(i)) {
					count++;
				}
			}
			return count;
		},

		isDatasetVisible: function(datasetIndex) {
			var meta = this.getDatasetMeta(datasetIndex);

			// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
			// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
			return typeof meta.hidden === 'boolean'? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
		},

		generateLegend: function generateLegend() {
			return this.options.legendCallback(this);
		},

		destroy: function destroy() {
			this.clear();
			helpers.unbindEvents(this, this.events);
			helpers.removeResizeListener(this.chart.canvas.parentNode);

			// Reset canvas height/width attributes
			var canvas = this.chart.canvas;
			canvas.width = this.chart.width;
			canvas.height = this.chart.height;

			// if we scaled the canvas in response to a devicePixelRatio !== 1, we need to undo that transform here
			if (this.chart.originalDevicePixelRatio !== undefined) {
				this.chart.ctx.scale(1 / this.chart.originalDevicePixelRatio, 1 / this.chart.originalDevicePixelRatio);
			}

			// Reset to the old style since it may have been changed by the device pixel ratio changes
			canvas.style.width = this.chart.originalCanvasStyleWidth;
			canvas.style.height = this.chart.originalCanvasStyleHeight;

			Chart.pluginService.notifyPlugins('destroy', [this]);

			delete Chart.instances[this.id];
		},

		toBase64Image: function toBase64Image() {
			return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);
		},

		initToolTip: function initToolTip() {
			this.tooltip = new Chart.Tooltip({
				_chart: this.chart,
				_chartInstance: this,
				_data: this.data,
				_options: this.options
			}, this);
		},

		bindEvents: function bindEvents() {
			helpers.bindEvents(this, this.options.events, function(evt) {
				this.eventHandler(evt);
			});
		},
		eventHandler: function eventHandler(e) {
			this.lastActive = this.lastActive || [];
			this.lastTooltipActive = this.lastTooltipActive || [];

			// Find Active Elements for hover and tooltips
			if (e.type === 'mouseout') {
				this.active = [];
				this.tooltipActive = [];
			} else {

				var _this = this;
				var getItemsForMode = function(mode) {
					switch (mode) {
						case 'single':
							return _this.getElementAtEvent(e);
						case 'label':
							return _this.getElementsAtEvent(e);
						case 'dataset':
							return _this.getDatasetAtEvent(e);
						default:
							return e;
					}
				};

				this.active = getItemsForMode(this.options.hover.mode);
				this.tooltipActive = getItemsForMode(this.options.tooltips.mode);
			}

			// On Hover hook
			if (this.options.hover.onHover) {
				this.options.hover.onHover.call(this, this.active);
			}

			if (e.type === 'mouseup' || e.type === 'click') {
				if (this.options.onClick) {
					this.options.onClick.call(this, e, this.active);
				}

				if (this.legend && this.legend.handleEvent) {
					this.legend.handleEvent(e);
				}
			}

			// Remove styling for last active (even if it may still be active)
			if (this.lastActive.length) {
				switch (this.options.hover.mode) {
					case 'single':
						this.getDatasetMeta(this.lastActive[0]._datasetIndex).controller.removeHoverStyle(this.lastActive[0], this.lastActive[0]._datasetIndex, this.lastActive[0]._index);
						break;
					case 'label':
					case 'dataset':
						for (var i = 0; i < this.lastActive.length; i++) {
							if (this.lastActive[i])
								this.getDatasetMeta(this.lastActive[i]._datasetIndex).controller.removeHoverStyle(this.lastActive[i], this.lastActive[i]._datasetIndex, this.lastActive[i]._index);
						}
						break;
					default:
						// Don't change anything
				}
			}

			// Built in hover styling
			if (this.active.length && this.options.hover.mode) {
				switch (this.options.hover.mode) {
					case 'single':
						this.getDatasetMeta(this.active[0]._datasetIndex).controller.setHoverStyle(this.active[0]);
						break;
					case 'label':
					case 'dataset':
						for (var j = 0; j < this.active.length; j++) {
							if (this.active[j])
								this.getDatasetMeta(this.active[j]._datasetIndex).controller.setHoverStyle(this.active[j]);
						}
						break;
					default:
						// Don't change anything
				}
			}


			// Built in Tooltips
			if (this.options.tooltips.enabled || this.options.tooltips.custom) {

				// The usual updates
				this.tooltip.initialize();
				this.tooltip._active = this.tooltipActive;
				this.tooltip.update(true);
			}

			// Hover animations
			this.tooltip.pivot();

			if (!this.animating) {
				var changed;

				helpers.each(this.active, function(element, index) {
					if (element !== this.lastActive[index]) {
						changed = true;
					}
				}, this);

				helpers.each(this.tooltipActive, function(element, index) {
					if (element !== this.lastTooltipActive[index]) {
						changed = true;
					}
				}, this);

				// If entering, leaving, or changing elements, animate the change via pivot
				if ((this.lastActive.length !== this.active.length) ||
					(this.lastTooltipActive.length !== this.tooltipActive.length) ||
					changed) {

					this.stop();

					if (this.options.tooltips.enabled || this.options.tooltips.custom) {
						this.tooltip.update(true);
					}

					// We only need to render at this point. Updating will cause scales to be recomputed generating flicker & using more
					// memory than necessary.
					this.render(this.options.hover.animationDuration, true);
				}
			}

			// Remember Last Actives
			this.lastActive = this.active;
			this.lastTooltipActive = this.tooltipActive;
			return this;
		}
	});
};


/***/ }),

/***/ "./node_modules/Chart.js/src/core/core.datasetController.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;
	var noop = helpers.noop;

	// Base class for all dataset controllers (line, bar, etc)
	Chart.DatasetController = function(chart, datasetIndex) {
		this.initialize.call(this, chart, datasetIndex);
	};

	helpers.extend(Chart.DatasetController.prototype, {
		initialize: function(chart, datasetIndex) {
			this.chart = chart;
			this.index = datasetIndex;
			this.linkScales();
			this.addElements();
		},
		updateIndex: function(datasetIndex) {
			this.index = datasetIndex;
		},

		linkScales: function() {
			var meta = this.getMeta();
			var dataset = this.getDataset();

			if (meta.xAxisID === null) {
				meta.xAxisID = dataset.xAxisID || this.chart.options.scales.xAxes[0].id;
			}
			if (meta.yAxisID === null) {
				meta.yAxisID = dataset.yAxisID || this.chart.options.scales.yAxes[0].id;
			}
		},

		getDataset: function() {
			return this.chart.data.datasets[this.index];
		},

		getMeta: function() {
			return this.chart.getDatasetMeta(this.index);
		},

		getScaleForId: function(scaleID) {
			return this.chart.scales[scaleID];
		},

		reset: function() {
			this.update(true);
		},

		buildOrUpdateElements: function buildOrUpdateElements() {
			// Handle the number of data points changing
			var meta = this.getMeta(),
				md = meta.data,
				numData = this.getDataset().data.length,
				numMetaData = md.length;

			// Make sure that we handle number of datapoints changing
			if (numData < numMetaData) {
				// Remove excess bars for data points that have been removed
				md.splice(numData, numMetaData - numData);
			} else if (numData > numMetaData) {
				// Add new elements
				for (var index = numMetaData; index < numData; ++index) {
					this.addElementAndReset(index);
				}
			}
		},

		// Controllers should implement the following
		addElements: noop,
		addElementAndReset: noop,
		draw: noop,
		removeHoverStyle: noop,
		setHoverStyle: noop,
		update: noop
	});

	Chart.DatasetController.extend = helpers.inherits;
};

/***/ }),

/***/ "./node_modules/Chart.js/src/core/core.element.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

  var helpers = Chart.helpers;

  Chart.elements = {};

  Chart.Element = function(configuration) {
    helpers.extend(this, configuration);
    this.initialize.apply(this, arguments);
  };
  helpers.extend(Chart.Element.prototype, {
    initialize: function() {
      this.hidden = false;
    },
    pivot: function() {
      if (!this._view) {
        this._view = helpers.clone(this._model);
      }
      this._start = helpers.clone(this._view);
      return this;
    },
    transition: function(ease) {
      if (!this._view) {
        this._view = helpers.clone(this._model);
      }

      // No animation -> No Transition
      if (ease === 1) {
        this._view = this._model;
        this._start = null;
        return this;
      }

      if (!this._start) {
        this.pivot();
      }

      helpers.each(this._model, function(value, key) {

        if (key[0] === '_' || !this._model.hasOwnProperty(key)) {
          // Only non-underscored properties
        }

        // Init if doesn't exist
        else if (!this._view.hasOwnProperty(key)) {
          if (typeof value === 'number' && !isNaN(this._view[key])) {
            this._view[key] = value * ease;
          } else {
            this._view[key] = value;
          }
        }

        // No unnecessary computations
        else if (value === this._view[key]) {
          // It's the same! Woohoo!
        }

        // Color transitions if possible
        else if (typeof value === 'string') {
          try {
            var color = helpers.color(this._start[key]).mix(helpers.color(this._model[key]), ease);
            this._view[key] = color.rgbString();
          } catch (err) {
            this._view[key] = value;
          }
        }
        // Number transitions
        else if (typeof value === 'number') {
          var startVal = this._start[key] !== undefined && isNaN(this._start[key]) === false ? this._start[key] : 0;
          this._view[key] = ((this._model[key] - startVal) * ease) + startVal;
        }
        // Everything else
        else {
          this._view[key] = value;
        }
      }, this);

      return this;
    },
    tooltipPosition: function() {
      return {
        x: this._model.x,
        y: this._model.y
      };
    },
    hasValue: function() {
      return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);
    }
  });

  Chart.Element.extend = helpers.inherits;

};


/***/ }),

/***/ "./node_modules/Chart.js/src/core/core.helpers.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*global window: false */
/*global document: false */


var color = __webpack_require__("./node_modules/chartjs-color/src/color.js");

module.exports = function(Chart) {

	//Global Chart helpers object for utility methods and classes
	var helpers = Chart.helpers = {};

	//-- Basic js utility methods
	helpers.each = function(loopable, callback, self, reverse) {
		// Check to see if null or undefined firstly.
		var i, len;
		if (helpers.isArray(loopable)) {
			len = loopable.length;
			if (reverse) {
				for (i = len - 1; i >= 0; i--) {
					callback.call(self, loopable[i], i);
				}
			} else {
				for (i = 0; i < len; i++) {
					callback.call(self, loopable[i], i);
				}
			}
		} else if (typeof loopable === 'object') {
			var keys = Object.keys(loopable);
			len = keys.length;
			for (i = 0; i < len; i++) {
				callback.call(self, loopable[keys[i]], keys[i]);
			}
		}
	};
	helpers.clone = function(obj) {
		var objClone = {};
		helpers.each(obj, function(value, key) {
			if (obj.hasOwnProperty(key)) {
				if (helpers.isArray(value)) {
					objClone[key] = value.slice(0);
				} else if (typeof value === 'object' && value !== null) {
					objClone[key] = helpers.clone(value);
				} else {
					objClone[key] = value;
				}
			}
		});
		return objClone;
	};
	helpers.extend = function(base) {
		var len = arguments.length;
		var additionalArgs = [];
		for (var i = 1; i < len; i++) {
			additionalArgs.push(arguments[i]);
		}
		helpers.each(additionalArgs, function(extensionObject) {
			helpers.each(extensionObject, function(value, key) {
				if (extensionObject.hasOwnProperty(key)) {
					base[key] = value;
				}
			});
		});
		return base;
	};
	// Need a special merge function to chart configs since they are now grouped
	helpers.configMerge = function(_base) {
		var base = helpers.clone(_base);
		helpers.each(Array.prototype.slice.call(arguments, 1), function(extension) {
			helpers.each(extension, function(value, key) {
				if (extension.hasOwnProperty(key)) {
					if (key === 'scales') {
						// Scale config merging is complex. Add out own function here for that
						base[key] = helpers.scaleMerge(base.hasOwnProperty(key) ? base[key] : {}, value);

					} else if (key === 'scale') {
						// Used in polar area & radar charts since there is only one scale
						base[key] = helpers.configMerge(base.hasOwnProperty(key) ? base[key] : {}, Chart.scaleService.getScaleDefaults(value.type), value);
					} else if (base.hasOwnProperty(key) && helpers.isArray(base[key]) && helpers.isArray(value)) {
						// In this case we have an array of objects replacing another array. Rather than doing a strict replace,
						// merge. This allows easy scale option merging
						var baseArray = base[key];

						helpers.each(value, function(valueObj, index) {

							if (index < baseArray.length) {
								if (typeof baseArray[index] === 'object' && baseArray[index] !== null && typeof valueObj === 'object' && valueObj !== null) {
									// Two objects are coming together. Do a merge of them.
									baseArray[index] = helpers.configMerge(baseArray[index], valueObj);
								} else {
									// Just overwrite in this case since there is nothing to merge
									baseArray[index] = valueObj;
								}
							} else {
								baseArray.push(valueObj); // nothing to merge
							}
						});

					} else if (base.hasOwnProperty(key) && typeof base[key] === "object" && base[key] !== null && typeof value === "object") {
						// If we are overwriting an object with an object, do a merge of the properties.
						base[key] = helpers.configMerge(base[key], value);

					} else {
						// can just overwrite the value in this case
						base[key] = value;
					}
				}
			});
		});

		return base;
	};
	helpers.extendDeep = function(_base) {
		return _extendDeep.apply(this, arguments);

		function _extendDeep(dst) {
			helpers.each(arguments, function(obj) {
				if (obj !== dst) {
					helpers.each(obj, function(value, key) {
						if (dst[key] && dst[key].constructor && dst[key].constructor === Object) {
							_extendDeep(dst[key], value);
						} else {
							dst[key] = value;
						}
					});
				}
			});
			return dst;
		}
	};
	helpers.scaleMerge = function(_base, extension) {
		var base = helpers.clone(_base);

		helpers.each(extension, function(value, key) {
			if (extension.hasOwnProperty(key)) {
				if (key === 'xAxes' || key === 'yAxes') {
					// These properties are arrays of items
					if (base.hasOwnProperty(key)) {
						helpers.each(value, function(valueObj, index) {
							var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
							var axisDefaults = Chart.scaleService.getScaleDefaults(axisType);
							if (index >= base[key].length || !base[key][index].type) {
								base[key].push(helpers.configMerge(axisDefaults, valueObj));
							} else if (valueObj.type && valueObj.type !== base[key][index].type) {
								// Type changed. Bring in the new defaults before we bring in valueObj so that valueObj can override the correct scale defaults
								base[key][index] = helpers.configMerge(base[key][index], axisDefaults, valueObj);
							} else {
								// Type is the same
								base[key][index] = helpers.configMerge(base[key][index], valueObj);
							}
						});
					} else {
						base[key] = [];
						helpers.each(value, function(valueObj) {
							var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
							base[key].push(helpers.configMerge(Chart.scaleService.getScaleDefaults(axisType), valueObj));
						});
					}
				} else if (base.hasOwnProperty(key) && typeof base[key] === "object" && base[key] !== null && typeof value === "object") {
					// If we are overwriting an object with an object, do a merge of the properties.
					base[key] = helpers.configMerge(base[key], value);

				} else {
					// can just overwrite the value in this case
					base[key] = value;
				}
			}
		});

		return base;
	};
	helpers.getValueAtIndexOrDefault = function(value, index, defaultValue) {
		if (value === undefined || value === null) {
			return defaultValue;
		}

		if (helpers.isArray(value)) {
			return index < value.length ? value[index] : defaultValue;
		}

		return value;
	};
	helpers.getValueOrDefault = function(value, defaultValue) {
		return value === undefined ? defaultValue : value;
	};
	helpers.indexOf = function(arrayToSearch, item) {
		if (Array.prototype.indexOf) {
			return arrayToSearch.indexOf(item);
		} else {
			for (var i = 0; i < arrayToSearch.length; i++) {
				if (arrayToSearch[i] === item)
					return i;
			}
			return -1;
		}
	};
	helpers.where = function(collection, filterCallback) {
		var filtered = [];

		helpers.each(collection, function(item) {
			if (filterCallback(item)) {
				filtered.push(item);
			}
		});

		return filtered;
	};
	helpers.findIndex = function(arrayToSearch, callback, thisArg) {
		var index = -1;
		if (Array.prototype.findIndex) {
			index = arrayToSearch.findIndex(callback, thisArg);
		} else {
			for (var i = 0; i < arrayToSearch.length; ++i) {
				thisArg = thisArg !== undefined ? thisArg : arrayToSearch;

				if (callback.call(thisArg, arrayToSearch[i], i, arrayToSearch)) {
					index = i;
					break;
				}
			}
		}

		return index;
	};
	helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to start of the array
		if (startIndex === undefined || startIndex === null) {
			startIndex = -1;
		}
		for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};
	helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to end of the array
		if (startIndex === undefined || startIndex === null) {
			startIndex = arrayToSearch.length;
		}
		for (var i = startIndex - 1; i >= 0; i--) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};
	helpers.inherits = function(extensions) {
		//Basic javascript inheritance based on the model created in Backbone.js
		var parent = this;
		var ChartElement = (extensions && extensions.hasOwnProperty("constructor")) ? extensions.constructor : function() {
			return parent.apply(this, arguments);
		};

		var Surrogate = function() {
			this.constructor = ChartElement;
		};
		Surrogate.prototype = parent.prototype;
		ChartElement.prototype = new Surrogate();

		ChartElement.extend = helpers.inherits;

		if (extensions) {
			helpers.extend(ChartElement.prototype, extensions);
		}

		ChartElement.__super__ = parent.prototype;

		return ChartElement;
	};
	helpers.noop = function() {};
	helpers.uid = (function() {
		var id = 0;
		return function() {
			return id++;
		};
	})();
	helpers.warn = function(str) {
		//Method for warning of errors
		if (console && typeof console.warn === "function") {
			console.warn(str);
		}
	};
	//-- Math methods
	helpers.isNumber = function(n) {
		return !isNaN(parseFloat(n)) && isFinite(n);
	};
	helpers.almostEquals = function(x, y, epsilon) {
		return Math.abs(x - y) < epsilon;
	};
	helpers.max = function(array) {
		return array.reduce(function(max, value) {
			if (!isNaN(value)) {
				return Math.max(max, value);
			} else {
				return max;
			}
		}, Number.NEGATIVE_INFINITY);
	};
	helpers.min = function(array) {
		return array.reduce(function(min, value) {
			if (!isNaN(value)) {
				return Math.min(min, value);
			} else {
				return min;
			}
		}, Number.POSITIVE_INFINITY);
	};
	helpers.sign = function(x) {
		if (Math.sign) {
			return Math.sign(x);
		} else {
			x = +x; // convert to a number
			if (x === 0 || isNaN(x)) {
				return x;
			}
			return x > 0 ? 1 : -1;
		}
	};
	helpers.log10 = function(x) {
		if (Math.log10) {
			return Math.log10(x);
		} else {
			return Math.log(x) / Math.LN10;
		}
	};
	helpers.toRadians = function(degrees) {
		return degrees * (Math.PI / 180);
	};
	helpers.toDegrees = function(radians) {
		return radians * (180 / Math.PI);
	};
	// Gets the angle from vertical upright to the point about a centre.
	helpers.getAngleFromPoint = function(centrePoint, anglePoint) {
		var distanceFromXCenter = anglePoint.x - centrePoint.x,
			distanceFromYCenter = anglePoint.y - centrePoint.y,
			radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);

		var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

		if (angle < (-0.5 * Math.PI)) {
			angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
		}

		return {
			angle: angle,
			distance: radialDistanceFromCenter
		};
	};
	helpers.aliasPixel = function(pixelWidth) {
		return (pixelWidth % 2 === 0) ? 0 : 0.5;
	};
	helpers.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
		//Props to Rob Spencer at scaled innovation for his post on splining between points
		//http://scaledinnovation.com/analytics/splines/aboutSplines.html

		// This function must also respect "skipped" points

		var previous = firstPoint.skip ? middlePoint : firstPoint,
			current = middlePoint,
			next = afterPoint.skip ? middlePoint : afterPoint;

		var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
		var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));

		var s01 = d01 / (d01 + d12);
		var s12 = d12 / (d01 + d12);

		// If all points are the same, s01 & s02 will be inf
		s01 = isNaN(s01) ? 0 : s01;
		s12 = isNaN(s12) ? 0 : s12;

		var fa = t * s01; // scaling factor for triangle Ta
		var fb = t * s12;

		return {
			previous: {
				x: current.x - fa * (next.x - previous.x),
				y: current.y - fa * (next.y - previous.y)
			},
			next: {
				x: current.x + fb * (next.x - previous.x),
				y: current.y + fb * (next.y - previous.y)
			}
		};
	};
	helpers.nextItem = function(collection, index, loop) {
		if (loop) {
			return index >= collection.length - 1 ? collection[0] : collection[index + 1];
		}

		return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
	};
	helpers.previousItem = function(collection, index, loop) {
		if (loop) {
			return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
		}
		return index <= 0 ? collection[0] : collection[index - 1];
	};
	// Implementation of the nice number algorithm used in determining where axis labels will go
	helpers.niceNum = function(range, round) {
		var exponent = Math.floor(helpers.log10(range));
		var fraction = range / Math.pow(10, exponent);
		var niceFraction;

		if (round) {
			if (fraction < 1.5) {
				niceFraction = 1;
			} else if (fraction < 3) {
				niceFraction = 2;
			} else if (fraction < 7) {
				niceFraction = 5;
			} else {
				niceFraction = 10;
			}
		} else {
			if (fraction <= 1.0) {
				niceFraction = 1;
			} else if (fraction <= 2) {
				niceFraction = 2;
			} else if (fraction <= 5) {
				niceFraction = 5;
			} else {
				niceFraction = 10;
			}
		}

		return niceFraction * Math.pow(10, exponent);
	};
	//Easing functions adapted from Robert Penner's easing equations
	//http://www.robertpenner.com/easing/
	var easingEffects = helpers.easingEffects = {
		linear: function(t) {
			return t;
		},
		easeInQuad: function(t) {
			return t * t;
		},
		easeOutQuad: function(t) {
			return -1 * t * (t - 2);
		},
		easeInOutQuad: function(t) {
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * t * t;
			}
			return -1 / 2 * ((--t) * (t - 2) - 1);
		},
		easeInCubic: function(t) {
			return t * t * t;
		},
		easeOutCubic: function(t) {
			return 1 * ((t = t / 1 - 1) * t * t + 1);
		},
		easeInOutCubic: function(t) {
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * t * t * t;
			}
			return 1 / 2 * ((t -= 2) * t * t + 2);
		},
		easeInQuart: function(t) {
			return t * t * t * t;
		},
		easeOutQuart: function(t) {
			return -1 * ((t = t / 1 - 1) * t * t * t - 1);
		},
		easeInOutQuart: function(t) {
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * t * t * t * t;
			}
			return -1 / 2 * ((t -= 2) * t * t * t - 2);
		},
		easeInQuint: function(t) {
			return 1 * (t /= 1) * t * t * t * t;
		},
		easeOutQuint: function(t) {
			return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
		},
		easeInOutQuint: function(t) {
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * t * t * t * t * t;
			}
			return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
		},
		easeInSine: function(t) {
			return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
		},
		easeOutSine: function(t) {
			return 1 * Math.sin(t / 1 * (Math.PI / 2));
		},
		easeInOutSine: function(t) {
			return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
		},
		easeInExpo: function(t) {
			return (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
		},
		easeOutExpo: function(t) {
			return (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
		},
		easeInOutExpo: function(t) {
			if (t === 0) {
				return 0;
			}
			if (t === 1) {
				return 1;
			}
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * Math.pow(2, 10 * (t - 1));
			}
			return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
		},
		easeInCirc: function(t) {
			if (t >= 1) {
				return t;
			}
			return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
		},
		easeOutCirc: function(t) {
			return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
		},
		easeInOutCirc: function(t) {
			if ((t /= 1 / 2) < 1) {
				return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
			}
			return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
		},
		easeInElastic: function(t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0) {
				return 0;
			}
			if ((t /= 1) === 1) {
				return 1;
			}
			if (!p) {
				p = 1 * 0.3;
			}
			if (a < Math.abs(1)) {
				a = 1;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
		},
		easeOutElastic: function(t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0) {
				return 0;
			}
			if ((t /= 1) === 1) {
				return 1;
			}
			if (!p) {
				p = 1 * 0.3;
			}
			if (a < Math.abs(1)) {
				a = 1;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
		},
		easeInOutElastic: function(t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0) {
				return 0;
			}
			if ((t /= 1 / 2) === 2) {
				return 1;
			}
			if (!p) {
				p = 1 * (0.3 * 1.5);
			}
			if (a < Math.abs(1)) {
				a = 1;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			if (t < 1) {
				return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
			}
			return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;
		},
		easeInBack: function(t) {
			var s = 1.70158;
			return 1 * (t /= 1) * t * ((s + 1) * t - s);
		},
		easeOutBack: function(t) {
			var s = 1.70158;
			return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
		},
		easeInOutBack: function(t) {
			var s = 1.70158;
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));
			}
			return 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
		},
		easeInBounce: function(t) {
			return 1 - easingEffects.easeOutBounce(1 - t);
		},
		easeOutBounce: function(t) {
			if ((t /= 1) < (1 / 2.75)) {
				return 1 * (7.5625 * t * t);
			} else if (t < (2 / 2.75)) {
				return 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);
			} else if (t < (2.5 / 2.75)) {
				return 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);
			} else {
				return 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);
			}
		},
		easeInOutBounce: function(t) {
			if (t < 1 / 2) {
				return easingEffects.easeInBounce(t * 2) * 0.5;
			}
			return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
		}
	};
	//Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
	helpers.requestAnimFrame = (function() {
		return window.requestAnimationFrame ||
			window.webkitRequestAnimationFrame ||
			window.mozRequestAnimationFrame ||
			window.oRequestAnimationFrame ||
			window.msRequestAnimationFrame ||
			function(callback) {
				return window.setTimeout(callback, 1000 / 60);
			};
	})();
	helpers.cancelAnimFrame = (function() {
		return window.cancelAnimationFrame ||
			window.webkitCancelAnimationFrame ||
			window.mozCancelAnimationFrame ||
			window.oCancelAnimationFrame ||
			window.msCancelAnimationFrame ||
			function(callback) {
				return window.clearTimeout(callback, 1000 / 60);
			};
	})();
	//-- DOM methods
	helpers.getRelativePosition = function(evt, chart) {
		var mouseX, mouseY;
		var e = evt.originalEvent || evt,
			canvas = evt.currentTarget || evt.srcElement,
			boundingRect = canvas.getBoundingClientRect();

		if (e.touches && e.touches.length > 0) {
			mouseX = e.touches[0].clientX;
			mouseY = e.touches[0].clientY;

		} else {
			mouseX = e.clientX;
			mouseY = e.clientY;
		}

		// Scale mouse coordinates into canvas coordinates
		// by following the pattern laid out by 'jerryj' in the comments of
		// http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
		var paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
		var paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
		var paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
		var paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
		var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
		var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;

		// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
		// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
		mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
		mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);

		return {
			x: mouseX,
			y: mouseY
		};

	};
	helpers.addEvent = function(node, eventType, method) {
		if (node.addEventListener) {
			node.addEventListener(eventType, method);
		} else if (node.attachEvent) {
			node.attachEvent("on" + eventType, method);
		} else {
			node["on" + eventType] = method;
		}
	};
	helpers.removeEvent = function(node, eventType, handler) {
		if (node.removeEventListener) {
			node.removeEventListener(eventType, handler, false);
		} else if (node.detachEvent) {
			node.detachEvent("on" + eventType, handler);
		} else {
			node["on" + eventType] = helpers.noop;
		}
	};
	helpers.bindEvents = function(chartInstance, arrayOfEvents, handler) {
		// Create the events object if it's not already present
		if (!chartInstance.events)
			chartInstance.events = {};

		helpers.each(arrayOfEvents, function(eventName) {
			chartInstance.events[eventName] = function() {
				handler.apply(chartInstance, arguments);
			};
			helpers.addEvent(chartInstance.chart.canvas, eventName, chartInstance.events[eventName]);
		});
	};
	helpers.unbindEvents = function(chartInstance, arrayOfEvents) {
		helpers.each(arrayOfEvents, function(handler, eventName) {
			helpers.removeEvent(chartInstance.chart.canvas, eventName, handler);
		});
	};

	// Private helper function to convert max-width/max-height values that may be percentages into a number
	function parseMaxStyle(styleValue, node, parentProperty) {
		var valueInPixels;
		if (typeof(styleValue) === 'string') {
			valueInPixels = parseInt(styleValue, 10);

			if (styleValue.indexOf('%') != -1) {
				// percentage * size in dimension
				valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
			}
		} else {
			valueInPixels = styleValue;
		}

		return valueInPixels;
	}

	// Private helper to get a constraint dimension
	// @param domNode : the node to check the constraint on
	// @param maxStyle : the style that defines the maximum for the direction we are using (max-width / max-height)
	// @param percentageProperty : property of parent to use when calculating width as a percentage
	function getConstraintDimension(domNode, maxStyle, percentageProperty) {
		var constrainedDimension;
		var constrainedNode = document.defaultView.getComputedStyle(domNode)[maxStyle];
		var constrainedContainer = document.defaultView.getComputedStyle(domNode.parentNode)[maxStyle];
		var hasCNode = constrainedNode !== null && constrainedNode !== "none";
		var hasCContainer = constrainedContainer !== null && constrainedContainer !== "none";

		if (hasCNode || hasCContainer) {
			constrainedDimension = Math.min((hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : Number.POSITIVE_INFINITY), (hasCContainer ? parseMaxStyle(constrainedContainer, domNode.parentNode, percentageProperty) : Number.POSITIVE_INFINITY));
		}
		return constrainedDimension;
	}
	// returns Number or undefined if no constraint
	helpers.getConstraintWidth = function(domNode) {
		return getConstraintDimension(domNode, 'max-width', 'clientWidth');
	};
	// returns Number or undefined if no constraint
	helpers.getConstraintHeight = function(domNode) {
		return getConstraintDimension(domNode, 'max-height', 'clientHeight');
	};
	helpers.getMaximumWidth = function(domNode) {
		var container = domNode.parentNode;
		var padding = parseInt(helpers.getStyle(container, 'padding-left')) + parseInt(helpers.getStyle(container, 'padding-right'));

		var w = container.clientWidth - padding;
		var cw = helpers.getConstraintWidth(domNode);
		if (cw !== undefined) {
			w = Math.min(w, cw);
		}

		return w;
	};
	helpers.getMaximumHeight = function(domNode) {
		var container = domNode.parentNode;
		var padding = parseInt(helpers.getStyle(container, 'padding-top')) + parseInt(helpers.getStyle(container, 'padding-bottom'));

		var h = container.clientHeight - padding;
		var ch = helpers.getConstraintHeight(domNode);
		if (ch !== undefined) {
			h = Math.min(h, ch);
		}

		return h;
	};
	helpers.getStyle = function(el, property) {
		return el.currentStyle ?
			el.currentStyle[property] :
			document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
	};
	helpers.retinaScale = function(chart) {
		var ctx = chart.ctx;
		var width = chart.canvas.width;
		var height = chart.canvas.height;
		var pixelRatio = chart.currentDevicePixelRatio = window.devicePixelRatio || 1;

		if (pixelRatio !== 1) {
			ctx.canvas.height = height * pixelRatio;
			ctx.canvas.width = width * pixelRatio;
			ctx.scale(pixelRatio, pixelRatio);

			// Store the device pixel ratio so that we can go backwards in `destroy`.
			// The devicePixelRatio changes with zoom, so there are no guarantees that it is the same
			// when destroy is called
			chart.originalDevicePixelRatio = chart.originalDevicePixelRatio || pixelRatio;
		}

		ctx.canvas.style.width = width + 'px';
		ctx.canvas.style.height = height + 'px';
	};
	//-- Canvas methods
	helpers.clear = function(chart) {
		chart.ctx.clearRect(0, 0, chart.width, chart.height);
	};
	helpers.fontString = function(pixelSize, fontStyle, fontFamily) {
		return fontStyle + " " + pixelSize + "px " + fontFamily;
	};
	helpers.longestText = function(ctx, font, arrayOfStrings, cache) {
		cache = cache || {};
		cache.data = cache.data || {};
		cache.garbageCollect = cache.garbageCollect || [];

		if (cache.font !== font) {
			cache.data = {};
			cache.garbageCollect = [];
			cache.font = font;
		}

		ctx.font = font;
		var longest = 0;
		helpers.each(arrayOfStrings, function(string) {
			// Undefined strings should not be measured
			if (string !== undefined && string !== null) {
				var textWidth = cache.data[string];
				if (!textWidth) {
					textWidth = cache.data[string] = ctx.measureText(string).width;
					cache.garbageCollect.push(string);
				}

				if (textWidth > longest) {
					longest = textWidth;
				}
			}
		});

		var gcLen = cache.garbageCollect.length / 2;
		if (gcLen > arrayOfStrings.length) {
			for (var i = 0; i < gcLen; i++) {
				delete cache.data[cache.garbageCollect[i]];
			}
			cache.garbageCollect.splice(0, gcLen);
		}

		return longest;
	};
	helpers.drawRoundedRectangle = function(ctx, x, y, width, height, radius) {
		ctx.beginPath();
		ctx.moveTo(x + radius, y);
		ctx.lineTo(x + width - radius, y);
		ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
		ctx.lineTo(x + width, y + height - radius);
		ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
		ctx.lineTo(x + radius, y + height);
		ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
		ctx.lineTo(x, y + radius);
		ctx.quadraticCurveTo(x, y, x + radius, y);
		ctx.closePath();
	};
	helpers.color = function(c) {
		if (!color) {
			console.log('Color.js not found!');
			return c;
		}

		/* global CanvasGradient */
		if (c instanceof CanvasGradient) {
			return color(Chart.defaults.global.defaultColor);
		}

		return color(c);
	};
	helpers.addResizeListener = function(node, callback) {
		// Hide an iframe before the node
		var hiddenIframe = document.createElement('iframe');
		var hiddenIframeClass = 'chartjs-hidden-iframe';

		if (hiddenIframe.classlist) {
			// can use classlist
			hiddenIframe.classlist.add(hiddenIframeClass);
		} else {
			hiddenIframe.setAttribute('class', hiddenIframeClass);
		}

		// Set the style
		hiddenIframe.style.width = '100%';
		hiddenIframe.style.display = 'block';
		hiddenIframe.style.border = 0;
		hiddenIframe.style.height = 0;
		hiddenIframe.style.margin = 0;
		hiddenIframe.style.position = 'absolute';
		hiddenIframe.style.left = 0;
		hiddenIframe.style.right = 0;
		hiddenIframe.style.top = 0;
		hiddenIframe.style.bottom = 0;

		// Insert the iframe so that contentWindow is available
		node.insertBefore(hiddenIframe, node.firstChild);

		(hiddenIframe.contentWindow || hiddenIframe).onresize = function() {
			if (callback) {
				callback();
			}
		};
	};
	helpers.removeResizeListener = function(node) {
		var hiddenIframe = node.querySelector('.chartjs-hidden-iframe');

		// Remove the resize detect iframe
		if (hiddenIframe) {
			hiddenIframe.parentNode.removeChild(hiddenIframe);
		}
	};
	helpers.isArray = function(obj) {
		if (!Array.isArray) {
			return Object.prototype.toString.call(obj) === '[object Array]';
		}
		return Array.isArray(obj);
	};
	helpers.pushAllIfDefined = function(element, array) {
		if (typeof element === "undefined") {
			return;
		}

		if (helpers.isArray(element)) {
			array.push.apply(array, element);
		} else {
			array.push(element);
		}
	};
	helpers.callCallback = function(fn, args, _tArg) {
		if (fn && typeof fn.call === 'function') {
			fn.apply(_tArg, args);
		}
	};
	helpers.getHoverColor = function(color) {
		/* global CanvasPattern */
		return (color instanceof CanvasPattern) ?
			color :
			helpers.color(color).saturate(0.5).darken(0.1).rgbString();
	};
};


/***/ }),

/***/ "./node_modules/Chart.js/src/core/core.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function() {

	//Occupy the global variable of Chart, and create a simple base class
	var Chart = function(context, config) {
		this.config = config;

		// Support a jQuery'd canvas element
		if (context.length && context[0].getContext) {
			context = context[0];
		}

		// Support a canvas domnode
		if (context.getContext) {
			context = context.getContext("2d");
		}

		this.ctx = context;
		this.canvas = context.canvas;

		// Figure out what the size of the chart will be.
		// If the canvas has a specified width and height, we use those else
		// we look to see if the canvas node has a CSS width and height.
		// If there is still no height, fill the parent container
		this.width = context.canvas.width || parseInt(Chart.helpers.getStyle(context.canvas, 'width')) || Chart.helpers.getMaximumWidth(context.canvas);
		this.height = context.canvas.height || parseInt(Chart.helpers.getStyle(context.canvas, 'height')) || Chart.helpers.getMaximumHeight(context.canvas);

		this.aspectRatio = this.width / this.height;

		if (isNaN(this.aspectRatio) || isFinite(this.aspectRatio) === false) {
			// If the canvas has no size, try and figure out what the aspect ratio will be.
			// Some charts prefer square canvases (pie, radar, etc). If that is specified, use that
			// else use the canvas default ratio of 2
			this.aspectRatio = config.aspectRatio !== undefined ? config.aspectRatio : 2;
		}

		// Store the original style of the element so we can set it back
		this.originalCanvasStyleWidth = context.canvas.style.width;
		this.originalCanvasStyleHeight = context.canvas.style.height;

		// High pixel density displays - multiply the size of the canvas height/width by the device pixel ratio, then scale.
		Chart.helpers.retinaScale(this);

		if (config) {
			this.controller = new Chart.Controller(this);
		}

		// Always bind this so that if the responsive state changes we still work
		var _this = this;
		Chart.helpers.addResizeListener(context.canvas.parentNode, function() {
			if (_this.controller && _this.controller.config.options.responsive) {
				_this.controller.resize();
			}
		});

		return this.controller ? this.controller : this;

	};

	//Globally expose the defaults to allow for user updating/changing
	Chart.defaults = {
		global: {
			responsive: true,
			responsiveAnimationDuration: 0,
			maintainAspectRatio: true,
			events: ["mousemove", "mouseout", "click", "touchstart", "touchmove"],
			hover: {
				onHover: null,
				mode: 'single',
				animationDuration: 400
			},
			onClick: null,
			defaultColor: 'rgba(0,0,0,0.1)',
			defaultFontColor: '#666',
			defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
			defaultFontSize: 12,
			defaultFontStyle: 'normal',
			showLines: true,

			// Element defaults defined in element extensions
			elements: {},

			// Legend callback string
			legendCallback: function(chart) {
				var text = [];
				text.push('<ul class="' + chart.id + '-legend">');
				for (var i = 0; i < chart.data.datasets.length; i++) {
					text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');
					if (chart.data.datasets[i].label) {
						text.push(chart.data.datasets[i].label);
					}
					text.push('</li>');
				}
				text.push('</ul>');

				return text.join("");
			}
		}
	};

	return Chart;

};


/***/ }),

/***/ "./node_modules/Chart.js/src/core/core.layoutService.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	// The layout service is very self explanatory.  It's responsible for the layout within a chart.
	// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
	// It is this service's responsibility of carrying out that layout.
	Chart.layoutService = {
		defaults: {},

		// Register a box to a chartInstance. A box is simply a reference to an object that requires layout. eg. Scales, Legend, Plugins.
		addBox: function(chartInstance, box) {
			if (!chartInstance.boxes) {
				chartInstance.boxes = [];
			}
			chartInstance.boxes.push(box);
		},

		removeBox: function(chartInstance, box) {
			if (!chartInstance.boxes) {
				return;
			}
			chartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);
		},

		// The most important function
		update: function(chartInstance, width, height) {

			if (!chartInstance) {
				return;
			}

			var xPadding = 0;
			var yPadding = 0;

			var leftBoxes = helpers.where(chartInstance.boxes, function(box) {
				return box.options.position === "left";
			});
			var rightBoxes = helpers.where(chartInstance.boxes, function(box) {
				return box.options.position === "right";
			});
			var topBoxes = helpers.where(chartInstance.boxes, function(box) {
				return box.options.position === "top";
			});
			var bottomBoxes = helpers.where(chartInstance.boxes, function(box) {
				return box.options.position === "bottom";
			});

			// Boxes that overlay the chartarea such as the radialLinear scale
			var chartAreaBoxes = helpers.where(chartInstance.boxes, function(box) {
				return box.options.position === "chartArea";
			});

			// Ensure that full width boxes are at the very top / bottom
			topBoxes.sort(function(a, b) {
				return (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);
			});
			bottomBoxes.sort(function(a, b) {
				return (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);
			});

			// Essentially we now have any number of boxes on each of the 4 sides.
			// Our canvas looks like the following.
			// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
			// B1 is the bottom axis
			// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
			// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
			// an error will be thrown.
			//
			// |----------------------------------------------------|
			// |                  T1 (Full Width)                   |
			// |----------------------------------------------------|
			// |    |    |                 T2                  |    |
			// |    |----|-------------------------------------|----|
			// |    |    | C1 |                           | C2 |    |
			// |    |    |----|                           |----|    |
			// |    |    |                                     |    |
			// | L1 | L2 |           ChartArea (C0)            | R1 |
			// |    |    |                                     |    |
			// |    |    |----|                           |----|    |
			// |    |    | C3 |                           | C4 |    |
			// |    |----|-------------------------------------|----|
			// |    |    |                 B1                  |    |
			// |----------------------------------------------------|
			// |                  B2 (Full Width)                   |
			// |----------------------------------------------------|
			//
			// What we do to find the best sizing, we do the following
			// 1. Determine the minimum size of the chart area.
			// 2. Split the remaining width equally between each vertical axis
			// 3. Split the remaining height equally between each horizontal axis
			// 4. Give each layout the maximum size it can be. The layout will return it's minimum size
			// 5. Adjust the sizes of each axis based on it's minimum reported size.
			// 6. Refit each axis
			// 7. Position each axis in the final location
			// 8. Tell the chart the final location of the chart area
			// 9. Tell any axes that overlay the chart area the positions of the chart area

			// Step 1
			var chartWidth = width - (2 * xPadding);
			var chartHeight = height - (2 * yPadding);
			var chartAreaWidth = chartWidth / 2; // min 50%
			var chartAreaHeight = chartHeight / 2; // min 50%

			// Step 2
			var verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);

			// Step 3
			var horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);

			// Step 4
			var maxChartAreaWidth = chartWidth;
			var maxChartAreaHeight = chartHeight;
			var minBoxSizes = [];

			helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);

			function getMinimumBoxSize(box) {
				var minSize;
				var isHorizontal = box.isHorizontal();

				if (isHorizontal) {
					minSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);
					maxChartAreaHeight -= minSize.height;
				} else {
					minSize = box.update(verticalBoxWidth, chartAreaHeight);
					maxChartAreaWidth -= minSize.width;
				}

				minBoxSizes.push({
					horizontal: isHorizontal,
					minSize: minSize,
					box: box
				});
			}

			// At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could
			// be if the axes are drawn at their minimum sizes.

			// Steps 5 & 6
			var totalLeftBoxesWidth = xPadding;
			var totalRightBoxesWidth = xPadding;
			var totalTopBoxesHeight = yPadding;
			var totalBottomBoxesHeight = yPadding;

			// Update, and calculate the left and right margins for the horizontal boxes
			helpers.each(leftBoxes.concat(rightBoxes), fitBox);

			helpers.each(leftBoxes, function(box) {
				totalLeftBoxesWidth += box.width;
			});

			helpers.each(rightBoxes, function(box) {
				totalRightBoxesWidth += box.width;
			});

			// Set the Left and Right margins for the horizontal boxes
			helpers.each(topBoxes.concat(bottomBoxes), fitBox);

			// Function to fit a box
			function fitBox(box) {
				var minBoxSize = helpers.findNextWhere(minBoxSizes, function(minBoxSize) {
					return minBoxSize.box === box;
				});

				if (minBoxSize) {
					if (box.isHorizontal()) {
						var scaleMargin = {
							left: totalLeftBoxesWidth,
							right: totalRightBoxesWidth,
							top: 0,
							bottom: 0
						};

						// Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends
						// on the margin. Sometimes they need to increase in size slightly
						box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
					} else {
						box.update(minBoxSize.minSize.width, maxChartAreaHeight);
					}
				}
			}

			// Figure out how much margin is on the top and bottom of the vertical boxes
			helpers.each(topBoxes, function(box) {
				totalTopBoxesHeight += box.height;
			});

			helpers.each(bottomBoxes, function(box) {
				totalBottomBoxesHeight += box.height;
			});

			// Let the left layout know the final margin
			helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);

			function finalFitVerticalBox(box) {
				var minBoxSize = helpers.findNextWhere(minBoxSizes, function(minBoxSize) {
					return minBoxSize.box === box;
				});

				var scaleMargin = {
					left: 0,
					right: 0,
					top: totalTopBoxesHeight,
					bottom: totalBottomBoxesHeight
				};

				if (minBoxSize) {
					box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);
				}
			}

			// Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)
			totalLeftBoxesWidth = xPadding;
			totalRightBoxesWidth = xPadding;
			totalTopBoxesHeight = yPadding;
			totalBottomBoxesHeight = yPadding;

			helpers.each(leftBoxes, function(box) {
				totalLeftBoxesWidth += box.width;
			});

			helpers.each(rightBoxes, function(box) {
				totalRightBoxesWidth += box.width;
			});

			helpers.each(topBoxes, function(box) {
				totalTopBoxesHeight += box.height;
			});
			helpers.each(bottomBoxes, function(box) {
				totalBottomBoxesHeight += box.height;
			});

			// Figure out if our chart area changed. This would occur if the dataset layout label rotation
			// changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do
			// without calling `fit` again
			var newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;
			var newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;

			if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
				helpers.each(leftBoxes, function(box) {
					box.height = newMaxChartAreaHeight;
				});

				helpers.each(rightBoxes, function(box) {
					box.height = newMaxChartAreaHeight;
				});

				helpers.each(topBoxes, function(box) {
					if (!box.options.fullWidth) {
						box.width = newMaxChartAreaWidth;
					}
				});

				helpers.each(bottomBoxes, function(box) {
					if (!box.options.fullWidth) {
						box.width = newMaxChartAreaWidth;
					}
				});

				maxChartAreaHeight = newMaxChartAreaHeight;
				maxChartAreaWidth = newMaxChartAreaWidth;
			}

			// Step 7 - Position the boxes
			var left = xPadding;
			var top = yPadding;
			var right = 0;
			var bottom = 0;

			helpers.each(leftBoxes.concat(topBoxes), placeBox);

			// Account for chart width and height
			left += maxChartAreaWidth;
			top += maxChartAreaHeight;

			helpers.each(rightBoxes, placeBox);
			helpers.each(bottomBoxes, placeBox);

			function placeBox(box) {
				if (box.isHorizontal()) {
					box.left = box.options.fullWidth ? xPadding : totalLeftBoxesWidth;
					box.right = box.options.fullWidth ? width - xPadding : totalLeftBoxesWidth + maxChartAreaWidth;
					box.top = top;
					box.bottom = top + box.height;

					// Move to next point
					top = box.bottom;

				} else {

					box.left = left;
					box.right = left + box.width;
					box.top = totalTopBoxesHeight;
					box.bottom = totalTopBoxesHeight + maxChartAreaHeight;

					// Move to next point
					left = box.right;
				}
			}

			// Step 8
			chartInstance.chartArea = {
				left: totalLeftBoxesWidth,
				top: totalTopBoxesHeight,
				right: totalLeftBoxesWidth + maxChartAreaWidth,
				bottom: totalTopBoxesHeight + maxChartAreaHeight
			};

			// Step 9
			helpers.each(chartAreaBoxes, function(box) {
				box.left = chartInstance.chartArea.left;
				box.top = chartInstance.chartArea.top;
				box.right = chartInstance.chartArea.right;
				box.bottom = chartInstance.chartArea.bottom;

				box.update(maxChartAreaWidth, maxChartAreaHeight);
			});
		}
	};
};


/***/ }),

/***/ "./node_modules/Chart.js/src/core/core.legend.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;
	var noop = helpers.noop;

	Chart.defaults.global.legend = {

		display: true,
		position: 'top',
		fullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)
		reverse: false,

		// a callback that will handle
		onClick: function(e, legendItem) {
			var index = legendItem.datasetIndex;
			var ci = this.chart;
			var meta = ci.getDatasetMeta(index);

			// See controller.isDatasetVisible comment
			meta.hidden = meta.hidden === null? !ci.data.datasets[index].hidden : null;

			// We hid a dataset ... rerender the chart
			ci.update();
		},

		labels: {
			boxWidth: 40,
			padding: 10,
			// Generates labels shown in the legend
			// Valid properties to return:
			// text : text to display
			// fillStyle : fill of coloured box
			// strokeStyle: stroke of coloured box
			// hidden : if this legend item refers to a hidden item
			// lineCap : cap style for line
			// lineDash
			// lineDashOffset :
			// lineJoin :
			// lineWidth :
			generateLabels: function(chart) {
				var data = chart.data;
				return helpers.isArray(data.datasets) ? data.datasets.map(function(dataset, i) {
					return {
						text: dataset.label,
						fillStyle: dataset.backgroundColor,
						hidden: !chart.isDatasetVisible(i),
						lineCap: dataset.borderCapStyle,
						lineDash: dataset.borderDash,
						lineDashOffset: dataset.borderDashOffset,
						lineJoin: dataset.borderJoinStyle,
						lineWidth: dataset.borderWidth,
						strokeStyle: dataset.borderColor,

						// Below is extra data used for toggling the datasets
						datasetIndex: i
					};
				}, this) : [];
			}
		}
	};

	Chart.Legend = Chart.Element.extend({

		initialize: function(config) {
			helpers.extend(this, config);

			// Contains hit boxes for each dataset (in dataset order)
			this.legendHitBoxes = [];

			// Are we in doughnut mode which has a different data type
			this.doughnutMode = false;
		},

		// These methods are ordered by lifecyle. Utilities then follow.
		// Any function defined here is inherited by all legend types.
		// Any function can be extended by the legend type

		beforeUpdate: noop,
		update: function(maxWidth, maxHeight, margins) {

			// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
			this.beforeUpdate();

			// Absorb the master measurements
			this.maxWidth = maxWidth;
			this.maxHeight = maxHeight;
			this.margins = margins;

			// Dimensions
			this.beforeSetDimensions();
			this.setDimensions();
			this.afterSetDimensions();
			// Labels
			this.beforeBuildLabels();
			this.buildLabels();
			this.afterBuildLabels();

			// Fit
			this.beforeFit();
			this.fit();
			this.afterFit();
			//
			this.afterUpdate();

			return this.minSize;
		},
		afterUpdate: noop,

		//

		beforeSetDimensions: noop,
		setDimensions: function() {
			// Set the unconstrained dimension before label rotation
			if (this.isHorizontal()) {
				// Reset position before calculating rotation
				this.width = this.maxWidth;
				this.left = 0;
				this.right = this.width;
			} else {
				this.height = this.maxHeight;

				// Reset position before calculating rotation
				this.top = 0;
				this.bottom = this.height;
			}

			// Reset padding
			this.paddingLeft = 0;
			this.paddingTop = 0;
			this.paddingRight = 0;
			this.paddingBottom = 0;

			// Reset minSize
			this.minSize = {
				width: 0,
				height: 0
			};
		},
		afterSetDimensions: noop,

		//

		beforeBuildLabels: noop,
		buildLabels: function() {
			this.legendItems = this.options.labels.generateLabels.call(this, this.chart);
			if(this.options.reverse){
				this.legendItems.reverse();
			}
		},
		afterBuildLabels: noop,

		//

		beforeFit: noop,
		fit: function() {
			var opts = this.options;
			var labelOpts = opts.labels;
			var display = opts.display;

			var ctx = this.ctx;

			var globalDefault = Chart.defaults.global,
				itemOrDefault = helpers.getValueOrDefault,
				fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),
				fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),
				fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),
				labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);

			// Reset hit boxes
			var hitboxes = this.legendHitBoxes = [];

			var minSize = this.minSize;
			var isHorizontal = this.isHorizontal();

			if (isHorizontal) {
				minSize.width = this.maxWidth; // fill all the width
				minSize.height = display ? 10 : 0;
			} else {
				minSize.width = display ? 10 : 0;
				minSize.height = this.maxHeight; // fill all the height
			}

			// Increase sizes here
			if (display) {
				if (isHorizontal) {
					// Labels

					// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
					var lineWidths = this.lineWidths = [0];
					var totalHeight = this.legendItems.length ? fontSize + (labelOpts.padding) : 0;

					ctx.textAlign = "left";
					ctx.textBaseline = 'top';
					ctx.font = labelFont;

					helpers.each(this.legendItems, function(legendItem, i) {
						var width = labelOpts.boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
						if (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= this.width) {
							totalHeight += fontSize + (labelOpts.padding);
							lineWidths[lineWidths.length] = this.left;
						}

						// Store the hitbox width and height here. Final position will be updated in `draw`
						hitboxes[i] = {
							left: 0,
							top: 0,
							width: width,
							height: fontSize
						};

						lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
					}, this);

					minSize.height += totalHeight;

				} else {
					// TODO vertical
				}
			}

			this.width = minSize.width;
			this.height = minSize.height;
		},
		afterFit: noop,

		// Shared Methods
		isHorizontal: function() {
			return this.options.position === "top" || this.options.position === "bottom";
		},

		// Actualy draw the legend on the canvas
		draw: function() {
			var opts = this.options;
			var labelOpts = opts.labels;
			var globalDefault = Chart.defaults.global,
				lineDefault = globalDefault.elements.line,
				legendWidth = this.width,
				lineWidths = this.lineWidths;

			if (opts.display) {
				var ctx = this.ctx,
					cursor = {
						x: this.left + ((legendWidth - lineWidths[0]) / 2),
						y: this.top + labelOpts.padding,
						line: 0
					},
					itemOrDefault = helpers.getValueOrDefault,
					fontColor = itemOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor),
					fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),
					fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),
					fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),
					labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);

				// Horizontal
				if (this.isHorizontal()) {
					// Labels
					ctx.textAlign = "left";
					ctx.textBaseline = 'top';
					ctx.lineWidth = 0.5;
					ctx.strokeStyle = fontColor; // for strikethrough effect
					ctx.fillStyle = fontColor; // render in correct colour
					ctx.font = labelFont;

					var boxWidth = labelOpts.boxWidth,
						hitboxes = this.legendHitBoxes;

					helpers.each(this.legendItems, function(legendItem, i) {
						var textWidth = ctx.measureText(legendItem.text).width,
							width = boxWidth + (fontSize / 2) + textWidth,
							x = cursor.x,
							y = cursor.y;

						if (x + width >= legendWidth) {
							y = cursor.y += fontSize + (labelOpts.padding);
							cursor.line++;
							x = cursor.x = this.left + ((legendWidth - lineWidths[cursor.line]) / 2);
						}

						// Set the ctx for the box
						ctx.save();

						ctx.fillStyle = itemOrDefault(legendItem.fillStyle, globalDefault.defaultColor);
						ctx.lineCap = itemOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
						ctx.lineDashOffset = itemOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
						ctx.lineJoin = itemOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
						ctx.lineWidth = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
						ctx.strokeStyle = itemOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);

						if (ctx.setLineDash) {
							// IE 9 and 10 do not support line dash
							ctx.setLineDash(itemOrDefault(legendItem.lineDash, lineDefault.borderDash));
						}

						// Draw the box
						ctx.strokeRect(x, y, boxWidth, fontSize);
						ctx.fillRect(x, y, boxWidth, fontSize);

						ctx.restore();

						hitboxes[i].left = x;
						hitboxes[i].top = y;

						// Fill the actual label
						ctx.fillText(legendItem.text, boxWidth + (fontSize / 2) + x, y);

						if (legendItem.hidden) {
							// Strikethrough the text if hidden
							ctx.beginPath();
							ctx.lineWidth = 2;
							ctx.moveTo(boxWidth + (fontSize / 2) + x, y + (fontSize / 2));
							ctx.lineTo(boxWidth + (fontSize / 2) + x + textWidth, y + (fontSize / 2));
							ctx.stroke();
						}

						cursor.x += width + (labelOpts.padding);
					}, this);
				} else {

				}
			}
		},

		// Handle an event
		handleEvent: function(e) {
			var position = helpers.getRelativePosition(e, this.chart.chart),
				x = position.x,
				y = position.y,
				opts = this.options;

			if (x >= this.left && x <= this.right && y >= this.top && y <= this.bottom) {
				// See if we are touching one of the dataset boxes
				var lh = this.legendHitBoxes;
				for (var i = 0; i < lh.length; ++i) {
					var hitBox = lh[i];

					if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
						// Touching an element
						if (opts.onClick) {
							opts.onClick.call(this, e, this.legendItems[i]);
						}
						break;
					}
				}
			}
		}
	});

};


/***/ }),

/***/ "./node_modules/Chart.js/src/core/core.plugin.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {
	var helpers = Chart.helpers;

	// Plugins are stored here
	Chart.plugins = [];
	Chart.pluginService = {
		// Register a new plugin
		register: function(plugin) {
			var p = Chart.plugins;
			if (p.indexOf(plugin) === -1) {
				p.push(plugin);
			}
		},

		// Remove a registered plugin
		remove: function(plugin) {
			var p = Chart.plugins;
			var idx = p.indexOf(plugin);
			if (idx !== -1) {
				p.splice(idx, 1);
			}
		},

		// Iterate over all plugins
		notifyPlugins: function(method, args, scope) {
			helpers.each(Chart.plugins, function(plugin) {
				if (plugin[method] && typeof plugin[method] === 'function') {
					plugin[method].apply(scope, args);
				}
			}, scope);
		}
	};

	var noop = helpers.noop;
	Chart.PluginBase = Chart.Element.extend({
		// Plugin methods. All functions are passed the chart instance

		// Called at start of chart init
		beforeInit: noop,

		// Called at end of chart init
		afterInit: noop,

		// Called at start of update
		beforeUpdate: noop,

		// Called at end of update
		afterUpdate: noop,

		// Called at start of draw
		beforeDraw: noop,

		// Called at end of draw
		afterDraw: noop,

		// Called during destroy
		destroy: noop,
	});
};


/***/ }),

/***/ "./node_modules/Chart.js/src/core/core.scale.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	Chart.defaults.scale = {
		display: true,
		position: "left",

		// grid line settings
		gridLines: {
			display: true,
			color: "rgba(0, 0, 0, 0.1)",
			lineWidth: 1,
			drawOnChartArea: true,
			drawTicks: true,
			tickMarkLength: 10,
			zeroLineWidth: 1,
			zeroLineColor: "rgba(0,0,0,0.25)",
			offsetGridLines: false
		},

		// scale label
		scaleLabel: {
			// actual label
			labelString: '',

			// display property
			display: false
		},

		// label settings
		ticks: {
			beginAtZero: false,
			minRotation: 0,
			maxRotation: 50,
			mirror: false,
			padding: 10,
			reverse: false,
			display: true,
			autoSkip: true,
			autoSkipPadding: 0,
			labelOffset: 0,
			callback: function(value) {
				return '' + value;
			}
		}
	};

	Chart.Scale = Chart.Element.extend({

		// These methods are ordered by lifecyle. Utilities then follow.
		// Any function defined here is inherited by all scale types.
		// Any function can be extended by the scale type

		beforeUpdate: function() {
			helpers.callCallback(this.options.beforeUpdate, [this]);
		},
		update: function(maxWidth, maxHeight, margins) {

			// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
			this.beforeUpdate();

			// Absorb the master measurements
			this.maxWidth = maxWidth;
			this.maxHeight = maxHeight;
			this.margins = helpers.extend({
				left: 0,
				right: 0,
				top: 0,
				bottom: 0
			}, margins);

			// Dimensions
			this.beforeSetDimensions();
			this.setDimensions();
			this.afterSetDimensions();

			// Data min/max
			this.beforeDataLimits();
			this.determineDataLimits();
			this.afterDataLimits();

			// Ticks
			this.beforeBuildTicks();
			this.buildTicks();
			this.afterBuildTicks();

			this.beforeTickToLabelConversion();
			this.convertTicksToLabels();
			this.afterTickToLabelConversion();

			// Tick Rotation
			this.beforeCalculateTickRotation();
			this.calculateTickRotation();
			this.afterCalculateTickRotation();
			// Fit
			this.beforeFit();
			this.fit();
			this.afterFit();
			//
			this.afterUpdate();

			return this.minSize;

		},
		afterUpdate: function() {
			helpers.callCallback(this.options.afterUpdate, [this]);
		},

		//

		beforeSetDimensions: function() {
			helpers.callCallback(this.options.beforeSetDimensions, [this]);
		},
		setDimensions: function() {
			// Set the unconstrained dimension before label rotation
			if (this.isHorizontal()) {
				// Reset position before calculating rotation
				this.width = this.maxWidth;
				this.left = 0;
				this.right = this.width;
			} else {
				this.height = this.maxHeight;

				// Reset position before calculating rotation
				this.top = 0;
				this.bottom = this.height;
			}

			// Reset padding
			this.paddingLeft = 0;
			this.paddingTop = 0;
			this.paddingRight = 0;
			this.paddingBottom = 0;
		},
		afterSetDimensions: function() {
			helpers.callCallback(this.options.afterSetDimensions, [this]);
		},

		// Data limits
		beforeDataLimits: function() {
			helpers.callCallback(this.options.beforeDataLimits, [this]);
		},
		determineDataLimits: helpers.noop,
		afterDataLimits: function() {
			helpers.callCallback(this.options.afterDataLimits, [this]);
		},

		//
		beforeBuildTicks: function() {
			helpers.callCallback(this.options.beforeBuildTicks, [this]);
		},
		buildTicks: helpers.noop,
		afterBuildTicks: function() {
			helpers.callCallback(this.options.afterBuildTicks, [this]);
		},

		beforeTickToLabelConversion: function() {
			helpers.callCallback(this.options.beforeTickToLabelConversion, [this]);
		},
		convertTicksToLabels: function() {
			// Convert ticks to strings
			this.ticks = this.ticks.map(function(numericalTick, index, ticks) {
					if (this.options.ticks.userCallback) {
						return this.options.ticks.userCallback(numericalTick, index, ticks);
					}
					return this.options.ticks.callback(numericalTick, index, ticks);
				},
				this);
		},
		afterTickToLabelConversion: function() {
			helpers.callCallback(this.options.afterTickToLabelConversion, [this]);
		},

		//

		beforeCalculateTickRotation: function() {
			helpers.callCallback(this.options.beforeCalculateTickRotation, [this]);
		},
		calculateTickRotation: function() {
			//Get the width of each grid by calculating the difference
			//between x offsets between 0 and 1.
			var tickFontSize = helpers.getValueOrDefault(this.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
			var tickFontStyle = helpers.getValueOrDefault(this.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);
			var tickFontFamily = helpers.getValueOrDefault(this.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);
			var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
			this.ctx.font = tickLabelFont;

			var firstWidth = this.ctx.measureText(this.ticks[0]).width;
			var lastWidth = this.ctx.measureText(this.ticks[this.ticks.length - 1]).width;
			var firstRotated;

			this.labelRotation = this.options.ticks.minRotation || 0;
			this.paddingRight = 0;
			this.paddingLeft = 0;

			if (this.options.display) {
				if (this.isHorizontal()) {
					this.paddingRight = lastWidth / 2 + 3;
					this.paddingLeft = firstWidth / 2 + 3;

					if (!this.longestTextCache) {
						this.longestTextCache = {};
					}
					var originalLabelWidth = helpers.longestText(this.ctx, tickLabelFont, this.ticks, this.longestTextCache);
					var labelWidth = originalLabelWidth;
					var cosRotation;
					var sinRotation;

					// Allow 3 pixels x2 padding either side for label readability
					// only the index matters for a dataset scale, but we want a consistent interface between scales
					var tickWidth = this.getPixelForTick(1) - this.getPixelForTick(0) - 6;

					//Max label rotation can be set or default to 90 - also act as a loop counter
					while (labelWidth > tickWidth && this.labelRotation < this.options.ticks.maxRotation) {
						cosRotation = Math.cos(helpers.toRadians(this.labelRotation));
						sinRotation = Math.sin(helpers.toRadians(this.labelRotation));

						firstRotated = cosRotation * firstWidth;

						// We're right aligning the text now.
						if (firstRotated + tickFontSize / 2 > this.yLabelWidth) {
							this.paddingLeft = firstRotated + tickFontSize / 2;
						}

						this.paddingRight = tickFontSize / 2;

						if (sinRotation * originalLabelWidth > this.maxHeight) {
							// go back one step
							this.labelRotation--;
							break;
						}

						this.labelRotation++;
						labelWidth = cosRotation * originalLabelWidth;
					}
				}
			}

			if (this.margins) {
				this.paddingLeft = Math.max(this.paddingLeft - this.margins.left, 0);
				this.paddingRight = Math.max(this.paddingRight - this.margins.right, 0);
			}
		},
		afterCalculateTickRotation: function() {
			helpers.callCallback(this.options.afterCalculateTickRotation, [this]);
		},

		//

		beforeFit: function() {
			helpers.callCallback(this.options.beforeFit, [this]);
		},
		fit: function() {
			// Reset
			var minSize = this.minSize = {
				width: 0,
				height: 0
			};

			var opts = this.options;
			var tickOpts = opts.ticks;
			var scaleLabelOpts = opts.scaleLabel;
			var globalOpts = Chart.defaults.global;
			var display = opts.display;
			var isHorizontal = this.isHorizontal();

			var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalOpts.defaultFontSize);
			var tickFontStyle = helpers.getValueOrDefault(tickOpts.fontStyle, globalOpts.defaultFontStyle);
			var tickFontFamily = helpers.getValueOrDefault(tickOpts.fontFamily, globalOpts.defaultFontFamily);
			var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);

			var scaleLabelFontSize = helpers.getValueOrDefault(scaleLabelOpts.fontSize, globalOpts.defaultFontSize);
			var scaleLabelFontStyle = helpers.getValueOrDefault(scaleLabelOpts.fontStyle, globalOpts.defaultFontStyle);
			var scaleLabelFontFamily = helpers.getValueOrDefault(scaleLabelOpts.fontFamily, globalOpts.defaultFontFamily);
			var scaleLabelFont = helpers.fontString(scaleLabelFontSize, scaleLabelFontStyle, scaleLabelFontFamily);

			var tickMarkLength = opts.gridLines.tickMarkLength;

			// Width
			if (isHorizontal) {
				// subtract the margins to line up with the chartArea if we are a full width scale
				minSize.width = this.isFullWidth() ? this.maxWidth - this.margins.left - this.margins.right : this.maxWidth;
			} else {
				minSize.width = display ? tickMarkLength : 0;
			}

			// height
			if (isHorizontal) {
				minSize.height = display ? tickMarkLength : 0;
			} else {
				minSize.height = this.maxHeight; // fill all the height
			}

			// Are we showing a title for the scale?
			if (scaleLabelOpts.display && display) {
				if (isHorizontal) {
					minSize.height += (scaleLabelFontSize * 1.5);
				} else {
					minSize.width += (scaleLabelFontSize * 1.5);
				}
			}

			if (tickOpts.display && display) {
				// Don't bother fitting the ticks if we are not showing them
				if (!this.longestTextCache) {
					this.longestTextCache = {};
				}

				var largestTextWidth = helpers.longestText(this.ctx, tickLabelFont, this.ticks, this.longestTextCache);

				if (isHorizontal) {
					// A horizontal axis is more constrained by the height.
					this.longestLabelWidth = largestTextWidth;

					// TODO - improve this calculation
					var labelHeight = (Math.sin(helpers.toRadians(this.labelRotation)) * this.longestLabelWidth) + 1.5 * tickFontSize;

					minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight);
					this.ctx.font = tickLabelFont;

					var firstLabelWidth = this.ctx.measureText(this.ticks[0]).width;
					var lastLabelWidth = this.ctx.measureText(this.ticks[this.ticks.length - 1]).width;

					// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned which means that the right padding is dominated
					// by the font height
					var cosRotation = Math.cos(helpers.toRadians(this.labelRotation));
					var sinRotation = Math.sin(helpers.toRadians(this.labelRotation));
					this.paddingLeft = this.labelRotation !== 0 ? (cosRotation * firstLabelWidth) + 3 : firstLabelWidth / 2 + 3; // add 3 px to move away from canvas edges
					this.paddingRight = this.labelRotation !== 0 ? (sinRotation * (tickFontSize / 2)) + 3 : lastLabelWidth / 2 + 3; // when rotated
				} else {
					// A vertical axis is more constrained by the width. Labels are the dominant factor here, so get that length first
					var maxLabelWidth = this.maxWidth - minSize.width;

					// Account for padding
					var mirror = tickOpts.mirror;
					if (!mirror) {
						largestTextWidth += this.options.ticks.padding;
					} else {
						// If mirrored text is on the inside so don't expand
						largestTextWidth = 0;
					}

					if (largestTextWidth < maxLabelWidth) {
						// We don't need all the room
						minSize.width += largestTextWidth;
					} else {
						// Expand to max size
						minSize.width = this.maxWidth;
					}

					this.paddingTop = tickFontSize / 2;
					this.paddingBottom = tickFontSize / 2;
				}
			}

			if (this.margins) {
				this.paddingLeft = Math.max(this.paddingLeft - this.margins.left, 0);
				this.paddingTop = Math.max(this.paddingTop - this.margins.top, 0);
				this.paddingRight = Math.max(this.paddingRight - this.margins.right, 0);
				this.paddingBottom = Math.max(this.paddingBottom - this.margins.bottom, 0);
			}

			this.width = minSize.width;
			this.height = minSize.height;

		},
		afterFit: function() {
			helpers.callCallback(this.options.afterFit, [this]);
		},

		// Shared Methods
		isHorizontal: function() {
			return this.options.position === "top" || this.options.position === "bottom";
		},
		isFullWidth: function() {
			return (this.options.fullWidth);
		},

		// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
		getRightValue: function getRightValue(rawValue) {
			// Null and undefined values first
			if (rawValue === null || typeof(rawValue) === 'undefined') {
				return NaN;
			}
			// isNaN(object) returns true, so make sure NaN is checking for a number
			if (typeof(rawValue) === 'number' && isNaN(rawValue)) {
				return NaN;
			}
			// If it is in fact an object, dive in one more level
			if (typeof(rawValue) === "object") {
				if (rawValue instanceof Date) {
					return rawValue;
				} else {
					return getRightValue(this.isHorizontal() ? rawValue.x : rawValue.y);
				}
			}

			// Value is good, return it
			return rawValue;
		},

		// Used to get the value to display in the tooltip for the data at the given index
		// function getLabelForIndex(index, datasetIndex)
		getLabelForIndex: helpers.noop,

		// Used to get data value locations.  Value can either be an index or a numerical value
		getPixelForValue: helpers.noop,

		// Used to get the data value from a given pixel. This is the inverse of getPixelForValue
		getValueForPixel: helpers.noop,

		// Used for tick location, should
		getPixelForTick: function(index, includeOffset) {
			if (this.isHorizontal()) {
				var innerWidth = this.width - (this.paddingLeft + this.paddingRight);
				var tickWidth = innerWidth / Math.max((this.ticks.length - ((this.options.gridLines.offsetGridLines) ? 0 : 1)), 1);
				var pixel = (tickWidth * index) + this.paddingLeft;

				if (includeOffset) {
					pixel += tickWidth / 2;
				}

				var finalVal = this.left + Math.round(pixel);
				finalVal += this.isFullWidth() ? this.margins.left : 0;
				return finalVal;
			} else {
				var innerHeight = this.height - (this.paddingTop + this.paddingBottom);
				return this.top + (index * (innerHeight / (this.ticks.length - 1)));
			}
		},

		// Utility for getting the pixel location of a percentage of scale
		getPixelForDecimal: function(decimal /*, includeOffset*/ ) {
			if (this.isHorizontal()) {
				var innerWidth = this.width - (this.paddingLeft + this.paddingRight);
				var valueOffset = (innerWidth * decimal) + this.paddingLeft;

				var finalVal = this.left + Math.round(valueOffset);
				finalVal += this.isFullWidth() ? this.margins.left : 0;
				return finalVal;
			} else {
				return this.top + (decimal * this.height);
			}
		},

		// Actualy draw the scale on the canvas
		// @param {rectangle} chartArea : the area of the chart to draw full grid lines on
		draw: function(chartArea) {
			if (this.options.display) {

				var setContextLineSettings;
				var isRotated = this.labelRotation !== 0;
				var skipRatio;
				var scaleLabelX;
				var scaleLabelY;
				var useAutoskipper = this.options.ticks.autoSkip;


				// figure out the maximum number of gridlines to show
				var maxTicks;

				if (this.options.ticks.maxTicksLimit) {
					maxTicks = this.options.ticks.maxTicksLimit;
				}

				var tickFontColor = helpers.getValueOrDefault(this.options.ticks.fontColor, Chart.defaults.global.defaultFontColor);
				var tickFontSize = helpers.getValueOrDefault(this.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
				var tickFontStyle = helpers.getValueOrDefault(this.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);
				var tickFontFamily = helpers.getValueOrDefault(this.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);
				var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
				var tl = this.options.gridLines.tickMarkLength;

				var scaleLabelFontColor = helpers.getValueOrDefault(this.options.scaleLabel.fontColor, Chart.defaults.global.defaultFontColor);
				var scaleLabelFontSize = helpers.getValueOrDefault(this.options.scaleLabel.fontSize, Chart.defaults.global.defaultFontSize);
				var scaleLabelFontStyle = helpers.getValueOrDefault(this.options.scaleLabel.fontStyle, Chart.defaults.global.defaultFontStyle);
				var scaleLabelFontFamily = helpers.getValueOrDefault(this.options.scaleLabel.fontFamily, Chart.defaults.global.defaultFontFamily);
				var scaleLabelFont = helpers.fontString(scaleLabelFontSize, scaleLabelFontStyle, scaleLabelFontFamily);

				var cosRotation = Math.cos(helpers.toRadians(this.labelRotation));
				var sinRotation = Math.sin(helpers.toRadians(this.labelRotation));
				var longestRotatedLabel = this.longestLabelWidth * cosRotation;
				var rotatedLabelHeight = tickFontSize * sinRotation;

				// Make sure we draw text in the correct color and font
				this.ctx.fillStyle = tickFontColor;

				if (this.isHorizontal()) {
					setContextLineSettings = true;
					var yTickStart = this.options.position === "bottom" ? this.top : this.bottom - tl;
					var yTickEnd = this.options.position === "bottom" ? this.top + tl : this.bottom;
					skipRatio = false;

					if (((longestRotatedLabel / 2) + this.options.ticks.autoSkipPadding) * this.ticks.length > (this.width - (this.paddingLeft + this.paddingRight))) {
						skipRatio = 1 + Math.floor((((longestRotatedLabel / 2) + this.options.ticks.autoSkipPadding) * this.ticks.length) / (this.width - (this.paddingLeft + this.paddingRight)));
					}

					// if they defined a max number of ticks,
					// increase skipRatio until that number is met
					if (maxTicks && this.ticks.length > maxTicks) {
						while (!skipRatio || this.ticks.length / (skipRatio || 1) > maxTicks) {
							if (!skipRatio) {
								skipRatio = 1;
							}
							skipRatio += 1;
						}
					}

					if (!useAutoskipper) {
						skipRatio = false;
					}

					helpers.each(this.ticks, function(label, index) {
						// Blank ticks
						var isLastTick = this.ticks.length === index + 1;

						// Since we always show the last tick,we need may need to hide the last shown one before
						var shouldSkip = (skipRatio > 1 && index % skipRatio > 0) || (index % skipRatio === 0 && index + skipRatio > this.ticks.length);
						if (shouldSkip && !isLastTick || (label === undefined || label === null)) {
							return;
						}
						var xLineValue = this.getPixelForTick(index); // xvalues for grid lines
						var xLabelValue = this.getPixelForTick(index, this.options.gridLines.offsetGridLines); // x values for ticks (need to consider offsetLabel option)

						if (this.options.gridLines.display) {
							if (index === (typeof this.zeroLineIndex !== 'undefined' ? this.zeroLineIndex : 0)) {
								// Draw the first index specially
								this.ctx.lineWidth = this.options.gridLines.zeroLineWidth;
								this.ctx.strokeStyle = this.options.gridLines.zeroLineColor;
								setContextLineSettings = true; // reset next time
							} else if (setContextLineSettings) {
								this.ctx.lineWidth = this.options.gridLines.lineWidth;
								this.ctx.strokeStyle = this.options.gridLines.color;
								setContextLineSettings = false;
							}

							xLineValue += helpers.aliasPixel(this.ctx.lineWidth);

							// Draw the label area
							this.ctx.beginPath();

							if (this.options.gridLines.drawTicks) {
								this.ctx.moveTo(xLineValue, yTickStart);
								this.ctx.lineTo(xLineValue, yTickEnd);
							}

							// Draw the chart area
							if (this.options.gridLines.drawOnChartArea) {
								this.ctx.moveTo(xLineValue, chartArea.top);
								this.ctx.lineTo(xLineValue, chartArea.bottom);
							}

							// Need to stroke in the loop because we are potentially changing line widths & colours
							this.ctx.stroke();
						}

						if (this.options.ticks.display) {
							this.ctx.save();
							this.ctx.translate(xLabelValue + this.options.ticks.labelOffset, (isRotated) ? this.top + 12 : this.options.position === "top" ? this.bottom - tl : this.top + tl);
							this.ctx.rotate(helpers.toRadians(this.labelRotation) * -1);
							this.ctx.font = tickLabelFont;
							this.ctx.textAlign = (isRotated) ? "right" : "center";
							this.ctx.textBaseline = (isRotated) ? "middle" : this.options.position === "top" ? "bottom" : "top";
							this.ctx.fillText(label, 0, 0);
							this.ctx.restore();
						}
					}, this);

					if (this.options.scaleLabel.display) {
						// Draw the scale label
						this.ctx.textAlign = "center";
						this.ctx.textBaseline = 'middle';
						this.ctx.fillStyle = scaleLabelFontColor; // render in correct colour
						this.ctx.font = scaleLabelFont;

						scaleLabelX = this.left + ((this.right - this.left) / 2); // midpoint of the width
						scaleLabelY = this.options.position === 'bottom' ? this.bottom - (scaleLabelFontSize / 2) : this.top + (scaleLabelFontSize / 2);

						this.ctx.fillText(this.options.scaleLabel.labelString, scaleLabelX, scaleLabelY);
					}

				} else {
					setContextLineSettings = true;
					var xTickStart = this.options.position === "right" ? this.left : this.right - 5;
					var xTickEnd = this.options.position === "right" ? this.left + 5 : this.right;

					helpers.each(this.ticks, function(label, index) {
						// If the callback returned a null or undefined value, do not draw this line
						if (label === undefined || label === null) {
							return;
						}

						var yLineValue = this.getPixelForTick(index); // xvalues for grid lines

						if (this.options.gridLines.display) {
							if (index === (typeof this.zeroLineIndex !== 'undefined' ? this.zeroLineIndex : 0)) {
								// Draw the first index specially
								this.ctx.lineWidth = this.options.gridLines.zeroLineWidth;
								this.ctx.strokeStyle = this.options.gridLines.zeroLineColor;
								setContextLineSettings = true; // reset next time
							} else if (setContextLineSettings) {
								this.ctx.lineWidth = this.options.gridLines.lineWidth;
								this.ctx.strokeStyle = this.options.gridLines.color;
								setContextLineSettings = false;
							}

							yLineValue += helpers.aliasPixel(this.ctx.lineWidth);

							// Draw the label area
							this.ctx.beginPath();

							if (this.options.gridLines.drawTicks) {
								this.ctx.moveTo(xTickStart, yLineValue);
								this.ctx.lineTo(xTickEnd, yLineValue);
							}

							// Draw the chart area
							if (this.options.gridLines.drawOnChartArea) {
								this.ctx.moveTo(chartArea.left, yLineValue);
								this.ctx.lineTo(chartArea.right, yLineValue);
							}

							// Need to stroke in the loop because we are potentially changing line widths & colours
							this.ctx.stroke();
						}

						if (this.options.ticks.display) {
							var xLabelValue;
							var yLabelValue = this.getPixelForTick(index, this.options.gridLines.offsetGridLines); // x values for ticks (need to consider offsetLabel option)

							this.ctx.save();

							if (this.options.position === "left") {
								if (this.options.ticks.mirror) {
									xLabelValue = this.right + this.options.ticks.padding;
									this.ctx.textAlign = "left";
								} else {
									xLabelValue = this.right - this.options.ticks.padding;
									this.ctx.textAlign = "right";
								}
							} else {
								// right side
								if (this.options.ticks.mirror) {
									xLabelValue = this.left - this.options.ticks.padding;
									this.ctx.textAlign = "right";
								} else {
									xLabelValue = this.left + this.options.ticks.padding;
									this.ctx.textAlign = "left";
								}
							}

							this.ctx.translate(xLabelValue, yLabelValue + this.options.ticks.labelOffset);
							this.ctx.rotate(helpers.toRadians(this.labelRotation) * -1);
							this.ctx.font = tickLabelFont;
							this.ctx.textBaseline = "middle";
							this.ctx.fillText(label, 0, 0);
							this.ctx.restore();
						}
					}, this);

					if (this.options.scaleLabel.display) {
						// Draw the scale label
						scaleLabelX = this.options.position === 'left' ? this.left + (scaleLabelFontSize / 2) : this.right - (scaleLabelFontSize / 2);
						scaleLabelY = this.top + ((this.bottom - this.top) / 2);
						var rotation = this.options.position === 'left' ? -0.5 * Math.PI : 0.5 * Math.PI;

						this.ctx.save();
						this.ctx.translate(scaleLabelX, scaleLabelY);
						this.ctx.rotate(rotation);
						this.ctx.textAlign = "center";
						this.ctx.fillStyle =scaleLabelFontColor; // render in correct colour
						this.ctx.font = scaleLabelFont;
						this.ctx.textBaseline = 'middle';
						this.ctx.fillText(this.options.scaleLabel.labelString, 0, 0);
						this.ctx.restore();
					}
				}

				// Draw the line at the edge of the axis
				this.ctx.lineWidth = this.options.gridLines.lineWidth;
				this.ctx.strokeStyle = this.options.gridLines.color;
				var x1 = this.left,
					x2 = this.right,
					y1 = this.top,
					y2 = this.bottom;

				if (this.isHorizontal()) {
					y1 = y2 = this.options.position === 'top' ? this.bottom : this.top;
					y1 += helpers.aliasPixel(this.ctx.lineWidth);
					y2 += helpers.aliasPixel(this.ctx.lineWidth);
				} else {
					x1 = x2 = this.options.position === 'left' ? this.right : this.left;
					x1 += helpers.aliasPixel(this.ctx.lineWidth);
					x2 += helpers.aliasPixel(this.ctx.lineWidth);
				}

				this.ctx.beginPath();
				this.ctx.moveTo(x1, y1);
				this.ctx.lineTo(x2, y2);
				this.ctx.stroke();
			}
		}
	});
};


/***/ }),

/***/ "./node_modules/Chart.js/src/core/core.scaleService.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	Chart.scaleService = {
		// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
		// use the new chart options to grab the correct scale
		constructors: {},
		// Use a registration function so that we can move to an ES6 map when we no longer need to support
		// old browsers

		// Scale config defaults
		defaults: {},
		registerScaleType: function(type, scaleConstructor, defaults) {
			this.constructors[type] = scaleConstructor;
			this.defaults[type] = helpers.clone(defaults);
		},
		getScaleConstructor: function(type) {
			return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
		},
		getScaleDefaults: function(type) {
			// Return the scale defaults merged with the global settings so that we always use the latest ones
			return this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};
		},
		updateScaleDefaults: function(type, additions) {
			var defaults = this.defaults;
			if (defaults.hasOwnProperty(type)) {
				defaults[type] = helpers.extend(defaults[type], additions);
			}
		},
		addScalesToLayout: function(chartInstance) {
			// Adds each scale to the chart.boxes array to be sized accordingly
			helpers.each(chartInstance.scales, function(scale) {
				Chart.layoutService.addBox(chartInstance, scale);
			});
		}
	};
};

/***/ }),

/***/ "./node_modules/Chart.js/src/core/core.title.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	Chart.defaults.global.title = {
		display: false,
		position: 'top',
		fullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)

		fontStyle: 'bold',
		padding: 10,

		// actual title
		text: ''
	};

	var noop = helpers.noop;
	Chart.Title = Chart.Element.extend({

		initialize: function(config) {
			helpers.extend(this, config);
			this.options = helpers.configMerge(Chart.defaults.global.title, config.options);

			// Contains hit boxes for each dataset (in dataset order)
			this.legendHitBoxes = [];
		},

		// These methods are ordered by lifecyle. Utilities then follow.

		beforeUpdate: noop,
		update: function(maxWidth, maxHeight, margins) {

			// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
			this.beforeUpdate();

			// Absorb the master measurements
			this.maxWidth = maxWidth;
			this.maxHeight = maxHeight;
			this.margins = margins;

			// Dimensions
			this.beforeSetDimensions();
			this.setDimensions();
			this.afterSetDimensions();
			// Labels
			this.beforeBuildLabels();
			this.buildLabels();
			this.afterBuildLabels();

			// Fit
			this.beforeFit();
			this.fit();
			this.afterFit();
			//
			this.afterUpdate();

			return this.minSize;

		},
		afterUpdate: noop,

		//

		beforeSetDimensions: noop,
		setDimensions: function() {
			// Set the unconstrained dimension before label rotation
			if (this.isHorizontal()) {
				// Reset position before calculating rotation
				this.width = this.maxWidth;
				this.left = 0;
				this.right = this.width;
			} else {
				this.height = this.maxHeight;

				// Reset position before calculating rotation
				this.top = 0;
				this.bottom = this.height;
			}

			// Reset padding
			this.paddingLeft = 0;
			this.paddingTop = 0;
			this.paddingRight = 0;
			this.paddingBottom = 0;

			// Reset minSize
			this.minSize = {
				width: 0,
				height: 0
			};
		},
		afterSetDimensions: noop,

		//

		beforeBuildLabels: noop,
		buildLabels: noop,
		afterBuildLabels: noop,

		//

		beforeFit: noop,
		fit: function() {

			var ctx = this.ctx,
				valueOrDefault = helpers.getValueOrDefault,
				opts = this.options,
				globalDefaults = Chart.defaults.global,
				display = opts.display,
				fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),
				minSize = this.minSize;

			if (this.isHorizontal()) {
				minSize.width = this.maxWidth; // fill all the width
				minSize.height = display ? fontSize + (opts.padding * 2) : 0;
			} else {
				minSize.width = display ? fontSize + (opts.padding * 2) : 0;
				minSize.height = this.maxHeight; // fill all the height
			}

			this.width = minSize.width;
			this.height = minSize.height;

		},
		afterFit: noop,

		// Shared Methods
		isHorizontal: function() {
			var pos = this.options.position;
			return pos === "top" || pos === "bottom";
		},

		// Actualy draw the title block on the canvas
		draw: function() {
			var ctx = this.ctx,
				valueOrDefault = helpers.getValueOrDefault,
				opts = this.options,
				globalDefaults = Chart.defaults.global;

			if (opts.display) {
				var fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),
					fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle),
					fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily),
					titleFont = helpers.fontString(fontSize, fontStyle, fontFamily),
					rotation = 0,
					titleX, 
					titleY;

				ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor); // render in correct colour
				ctx.font = titleFont;

				// Horizontal
				if (this.isHorizontal()) {
					titleX = this.left + ((this.right - this.left) / 2); // midpoint of the width
					titleY = this.top + ((this.bottom - this.top) / 2); // midpoint of the height
				} else {
					titleX = opts.position === 'left' ? this.left + (fontSize / 2) : this.right - (fontSize / 2);
					titleY = this.top + ((this.bottom - this.top) / 2);
					rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
				}

				ctx.save();
				ctx.translate(titleX, titleY);
				ctx.rotate(rotation);
				ctx.textAlign = 'center';
				ctx.textBaseline = 'middle';
				ctx.fillText(opts.text, 0, 0);
				ctx.restore();
			}
		}
	});
};

/***/ }),

/***/ "./node_modules/Chart.js/src/core/core.tooltip.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	Chart.defaults.global.tooltips = {
		enabled: true,
		custom: null,
		mode: 'single',
		backgroundColor: "rgba(0,0,0,0.8)",
		titleFontStyle: "bold",
		titleSpacing: 2,
		titleMarginBottom: 6,
		titleColor: "#fff",
		titleAlign: "left",
		bodySpacing: 2,
		bodyColor: "#fff",
		bodyAlign: "left",
		footerFontStyle: "bold",
		footerSpacing: 2,
		footerMarginTop: 6,
		footerColor: "#fff",
		footerAlign: "left",
		yPadding: 6,
		xPadding: 6,
		yAlign : 'center',
		xAlign : 'center',
		caretSize: 5,
		cornerRadius: 6,
		multiKeyBackground: '#fff',
		callbacks: {
			// Args are: (tooltipItems, data)
			beforeTitle: helpers.noop,
			title: function(tooltipItems, data) {
				// Pick first xLabel for now
				var title = '';

				if (tooltipItems.length > 0) {
					if (tooltipItems[0].xLabel) {
						title = tooltipItems[0].xLabel;
					} else if (data.labels.length > 0 && tooltipItems[0].index < data.labels.length) {
						title = data.labels[tooltipItems[0].index];
					}
				}

				return title;
			},
			afterTitle: helpers.noop,

			// Args are: (tooltipItems, data)
			beforeBody: helpers.noop,

			// Args are: (tooltipItem, data)
			beforeLabel: helpers.noop,
			label: function(tooltipItem, data) {
				var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
				return datasetLabel + ': ' + tooltipItem.yLabel;
			},
			afterLabel: helpers.noop,

			// Args are: (tooltipItems, data)
			afterBody: helpers.noop,

			// Args are: (tooltipItems, data)
			beforeFooter: helpers.noop,
			footer: helpers.noop,
			afterFooter: helpers.noop
		}
	};

	// Helper to push or concat based on if the 2nd parameter is an array or not
	function pushOrConcat(base, toPush) {
		if (toPush) {
			if (helpers.isArray(toPush)) {
				base = base.concat(toPush);
			} else {
				base.push(toPush);
			}
		}

		return base;
	}

	Chart.Tooltip = Chart.Element.extend({
		initialize: function() {
			var options = this._options;
			helpers.extend(this, {
				_model: {
					// Positioning
					xPadding: options.tooltips.xPadding,
					yPadding: options.tooltips.yPadding,
					xAlign : options.tooltips.yAlign,
					yAlign : options.tooltips.xAlign,

					// Body
					bodyColor: options.tooltips.bodyColor,
					_bodyFontFamily: helpers.getValueOrDefault(options.tooltips.bodyFontFamily, Chart.defaults.global.defaultFontFamily),
					_bodyFontStyle: helpers.getValueOrDefault(options.tooltips.bodyFontStyle, Chart.defaults.global.defaultFontStyle),
					_bodyAlign: options.tooltips.bodyAlign,
					bodyFontSize: helpers.getValueOrDefault(options.tooltips.bodyFontSize, Chart.defaults.global.defaultFontSize),
					bodySpacing: options.tooltips.bodySpacing,

					// Title
					titleColor: options.tooltips.titleColor,
					_titleFontFamily: helpers.getValueOrDefault(options.tooltips.titleFontFamily, Chart.defaults.global.defaultFontFamily),
					_titleFontStyle: helpers.getValueOrDefault(options.tooltips.titleFontStyle, Chart.defaults.global.defaultFontStyle),
					titleFontSize: helpers.getValueOrDefault(options.tooltips.titleFontSize, Chart.defaults.global.defaultFontSize),
					_titleAlign: options.tooltips.titleAlign,
					titleSpacing: options.tooltips.titleSpacing,
					titleMarginBottom: options.tooltips.titleMarginBottom,

					// Footer
					footerColor: options.tooltips.footerColor,
					_footerFontFamily: helpers.getValueOrDefault(options.tooltips.footerFontFamily, Chart.defaults.global.defaultFontFamily),
					_footerFontStyle: helpers.getValueOrDefault(options.tooltips.footerFontStyle, Chart.defaults.global.defaultFontStyle),
					footerFontSize: helpers.getValueOrDefault(options.tooltips.footerFontSize, Chart.defaults.global.defaultFontSize),
					_footerAlign: options.tooltips.footerAlign,
					footerSpacing: options.tooltips.footerSpacing,
					footerMarginTop: options.tooltips.footerMarginTop,

					// Appearance
					caretSize: options.tooltips.caretSize,
					cornerRadius: options.tooltips.cornerRadius,
					backgroundColor: options.tooltips.backgroundColor,
					opacity: 0,
					legendColorBackground: options.tooltips.multiKeyBackground
				}
			});
		},

		// Get the title
		// Args are: (tooltipItem, data)
		getTitle: function() {
			var beforeTitle = this._options.tooltips.callbacks.beforeTitle.apply(this, arguments),
				title = this._options.tooltips.callbacks.title.apply(this, arguments),
				afterTitle = this._options.tooltips.callbacks.afterTitle.apply(this, arguments);

			var lines = [];
			lines = pushOrConcat(lines, beforeTitle);
			lines = pushOrConcat(lines, title);
			lines = pushOrConcat(lines, afterTitle);

			return lines;
		},

		// Args are: (tooltipItem, data)
		getBeforeBody: function() {
			var lines = this._options.tooltips.callbacks.beforeBody.apply(this, arguments);
			return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
		},

		// Args are: (tooltipItem, data)
		getBody: function(tooltipItems, data) {
			var lines = [];

			helpers.each(tooltipItems, function(bodyItem) {
				helpers.pushAllIfDefined(this._options.tooltips.callbacks.beforeLabel.call(this, bodyItem, data), lines);
				helpers.pushAllIfDefined(this._options.tooltips.callbacks.label.call(this, bodyItem, data), lines);
				helpers.pushAllIfDefined(this._options.tooltips.callbacks.afterLabel.call(this, bodyItem, data), lines);
			}, this);

			return lines;
		},

		// Args are: (tooltipItem, data)
		getAfterBody: function() {
			var lines = this._options.tooltips.callbacks.afterBody.apply(this, arguments);
			return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
		},

		// Get the footer and beforeFooter and afterFooter lines
		// Args are: (tooltipItem, data)
		getFooter: function() {
			var beforeFooter = this._options.tooltips.callbacks.beforeFooter.apply(this, arguments);
			var footer = this._options.tooltips.callbacks.footer.apply(this, arguments);
			var afterFooter = this._options.tooltips.callbacks.afterFooter.apply(this, arguments);

			var lines = [];
			lines = pushOrConcat(lines, beforeFooter);
			lines = pushOrConcat(lines, footer);
			lines = pushOrConcat(lines, afterFooter);

			return lines;
		},

		getAveragePosition: function(elements) {

			if (!elements.length) {
				return false;
			}

			var xPositions = [];
			var yPositions = [];

			helpers.each(elements, function(el) {
				if (el) {
					var pos = el.tooltipPosition();
					xPositions.push(pos.x);
					yPositions.push(pos.y);
				}
			});

			var x = 0,
				y = 0;
			for (var i = 0; i < xPositions.length; i++) {
				x += xPositions[i];
				y += yPositions[i];
			}

			return {
				x: Math.round(x / xPositions.length),
				y: Math.round(y / xPositions.length)
			};

		},

		update: function(changed) {
			if (this._active.length) {
				this._model.opacity = 1;

				var element = this._active[0],
					labelColors = [],
					tooltipPosition;

				var tooltipItems = [];

				if (this._options.tooltips.mode === 'single') {
					var yScale = element._yScale || element._scale; // handle radar || polarArea charts
					tooltipItems.push({
						xLabel: element._xScale ? element._xScale.getLabelForIndex(element._index, element._datasetIndex) : '',
						yLabel: yScale ? yScale.getLabelForIndex(element._index, element._datasetIndex) : '',
						index: element._index,
						datasetIndex: element._datasetIndex
					});
					tooltipPosition = this.getAveragePosition(this._active);
				} else {
					helpers.each(this._data.datasets, function(dataset, datasetIndex) {
						if (!this._chartInstance.isDatasetVisible(datasetIndex)) {
							return;
						}

						var meta = this._chartInstance.getDatasetMeta(datasetIndex);
						var currentElement = meta.data[element._index];
						if (currentElement) {
							var yScale = element._yScale || element._scale; // handle radar || polarArea charts

							tooltipItems.push({
								xLabel: currentElement._xScale ? currentElement._xScale.getLabelForIndex(currentElement._index, currentElement._datasetIndex) : '',
								yLabel: yScale ? yScale.getLabelForIndex(currentElement._index, currentElement._datasetIndex) : '',
								index: element._index,
								datasetIndex: datasetIndex
							});
						}
					}, this);

					helpers.each(this._active, function(active) {
						if (active) {
							labelColors.push({
								borderColor: active._view.borderColor,
								backgroundColor: active._view.backgroundColor
							});
						}
					}, null);

					tooltipPosition = this.getAveragePosition(this._active);
				}

				// Build the Text Lines
				helpers.extend(this._model, {
					title: this.getTitle(tooltipItems, this._data),
					beforeBody: this.getBeforeBody(tooltipItems, this._data),
					body: this.getBody(tooltipItems, this._data),
					afterBody: this.getAfterBody(tooltipItems, this._data),
					footer: this.getFooter(tooltipItems, this._data)
				});

				helpers.extend(this._model, {
					x: Math.round(tooltipPosition.x),
					y: Math.round(tooltipPosition.y),
					caretPadding: helpers.getValueOrDefault(tooltipPosition.padding, 2),
					labelColors: labelColors
				});

				// We need to determine alignment of
				var tooltipSize = this.getTooltipSize(this._model);
				this.determineAlignment(tooltipSize); // Smart Tooltip placement to stay on the canvas

				helpers.extend(this._model, this.getBackgroundPoint(this._model, tooltipSize));
			} else {
				this._model.opacity = 0;
			}

			if (changed && this._options.tooltips.custom) {
				this._options.tooltips.custom.call(this, this._model);
			}

			return this;
		},
		getTooltipSize: function getTooltipSize(vm) {
			var ctx = this._chart.ctx;

			var size = {
				height: vm.yPadding * 2, // Tooltip Padding
				width: 0
			};
			var combinedBodyLength = vm.body.length + vm.beforeBody.length + vm.afterBody.length;

			size.height += vm.title.length * vm.titleFontSize; // Title Lines
			size.height += (vm.title.length - 1) * vm.titleSpacing; // Title Line Spacing
			size.height += vm.title.length ? vm.titleMarginBottom : 0; // Title's bottom Margin
			size.height += combinedBodyLength * vm.bodyFontSize; // Body Lines
			size.height += combinedBodyLength ? (combinedBodyLength - 1) * vm.bodySpacing : 0; // Body Line Spacing
			size.height += vm.footer.length ? vm.footerMarginTop : 0; // Footer Margin
			size.height += vm.footer.length * (vm.footerFontSize); // Footer Lines
			size.height += vm.footer.length ? (vm.footer.length - 1) * vm.footerSpacing : 0; // Footer Line Spacing

			// Width
			ctx.font = helpers.fontString(vm.titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
			helpers.each(vm.title, function(line) {
				size.width = Math.max(size.width, ctx.measureText(line).width);
			});

			ctx.font = helpers.fontString(vm.bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
			helpers.each(vm.beforeBody.concat(vm.afterBody), function(line) {
				size.width = Math.max(size.width, ctx.measureText(line).width);
			});
			helpers.each(vm.body, function(line) {
				size.width = Math.max(size.width, ctx.measureText(line).width + (this._options.tooltips.mode !== 'single' ? (vm.bodyFontSize + 2) : 0));
			}, this);

			ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
			helpers.each(vm.footer, function(line) {
				size.width = Math.max(size.width, ctx.measureText(line).width);
			});
			size.width += 2 * vm.xPadding;

			return size;
		},
		determineAlignment: function determineAlignment(size) {
			if (this._model.y < size.height) {
				this._model.yAlign = 'top';
			} else if (this._model.y > (this._chart.height - size.height)) {
				this._model.yAlign = 'bottom';
			}

			var lf, rf; // functions to determine left, right alignment
			var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
			var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
			var _this = this;
			var midX = (this._chartInstance.chartArea.left + this._chartInstance.chartArea.right) / 2;
			var midY = (this._chartInstance.chartArea.top + this._chartInstance.chartArea.bottom) / 2;

			if (this._model.yAlign === 'center') {
				lf = function(x) {
					return x <= midX;
				};
				rf = function(x) {
					return x > midX;
				};
			} else {
				lf = function(x) {
					return x <= (size.width / 2);
				};
				rf = function(x) {
					return x >= (_this._chart.width - (size.width / 2));
				};
			}

			olf = function(x) {
				return x + size.width > _this._chart.width;
			};
			orf = function(x) {
				return x - size.width < 0;
			};
			yf = function(y) {
				return y <= midY ? 'top' : 'bottom';
			};

			if (lf(this._model.x)) {
				this._model.xAlign = 'left';

				// Is tooltip too wide and goes over the right side of the chart.?
				if (olf(this._model.x)) {
					this._model.xAlign = 'center';
					this._model.yAlign = yf(this._model.y);
				}
			} else if (rf(this._model.x)) {
				this._model.xAlign = 'right';

				// Is tooltip too wide and goes outside left edge of canvas?
				if (orf(this._model.x)) {
					this._model.xAlign = 'center';
					this._model.yAlign = yf(this._model.y);
				}
			}
		},
		getBackgroundPoint: function getBackgroundPoint(vm, size) {
			// Background Position
			var pt = {
				x: vm.x,
				y: vm.y
			};

			if (vm.xAlign === 'right') {
				pt.x -= size.width;
			} else if (vm.xAlign === 'center') {
				pt.x -= (size.width / 2);
			}

			if (vm.yAlign === 'top') {
				pt.y += vm.caretPadding + vm.caretSize;
			} else if (vm.yAlign === 'bottom') {
				pt.y -= size.height + vm.caretPadding + vm.caretSize;
			} else {
				pt.y -= (size.height / 2);
			}

			if (vm.yAlign === 'center') {
				if (vm.xAlign === 'left') {
					pt.x += vm.caretPadding + vm.caretSize;
				} else if (vm.xAlign === 'right') {
					pt.x -= vm.caretPadding + vm.caretSize;
				}
			} else {
				if (vm.xAlign === 'left') {
					pt.x -= vm.cornerRadius + vm.caretPadding;
				} else if (vm.xAlign === 'right') {
					pt.x += vm.cornerRadius + vm.caretPadding;
				}
			}

			return pt;
		},
		drawCaret: function drawCaret(tooltipPoint, size, opacity, caretPadding) {
			var vm = this._view;
			var ctx = this._chart.ctx;
			var x1, x2, x3;
			var y1, y2, y3;

			if (vm.yAlign === 'center') {
				// Left or right side
				if (vm.xAlign === 'left') {
					x1 = tooltipPoint.x;
					x2 = x1 - vm.caretSize;
					x3 = x1;
				} else {
					x1 = tooltipPoint.x + size.width;
					x2 = x1 + vm.caretSize;
					x3 = x1;
				}

				y2 = tooltipPoint.y + (size.height / 2);
				y1 = y2 - vm.caretSize;
				y3 = y2 + vm.caretSize;
			} else {
				if (vm.xAlign === 'left') {
					x1 = tooltipPoint.x + vm.cornerRadius;
					x2 = x1 + vm.caretSize;
					x3 = x2 + vm.caretSize;
				} else if (vm.xAlign === 'right') {
					x1 = tooltipPoint.x + size.width - vm.cornerRadius;
					x2 = x1 - vm.caretSize;
					x3 = x2 - vm.caretSize;
				} else {
					x2 = tooltipPoint.x + (size.width / 2);
					x1 = x2 - vm.caretSize;
					x3 = x2 + vm.caretSize;
				}

				if (vm.yAlign === 'top') {
					y1 = tooltipPoint.y;
					y2 = y1 - vm.caretSize;
					y3 = y1;
				} else {
					y1 = tooltipPoint.y + size.height;
					y2 = y1 + vm.caretSize;
					y3 = y1;
				}
			}

			var bgColor = helpers.color(vm.backgroundColor);
			ctx.fillStyle = bgColor.alpha(opacity * bgColor.alpha()).rgbString();
			ctx.beginPath();
			ctx.moveTo(x1, y1);
			ctx.lineTo(x2, y2);
			ctx.lineTo(x3, y3);
			ctx.closePath();
			ctx.fill();
		},
		drawTitle: function drawTitle(pt, vm, ctx, opacity) {
			if (vm.title.length) {
				ctx.textAlign = vm._titleAlign;
				ctx.textBaseline = "top";

				var titleColor = helpers.color(vm.titleColor);
				ctx.fillStyle = titleColor.alpha(opacity * titleColor.alpha()).rgbString();
				ctx.font = helpers.fontString(vm.titleFontSize, vm._titleFontStyle, vm._titleFontFamily);

				helpers.each(vm.title, function(title, i) {
					ctx.fillText(title, pt.x, pt.y);
					pt.y += vm.titleFontSize + vm.titleSpacing; // Line Height and spacing

					if (i + 1 === vm.title.length) {
						pt.y += vm.titleMarginBottom - vm.titleSpacing; // If Last, add margin, remove spacing
					}
				});
			}
		},
		drawBody: function drawBody(pt, vm, ctx, opacity) {
			ctx.textAlign = vm._bodyAlign;
			ctx.textBaseline = "top";

			var bodyColor = helpers.color(vm.bodyColor);
			ctx.fillStyle = bodyColor.alpha(opacity * bodyColor.alpha()).rgbString();
			ctx.font = helpers.fontString(vm.bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);

			// Before Body
			helpers.each(vm.beforeBody, function(beforeBody) {
				ctx.fillText(beforeBody, pt.x, pt.y);
				pt.y += vm.bodyFontSize + vm.bodySpacing;
			});

			helpers.each(vm.body, function(body, i) {
				// Draw Legend-like boxes if needed
				if (this._options.tooltips.mode !== 'single') {
					// Fill a white rect so that colours merge nicely if the opacity is < 1
					ctx.fillStyle = helpers.color(vm.legendColorBackground).alpha(opacity).rgbaString();
					ctx.fillRect(pt.x, pt.y, vm.bodyFontSize, vm.bodyFontSize);

					// Border
					ctx.strokeStyle = helpers.color(vm.labelColors[i].borderColor).alpha(opacity).rgbaString();
					ctx.strokeRect(pt.x, pt.y, vm.bodyFontSize, vm.bodyFontSize);

					// Inner square
					ctx.fillStyle = helpers.color(vm.labelColors[i].backgroundColor).alpha(opacity).rgbaString();
					ctx.fillRect(pt.x + 1, pt.y + 1, vm.bodyFontSize - 2, vm.bodyFontSize - 2);

					ctx.fillStyle = helpers.color(vm.bodyColor).alpha(opacity).rgbaString(); // Return fill style for text
				}

				// Body Line
				ctx.fillText(body, pt.x + (this._options.tooltips.mode !== 'single' ? (vm.bodyFontSize + 2) : 0), pt.y);

				pt.y += vm.bodyFontSize + vm.bodySpacing;
			}, this);

			// After Body
			helpers.each(vm.afterBody, function(afterBody) {
				ctx.fillText(afterBody, pt.x, pt.y);
				pt.y += vm.bodyFontSize;
			});

			pt.y -= vm.bodySpacing; // Remove last body spacing
		},
		drawFooter: function drawFooter(pt, vm, ctx, opacity) {
			if (vm.footer.length) {
				pt.y += vm.footerMarginTop;

				ctx.textAlign = vm._footerAlign;
				ctx.textBaseline = "top";

				var footerColor = helpers.color(vm.footerColor);
				ctx.fillStyle = footerColor.alpha(opacity * footerColor.alpha()).rgbString();
				ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);

				helpers.each(vm.footer, function(footer) {
					ctx.fillText(footer, pt.x, pt.y);
					pt.y += vm.footerFontSize + vm.footerSpacing;
				});
			}
		},
		draw: function draw() {
			var ctx = this._chart.ctx;
			var vm = this._view;

			if (vm.opacity === 0) {
				return;
			}

			var caretPadding = vm.caretPadding;
			var tooltipSize = this.getTooltipSize(vm);
			var pt = {
				x: vm.x,
				y: vm.y
			};

			// IE11/Edge does not like very small opacities, so snap to 0
			var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;

			if (this._options.tooltips.enabled) {
				// Draw Background
				var bgColor = helpers.color(vm.backgroundColor);
				ctx.fillStyle = bgColor.alpha(opacity * bgColor.alpha()).rgbString();
				helpers.drawRoundedRectangle(ctx, pt.x, pt.y, tooltipSize.width, tooltipSize.height, vm.cornerRadius);
				ctx.fill();

				// Draw Caret
				this.drawCaret(pt, tooltipSize, opacity, caretPadding);

				// Draw Title, Body, and Footer
				pt.x += vm.xPadding;
				pt.y += vm.yPadding;

				// Titles
				this.drawTitle(pt, vm, ctx, opacity);

				// Body
				this.drawBody(pt, vm, ctx, opacity);

				// Footer
				this.drawFooter(pt, vm, ctx, opacity);
			}
		}
	});
};


/***/ }),

/***/ "./node_modules/Chart.js/src/elements/element.arc.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart, moment) {

  var helpers = Chart.helpers,
    globalOpts = Chart.defaults.global;

  globalOpts.elements.arc = {
    backgroundColor: globalOpts.defaultColor,
    borderColor: "#fff",
    borderWidth: 2
  };

  Chart.elements.Arc = Chart.Element.extend({
    inLabelRange: function(mouseX) {
      var vm = this._view;

      if (vm) {
        return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
      } else {
        return false;
      }
    },
    inRange: function(chartX, chartY) {
      var vm = this._view;

      if (vm) {
        var pointRelativePosition = helpers.getAngleFromPoint(vm, {
            x: chartX,
            y: chartY
          }),
          angle = pointRelativePosition.angle,
          distance = pointRelativePosition.distance;

        //Sanitise angle range
        var startAngle = vm.startAngle;
        var endAngle = vm.endAngle;
        while (endAngle < startAngle) {
          endAngle += 2.0 * Math.PI;
        }
        while (angle > endAngle) {
          angle -= 2.0 * Math.PI;
        }
        while (angle < startAngle) {
          angle += 2.0 * Math.PI;
        }

        //Check if within the range of the open/close angle
        var betweenAngles = (angle >= startAngle && angle <= endAngle),
          withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);

        return (betweenAngles && withinRadius);
      } else {
        return false;
      }
    },
    tooltipPosition: function() {
      var vm = this._view;

      var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2),
        rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
      return {
        x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
        y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
      };
    },
    draw: function() {

      var ctx = this._chart.ctx,
        vm = this._view,
        sA = vm.startAngle,
        eA = vm.endAngle;

      ctx.beginPath();

      ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
      ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);

      ctx.closePath();
      ctx.strokeStyle = vm.borderColor;
      ctx.lineWidth = vm.borderWidth;

      ctx.fillStyle = vm.backgroundColor;

      ctx.fill();
      ctx.lineJoin = 'bevel';

      if (vm.borderWidth) {
        ctx.stroke();
      }
    }
  });
};


/***/ }),

/***/ "./node_modules/Chart.js/src/elements/element.line.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	Chart.defaults.global.elements.line = {
		tension: 0.4,
		backgroundColor: Chart.defaults.global.defaultColor,
		borderWidth: 3,
		borderColor: Chart.defaults.global.defaultColor,
		borderCapStyle: 'butt',
		borderDash: [],
		borderDashOffset: 0.0,
		borderJoinStyle: 'miter',
		fill: true // do we fill in the area between the line and its base axis
	};

	Chart.elements.Line = Chart.Element.extend({
		lineToNextPoint: function(previousPoint, point, nextPoint, skipHandler, previousSkipHandler) {
			var ctx = this._chart.ctx;

			if (point._view.skip) {
				skipHandler.call(this, previousPoint, point, nextPoint);
			} else if (previousPoint._view.skip) {
				previousSkipHandler.call(this, previousPoint, point, nextPoint);
			} else if (point._view.tension === 0) {
				ctx.lineTo(point._view.x, point._view.y);
			} else {
				// Line between points
				ctx.bezierCurveTo(
					previousPoint._view.controlPointNextX,
					previousPoint._view.controlPointNextY,
					point._view.controlPointPreviousX,
					point._view.controlPointPreviousY,
					point._view.x,
					point._view.y
				);
			}
		},

		draw: function() {
			var _this = this;

			var vm = this._view;
			var ctx = this._chart.ctx;
			var first = this._children[0];
			var last = this._children[this._children.length - 1];

			function loopBackToStart(drawLineToCenter) {
				if (!first._view.skip && !last._view.skip) {
					// Draw a bezier line from last to first
					ctx.bezierCurveTo(
						last._view.controlPointNextX,
						last._view.controlPointNextY,
						first._view.controlPointPreviousX,
						first._view.controlPointPreviousY,
						first._view.x,
						first._view.y
					);
				} else if (drawLineToCenter) {
					// Go to center
					ctx.lineTo(_this._view.scaleZero.x, _this._view.scaleZero.y);
				}
			}

			ctx.save();

			// If we had points and want to fill this line, do so.
			if (this._children.length > 0 && vm.fill) {
				// Draw the background first (so the border is always on top)
				ctx.beginPath();

				helpers.each(this._children, function(point, index) {
					var previous = helpers.previousItem(this._children, index);
					var next = helpers.nextItem(this._children, index);

					// First point moves to it's starting position no matter what
					if (index === 0) {
						if (this._loop) {
							ctx.moveTo(vm.scaleZero.x, vm.scaleZero.y);
						} else {
							ctx.moveTo(point._view.x, vm.scaleZero);
						}

						if (point._view.skip) {
							if (!this._loop) {
								ctx.moveTo(next._view.x, this._view.scaleZero);
							}
						} else {
							ctx.lineTo(point._view.x, point._view.y);
						}
					} else {
						this.lineToNextPoint(previous, point, next, function(previousPoint, point, nextPoint) {
							if (this._loop) {
								// Go to center
								ctx.lineTo(this._view.scaleZero.x, this._view.scaleZero.y);
							} else {
								ctx.lineTo(previousPoint._view.x, this._view.scaleZero);
								ctx.moveTo(nextPoint._view.x, this._view.scaleZero);
							}
						}, function(previousPoint, point) {
							// If we skipped the last point, draw a line to ourselves so that the fill is nice
							ctx.lineTo(point._view.x, point._view.y);
						});
					}
				}, this);

				// For radial scales, loop back around to the first point
				if (this._loop) {
					loopBackToStart(true);
				} else {
					//Round off the line by going to the base of the chart, back to the start, then fill.
					ctx.lineTo(this._children[this._children.length - 1]._view.x, vm.scaleZero);
					ctx.lineTo(this._children[0]._view.x, vm.scaleZero);
				}

				ctx.fillStyle = vm.backgroundColor || Chart.defaults.global.defaultColor;
				ctx.closePath();
				ctx.fill();
			}

			// Now draw the line between all the points with any borders
			ctx.lineCap = vm.borderCapStyle || Chart.defaults.global.elements.line.borderCapStyle;

			// IE 9 and 10 do not support line dash
			if (ctx.setLineDash) {
				ctx.setLineDash(vm.borderDash || Chart.defaults.global.elements.line.borderDash);
			}

			ctx.lineDashOffset = vm.borderDashOffset || Chart.defaults.global.elements.line.borderDashOffset;
			ctx.lineJoin = vm.borderJoinStyle || Chart.defaults.global.elements.line.borderJoinStyle;
			ctx.lineWidth = vm.borderWidth || Chart.defaults.global.elements.line.borderWidth;
			ctx.strokeStyle = vm.borderColor || Chart.defaults.global.defaultColor;
			ctx.beginPath();

			helpers.each(this._children, function(point, index) {
				var previous = helpers.previousItem(this._children, index);
				var next = helpers.nextItem(this._children, index);

				if (index === 0) {
					ctx.moveTo(point._view.x, point._view.y);
				} else {
					this.lineToNextPoint(previous, point, next, function(previousPoint, point, nextPoint) {
						ctx.moveTo(nextPoint._view.x, nextPoint._view.y);
					}, function(previousPoint, point) {
						// If we skipped the last point, move up to our point preventing a line from being drawn
						ctx.moveTo(point._view.x, point._view.y);
					});
				}
			}, this);

			if (this._loop && this._children.length > 0) {
				loopBackToStart();
			}

			ctx.stroke();
			ctx.restore();
		}
	});
};

/***/ }),

/***/ "./node_modules/Chart.js/src/elements/element.point.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers,
		globalOpts = Chart.defaults.global;

	globalOpts.elements.point = {
		radius: 3,
		pointStyle: 'circle',
		backgroundColor: globalOpts.defaultColor,
		borderWidth: 1,
		borderColor: globalOpts.defaultColor,
		// Hover
		hitRadius: 1,
		hoverRadius: 4,
		hoverBorderWidth: 1
	};


	Chart.elements.Point = Chart.Element.extend({
		inRange: function(mouseX, mouseY) {
			var vm = this._view;
			return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
		},
		inLabelRange: function(mouseX) {
			var vm = this._view;
			return vm ? (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hitRadius, 2)) : false; 
		},
		tooltipPosition: function() {
			var vm = this._view;
			return {
				x: vm.x,
				y: vm.y,
				padding: vm.radius + vm.borderWidth
			};
		},
		draw: function() {
			var vm = this._view,
				x = vm.x,
				y = vm.y;
			var ctx = this._chart.ctx;

			if (vm.skip) {
				return;
			}

			var pointStyle = vm.pointStyle;
			if (typeof pointStyle === 'object' && ((pointStyle.toString() === '[object HTMLImageElement]') || (pointStyle.toString() === '[object HTMLCanvasElement]'))) {
				ctx.drawImage(pointStyle, x - pointStyle.width / 2, y - pointStyle.height / 2);
				return;
			}

			if (!isNaN(vm.radius) && vm.radius > 0) {

				ctx.strokeStyle = vm.borderColor || Chart.defaults.global.defaultColor;
				ctx.lineWidth = helpers.getValueOrDefault(vm.borderWidth, Chart.defaults.global.elements.point.borderWidth);

				ctx.fillStyle = vm.backgroundColor || Chart.defaults.global.defaultColor;

				var radius = vm.radius;

				var xOffset,
					yOffset;

				switch (pointStyle) {
					// Default includes circle
					default: 
						ctx.beginPath();
						ctx.arc(x, y, radius, 0, Math.PI * 2);
						ctx.closePath();
						ctx.fill();
						break;
					case 'triangle':
						ctx.beginPath();
						var edgeLength = 3 * radius / Math.sqrt(3);
						var height = edgeLength * Math.sqrt(3) / 2;
						ctx.moveTo(x - edgeLength / 2, y + height / 3);
						ctx.lineTo(x + edgeLength / 2, y + height / 3);
						ctx.lineTo(x, y - 2 * height / 3);
						ctx.closePath();
						ctx.fill();
						break;
					case 'rect':
						ctx.fillRect(x - 1 / Math.SQRT2 * radius, y - 1 / Math.SQRT2 * radius, 2 / Math.SQRT2 * radius, 2 / Math.SQRT2 * radius);
						ctx.strokeRect(x - 1 / Math.SQRT2 * radius, y - 1 / Math.SQRT2 * radius, 2 / Math.SQRT2 * radius, 2 / Math.SQRT2 * radius);
						break;
					case 'rectRot':
						ctx.translate(x, y);
						ctx.rotate(Math.PI / 4);
						ctx.fillRect(-1 / Math.SQRT2 * radius, -1 / Math.SQRT2 * radius, 2 / Math.SQRT2 * radius, 2 / Math.SQRT2 * radius);
						ctx.strokeRect(-1 / Math.SQRT2 * radius, -1 / Math.SQRT2 * radius, 2 / Math.SQRT2 * radius, 2 / Math.SQRT2 * radius);
						ctx.setTransform(1, 0, 0, 1, 0, 0);
						break;
					case 'cross':
						ctx.beginPath();
						ctx.moveTo(x, y + radius);
						ctx.lineTo(x, y - radius);
						ctx.moveTo(x - radius, y);
						ctx.lineTo(x + radius, y);
						ctx.closePath();
						break;
					case 'crossRot':
						ctx.beginPath();
						xOffset = Math.cos(Math.PI / 4) * radius;
						yOffset = Math.sin(Math.PI / 4) * radius;
						ctx.moveTo(x - xOffset, y - yOffset);
						ctx.lineTo(x + xOffset, y + yOffset);
						ctx.moveTo(x - xOffset, y + yOffset);
						ctx.lineTo(x + xOffset, y - yOffset);
						ctx.closePath();
						break;
					case 'star':
						ctx.beginPath();
						ctx.moveTo(x, y + radius);
						ctx.lineTo(x, y - radius);
						ctx.moveTo(x - radius, y);
						ctx.lineTo(x + radius, y);
						xOffset = Math.cos(Math.PI / 4) * radius;
						yOffset = Math.sin(Math.PI / 4) * radius;
						ctx.moveTo(x - xOffset, y - yOffset);
						ctx.lineTo(x + xOffset, y + yOffset);
						ctx.moveTo(x - xOffset, y + yOffset);
						ctx.lineTo(x + xOffset, y - yOffset);
						ctx.closePath();
						break;
					case 'line':
						ctx.beginPath();
						ctx.moveTo(x - radius, y);
						ctx.lineTo(x + radius, y);
						ctx.closePath();
						break;
					case 'dash':
						ctx.beginPath();
						ctx.moveTo(x, y);
						ctx.lineTo(x + radius, y);
						ctx.closePath();
						break;
				}

				ctx.stroke();
			}
		}
	});
};

/***/ }),

/***/ "./node_modules/Chart.js/src/elements/element.rectangle.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers,
		globalOpts = Chart.defaults.global;

	globalOpts.elements.rectangle = {
		backgroundColor: globalOpts.defaultColor,
		borderWidth: 0,
		borderColor: globalOpts.defaultColor,
		borderSkipped: 'bottom'
	};

	Chart.elements.Rectangle = Chart.Element.extend({
		draw: function() {
			var ctx = this._chart.ctx;
			var vm = this._view;

			var halfWidth = vm.width / 2,
				leftX = vm.x - halfWidth,
				rightX = vm.x + halfWidth,
				top = vm.base - (vm.base - vm.y),
				halfStroke = vm.borderWidth / 2;

			// Canvas doesn't allow us to stroke inside the width so we can
			// adjust the sizes to fit if we're setting a stroke on the line
			if (vm.borderWidth) {
				leftX += halfStroke;
				rightX -= halfStroke;
				top += halfStroke;
			}

			ctx.beginPath();
			ctx.fillStyle = vm.backgroundColor;
			ctx.strokeStyle = vm.borderColor;
			ctx.lineWidth = vm.borderWidth;

			// Corner points, from bottom-left to bottom-right clockwise
			// | 1 2 |
			// | 0 3 |
			var corners = [
				[leftX, vm.base],
				[leftX, top],
				[rightX, top],
				[rightX, vm.base]
			];

			// Find first (starting) corner with fallback to 'bottom' 
			var borders = ['bottom', 'left', 'top', 'right'];
			var startCorner = borders.indexOf(vm.borderSkipped, 0);
			if (startCorner === -1)
				startCorner = 0;

			function cornerAt(index) {
				return corners[(startCorner + index) % 4];
			}

			// Draw rectangle from 'startCorner'
			ctx.moveTo.apply(ctx, cornerAt(0));
			for (var i = 1; i < 4; i++)
				ctx.lineTo.apply(ctx, cornerAt(i));

			ctx.fill();
			if (vm.borderWidth) {
				ctx.stroke();
			}
		},
		height: function() {
			var vm = this._view;
			return vm.base - vm.y;
		},
		inRange: function(mouseX, mouseY) {
			var vm = this._view;
			return vm ? 
					(vm.y < vm.base ? 
						(mouseX >= vm.x - vm.width / 2 && mouseX <= vm.x + vm.width / 2) && (mouseY >= vm.y && mouseY <= vm.base) :
						(mouseX >= vm.x - vm.width / 2 && mouseX <= vm.x + vm.width / 2) && (mouseY >= vm.base && mouseY <= vm.y)) :
					false;
		},
		inLabelRange: function(mouseX) {
			var vm = this._view;
			return vm ? (mouseX >= vm.x - vm.width / 2 && mouseX <= vm.x + vm.width / 2) : false;
		},
		tooltipPosition: function() {
			var vm = this._view;
			return {
				x: vm.x,
				y: vm.y
			};
		}
	});

};

/***/ }),

/***/ "./node_modules/Chart.js/src/scales/scale.category.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;
	// Default config for a category scale
	var defaultConfig = {
		position: "bottom"
	};

	var DatasetScale = Chart.Scale.extend({
		// Implement this so that 
		determineDataLimits: function() {
			this.minIndex = 0;
			this.maxIndex = this.chart.data.labels.length - 1;
			var findIndex;

			if (this.options.ticks.min !== undefined) {
				// user specified min value
				findIndex = helpers.indexOf(this.chart.data.labels, this.options.ticks.min);
				this.minIndex = findIndex !== -1 ? findIndex : this.minIndex;
			}

			if (this.options.ticks.max !== undefined) {
				// user specified max value
				findIndex = helpers.indexOf(this.chart.data.labels, this.options.ticks.max);
				this.maxIndex = findIndex !== -1 ? findIndex : this.maxIndex;
			}

			this.min = this.chart.data.labels[this.minIndex];
			this.max = this.chart.data.labels[this.maxIndex];
		},

		buildTicks: function(index) {
			// If we are viewing some subset of labels, slice the original array
			this.ticks = (this.minIndex === 0 && this.maxIndex === this.chart.data.labels.length - 1) ? this.chart.data.labels : this.chart.data.labels.slice(this.minIndex, this.maxIndex + 1);
		},

		getLabelForIndex: function(index, datasetIndex) {
			return this.ticks[index];
		},

		// Used to get data value locations.  Value can either be an index or a numerical value
		getPixelForValue: function(value, index, datasetIndex, includeOffset) {
			// 1 is added because we need the length but we have the indexes
			var offsetAmt = Math.max((this.maxIndex + 1 - this.minIndex - ((this.options.gridLines.offsetGridLines) ? 0 : 1)), 1);

			if (this.isHorizontal()) {
				var innerWidth = this.width - (this.paddingLeft + this.paddingRight);
				var valueWidth = innerWidth / offsetAmt;
				var widthOffset = (valueWidth * (index - this.minIndex)) + this.paddingLeft;

				if (this.options.gridLines.offsetGridLines && includeOffset) {
					widthOffset += (valueWidth / 2);
				}

				return this.left + Math.round(widthOffset);
			} else {
				var innerHeight = this.height - (this.paddingTop + this.paddingBottom);
				var valueHeight = innerHeight / offsetAmt;
				var heightOffset = (valueHeight * (index - this.minIndex)) + this.paddingTop;

				if (this.options.gridLines.offsetGridLines && includeOffset) {
					heightOffset += (valueHeight / 2);
				}

				return this.top + Math.round(heightOffset);
			}
		},
		getPixelForTick: function(index, includeOffset) {
			return this.getPixelForValue(this.ticks[index], index + this.minIndex, null, includeOffset);
		},
		getValueForPixel: function(pixel) {
			var value
;			var offsetAmt = Math.max((this.ticks.length - ((this.options.gridLines.offsetGridLines) ? 0 : 1)), 1);
			var horz = this.isHorizontal();
			var innerDimension = horz ? this.width - (this.paddingLeft + this.paddingRight) : this.height - (this.paddingTop + this.paddingBottom);
			var valueDimension = innerDimension / offsetAmt;

			if (this.options.gridLines.offsetGridLines) {
				pixel -= (valueDimension / 2);
			}
			pixel -= horz ? this.paddingLeft : this.paddingTop;

			if (pixel <= 0) {
				value = 0;
			} else {
				value = Math.round(pixel / valueDimension);
			}

			return value;
		}
	});

	Chart.scaleService.registerScaleType("category", DatasetScale, defaultConfig);

};

/***/ }),

/***/ "./node_modules/Chart.js/src/scales/scale.linear.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	var defaultConfig = {
		position: "left",
		ticks: {
			callback: function(tickValue, index, ticks) {
				// If we have lots of ticks, don't use the ones
				var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];

				// If we have a number like 2.5 as the delta, figure out how many decimal places we need
				if (Math.abs(delta) > 1) {
					if (tickValue !== Math.floor(tickValue)) {
						// not an integer
						delta = tickValue - Math.floor(tickValue);
					}
				}

				var logDelta = helpers.log10(Math.abs(delta));
				var tickString = '';

				if (tickValue !== 0) {
					var numDecimal = -1 * Math.floor(logDelta);
					numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
					tickString = tickValue.toFixed(numDecimal);
				} else {
					tickString = '0'; // never show decimal places for 0
				}

				return tickString;
			}
		}
	};

	var LinearScale = Chart.Scale.extend({
		determineDataLimits: function() {
			// First Calculate the range
			this.min = null;
			this.max = null;

			if (this.options.stacked) {
				var valuesPerType = {};
				var hasPositiveValues = false;
				var hasNegativeValues = false;

				helpers.each(this.chart.data.datasets, function(dataset, datasetIndex) {
					var meta = this.chart.getDatasetMeta(datasetIndex);
					if (valuesPerType[meta.type] === undefined) {
						valuesPerType[meta.type] = {
							positiveValues: [],
							negativeValues: []
						};
					}

					// Store these per type
					var positiveValues = valuesPerType[meta.type].positiveValues;
					var negativeValues = valuesPerType[meta.type].negativeValues;

					if (this.chart.isDatasetVisible(datasetIndex) && (this.isHorizontal() ? meta.xAxisID === this.id : meta.yAxisID === this.id)) {
						helpers.each(dataset.data, function(rawValue, index) {
							var value = +this.getRightValue(rawValue);
							if (isNaN(value) || meta.data[index].hidden) {
								return;
							}

							positiveValues[index] = positiveValues[index] || 0;
							negativeValues[index] = negativeValues[index] || 0;

							if (this.options.relativePoints) {
								positiveValues[index] = 100;
							} else {
								if (value < 0) {
									hasNegativeValues = true;
									negativeValues[index] += value;
								} else {
									hasPositiveValues = true;
									positiveValues[index] += value;
								}
							}
						}, this);
					}
				}, this);

				helpers.each(valuesPerType, function(valuesForType) {
					var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
					var minVal = helpers.min(values);
					var maxVal = helpers.max(values);
					this.min = this.min === null ? minVal : Math.min(this.min, minVal);
					this.max = this.max === null ? maxVal : Math.max(this.max, maxVal);
				}, this);

			} else {
				helpers.each(this.chart.data.datasets, function(dataset, datasetIndex) {
					var meta = this.chart.getDatasetMeta(datasetIndex);
					if (this.chart.isDatasetVisible(datasetIndex) && (this.isHorizontal() ? meta.xAxisID === this.id : meta.yAxisID === this.id)) {
						helpers.each(dataset.data, function(rawValue, index) {
							var value = +this.getRightValue(rawValue);
							if (isNaN(value) || meta.data[index].hidden) {
								return;
							}

							if (this.min === null) {
								this.min = value;
							} else if (value < this.min) {
								this.min = value;
							}

							if (this.max === null) {
								this.max = value;
							} else if (value > this.max) {
								this.max = value;
							}
						}, this);
					}
				}, this);
			}

			// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
			// do nothing since that would make the chart weird. If the user really wants a weird chart
			// axis, they can manually override it
			if (this.options.ticks.beginAtZero) {
				var minSign = helpers.sign(this.min);
				var maxSign = helpers.sign(this.max);

				if (minSign < 0 && maxSign < 0) {
					// move the top up to 0
					this.max = 0;
				} else if (minSign > 0 && maxSign > 0) {
					// move the botttom down to 0
					this.min = 0;
				}
			}

			if (this.options.ticks.min !== undefined) {
				this.min = this.options.ticks.min;
			} else if (this.options.ticks.suggestedMin !== undefined) {
				this.min = Math.min(this.min, this.options.ticks.suggestedMin);
			}

			if (this.options.ticks.max !== undefined) {
				this.max = this.options.ticks.max;
			} else if (this.options.ticks.suggestedMax !== undefined) {
				this.max = Math.max(this.max, this.options.ticks.suggestedMax);
			}

			if (this.min === this.max) {
				this.max++;

				if (!this.options.ticks.beginAtZero) {
					this.min--;
				}
			}
		},
		buildTicks: function() {

			// Then calulate the ticks
			this.ticks = [];

			// Figure out what the max number of ticks we can support it is based on the size of
			// the axis area. For now, we say that the minimum tick spacing in pixels must be 50
			// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
			// the graph

			var maxTicks;

			if (this.isHorizontal()) {
				maxTicks = Math.min(this.options.ticks.maxTicksLimit ? this.options.ticks.maxTicksLimit : 11, Math.ceil(this.width / 50));
			} else {
				// The factor of 2 used to scale the font size has been experimentally determined.
				var tickFontSize = helpers.getValueOrDefault(this.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
				maxTicks = Math.min(this.options.ticks.maxTicksLimit ? this.options.ticks.maxTicksLimit : 11, Math.ceil(this.height / (2 * tickFontSize)));
			}

			// Make sure we always have at least 2 ticks
			maxTicks = Math.max(2, maxTicks);

			// To get a "nice" value for the tick spacing, we will use the appropriately named
			// "nice number" algorithm. See http://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
			// for details.

			var spacing;
			var fixedStepSizeSet = (this.options.ticks.fixedStepSize && this.options.ticks.fixedStepSize > 0) || (this.options.ticks.stepSize && this.options.ticks.stepSize > 0);
			if (fixedStepSizeSet) {
				spacing = helpers.getValueOrDefault(this.options.ticks.fixedStepSize, this.options.ticks.stepSize);
			} else {
				var niceRange = helpers.niceNum(this.max - this.min, false);
				spacing = helpers.niceNum(niceRange / (maxTicks - 1), true);
			}
			var niceMin = Math.floor(this.min / spacing) * spacing;
			var niceMax = Math.ceil(this.max / spacing) * spacing;
			var numSpaces = (niceMax - niceMin) / spacing;

			// If very close to our rounded value, use it.
			if (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
				numSpaces = Math.round(numSpaces);
			} else {
				numSpaces = Math.ceil(numSpaces);
			}

			// Put the values into the ticks array
			this.ticks.push(this.options.ticks.min !== undefined ? this.options.ticks.min : niceMin);
			for (var j = 1; j < numSpaces; ++j) {
				this.ticks.push(niceMin + (j * spacing));
			}
			this.ticks.push(this.options.ticks.max !== undefined ? this.options.ticks.max : niceMax);

			if (this.options.position === "left" || this.options.position === "right") {
				// We are in a vertical orientation. The top value is the highest. So reverse the array
				this.ticks.reverse();
			}

			// At this point, we need to update our max and min given the tick values since we have expanded the
			// range of the scale
			this.max = helpers.max(this.ticks);
			this.min = helpers.min(this.ticks);

			if (this.options.ticks.reverse) {
				this.ticks.reverse();

				this.start = this.max;
				this.end = this.min;
			} else {
				this.start = this.min;
				this.end = this.max;
			}
		},
		getLabelForIndex: function(index, datasetIndex) {
			return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
		},
		convertTicksToLabels: function() {
			this.ticksAsNumbers = this.ticks.slice();
			this.zeroLineIndex = this.ticks.indexOf(0);

			Chart.Scale.prototype.convertTicksToLabels.call(this);
		},
		// Utils
		getPixelForValue: function(value, index, datasetIndex, includeOffset) {
			// This must be called after fit has been run so that
			//      this.left, this.top, this.right, and this.bottom have been defined
			var rightValue = +this.getRightValue(value);
			var pixel;
			var range = this.end - this.start;

			if (this.isHorizontal()) {
				var innerWidth = this.width - (this.paddingLeft + this.paddingRight);
				pixel = this.left + (innerWidth / range * (rightValue - this.start));
				return Math.round(pixel + this.paddingLeft);
			} else {
				var innerHeight = this.height - (this.paddingTop + this.paddingBottom);
				pixel = (this.bottom - this.paddingBottom) - (innerHeight / range * (rightValue - this.start));
				return Math.round(pixel);
			}
		},
		getValueForPixel: function(pixel) {
			var offset;

			if (this.isHorizontal()) {
				var innerWidth = this.width - (this.paddingLeft + this.paddingRight);
				offset = (pixel - this.left - this.paddingLeft) / innerWidth;
			} else {
				var innerHeight = this.height - (this.paddingTop + this.paddingBottom);
				offset = (this.bottom - this.paddingBottom - pixel) / innerHeight;
			}

			return this.start + ((this.end - this.start) * offset);
		},
		getPixelForTick: function(index, includeOffset) {
			return this.getPixelForValue(this.ticksAsNumbers[index], null, null, includeOffset);
		}
	});
	Chart.scaleService.registerScaleType("linear", LinearScale, defaultConfig);

};

/***/ }),

/***/ "./node_modules/Chart.js/src/scales/scale.logarithmic.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	var defaultConfig = {
		position: "left",

		// label settings
		ticks: {
			callback: function(value, index, arr) {
				var remain = value / (Math.pow(10, Math.floor(Chart.helpers.log10(value))));

				if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === arr.length - 1) {
					return value.toExponential();
				} else {
					return '';
				}
			}
		}
	};

	var LogarithmicScale = Chart.Scale.extend({
		determineDataLimits: function() {
			// Calculate Range
			this.min = null;
			this.max = null;

			if (this.options.stacked) {
				var valuesPerType = {};

				helpers.each(this.chart.data.datasets, function(dataset, datasetIndex) {
					var meta = this.chart.getDatasetMeta(datasetIndex);
					if (this.chart.isDatasetVisible(datasetIndex) && (this.isHorizontal() ? meta.xAxisID === this.id : meta.yAxisID === this.id)) {
						if (valuesPerType[meta.type] === undefined) {
							valuesPerType[meta.type] = [];
						}

						helpers.each(dataset.data, function(rawValue, index) {
							var values = valuesPerType[meta.type];
							var value = +this.getRightValue(rawValue);
							if (isNaN(value) || meta.data[index].hidden) {
								return;
							}

							values[index] = values[index] || 0;

							if (this.options.relativePoints) {
								values[index] = 100;
							} else {
								// Don't need to split positive and negative since the log scale can't handle a 0 crossing
								values[index] += value;
							}
						}, this);
					}
				}, this);

				helpers.each(valuesPerType, function(valuesForType) {
					var minVal = helpers.min(valuesForType);
					var maxVal = helpers.max(valuesForType);
					this.min = this.min === null ? minVal : Math.min(this.min, minVal);
					this.max = this.max === null ? maxVal : Math.max(this.max, maxVal);
				}, this);

			} else {
				helpers.each(this.chart.data.datasets, function(dataset, datasetIndex) {
					var meta = this.chart.getDatasetMeta(datasetIndex);
					if (this.chart.isDatasetVisible(datasetIndex) && (this.isHorizontal() ? meta.xAxisID === this.id : meta.yAxisID === this.id)) {
						helpers.each(dataset.data, function(rawValue, index) {
							var value = +this.getRightValue(rawValue);
							if (isNaN(value) || meta.data[index].hidden) {
								return;
							}

							if (this.min === null) {
								this.min = value;
							} else if (value < this.min) {
								this.min = value;
							}

							if (this.max === null) {
								this.max = value;
							} else if (value > this.max) {
								this.max = value;
							}
						}, this);
					}
				}, this);
			}

			this.min = this.options.ticks.min !== undefined ? this.options.ticks.min : this.min;
			this.max = this.options.ticks.max !== undefined ? this.options.ticks.max : this.max;

			if (this.min === this.max) {
				if (this.min !== 0 && this.min !== null) {
					this.min = Math.pow(10, Math.floor(helpers.log10(this.min)) - 1);
					this.max = Math.pow(10, Math.floor(helpers.log10(this.max)) + 1);
				} else {
					this.min = 1;
					this.max = 10;
				}
			}
		},
		buildTicks: function() {
			// Reset the ticks array. Later on, we will draw a grid line at these positions
			// The array simply contains the numerical value of the spots where ticks will be
			this.ticks = [];

			// Figure out what the max number of ticks we can support it is based on the size of
			// the axis area. For now, we say that the minimum tick spacing in pixels must be 50
			// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
			// the graph

			var tickVal = this.options.ticks.min !== undefined ? this.options.ticks.min : Math.pow(10, Math.floor(helpers.log10(this.min)));

			while (tickVal < this.max) {
				this.ticks.push(tickVal);

				var exp = Math.floor(helpers.log10(tickVal));
				var significand = Math.floor(tickVal / Math.pow(10, exp)) + 1;

				if (significand === 10) {
					significand = 1;
					++exp;
				}

				tickVal = significand * Math.pow(10, exp);
			}

			var lastTick = this.options.ticks.max !== undefined ? this.options.ticks.max : tickVal;
			this.ticks.push(lastTick);

			if (this.options.position === "left" || this.options.position === "right") {
				// We are in a vertical orientation. The top value is the highest. So reverse the array
				this.ticks.reverse();
			}

			// At this point, we need to update our max and min given the tick values since we have expanded the
			// range of the scale
			this.max = helpers.max(this.ticks);
			this.min = helpers.min(this.ticks);

			if (this.options.ticks.reverse) {
				this.ticks.reverse();

				this.start = this.max;
				this.end = this.min;
			} else {
				this.start = this.min;
				this.end = this.max;
			}
		},
		convertTicksToLabels: function() {
			this.tickValues = this.ticks.slice();

			Chart.Scale.prototype.convertTicksToLabels.call(this);
		},
		// Get the correct tooltip label
		getLabelForIndex: function(index, datasetIndex) {
			return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
		},
		getPixelForTick: function(index, includeOffset) {
			return this.getPixelForValue(this.tickValues[index], null, null, includeOffset);
		},
		getPixelForValue: function(value, index, datasetIndex, includeOffset) {
			var pixel;

			var newVal = +this.getRightValue(value)
;			var range = helpers.log10(this.end) - helpers.log10(this.start);

			if (this.isHorizontal()) {

				if (newVal === 0) {
					pixel = this.left + this.paddingLeft;
				} else {
					var innerWidth = this.width - (this.paddingLeft + this.paddingRight);
					pixel = this.left + (innerWidth / range * (helpers.log10(newVal) - helpers.log10(this.start)));
					pixel += this.paddingLeft;
				}
			} else {
				// Bottom - top since pixels increase downard on a screen
				if (newVal === 0) {
					pixel = this.top + this.paddingTop;
				} else {
					var innerHeight = this.height - (this.paddingTop + this.paddingBottom);
					pixel = (this.bottom - this.paddingBottom) - (innerHeight / range * (helpers.log10(newVal) - helpers.log10(this.start)));
				}
			}

			return pixel;
		},
		getValueForPixel: function(pixel) {
			var offset;
			var range = helpers.log10(this.end) - helpers.log10(this.start);
			var value;

			if (this.isHorizontal()) {
				var innerWidth = this.width - (this.paddingLeft + this.paddingRight);
				value = this.start * Math.pow(10, (pixel - this.left - this.paddingLeft) * range / innerWidth);
			} else {
				var innerHeight = this.height - (this.paddingTop + this.paddingBottom);
				value = Math.pow(10, (this.bottom - this.paddingBottom - pixel) * range / innerHeight) / this.start;
			}

			return value;
		}

	});
	Chart.scaleService.registerScaleType("logarithmic", LogarithmicScale, defaultConfig);

};

/***/ }),

/***/ "./node_modules/Chart.js/src/scales/scale.radialLinear.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(Chart) {

	var helpers = Chart.helpers;

	var defaultConfig = {
		display: true,

		//Boolean - Whether to animate scaling the chart from the centre
		animate: true,
		lineArc: false,
		position: "chartArea",

		angleLines: {
			display: true,
			color: "rgba(0, 0, 0, 0.1)",
			lineWidth: 1
		},

		// label settings
		ticks: {
			//Boolean - Show a backdrop to the scale label
			showLabelBackdrop: true,

			//String - The colour of the label backdrop
			backdropColor: "rgba(255,255,255,0.75)",

			//Number - The backdrop padding above & below the label in pixels
			backdropPaddingY: 2,

			//Number - The backdrop padding to the side of the label in pixels
			backdropPaddingX: 2
		},

		pointLabels: {
			//Number - Point label font size in pixels
			fontSize: 10,

			//Function - Used to convert point labels
			callback: function(label) {
				return label;
			}
		}
	};

	var LinearRadialScale = Chart.Scale.extend({
		getValueCount: function() {
			return this.chart.data.labels.length;
		},
		setDimensions: function() {
			// Set the unconstrained dimension before label rotation
			this.width = this.maxWidth;
			this.height = this.maxHeight;
			this.xCenter = Math.round(this.width / 2);
			this.yCenter = Math.round(this.height / 2);

			var minSize = helpers.min([this.height, this.width]);
			var tickFontSize = helpers.getValueOrDefault(this.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
			this.drawingArea = (this.options.display) ? (minSize / 2) - (tickFontSize / 2 + this.options.ticks.backdropPaddingY) : (minSize / 2);
		},
		determineDataLimits: function() {
			this.min = null;
			this.max = null;

			helpers.each(this.chart.data.datasets, function(dataset, datasetIndex) {
				if (this.chart.isDatasetVisible(datasetIndex)) {
					var meta = this.chart.getDatasetMeta(datasetIndex);
					helpers.each(dataset.data, function(rawValue, index) {
						var value = +this.getRightValue(rawValue);
						if (isNaN(value) || meta.data[index].hidden) {
							return;
						}

						if (this.min === null) {
							this.min = value;
						} else if (value < this.min) {
							this.min = value;
						}

						if (this.max === null) {
							this.max = value;
						} else if (value > this.max) {
							this.max = value;
						}
					}, this);
				}
			}, this);

			// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
			// do nothing since that would make the chart weird. If the user really wants a weird chart
			// axis, they can manually override it
			if (this.options.ticks.beginAtZero) {
				var minSign = helpers.sign(this.min);
				var maxSign = helpers.sign(this.max);

				if (minSign < 0 && maxSign < 0) {
					// move the top up to 0
					this.max = 0;
				} else if (minSign > 0 && maxSign > 0) {
					// move the botttom down to 0
					this.min = 0;
				}
			}

			if (this.options.ticks.min !== undefined) {
				this.min = this.options.ticks.min;
			} else if (this.options.ticks.suggestedMin !== undefined) {
				this.min = Math.min(this.min, this.options.ticks.suggestedMin);
			}

			if (this.options.ticks.max !== undefined) {
				this.max = this.options.ticks.max;
			} else if (this.options.ticks.suggestedMax !== undefined) {
				this.max = Math.max(this.max, this.options.ticks.suggestedMax);
			}

			if (this.min === this.max) {
				this.min--;
				this.max++;
			}
		},
		buildTicks: function() {


			this.ticks = [];

			// Figure out what the max number of ticks we can support it is based on the size of
			// the axis area. For now, we say that the minimum tick spacing in pixels must be 50
			// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
			// the graph
			var tickFontSize = helpers.getValueOrDefault(this.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
			var maxTicks = Math.min(this.options.ticks.maxTicksLimit ? this.options.ticks.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));
			maxTicks = Math.max(2, maxTicks); // Make sure we always have at least 2 ticks

			// To get a "nice" value for the tick spacing, we will use the appropriately named
			// "nice number" algorithm. See http://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
			// for details.

			var niceRange = helpers.niceNum(this.max - this.min, false);
			var spacing = helpers.niceNum(niceRange / (maxTicks - 1), true);
			var niceMin = Math.floor(this.min / spacing) * spacing;
			var niceMax = Math.ceil(this.max / spacing) * spacing;

			var numSpaces = Math.ceil((niceMax - niceMin) / spacing);

			// Put the values into the ticks array
			this.ticks.push(this.options.ticks.min !== undefined ? this.options.ticks.min : niceMin);
			for (var j = 1; j < numSpaces; ++j) {
				this.ticks.push(niceMin + (j * spacing));
			}
			this.ticks.push(this.options.ticks.max !== undefined ? this.options.ticks.max : niceMax);

			// At this point, we need to update our max and min given the tick values since we have expanded the
			// range of the scale
			this.max = helpers.max(this.ticks);
			this.min = helpers.min(this.ticks);

			if (this.options.ticks.reverse) {
				this.ticks.reverse();

				this.start = this.max;
				this.end = this.min;
			} else {
				this.start = this.min;
				this.end = this.max;
			}

			this.zeroLineIndex = this.ticks.indexOf(0);
		},
		convertTicksToLabels: function() {
			Chart.Scale.prototype.convertTicksToLabels.call(this);

			// Point labels
			this.pointLabels = this.chart.data.labels.map(this.options.pointLabels.callback, this);
		},
		getLabelForIndex: function(index, datasetIndex) {
			return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
		},
		fit: function() {
			/*
			 * Right, this is really confusing and there is a lot of maths going on here
			 * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
			 *
			 * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
			 *
			 * Solution:
			 *
			 * We assume the radius of the polygon is half the size of the canvas at first
			 * at each index we check if the text overlaps.
			 *
			 * Where it does, we store that angle and that index.
			 *
			 * After finding the largest index and angle we calculate how much we need to remove
			 * from the shape radius to move the point inwards by that x.
			 *
			 * We average the left and right distances to get the maximum shape radius that can fit in the box
			 * along with labels.
			 *
			 * Once we have that, we can find the centre point for the chart, by taking the x text protrusion
			 * on each side, removing that from the size, halving it and adding the left x protrusion width.
			 *
			 * This will mean we have a shape fitted to the canvas, as large as it can be with the labels
			 * and position it in the most space efficient manner
			 *
			 * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif
			 */

			var pointLabelFontSize = helpers.getValueOrDefault(this.options.pointLabels.fontSize, Chart.defaults.global.defaultFontSize);
			var pointLabeFontStyle = helpers.getValueOrDefault(this.options.pointLabels.fontStyle, Chart.defaults.global.defaultFontStyle);
			var pointLabeFontFamily = helpers.getValueOrDefault(this.options.pointLabels.fontFamily, Chart.defaults.global.defaultFontFamily);
			var pointLabeFont = helpers.fontString(pointLabelFontSize, pointLabeFontStyle, pointLabeFontFamily);

			// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
			// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
			var largestPossibleRadius = helpers.min([(this.height / 2 - pointLabelFontSize - 5), this.width / 2]),
				pointPosition,
				i,
				textWidth,
				halfTextWidth,
				furthestRight = this.width,
				furthestRightIndex,
				furthestRightAngle,
				furthestLeft = 0,
				furthestLeftIndex,
				furthestLeftAngle,
				xProtrusionLeft,
				xProtrusionRight,
				radiusReductionRight,
				radiusReductionLeft,
				maxWidthRadius;
			this.ctx.font = pointLabeFont;

			for (i = 0; i < this.getValueCount(); i++) {
				// 5px to space the text slightly out - similar to what we do in the draw function.
				pointPosition = this.getPointPosition(i, largestPossibleRadius);
				textWidth = this.ctx.measureText(this.pointLabels[i] ? this.pointLabels[i] : '').width + 5;
				if (i === 0 || i === this.getValueCount() / 2) {
					// If we're at index zero, or exactly the middle, we're at exactly the top/bottom
					// of the radar chart, so text will be aligned centrally, so we'll half it and compare
					// w/left and right text sizes
					halfTextWidth = textWidth / 2;
					if (pointPosition.x + halfTextWidth > furthestRight) {
						furthestRight = pointPosition.x + halfTextWidth;
						furthestRightIndex = i;
					}
					if (pointPosition.x - halfTextWidth < furthestLeft) {
						furthestLeft = pointPosition.x - halfTextWidth;
						furthestLeftIndex = i;
					}
				} else if (i < this.getValueCount() / 2) {
					// Less than half the values means we'll left align the text
					if (pointPosition.x + textWidth > furthestRight) {
						furthestRight = pointPosition.x + textWidth;
						furthestRightIndex = i;
					}
				} else if (i > this.getValueCount() / 2) {
					// More than half the values means we'll right align the text
					if (pointPosition.x - textWidth < furthestLeft) {
						furthestLeft = pointPosition.x - textWidth;
						furthestLeftIndex = i;
					}
				}
			}

			xProtrusionLeft = furthestLeft;
			xProtrusionRight = Math.ceil(furthestRight - this.width);

			furthestRightAngle = this.getIndexAngle(furthestRightIndex);
			furthestLeftAngle = this.getIndexAngle(furthestLeftIndex);

			radiusReductionRight = xProtrusionRight / Math.sin(furthestRightAngle + Math.PI / 2);
			radiusReductionLeft = xProtrusionLeft / Math.sin(furthestLeftAngle + Math.PI / 2);

			// Ensure we actually need to reduce the size of the chart
			radiusReductionRight = (helpers.isNumber(radiusReductionRight)) ? radiusReductionRight : 0;
			radiusReductionLeft = (helpers.isNumber(radiusReductionLeft)) ? radiusReductionLeft : 0;

			this.drawingArea = Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2);
			this.setCenterPoint(radiusReductionLeft, radiusReductionRight);
		},
		setCenterPoint: function(leftMovement, rightMovement) {

			var maxRight = this.width - rightMovement - this.drawingArea,
				maxLeft = leftMovement + this.drawingArea;

			this.xCenter = Math.round(((maxLeft + maxRight) / 2) + this.left);
			// Always vertically in the centre as the text height doesn't change
			this.yCenter = Math.round((this.height / 2) + this.top);
		},

		getIndexAngle: function(index) {
			var angleMultiplier = (Math.PI * 2) / this.getValueCount();
			// Start from the top instead of right, so remove a quarter of the circle

			return index * angleMultiplier - (Math.PI / 2);
		},
		getDistanceFromCenterForValue: function(value) {
			if (value === null) {
				return 0; // null always in center
			}

			// Take into account half font size + the yPadding of the top value
			var scalingFactor = this.drawingArea / (this.max - this.min);
			if (this.options.reverse) {
				return (this.max - value) * scalingFactor;
			} else {
				return (value - this.min) * scalingFactor;
			}
		},
		getPointPosition: function(index, distanceFromCenter) {
			var thisAngle = this.getIndexAngle(index);
			return {
				x: Math.round(Math.cos(thisAngle) * distanceFromCenter) + this.xCenter,
				y: Math.round(Math.sin(thisAngle) * distanceFromCenter) + this.yCenter
			};
		},
		getPointPositionForValue: function(index, value) {
			return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
		},
		draw: function() {
			if (this.options.display) {
				var ctx = this.ctx;
				helpers.each(this.ticks, function(label, index) {
					// Don't draw a centre value (if it is minimum)
					if (index > 0 || this.options.reverse) {
						var yCenterOffset = this.getDistanceFromCenterForValue(this.ticks[index]);
						var yHeight = this.yCenter - yCenterOffset;

						// Draw circular lines around the scale
						if (this.options.gridLines.display) {
							ctx.strokeStyle = this.options.gridLines.color;
							ctx.lineWidth = this.options.gridLines.lineWidth;

							if (this.options.lineArc) {
								// Draw circular arcs between the points
								ctx.beginPath();
								ctx.arc(this.xCenter, this.yCenter, yCenterOffset, 0, Math.PI * 2);
								ctx.closePath();
								ctx.stroke();
							} else {
								// Draw straight lines connecting each index
								ctx.beginPath();
								for (var i = 0; i < this.getValueCount(); i++) {
									var pointPosition = this.getPointPosition(i, this.getDistanceFromCenterForValue(this.ticks[index]));
									if (i === 0) {
										ctx.moveTo(pointPosition.x, pointPosition.y);
									} else {
										ctx.lineTo(pointPosition.x, pointPosition.y);
									}
								}
								ctx.closePath();
								ctx.stroke();
							}
						}

						if (this.options.ticks.display) {
							var tickFontColor = helpers.getValueOrDefault(this.options.ticks.fontColor, Chart.defaults.global.defaultFontColor);
							var tickFontSize = helpers.getValueOrDefault(this.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
							var tickFontStyle = helpers.getValueOrDefault(this.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);
							var tickFontFamily = helpers.getValueOrDefault(this.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);
							var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
							ctx.font = tickLabelFont;

							if (this.options.ticks.showLabelBackdrop) {
								var labelWidth = ctx.measureText(label).width;
								ctx.fillStyle = this.options.ticks.backdropColor;
								ctx.fillRect(
									this.xCenter - labelWidth / 2 - this.options.ticks.backdropPaddingX,
									yHeight - tickFontSize / 2 - this.options.ticks.backdropPaddingY,
									labelWidth + this.options.ticks.backdropPaddingX * 2,
									tickFontSize + this.options.ticks.backdropPaddingY * 2
								);
							}

							ctx.textAlign = 'center';
							ctx.textBaseline = "middle";
							ctx.fillStyle = tickFontColor;
							ctx.fillText(label, this.xCenter, yHeight);
						}
					}
				}, this);

				if (!this.options.lineArc) {
					ctx.lineWidth = this.options.angleLines.lineWidth;
					ctx.strokeStyle = this.options.angleLines.color;

					for (var i = this.getValueCount() - 1; i >= 0; i--) {
						if (this.options.angleLines.display) {
							var outerPosition = this.getPointPosition(i, this.getDistanceFromCenterForValue(this.options.reverse ? this.min : this.max));
							ctx.beginPath();
							ctx.moveTo(this.xCenter, this.yCenter);
							ctx.lineTo(outerPosition.x, outerPosition.y);
							ctx.stroke();
							ctx.closePath();
						}
						// Extra 3px out for some label spacing
						var pointLabelPosition = this.getPointPosition(i, this.getDistanceFromCenterForValue(this.options.reverse ? this.min : this.max) + 5);

						var pointLabelFontColor = helpers.getValueOrDefault(this.options.pointLabels.fontColor, Chart.defaults.global.defaultFontColor);
						var pointLabelFontSize = helpers.getValueOrDefault(this.options.pointLabels.fontSize, Chart.defaults.global.defaultFontSize);
						var pointLabeFontStyle = helpers.getValueOrDefault(this.options.pointLabels.fontStyle, Chart.defaults.global.defaultFontStyle);
						var pointLabeFontFamily = helpers.getValueOrDefault(this.options.pointLabels.fontFamily, Chart.defaults.global.defaultFontFamily);
						var pointLabeFont = helpers.fontString(pointLabelFontSize, pointLabeFontStyle, pointLabeFontFamily);

						ctx.font = pointLabeFont;
						ctx.fillStyle = pointLabelFontColor;

						var labelsCount = this.pointLabels.length,
							halfLabelsCount = this.pointLabels.length / 2,
							quarterLabelsCount = halfLabelsCount / 2,
							upperHalf = (i < quarterLabelsCount || i > labelsCount - quarterLabelsCount),
							exactQuarter = (i === quarterLabelsCount || i === labelsCount - quarterLabelsCount);
						if (i === 0) {
							ctx.textAlign = 'center';
						} else if (i === halfLabelsCount) {
							ctx.textAlign = 'center';
						} else if (i < halfLabelsCount) {
							ctx.textAlign = 'left';
						} else {
							ctx.textAlign = 'right';
						}

						// Set the correct text baseline based on outer positioning
						if (exactQuarter) {
							ctx.textBaseline = 'middle';
						} else if (upperHalf) {
							ctx.textBaseline = 'bottom';
						} else {
							ctx.textBaseline = 'top';
						}

						ctx.fillText(this.pointLabels[i] ? this.pointLabels[i] : '', pointLabelPosition.x, pointLabelPosition.y);
					}
				}
			}
		}
	});
	Chart.scaleService.registerScaleType("radialLinear", LinearRadialScale, defaultConfig);

};

/***/ }),

/***/ "./node_modules/Chart.js/src/scales/scale.time.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*global window: false */


var moment = __webpack_require__("./node_modules/moment/moment.js");
moment = typeof(moment) === 'function' ? moment : window.moment;

module.exports = function(Chart) {

	var helpers = Chart.helpers;
	var time = {
		units: [{
			name: 'millisecond',
			steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]
		}, {
			name: 'second',
			steps: [1, 2, 5, 10, 30]
		}, {
			name: 'minute',
			steps: [1, 2, 5, 10, 30]
		}, {
			name: 'hour',
			steps: [1, 2, 3, 6, 12]
		}, {
			name: 'day',
			steps: [1, 2, 5]
		}, {
			name: 'week',
			maxStep: 4
		}, {
			name: 'month',
			maxStep: 3
		}, {
			name: 'quarter',
			maxStep: 4
		}, {
			name: 'year',
			maxStep: false
		}]
	};

	var defaultConfig = {
		position: "bottom",

		time: {
			parser: false, // false == a pattern string from http://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
			format: false, // DEPRECATED false == date objects, moment object, callback or a pattern string from http://momentjs.com/docs/#/parsing/string-format/
			unit: false, // false == automatic or override with week, month, year, etc.
			round: false, // none, or override with week, month, year, etc.
			displayFormat: false, // DEPRECATED
			isoWeekday: false, // override week start day - see http://momentjs.com/docs/#/get-set/iso-weekday/

			// defaults to unit's corresponding unitFormat below or override using pattern string from http://momentjs.com/docs/#/displaying/format/
			displayFormats: {
				'millisecond': 'h:mm:ss.SSS a', // 11:20:01.123 AM,
				'second': 'h:mm:ss a', // 11:20:01 AM
				'minute': 'h:mm:ss a', // 11:20:01 AM
				'hour': 'MMM D, hA', // Sept 4, 5PM
				'day': 'll', // Sep 4 2015
				'week': 'll', // Week 46, or maybe "[W]WW - YYYY" ?
				'month': 'MMM YYYY', // Sept 2015
				'quarter': '[Q]Q - YYYY', // Q3
				'year': 'YYYY' // 2015
			}
		},
		ticks: {
			autoSkip: false
		}
	};

	var TimeScale = Chart.Scale.extend({
		initialize: function() {
			if (!moment) {
				throw new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');
			}

			Chart.Scale.prototype.initialize.call(this);
		},
		getLabelMoment: function(datasetIndex, index) {
			return this.labelMoments[datasetIndex][index];
		},
		getMomentStartOf: function(tick) {
			if (this.options.time.unit === 'week' && this.options.time.isoWeekday !== false) {
				return tick.clone().startOf('isoWeek').isoWeekday(this.options.time.isoWeekday);
			} else {
				return tick.clone().startOf(this.tickUnit);
			}
		},
		determineDataLimits: function() {
			this.labelMoments = [];

			// Only parse these once. If the dataset does not have data as x,y pairs, we will use
			// these
			var scaleLabelMoments = [];
			if (this.chart.data.labels && this.chart.data.labels.length > 0) {
				helpers.each(this.chart.data.labels, function(label, index) {
					var labelMoment = this.parseTime(label);

					if (labelMoment.isValid()) {
						if (this.options.time.round) {
							labelMoment.startOf(this.options.time.round);
						}
						scaleLabelMoments.push(labelMoment);
					}
				}, this);

				this.firstTick = moment.min.call(this, scaleLabelMoments);
				this.lastTick = moment.max.call(this, scaleLabelMoments);
			} else {
				this.firstTick = null;
				this.lastTick = null;
			}

			helpers.each(this.chart.data.datasets, function(dataset, datasetIndex) {
				var momentsForDataset = [];
				var datasetVisible = this.chart.isDatasetVisible(datasetIndex);

				if (typeof dataset.data[0] === 'object') {
					helpers.each(dataset.data, function(value, index) {
						var labelMoment = this.parseTime(this.getRightValue(value));

						if (labelMoment.isValid()) {
							if (this.options.time.round) {
								labelMoment.startOf(this.options.time.round);
							}
							momentsForDataset.push(labelMoment);

							if (datasetVisible) {
								// May have gone outside the scale ranges, make sure we keep the first and last ticks updated
								this.firstTick = this.firstTick !== null ? moment.min(this.firstTick, labelMoment) : labelMoment;
								this.lastTick = this.lastTick !== null ? moment.max(this.lastTick, labelMoment) : labelMoment;
							}
						}
					}, this);
				} else {
					// We have no labels. Use the ones from the scale
					momentsForDataset = scaleLabelMoments;
				}

				this.labelMoments.push(momentsForDataset);
			}, this);

			// Set these after we've done all the data
			if (this.options.time.min) {
				this.firstTick = this.parseTime(this.options.time.min);
			}

			if (this.options.time.max) {
				this.lastTick = this.parseTime(this.options.time.max);
			}

			// We will modify these, so clone for later
			this.firstTick = (this.firstTick || moment()).clone();
			this.lastTick = (this.lastTick || moment()).clone();
		},
		buildTicks: function(index) {

			this.ctx.save();
			var tickFontSize = helpers.getValueOrDefault(this.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
			var tickFontStyle = helpers.getValueOrDefault(this.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);
			var tickFontFamily = helpers.getValueOrDefault(this.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);
			var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
			this.ctx.font = tickLabelFont;

			this.ticks = [];
			this.unitScale = 1; // How much we scale the unit by, ie 2 means 2x unit per step
			this.scaleSizeInUnits = 0; // How large the scale is in the base unit (seconds, minutes, etc)

			// Set unit override if applicable
			if (this.options.time.unit) {
				this.tickUnit = this.options.time.unit || 'day';
				this.displayFormat = this.options.time.displayFormats[this.tickUnit];
				this.scaleSizeInUnits = this.lastTick.diff(this.firstTick, this.tickUnit, true);
				this.unitScale = helpers.getValueOrDefault(this.options.time.unitStepSize, 1);
			} else {
				// Determine the smallest needed unit of the time
				var innerWidth = this.isHorizontal() ? this.width - (this.paddingLeft + this.paddingRight) : this.height - (this.paddingTop + this.paddingBottom);

				// Crude approximation of what the label length might be
				var tempFirstLabel = this.tickFormatFunction(this.firstTick, 0, []);
				var tickLabelWidth = this.ctx.measureText(tempFirstLabel).width;
				var cosRotation = Math.cos(helpers.toRadians(this.options.ticks.maxRotation));
				var sinRotation = Math.sin(helpers.toRadians(this.options.ticks.maxRotation));
				tickLabelWidth = (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation);
				var labelCapacity = innerWidth / (tickLabelWidth);

				// Start as small as possible
				this.tickUnit = 'millisecond';
				this.scaleSizeInUnits = this.lastTick.diff(this.firstTick, this.tickUnit, true);
				this.displayFormat = this.options.time.displayFormats[this.tickUnit];

				var unitDefinitionIndex = 0;
				var unitDefinition = time.units[unitDefinitionIndex];

				// While we aren't ideal and we don't have units left
				while (unitDefinitionIndex < time.units.length) {
					// Can we scale this unit. If `false` we can scale infinitely
					this.unitScale = 1;

					if (helpers.isArray(unitDefinition.steps) && Math.ceil(this.scaleSizeInUnits / labelCapacity) < helpers.max(unitDefinition.steps)) {
						// Use one of the prefedined steps
						for (var idx = 0; idx < unitDefinition.steps.length; ++idx) {
							if (unitDefinition.steps[idx] >= Math.ceil(this.scaleSizeInUnits / labelCapacity)) {
								this.unitScale = helpers.getValueOrDefault(this.options.time.unitStepSize, unitDefinition.steps[idx]);
								break;
							}
						}

						break;
					} else if ((unitDefinition.maxStep === false) || (Math.ceil(this.scaleSizeInUnits / labelCapacity) < unitDefinition.maxStep)) {
						// We have a max step. Scale this unit
						this.unitScale = helpers.getValueOrDefault(this.options.time.unitStepSize, Math.ceil(this.scaleSizeInUnits / labelCapacity));
						break;
					} else {
						// Move to the next unit up
						++unitDefinitionIndex;
						unitDefinition = time.units[unitDefinitionIndex];

						this.tickUnit = unitDefinition.name;
						var leadingUnitBuffer = this.firstTick.diff(this.getMomentStartOf(this.firstTick), this.tickUnit, true);
						var trailingUnitBuffer = this.getMomentStartOf(this.lastTick.clone().add(1, this.tickUnit)).diff(this.lastTick, this.tickUnit, true);
						this.scaleSizeInUnits = this.lastTick.diff(this.firstTick, this.tickUnit, true) + leadingUnitBuffer + trailingUnitBuffer;
						this.displayFormat = this.options.time.displayFormats[unitDefinition.name];
					}
				}
			}

			var roundedStart;

			// Only round the first tick if we have no hard minimum
			if (!this.options.time.min) {
				this.firstTick = this.getMomentStartOf(this.firstTick);
				roundedStart = this.firstTick;
			} else {
				roundedStart = this.getMomentStartOf(this.firstTick);
			}

			// Only round the last tick if we have no hard maximum
			if (!this.options.time.max) {
				var roundedEnd = this.getMomentStartOf(this.lastTick);
				if (roundedEnd.diff(this.lastTick, this.tickUnit, true) !== 0) {
					// Do not use end of because we need this to be in the next time unit
					this.lastTick = this.getMomentStartOf(this.lastTick.add(1, this.tickUnit));
				}
			}

			this.smallestLabelSeparation = this.width;

			helpers.each(this.chart.data.datasets, function(dataset, datasetIndex) {
				for (var i = 1; i < this.labelMoments[datasetIndex].length; i++) {
					this.smallestLabelSeparation = Math.min(this.smallestLabelSeparation, this.labelMoments[datasetIndex][i].diff(this.labelMoments[datasetIndex][i - 1], this.tickUnit, true));
				}
			}, this);

			// Tick displayFormat override
			if (this.options.time.displayFormat) {
				this.displayFormat = this.options.time.displayFormat;
			}

			// first tick. will have been rounded correctly if options.time.min is not specified
			this.ticks.push(this.firstTick.clone());

			// For every unit in between the first and last moment, create a moment and add it to the ticks tick
			for (var i = 1; i <= this.scaleSizeInUnits; ++i) {
				var newTick = roundedStart.clone().add(i, this.tickUnit);

				// Are we greater than the max time
				if (this.options.time.max && newTick.diff(this.lastTick, this.tickUnit, true) >= 0) {
					break;
				}

				if (i % this.unitScale === 0) {
					this.ticks.push(newTick);
				}
			}

			// Always show the right tick
			var diff = this.ticks[this.ticks.length - 1].diff(this.lastTick, this.tickUnit);
			if (diff !== 0 || this.scaleSizeInUnits === 0) {
				// this is a weird case. If the <max> option is the same as the end option, we can't just diff the times because the tick was created from the roundedStart
				// but the last tick was not rounded.
				if (this.options.time.max) {
					this.ticks.push(this.lastTick.clone());
					this.scaleSizeInUnits = this.lastTick.diff(this.ticks[0], this.tickUnit, true);
				} else {
					this.ticks.push(this.lastTick.clone());
					this.scaleSizeInUnits = this.lastTick.diff(this.firstTick, this.tickUnit, true);
				}
			}

			this.ctx.restore();
		},
		// Get tooltip label
		getLabelForIndex: function(index, datasetIndex) {
			var label = this.chart.data.labels && index < this.chart.data.labels.length ? this.chart.data.labels[index] : '';

			if (typeof this.chart.data.datasets[datasetIndex].data[0] === 'object') {
				label = this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
			}

			// Format nicely
			if (this.options.time.tooltipFormat) {
				label = this.parseTime(label).format(this.options.time.tooltipFormat);
			}

			return label;
		},
		// Function to format an individual tick mark
		tickFormatFunction: function tickFormatFunction(tick, index, ticks) {
			var formattedTick = tick.format(this.displayFormat);
			var tickOpts = this.options.ticks;
			var callback = helpers.getValueOrDefault(tickOpts.callback, tickOpts.userCallback);

			if (callback) {
				return callback(formattedTick, index, ticks);
			} else {
				return formattedTick;
			}
		},
		convertTicksToLabels: function() {
			this.tickMoments = this.ticks;
			this.ticks = this.ticks.map(this.tickFormatFunction, this);
		},
		getPixelForValue: function(value, index, datasetIndex, includeOffset) {
			var labelMoment = value && value.isValid && value.isValid() ? value : this.getLabelMoment(datasetIndex, index);

			if (labelMoment) {
				var offset = labelMoment.diff(this.firstTick, this.tickUnit, true);

				var decimal = offset / this.scaleSizeInUnits;

				if (this.isHorizontal()) {
					var innerWidth = this.width - (this.paddingLeft + this.paddingRight);
					var valueWidth = innerWidth / Math.max(this.ticks.length - 1, 1);
					var valueOffset = (innerWidth * decimal) + this.paddingLeft;

					return this.left + Math.round(valueOffset);
				} else {
					var innerHeight = this.height - (this.paddingTop + this.paddingBottom);
					var valueHeight = innerHeight / Math.max(this.ticks.length - 1, 1);
					var heightOffset = (innerHeight * decimal) + this.paddingTop;

					return this.top + Math.round(heightOffset);
				}
			}
		},
		getPixelForTick: function(index, includeOffset) {
			return this.getPixelForValue(this.tickMoments[index], null, null, includeOffset);
		},
		getValueForPixel: function(pixel) {
			var innerDimension = this.isHorizontal() ? this.width - (this.paddingLeft + this.paddingRight) : this.height - (this.paddingTop + this.paddingBottom);
			var offset = (pixel - (this.isHorizontal() ? this.left + this.paddingLeft : this.top + this.paddingTop)) / innerDimension;
			offset *= this.scaleSizeInUnits;
			return this.firstTick.clone().add(moment.duration(offset, this.tickUnit).asSeconds(), 'seconds');
		},
		parseTime: function(label) {
			if (typeof this.options.time.parser === 'string') {
				return moment(label, this.options.time.parser);
			}
			if (typeof this.options.time.parser === 'function') {
				return this.options.time.parser(label);
			}
			// Date objects
			if (typeof label.getMonth === 'function' || typeof label === 'number') {
				return moment(label);
			}
			// Moment support
			if (label.isValid && label.isValid()) {
				return label;
			}
			// Custom parsing (return an instance of moment)
			if (typeof this.options.time.format !== 'string' && this.options.time.format.call) {
				console.warn("options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale");
				return this.options.time.format(label);
			}
			// Moment format parsing
			return moment(label, this.options.time.format);
		}
	});
	Chart.scaleService.registerScaleType("time", TimeScale, defaultConfig);

};


/***/ }),

/***/ "./node_modules/chartist/dist/chartist.css":
/***/ (function(module, exports) {

module.exports = ".ct-label {\n  fill: rgba(0, 0, 0, 0.4);\n  color: rgba(0, 0, 0, 0.4);\n  font-size: 0.75rem;\n  line-height: 1; }\n\n.ct-chart-line .ct-label,\n.ct-chart-bar .ct-label {\n  display: block;\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex; }\n\n.ct-label.ct-horizontal.ct-start {\n  -webkit-box-align: flex-end;\n  -webkit-align-items: flex-end;\n  -ms-flex-align: flex-end;\n  align-items: flex-end;\n  -webkit-box-pack: flex-start;\n  -webkit-justify-content: flex-start;\n  -ms-flex-pack: flex-start;\n  justify-content: flex-start;\n  text-align: left;\n  text-anchor: start; }\n\n.ct-label.ct-horizontal.ct-end {\n  -webkit-box-align: flex-start;\n  -webkit-align-items: flex-start;\n  -ms-flex-align: flex-start;\n  align-items: flex-start;\n  -webkit-box-pack: flex-start;\n  -webkit-justify-content: flex-start;\n  -ms-flex-pack: flex-start;\n  justify-content: flex-start;\n  text-align: left;\n  text-anchor: start; }\n\n.ct-label.ct-vertical.ct-start {\n  -webkit-box-align: flex-end;\n  -webkit-align-items: flex-end;\n  -ms-flex-align: flex-end;\n  align-items: flex-end;\n  -webkit-box-pack: flex-end;\n  -webkit-justify-content: flex-end;\n  -ms-flex-pack: flex-end;\n  justify-content: flex-end;\n  text-align: right;\n  text-anchor: end; }\n\n.ct-label.ct-vertical.ct-end {\n  -webkit-box-align: flex-end;\n  -webkit-align-items: flex-end;\n  -ms-flex-align: flex-end;\n  align-items: flex-end;\n  -webkit-box-pack: flex-start;\n  -webkit-justify-content: flex-start;\n  -ms-flex-pack: flex-start;\n  justify-content: flex-start;\n  text-align: left;\n  text-anchor: start; }\n\n.ct-chart-bar .ct-label.ct-horizontal.ct-start {\n  -webkit-box-align: flex-end;\n  -webkit-align-items: flex-end;\n  -ms-flex-align: flex-end;\n  align-items: flex-end;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  text-align: center;\n  text-anchor: start; }\n\n.ct-chart-bar .ct-label.ct-horizontal.ct-end {\n  -webkit-box-align: flex-start;\n  -webkit-align-items: flex-start;\n  -ms-flex-align: flex-start;\n  align-items: flex-start;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  text-align: center;\n  text-anchor: start; }\n\n.ct-chart-bar.ct-horizontal-bars .ct-label.ct-horizontal.ct-start {\n  -webkit-box-align: flex-end;\n  -webkit-align-items: flex-end;\n  -ms-flex-align: flex-end;\n  align-items: flex-end;\n  -webkit-box-pack: flex-start;\n  -webkit-justify-content: flex-start;\n  -ms-flex-pack: flex-start;\n  justify-content: flex-start;\n  text-align: left;\n  text-anchor: start; }\n\n.ct-chart-bar.ct-horizontal-bars .ct-label.ct-horizontal.ct-end {\n  -webkit-box-align: flex-start;\n  -webkit-align-items: flex-start;\n  -ms-flex-align: flex-start;\n  align-items: flex-start;\n  -webkit-box-pack: flex-start;\n  -webkit-justify-content: flex-start;\n  -ms-flex-pack: flex-start;\n  justify-content: flex-start;\n  text-align: left;\n  text-anchor: start; }\n\n.ct-chart-bar.ct-horizontal-bars .ct-label.ct-vertical.ct-start {\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: flex-end;\n  -webkit-justify-content: flex-end;\n  -ms-flex-pack: flex-end;\n  justify-content: flex-end;\n  text-align: right;\n  text-anchor: end; }\n\n.ct-chart-bar.ct-horizontal-bars .ct-label.ct-vertical.ct-end {\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: flex-start;\n  -webkit-justify-content: flex-start;\n  -ms-flex-pack: flex-start;\n  justify-content: flex-start;\n  text-align: left;\n  text-anchor: end; }\n\n.ct-grid {\n  stroke: rgba(0, 0, 0, 0.2);\n  stroke-width: 1px;\n  stroke-dasharray: 2px; }\n\n.ct-point {\n  stroke-width: 10px;\n  stroke-linecap: round; }\n\n.ct-line {\n  fill: none;\n  stroke-width: 4px; }\n\n.ct-area {\n  stroke: none;\n  fill-opacity: 0.1; }\n\n.ct-bar {\n  fill: none;\n  stroke-width: 10px; }\n\n.ct-slice-donut {\n  fill: none;\n  stroke-width: 60px; }\n\n.ct-series-a .ct-point, .ct-series-a .ct-line, .ct-series-a .ct-bar, .ct-series-a .ct-slice-donut {\n  stroke: #d70206; }\n\n.ct-series-a .ct-slice-pie, .ct-series-a .ct-area {\n  fill: #d70206; }\n\n.ct-series-b .ct-point, .ct-series-b .ct-line, .ct-series-b .ct-bar, .ct-series-b .ct-slice-donut {\n  stroke: #f05b4f; }\n\n.ct-series-b .ct-slice-pie, .ct-series-b .ct-area {\n  fill: #f05b4f; }\n\n.ct-series-c .ct-point, .ct-series-c .ct-line, .ct-series-c .ct-bar, .ct-series-c .ct-slice-donut {\n  stroke: #f4c63d; }\n\n.ct-series-c .ct-slice-pie, .ct-series-c .ct-area {\n  fill: #f4c63d; }\n\n.ct-series-d .ct-point, .ct-series-d .ct-line, .ct-series-d .ct-bar, .ct-series-d .ct-slice-donut {\n  stroke: #d17905; }\n\n.ct-series-d .ct-slice-pie, .ct-series-d .ct-area {\n  fill: #d17905; }\n\n.ct-series-e .ct-point, .ct-series-e .ct-line, .ct-series-e .ct-bar, .ct-series-e .ct-slice-donut {\n  stroke: #453d3f; }\n\n.ct-series-e .ct-slice-pie, .ct-series-e .ct-area {\n  fill: #453d3f; }\n\n.ct-series-f .ct-point, .ct-series-f .ct-line, .ct-series-f .ct-bar, .ct-series-f .ct-slice-donut {\n  stroke: #59922b; }\n\n.ct-series-f .ct-slice-pie, .ct-series-f .ct-area {\n  fill: #59922b; }\n\n.ct-series-g .ct-point, .ct-series-g .ct-line, .ct-series-g .ct-bar, .ct-series-g .ct-slice-donut {\n  stroke: #0544d3; }\n\n.ct-series-g .ct-slice-pie, .ct-series-g .ct-area {\n  fill: #0544d3; }\n\n.ct-series-h .ct-point, .ct-series-h .ct-line, .ct-series-h .ct-bar, .ct-series-h .ct-slice-donut {\n  stroke: #6b0392; }\n\n.ct-series-h .ct-slice-pie, .ct-series-h .ct-area {\n  fill: #6b0392; }\n\n.ct-series-i .ct-point, .ct-series-i .ct-line, .ct-series-i .ct-bar, .ct-series-i .ct-slice-donut {\n  stroke: #f05b4f; }\n\n.ct-series-i .ct-slice-pie, .ct-series-i .ct-area {\n  fill: #f05b4f; }\n\n.ct-series-j .ct-point, .ct-series-j .ct-line, .ct-series-j .ct-bar, .ct-series-j .ct-slice-donut {\n  stroke: #dda458; }\n\n.ct-series-j .ct-slice-pie, .ct-series-j .ct-area {\n  fill: #dda458; }\n\n.ct-series-k .ct-point, .ct-series-k .ct-line, .ct-series-k .ct-bar, .ct-series-k .ct-slice-donut {\n  stroke: #eacf7d; }\n\n.ct-series-k .ct-slice-pie, .ct-series-k .ct-area {\n  fill: #eacf7d; }\n\n.ct-series-l .ct-point, .ct-series-l .ct-line, .ct-series-l .ct-bar, .ct-series-l .ct-slice-donut {\n  stroke: #86797d; }\n\n.ct-series-l .ct-slice-pie, .ct-series-l .ct-area {\n  fill: #86797d; }\n\n.ct-series-m .ct-point, .ct-series-m .ct-line, .ct-series-m .ct-bar, .ct-series-m .ct-slice-donut {\n  stroke: #b2c326; }\n\n.ct-series-m .ct-slice-pie, .ct-series-m .ct-area {\n  fill: #b2c326; }\n\n.ct-series-n .ct-point, .ct-series-n .ct-line, .ct-series-n .ct-bar, .ct-series-n .ct-slice-donut {\n  stroke: #6188e2; }\n\n.ct-series-n .ct-slice-pie, .ct-series-n .ct-area {\n  fill: #6188e2; }\n\n.ct-series-o .ct-point, .ct-series-o .ct-line, .ct-series-o .ct-bar, .ct-series-o .ct-slice-donut {\n  stroke: #a748ca; }\n\n.ct-series-o .ct-slice-pie, .ct-series-o .ct-area {\n  fill: #a748ca; }\n\n.ct-square {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-square:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 100%; }\n  .ct-square:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-square > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-minor-second {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-minor-second:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 93.75%; }\n  .ct-minor-second:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-minor-second > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-major-second {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-major-second:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 88.8888888889%; }\n  .ct-major-second:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-major-second > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-minor-third {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-minor-third:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 83.3333333333%; }\n  .ct-minor-third:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-minor-third > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-major-third {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-major-third:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 80%; }\n  .ct-major-third:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-major-third > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-perfect-fourth {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-perfect-fourth:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 75%; }\n  .ct-perfect-fourth:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-perfect-fourth > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-perfect-fifth {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-perfect-fifth:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 66.6666666667%; }\n  .ct-perfect-fifth:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-perfect-fifth > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-minor-sixth {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-minor-sixth:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 62.5%; }\n  .ct-minor-sixth:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-minor-sixth > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-golden-section {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-golden-section:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 61.804697157%; }\n  .ct-golden-section:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-golden-section > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-major-sixth {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-major-sixth:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 60%; }\n  .ct-major-sixth:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-major-sixth > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-minor-seventh {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-minor-seventh:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 56.25%; }\n  .ct-minor-seventh:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-minor-seventh > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-major-seventh {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-major-seventh:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 53.3333333333%; }\n  .ct-major-seventh:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-major-seventh > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-octave {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-octave:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 50%; }\n  .ct-octave:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-octave > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-major-tenth {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-major-tenth:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 40%; }\n  .ct-major-tenth:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-major-tenth > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-major-eleventh {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-major-eleventh:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 37.5%; }\n  .ct-major-eleventh:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-major-eleventh > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-major-twelfth {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-major-twelfth:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 33.3333333333%; }\n  .ct-major-twelfth:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-major-twelfth > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n.ct-double-octave {\n  display: block;\n  position: relative;\n  width: 100%; }\n  .ct-double-octave:before {\n    display: block;\n    float: left;\n    content: \"\";\n    width: 0;\n    height: 0;\n    padding-bottom: 25%; }\n  .ct-double-octave:after {\n    content: \"\";\n    display: table;\n    clear: both; }\n  .ct-double-octave > svg {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0; }\n\n/*# sourceMappingURL=chartist.css.map */"

/***/ }),

/***/ "./node_modules/chartist/dist/chartist.js":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
      return (root['Chartist'] = factory());
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    root['Chartist'] = factory();
  }
}(this, function () {

/* Chartist.js 0.9.8
 * Copyright © 2016 Gion Kunz
 * Free to use under either the WTFPL license or the MIT license.
 * https://raw.githubusercontent.com/gionkunz/chartist-js/master/LICENSE-WTFPL
 * https://raw.githubusercontent.com/gionkunz/chartist-js/master/LICENSE-MIT
 */
/**
 * The core module of Chartist that is mainly providing static functions and higher level functions for chart modules.
 *
 * @module Chartist.Core
 */
var Chartist = {
  version: '0.9.8'
};

(function (window, document, Chartist) {
  'use strict';

  /**
   * This object contains all namespaces used within Chartist.
   *
   * @memberof Chartist.Core
   * @type {{svg: string, xmlns: string, xhtml: string, xlink: string, ct: string}}
   */
  Chartist.namespaces = {
    svg: 'http://www.w3.org/2000/svg',
    xmlns: 'http://www.w3.org/2000/xmlns/',
    xhtml: 'http://www.w3.org/1999/xhtml',
    xlink: 'http://www.w3.org/1999/xlink',
    ct: 'http://gionkunz.github.com/chartist-js/ct'
  };

  /**
   * Helps to simplify functional style code
   *
   * @memberof Chartist.Core
   * @param {*} n This exact value will be returned by the noop function
   * @return {*} The same value that was provided to the n parameter
   */
  Chartist.noop = function (n) {
    return n;
  };

  /**
   * Generates a-z from a number 0 to 26
   *
   * @memberof Chartist.Core
   * @param {Number} n A number from 0 to 26 that will result in a letter a-z
   * @return {String} A character from a-z based on the input number n
   */
  Chartist.alphaNumerate = function (n) {
    // Limit to a-z
    return String.fromCharCode(97 + n % 26);
  };

  /**
   * Simple recursive object extend
   *
   * @memberof Chartist.Core
   * @param {Object} target Target object where the source will be merged into
   * @param {Object...} sources This object (objects) will be merged into target and then target is returned
   * @return {Object} An object that has the same reference as target but is extended and merged with the properties of source
   */
  Chartist.extend = function (target) {
    target = target || {};

    var sources = Array.prototype.slice.call(arguments, 1);
    sources.forEach(function(source) {
      for (var prop in source) {
        if (typeof source[prop] === 'object' && source[prop] !== null && !(source[prop] instanceof Array)) {
          target[prop] = Chartist.extend({}, target[prop], source[prop]);
        } else {
          target[prop] = source[prop];
        }
      }
    });

    return target;
  };

  /**
   * Replaces all occurrences of subStr in str with newSubStr and returns a new string.
   *
   * @memberof Chartist.Core
   * @param {String} str
   * @param {String} subStr
   * @param {String} newSubStr
   * @return {String}
   */
  Chartist.replaceAll = function(str, subStr, newSubStr) {
    return str.replace(new RegExp(subStr, 'g'), newSubStr);
  };

  /**
   * Converts a number to a string with a unit. If a string is passed then this will be returned unmodified.
   *
   * @memberof Chartist.Core
   * @param {Number} value
   * @param {String} unit
   * @return {String} Returns the passed number value with unit.
   */
  Chartist.ensureUnit = function(value, unit) {
    if(typeof value === 'number') {
      value = value + unit;
    }

    return value;
  };

  /**
   * Converts a number or string to a quantity object.
   *
   * @memberof Chartist.Core
   * @param {String|Number} input
   * @return {Object} Returns an object containing the value as number and the unit as string.
   */
  Chartist.quantity = function(input) {
    if (typeof input === 'string') {
      var match = (/^(\d+)\s*(.*)$/g).exec(input);
      return {
        value : +match[1],
        unit: match[2] || undefined
      };
    }
    return { value: input };
  };

  /**
   * This is a wrapper around document.querySelector that will return the query if it's already of type Node
   *
   * @memberof Chartist.Core
   * @param {String|Node} query The query to use for selecting a Node or a DOM node that will be returned directly
   * @return {Node}
   */
  Chartist.querySelector = function(query) {
    return query instanceof Node ? query : document.querySelector(query);
  };

  /**
   * Functional style helper to produce array with given length initialized with undefined values
   *
   * @memberof Chartist.Core
   * @param length
   * @return {Array}
   */
  Chartist.times = function(length) {
    return Array.apply(null, new Array(length));
  };

  /**
   * Sum helper to be used in reduce functions
   *
   * @memberof Chartist.Core
   * @param previous
   * @param current
   * @return {*}
   */
  Chartist.sum = function(previous, current) {
    return previous + (current ? current : 0);
  };

  /**
   * Multiply helper to be used in `Array.map` for multiplying each value of an array with a factor.
   *
   * @memberof Chartist.Core
   * @param {Number} factor
   * @returns {Function} Function that can be used in `Array.map` to multiply each value in an array
   */
  Chartist.mapMultiply = function(factor) {
    return function(num) {
      return num * factor;
    };
  };

  /**
   * Add helper to be used in `Array.map` for adding a addend to each value of an array.
   *
   * @memberof Chartist.Core
   * @param {Number} addend
   * @returns {Function} Function that can be used in `Array.map` to add a addend to each value in an array
   */
  Chartist.mapAdd = function(addend) {
    return function(num) {
      return num + addend;
    };
  };

  /**
   * Map for multi dimensional arrays where their nested arrays will be mapped in serial. The output array will have the length of the largest nested array. The callback function is called with variable arguments where each argument is the nested array value (or undefined if there are no more values).
   *
   * @memberof Chartist.Core
   * @param arr
   * @param cb
   * @return {Array}
   */
  Chartist.serialMap = function(arr, cb) {
    var result = [],
        length = Math.max.apply(null, arr.map(function(e) {
          return e.length;
        }));

    Chartist.times(length).forEach(function(e, index) {
      var args = arr.map(function(e) {
        return e[index];
      });

      result[index] = cb.apply(null, args);
    });

    return result;
  };

  /**
   * This helper function can be used to round values with certain precision level after decimal. This is used to prevent rounding errors near float point precision limit.
   *
   * @memberof Chartist.Core
   * @param {Number} value The value that should be rounded with precision
   * @param {Number} [digits] The number of digits after decimal used to do the rounding
   * @returns {number} Rounded value
   */
  Chartist.roundWithPrecision = function(value, digits) {
    var precision = Math.pow(10, digits || Chartist.precision);
    return Math.round(value * precision) / precision;
  };

  /**
   * Precision level used internally in Chartist for rounding. If you require more decimal places you can increase this number.
   *
   * @memberof Chartist.Core
   * @type {number}
   */
  Chartist.precision = 8;

  /**
   * A map with characters to escape for strings to be safely used as attribute values.
   *
   * @memberof Chartist.Core
   * @type {Object}
   */
  Chartist.escapingMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&#039;'
  };

  /**
   * This function serializes arbitrary data to a string. In case of data that can't be easily converted to a string, this function will create a wrapper object and serialize the data using JSON.stringify. The outcoming string will always be escaped using Chartist.escapingMap.
   * If called with null or undefined the function will return immediately with null or undefined.
   *
   * @memberof Chartist.Core
   * @param {Number|String|Object} data
   * @return {String}
   */
  Chartist.serialize = function(data) {
    if(data === null || data === undefined) {
      return data;
    } else if(typeof data === 'number') {
      data = ''+data;
    } else if(typeof data === 'object') {
      data = JSON.stringify({data: data});
    }

    return Object.keys(Chartist.escapingMap).reduce(function(result, key) {
      return Chartist.replaceAll(result, key, Chartist.escapingMap[key]);
    }, data);
  };

  /**
   * This function de-serializes a string previously serialized with Chartist.serialize. The string will always be unescaped using Chartist.escapingMap before it's returned. Based on the input value the return type can be Number, String or Object. JSON.parse is used with try / catch to see if the unescaped string can be parsed into an Object and this Object will be returned on success.
   *
   * @memberof Chartist.Core
   * @param {String} data
   * @return {String|Number|Object}
   */
  Chartist.deserialize = function(data) {
    if(typeof data !== 'string') {
      return data;
    }

    data = Object.keys(Chartist.escapingMap).reduce(function(result, key) {
      return Chartist.replaceAll(result, Chartist.escapingMap[key], key);
    }, data);

    try {
      data = JSON.parse(data);
      data = data.data !== undefined ? data.data : data;
    } catch(e) {}

    return data;
  };

  /**
   * Create or reinitialize the SVG element for the chart
   *
   * @memberof Chartist.Core
   * @param {Node} container The containing DOM Node object that will be used to plant the SVG element
   * @param {String} width Set the width of the SVG element. Default is 100%
   * @param {String} height Set the height of the SVG element. Default is 100%
   * @param {String} className Specify a class to be added to the SVG element
   * @return {Object} The created/reinitialized SVG element
   */
  Chartist.createSvg = function (container, width, height, className) {
    var svg;

    width = width || '100%';
    height = height || '100%';

    // Check if there is a previous SVG element in the container that contains the Chartist XML namespace and remove it
    // Since the DOM API does not support namespaces we need to manually search the returned list http://www.w3.org/TR/selectors-api/
    Array.prototype.slice.call(container.querySelectorAll('svg')).filter(function filterChartistSvgObjects(svg) {
      return svg.getAttributeNS(Chartist.namespaces.xmlns, 'ct');
    }).forEach(function removePreviousElement(svg) {
      container.removeChild(svg);
    });

    // Create svg object with width and height or use 100% as default
    svg = new Chartist.Svg('svg').attr({
      width: width,
      height: height
    }).addClass(className).attr({
      style: 'width: ' + width + '; height: ' + height + ';'
    });

    // Add the DOM node to our container
    container.appendChild(svg._node);

    return svg;
  };

  /**
   * Ensures that the data object passed as second argument to the charts is present and correctly initialized.
   *
   * @param  {Object} data The data object that is passed as second argument to the charts
   * @return {Object} The normalized data object
   */
  Chartist.normalizeData = function(data) {
    // Ensure data is present otherwise enforce
    data = data || {series: [], labels: []};
    data.series = data.series || [];
    data.labels = data.labels || [];

    // Check if we should generate some labels based on existing series data
    if (data.series.length > 0 && data.labels.length === 0) {
      var normalized = Chartist.getDataArray(data),
          labelCount;

      // If all elements of the normalized data array are arrays we're dealing with
      // data from Bar or Line charts and we need to find the largest series if they are un-even
      if (normalized.every(function(value) {
        return value instanceof Array;
      })) {
        // Getting the series with the the most elements
        labelCount = Math.max.apply(null, normalized.map(function(series) {
          return series.length;
        }));
      } else {
        // We're dealing with Pie data so we just take the normalized array length
        labelCount = normalized.length;
      }

      // Setting labels to an array with emptry strings using our labelCount estimated above
      data.labels = Chartist.times(labelCount).map(function() {
        return '';
      });
    }
    return data;
  };

  /**
   * Reverses the series, labels and series data arrays.
   *
   * @memberof Chartist.Core
   * @param data
   */
  Chartist.reverseData = function(data) {
    data.labels.reverse();
    data.series.reverse();
    for (var i = 0; i < data.series.length; i++) {
      if(typeof(data.series[i]) === 'object' && data.series[i].data !== undefined) {
        data.series[i].data.reverse();
      } else if(data.series[i] instanceof Array) {
        data.series[i].reverse();
      }
    }
  };

  /**
   * Convert data series into plain array
   *
   * @memberof Chartist.Core
   * @param {Object} data The series object that contains the data to be visualized in the chart
   * @param {Boolean} reverse If true the whole data is reversed by the getDataArray call. This will modify the data object passed as first parameter. The labels as well as the series order is reversed. The whole series data arrays are reversed too.
   * @param {Boolean} multi Create a multi dimensional array from a series data array where a value object with `x` and `y` values will be created.
   * @return {Array} A plain array that contains the data to be visualized in the chart
   */
  Chartist.getDataArray = function (data, reverse, multi) {
    // If the data should be reversed but isn't we need to reverse it
    // If it's reversed but it shouldn't we need to reverse it back
    // That's required to handle data updates correctly and to reflect the responsive configurations
    if(reverse && !data.reversed || !reverse && data.reversed) {
      Chartist.reverseData(data);
      data.reversed = !data.reversed;
    }

    // Recursively walks through nested arrays and convert string values to numbers and objects with value properties
    // to values. Check the tests in data core -> data normalization for a detailed specification of expected values
    function recursiveConvert(value) {
      if(Chartist.isFalseyButZero(value)) {
        // This is a hole in data and we should return undefined
        return undefined;
      } else if((value.data || value) instanceof Array) {
        return (value.data || value).map(recursiveConvert);
      } else if(value.hasOwnProperty('value')) {
        return recursiveConvert(value.value);
      } else {
        if(multi) {
          var multiValue = {};

          // Single series value arrays are assumed to specify the Y-Axis value
          // For example: [1, 2] => [{x: undefined, y: 1}, {x: undefined, y: 2}]
          // If multi is a string then it's assumed that it specified which dimension should be filled as default
          if(typeof multi === 'string') {
            multiValue[multi] = Chartist.getNumberOrUndefined(value);
          } else {
            multiValue.y = Chartist.getNumberOrUndefined(value);
          }

          multiValue.x = value.hasOwnProperty('x') ? Chartist.getNumberOrUndefined(value.x) : multiValue.x;
          multiValue.y = value.hasOwnProperty('y') ? Chartist.getNumberOrUndefined(value.y) : multiValue.y;

          return multiValue;

        } else {
          return Chartist.getNumberOrUndefined(value);
        }
      }
    }

    return data.series.map(recursiveConvert);
  };

  /**
   * Converts a number into a padding object.
   *
   * @memberof Chartist.Core
   * @param {Object|Number} padding
   * @param {Number} [fallback] This value is used to fill missing values if a incomplete padding object was passed
   * @returns {Object} Returns a padding object containing top, right, bottom, left properties filled with the padding number passed in as argument. If the argument is something else than a number (presumably already a correct padding object) then this argument is directly returned.
   */
  Chartist.normalizePadding = function(padding, fallback) {
    fallback = fallback || 0;

    return typeof padding === 'number' ? {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    } : {
      top: typeof padding.top === 'number' ? padding.top : fallback,
      right: typeof padding.right === 'number' ? padding.right : fallback,
      bottom: typeof padding.bottom === 'number' ? padding.bottom : fallback,
      left: typeof padding.left === 'number' ? padding.left : fallback
    };
  };

  Chartist.getMetaData = function(series, index) {
    var value = series.data ? series.data[index] : series[index];
    return value ? Chartist.serialize(value.meta) : undefined;
  };

  /**
   * Calculate the order of magnitude for the chart scale
   *
   * @memberof Chartist.Core
   * @param {Number} value The value Range of the chart
   * @return {Number} The order of magnitude
   */
  Chartist.orderOfMagnitude = function (value) {
    return Math.floor(Math.log(Math.abs(value)) / Math.LN10);
  };

  /**
   * Project a data length into screen coordinates (pixels)
   *
   * @memberof Chartist.Core
   * @param {Object} axisLength The svg element for the chart
   * @param {Number} length Single data value from a series array
   * @param {Object} bounds All the values to set the bounds of the chart
   * @return {Number} The projected data length in pixels
   */
  Chartist.projectLength = function (axisLength, length, bounds) {
    return length / bounds.range * axisLength;
  };

  /**
   * Get the height of the area in the chart for the data series
   *
   * @memberof Chartist.Core
   * @param {Object} svg The svg element for the chart
   * @param {Object} options The Object that contains all the optional values for the chart
   * @return {Number} The height of the area in the chart for the data series
   */
  Chartist.getAvailableHeight = function (svg, options) {
    return Math.max((Chartist.quantity(options.height).value || svg.height()) - (options.chartPadding.top +  options.chartPadding.bottom) - options.axisX.offset, 0);
  };

  /**
   * Get highest and lowest value of data array. This Array contains the data that will be visualized in the chart.
   *
   * @memberof Chartist.Core
   * @param {Array} data The array that contains the data to be visualized in the chart
   * @param {Object} options The Object that contains the chart options
   * @param {String} dimension Axis dimension 'x' or 'y' used to access the correct value and high / low configuration
   * @return {Object} An object that contains the highest and lowest value that will be visualized on the chart.
   */
  Chartist.getHighLow = function (data, options, dimension) {
    // TODO: Remove workaround for deprecated global high / low config. Axis high / low configuration is preferred
    options = Chartist.extend({}, options, dimension ? options['axis' + dimension.toUpperCase()] : {});

    var highLow = {
        high: options.high === undefined ? -Number.MAX_VALUE : +options.high,
        low: options.low === undefined ? Number.MAX_VALUE : +options.low
      };
    var findHigh = options.high === undefined;
    var findLow = options.low === undefined;

    // Function to recursively walk through arrays and find highest and lowest number
    function recursiveHighLow(data) {
      if(data === undefined) {
        return undefined;
      } else if(data instanceof Array) {
        for (var i = 0; i < data.length; i++) {
          recursiveHighLow(data[i]);
        }
      } else {
        var value = dimension ? +data[dimension] : +data;

        if (findHigh && value > highLow.high) {
          highLow.high = value;
        }

        if (findLow && value < highLow.low) {
          highLow.low = value;
        }
      }
    }

    // Start to find highest and lowest number recursively
    if(findHigh || findLow) {
      recursiveHighLow(data);
    }

    // Overrides of high / low based on reference value, it will make sure that the invisible reference value is
    // used to generate the chart. This is useful when the chart always needs to contain the position of the
    // invisible reference value in the view i.e. for bipolar scales.
    if (options.referenceValue || options.referenceValue === 0) {
      highLow.high = Math.max(options.referenceValue, highLow.high);
      highLow.low = Math.min(options.referenceValue, highLow.low);
    }

    // If high and low are the same because of misconfiguration or flat data (only the same value) we need
    // to set the high or low to 0 depending on the polarity
    if (highLow.high <= highLow.low) {
      // If both values are 0 we set high to 1
      if (highLow.low === 0) {
        highLow.high = 1;
      } else if (highLow.low < 0) {
        // If we have the same negative value for the bounds we set bounds.high to 0
        highLow.high = 0;
      } else if (highLow.high > 0) {
        // If we have the same positive value for the bounds we set bounds.low to 0
        highLow.low = 0;
      } else {
        // If data array was empty, values are Number.MAX_VALUE and -Number.MAX_VALUE. Set bounds to prevent errors
        highLow.high = 1;
        highLow.low = 0;
      }
    }

    return highLow;
  };

  /**
   * Checks if the value is a valid number or string with a number.
   *
   * @memberof Chartist.Core
   * @param value
   * @returns {Boolean}
   */
  Chartist.isNum = function(value) {
    return !isNaN(value) && isFinite(value);
  };

  /**
   * Returns true on all falsey values except the numeric value 0.
   *
   * @memberof Chartist.Core
   * @param value
   * @returns {boolean}
   */
  Chartist.isFalseyButZero = function(value) {
    return !value && value !== 0;
  };

  /**
   * Returns a number if the passed parameter is a valid number or the function will return undefined. On all other values than a valid number, this function will return undefined.
   *
   * @memberof Chartist.Core
   * @param value
   * @returns {*}
   */
  Chartist.getNumberOrUndefined = function(value) {
    return isNaN(+value) ? undefined : +value;
  };

  /**
   * Gets a value from a dimension `value.x` or `value.y` while returning value directly if it's a valid numeric value. If the value is not numeric and it's falsey this function will return undefined.
   *
   * @param value
   * @param dimension
   * @returns {*}
   */
  Chartist.getMultiValue = function(value, dimension) {
    if(Chartist.isNum(value)) {
      return +value;
    } else if(value) {
      return value[dimension || 'y'] || 0;
    } else {
      return 0;
    }
  };

  /**
   * Pollard Rho Algorithm to find smallest factor of an integer value. There are more efficient algorithms for factorization, but this one is quite efficient and not so complex.
   *
   * @memberof Chartist.Core
   * @param {Number} num An integer number where the smallest factor should be searched for
   * @returns {Number} The smallest integer factor of the parameter num.
   */
  Chartist.rho = function(num) {
    if(num === 1) {
      return num;
    }

    function gcd(p, q) {
      if (p % q === 0) {
        return q;
      } else {
        return gcd(q, p % q);
      }
    }

    function f(x) {
      return x * x + 1;
    }

    var x1 = 2, x2 = 2, divisor;
    if (num % 2 === 0) {
      return 2;
    }

    do {
      x1 = f(x1) % num;
      x2 = f(f(x2)) % num;
      divisor = gcd(Math.abs(x1 - x2), num);
    } while (divisor === 1);

    return divisor;
  };

  /**
   * Calculate and retrieve all the bounds for the chart and return them in one array
   *
   * @memberof Chartist.Core
   * @param {Number} axisLength The length of the Axis used for
   * @param {Object} highLow An object containing a high and low property indicating the value range of the chart.
   * @param {Number} scaleMinSpace The minimum projected length a step should result in
   * @param {Boolean} onlyInteger
   * @return {Object} All the values to set the bounds of the chart
   */
  Chartist.getBounds = function (axisLength, highLow, scaleMinSpace, onlyInteger) {
    var i,
      optimizationCounter = 0,
      newMin,
      newMax,
      bounds = {
        high: highLow.high,
        low: highLow.low
      };

    bounds.valueRange = bounds.high - bounds.low;
    bounds.oom = Chartist.orderOfMagnitude(bounds.valueRange);
    bounds.step = Math.pow(10, bounds.oom);
    bounds.min = Math.floor(bounds.low / bounds.step) * bounds.step;
    bounds.max = Math.ceil(bounds.high / bounds.step) * bounds.step;
    bounds.range = bounds.max - bounds.min;
    bounds.numberOfSteps = Math.round(bounds.range / bounds.step);

    // Optimize scale step by checking if subdivision is possible based on horizontalGridMinSpace
    // If we are already below the scaleMinSpace value we will scale up
    var length = Chartist.projectLength(axisLength, bounds.step, bounds);
    var scaleUp = length < scaleMinSpace;
    var smallestFactor = onlyInteger ? Chartist.rho(bounds.range) : 0;

    // First check if we should only use integer steps and if step 1 is still larger than scaleMinSpace so we can use 1
    if(onlyInteger && Chartist.projectLength(axisLength, 1, bounds) >= scaleMinSpace) {
      bounds.step = 1;
    } else if(onlyInteger && smallestFactor < bounds.step && Chartist.projectLength(axisLength, smallestFactor, bounds) >= scaleMinSpace) {
      // If step 1 was too small, we can try the smallest factor of range
      // If the smallest factor is smaller than the current bounds.step and the projected length of smallest factor
      // is larger than the scaleMinSpace we should go for it.
      bounds.step = smallestFactor;
    } else {
      // Trying to divide or multiply by 2 and find the best step value
      while (true) {
        if (scaleUp && Chartist.projectLength(axisLength, bounds.step, bounds) <= scaleMinSpace) {
          bounds.step *= 2;
        } else if (!scaleUp && Chartist.projectLength(axisLength, bounds.step / 2, bounds) >= scaleMinSpace) {
          bounds.step /= 2;
          if(onlyInteger && bounds.step % 1 !== 0) {
            bounds.step *= 2;
            break;
          }
        } else {
          break;
        }

        if(optimizationCounter++ > 1000) {
          throw new Error('Exceeded maximum number of iterations while optimizing scale step!');
        }
      }
    }

    // step must not be less than EPSILON to create values that can be represented as floating number.
    var EPSILON = 2.221E-16;
    bounds.step = Math.max(bounds.step, EPSILON);

    // Narrow min and max based on new step
    newMin = bounds.min;
    newMax = bounds.max;
    while(newMin + bounds.step <= bounds.low) {
      newMin += bounds.step;
    }
    while(newMax - bounds.step >= bounds.high) {
      newMax -= bounds.step;
    }
    bounds.min = newMin;
    bounds.max = newMax;
    bounds.range = bounds.max - bounds.min;

    var values = [];
    for (i = bounds.min; i <= bounds.max; i += bounds.step) {
      var value = Chartist.roundWithPrecision(i);
      if (value !== values[values.length - 1]) {
        values.push(i);
      }
    }
    bounds.values = values;
    return bounds;
  };

  /**
   * Calculate cartesian coordinates of polar coordinates
   *
   * @memberof Chartist.Core
   * @param {Number} centerX X-axis coordinates of center point of circle segment
   * @param {Number} centerY X-axis coordinates of center point of circle segment
   * @param {Number} radius Radius of circle segment
   * @param {Number} angleInDegrees Angle of circle segment in degrees
   * @return {{x:Number, y:Number}} Coordinates of point on circumference
   */
  Chartist.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {
    var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;

    return {
      x: centerX + (radius * Math.cos(angleInRadians)),
      y: centerY + (radius * Math.sin(angleInRadians))
    };
  };

  /**
   * Initialize chart drawing rectangle (area where chart is drawn) x1,y1 = bottom left / x2,y2 = top right
   *
   * @memberof Chartist.Core
   * @param {Object} svg The svg element for the chart
   * @param {Object} options The Object that contains all the optional values for the chart
   * @param {Number} [fallbackPadding] The fallback padding if partial padding objects are used
   * @return {Object} The chart rectangles coordinates inside the svg element plus the rectangles measurements
   */
  Chartist.createChartRect = function (svg, options, fallbackPadding) {
    var hasAxis = !!(options.axisX || options.axisY);
    var yAxisOffset = hasAxis ? options.axisY.offset : 0;
    var xAxisOffset = hasAxis ? options.axisX.offset : 0;
    // If width or height results in invalid value (including 0) we fallback to the unitless settings or even 0
    var width = svg.width() || Chartist.quantity(options.width).value || 0;
    var height = svg.height() || Chartist.quantity(options.height).value || 0;
    var normalizedPadding = Chartist.normalizePadding(options.chartPadding, fallbackPadding);

    // If settings were to small to cope with offset (legacy) and padding, we'll adjust
    width = Math.max(width, yAxisOffset + normalizedPadding.left + normalizedPadding.right);
    height = Math.max(height, xAxisOffset + normalizedPadding.top + normalizedPadding.bottom);

    var chartRect = {
      padding: normalizedPadding,
      width: function () {
        return this.x2 - this.x1;
      },
      height: function () {
        return this.y1 - this.y2;
      }
    };

    if(hasAxis) {
      if (options.axisX.position === 'start') {
        chartRect.y2 = normalizedPadding.top + xAxisOffset;
        chartRect.y1 = Math.max(height - normalizedPadding.bottom, chartRect.y2 + 1);
      } else {
        chartRect.y2 = normalizedPadding.top;
        chartRect.y1 = Math.max(height - normalizedPadding.bottom - xAxisOffset, chartRect.y2 + 1);
      }

      if (options.axisY.position === 'start') {
        chartRect.x1 = normalizedPadding.left + yAxisOffset;
        chartRect.x2 = Math.max(width - normalizedPadding.right, chartRect.x1 + 1);
      } else {
        chartRect.x1 = normalizedPadding.left;
        chartRect.x2 = Math.max(width - normalizedPadding.right - yAxisOffset, chartRect.x1 + 1);
      }
    } else {
      chartRect.x1 = normalizedPadding.left;
      chartRect.x2 = Math.max(width - normalizedPadding.right, chartRect.x1 + 1);
      chartRect.y2 = normalizedPadding.top;
      chartRect.y1 = Math.max(height - normalizedPadding.bottom, chartRect.y2 + 1);
    }

    return chartRect;
  };

  /**
   * Creates a grid line based on a projected value.
   *
   * @memberof Chartist.Core
   * @param position
   * @param index
   * @param axis
   * @param offset
   * @param length
   * @param group
   * @param classes
   * @param eventEmitter
   */
  Chartist.createGrid = function(position, index, axis, offset, length, group, classes, eventEmitter) {
    var positionalData = {};
    positionalData[axis.units.pos + '1'] = position;
    positionalData[axis.units.pos + '2'] = position;
    positionalData[axis.counterUnits.pos + '1'] = offset;
    positionalData[axis.counterUnits.pos + '2'] = offset + length;

    var gridElement = group.elem('line', positionalData, classes.join(' '));

    // Event for grid draw
    eventEmitter.emit('draw',
      Chartist.extend({
        type: 'grid',
        axis: axis,
        index: index,
        group: group,
        element: gridElement
      }, positionalData)
    );
  };

  /**
   * Creates a label based on a projected value and an axis.
   *
   * @memberof Chartist.Core
   * @param position
   * @param length
   * @param index
   * @param labels
   * @param axis
   * @param axisOffset
   * @param labelOffset
   * @param group
   * @param classes
   * @param useForeignObject
   * @param eventEmitter
   */
  Chartist.createLabel = function(position, length, index, labels, axis, axisOffset, labelOffset, group, classes, useForeignObject, eventEmitter) {
    var labelElement;
    var positionalData = {};

    positionalData[axis.units.pos] = position + labelOffset[axis.units.pos];
    positionalData[axis.counterUnits.pos] = labelOffset[axis.counterUnits.pos];
    positionalData[axis.units.len] = length;
    positionalData[axis.counterUnits.len] = Math.max(0, axisOffset - 10);

    if(useForeignObject) {
      // We need to set width and height explicitly to px as span will not expand with width and height being
      // 100% in all browsers
      var content = '<span class="' + classes.join(' ') + '" style="' +
        axis.units.len + ': ' + Math.round(positionalData[axis.units.len]) + 'px; ' +
        axis.counterUnits.len + ': ' + Math.round(positionalData[axis.counterUnits.len]) + 'px">' +
        labels[index] + '</span>';

      labelElement = group.foreignObject(content, Chartist.extend({
        style: 'overflow: visible;'
      }, positionalData));
    } else {
      labelElement = group.elem('text', positionalData, classes.join(' ')).text(labels[index]);
    }

    eventEmitter.emit('draw', Chartist.extend({
      type: 'label',
      axis: axis,
      index: index,
      group: group,
      element: labelElement,
      text: labels[index]
    }, positionalData));
  };

  /**
   * Helper to read series specific options from options object. It automatically falls back to the global option if
   * there is no option in the series options.
   *
   * @param {Object} series Series object
   * @param {Object} options Chartist options object
   * @param {string} key The options key that should be used to obtain the options
   * @returns {*}
   */
  Chartist.getSeriesOption = function(series, options, key) {
    if(series.name && options.series && options.series[series.name]) {
      var seriesOptions = options.series[series.name];
      return seriesOptions.hasOwnProperty(key) ? seriesOptions[key] : options[key];
    } else {
      return options[key];
    }
  };

  /**
   * Provides options handling functionality with callback for options changes triggered by responsive options and media query matches
   *
   * @memberof Chartist.Core
   * @param {Object} options Options set by user
   * @param {Array} responsiveOptions Optional functions to add responsive behavior to chart
   * @param {Object} eventEmitter The event emitter that will be used to emit the options changed events
   * @return {Object} The consolidated options object from the defaults, base and matching responsive options
   */
  Chartist.optionsProvider = function (options, responsiveOptions, eventEmitter) {
    var baseOptions = Chartist.extend({}, options),
      currentOptions,
      mediaQueryListeners = [],
      i;

    function updateCurrentOptions(mediaEvent) {
      var previousOptions = currentOptions;
      currentOptions = Chartist.extend({}, baseOptions);

      if (responsiveOptions) {
        for (i = 0; i < responsiveOptions.length; i++) {
          var mql = window.matchMedia(responsiveOptions[i][0]);
          if (mql.matches) {
            currentOptions = Chartist.extend(currentOptions, responsiveOptions[i][1]);
          }
        }
      }

      if(eventEmitter && mediaEvent) {
        eventEmitter.emit('optionsChanged', {
          previousOptions: previousOptions,
          currentOptions: currentOptions
        });
      }
    }

    function removeMediaQueryListeners() {
      mediaQueryListeners.forEach(function(mql) {
        mql.removeListener(updateCurrentOptions);
      });
    }

    if (!window.matchMedia) {
      throw 'window.matchMedia not found! Make sure you\'re using a polyfill.';
    } else if (responsiveOptions) {

      for (i = 0; i < responsiveOptions.length; i++) {
        var mql = window.matchMedia(responsiveOptions[i][0]);
        mql.addListener(updateCurrentOptions);
        mediaQueryListeners.push(mql);
      }
    }
    // Execute initially without an event argument so we get the correct options
    updateCurrentOptions();

    return {
      removeMediaQueryListeners: removeMediaQueryListeners,
      getCurrentOptions: function getCurrentOptions() {
        return Chartist.extend({}, currentOptions);
      }
    };
  };


  /**
   * Splits a list of coordinates and associated values into segments. Each returned segment contains a pathCoordinates
   * valueData property describing the segment.
   *
   * With the default options, segments consist of contiguous sets of points that do not have an undefined value. Any
   * points with undefined values are discarded.
   *
   * **Options**
   * The following options are used to determine how segments are formed
   * ```javascript
   * var options = {
   *   // If fillHoles is true, undefined values are simply discarded without creating a new segment. Assuming other options are default, this returns single segment.
   *   fillHoles: false,
   *   // If increasingX is true, the coordinates in all segments have strictly increasing x-values.
   *   increasingX: false
   * };
   * ```
   *
   * @memberof Chartist.Core
   * @param {Array} pathCoordinates List of point coordinates to be split in the form [x1, y1, x2, y2 ... xn, yn]
   * @param {Array} values List of associated point values in the form [v1, v2 .. vn]
   * @param {Object} options Options set by user
   * @return {Array} List of segments, each containing a pathCoordinates and valueData property.
   */
  Chartist.splitIntoSegments = function(pathCoordinates, valueData, options) {
    var defaultOptions = {
      increasingX: false,
      fillHoles: false
    };

    options = Chartist.extend({}, defaultOptions, options);

    var segments = [];
    var hole = true;

    for(var i = 0; i < pathCoordinates.length; i += 2) {
      // If this value is a "hole" we set the hole flag
      if(valueData[i / 2].value === undefined) {
        if(!options.fillHoles) {
          hole = true;
        }
      } else {
        if(options.increasingX && i >= 2 && pathCoordinates[i] <= pathCoordinates[i-2]) {
          // X is not increasing, so we need to make sure we start a new segment
          hole = true;
        }


        // If it's a valid value we need to check if we're coming out of a hole and create a new empty segment
        if(hole) {
          segments.push({
            pathCoordinates: [],
            valueData: []
          });
          // As we have a valid value now, we are not in a "hole" anymore
          hole = false;
        }

        // Add to the segment pathCoordinates and valueData
        segments[segments.length - 1].pathCoordinates.push(pathCoordinates[i], pathCoordinates[i + 1]);
        segments[segments.length - 1].valueData.push(valueData[i / 2]);
      }
    }

    return segments;
  };
}(window, document, Chartist));
;/**
 * Chartist path interpolation functions.
 *
 * @module Chartist.Interpolation
 */
/* global Chartist */
(function(window, document, Chartist) {
  'use strict';

  Chartist.Interpolation = {};

  /**
   * This interpolation function does not smooth the path and the result is only containing lines and no curves.
   *
   * @example
   * var chart = new Chartist.Line('.ct-chart', {
   *   labels: [1, 2, 3, 4, 5],
   *   series: [[1, 2, 8, 1, 7]]
   * }, {
   *   lineSmooth: Chartist.Interpolation.none({
   *     fillHoles: false
   *   })
   * });
   *
   *
   * @memberof Chartist.Interpolation
   * @return {Function}
   */
  Chartist.Interpolation.none = function(options) {
    var defaultOptions = {
      fillHoles: false
    };
    options = Chartist.extend({}, defaultOptions, options);
    return function none(pathCoordinates, valueData) {
      var path = new Chartist.Svg.Path();
      var hole = true;

      for(var i = 0; i < pathCoordinates.length; i += 2) {
        var currX = pathCoordinates[i];
        var currY = pathCoordinates[i + 1];
        var currData = valueData[i / 2];

        if(currData.value !== undefined) {

          if(hole) {
            path.move(currX, currY, false, currData);
          } else {
            path.line(currX, currY, false, currData);
          }

          hole = false;
        } else if(!options.fillHoles) {
          hole = true;
        }
      }

      return path;
    };
  };

  /**
   * Simple smoothing creates horizontal handles that are positioned with a fraction of the length between two data points. You can use the divisor option to specify the amount of smoothing.
   *
   * Simple smoothing can be used instead of `Chartist.Smoothing.cardinal` if you'd like to get rid of the artifacts it produces sometimes. Simple smoothing produces less flowing lines but is accurate by hitting the points and it also doesn't swing below or above the given data point.
   *
   * All smoothing functions within Chartist are factory functions that accept an options parameter. The simple interpolation function accepts one configuration parameter `divisor`, between 1 and ∞, which controls the smoothing characteristics.
   *
   * @example
   * var chart = new Chartist.Line('.ct-chart', {
   *   labels: [1, 2, 3, 4, 5],
   *   series: [[1, 2, 8, 1, 7]]
   * }, {
   *   lineSmooth: Chartist.Interpolation.simple({
   *     divisor: 2,
   *     fillHoles: false
   *   })
   * });
   *
   *
   * @memberof Chartist.Interpolation
   * @param {Object} options The options of the simple interpolation factory function.
   * @return {Function}
   */
  Chartist.Interpolation.simple = function(options) {
    var defaultOptions = {
      divisor: 2,
      fillHoles: false
    };
    options = Chartist.extend({}, defaultOptions, options);

    var d = 1 / Math.max(1, options.divisor);

    return function simple(pathCoordinates, valueData) {
      var path = new Chartist.Svg.Path();
      var prevX, prevY, prevData;

      for(var i = 0; i < pathCoordinates.length; i += 2) {
        var currX = pathCoordinates[i];
        var currY = pathCoordinates[i + 1];
        var length = (currX - prevX) * d;
        var currData = valueData[i / 2];

        if(currData.value !== undefined) {

          if(prevData === undefined) {
            path.move(currX, currY, false, currData);
          } else {
            path.curve(
              prevX + length,
              prevY,
              currX - length,
              currY,
              currX,
              currY,
              false,
              currData
            );
          }

          prevX = currX;
          prevY = currY;
          prevData = currData;
        } else if(!options.fillHoles) {
          prevX = currX = prevData = undefined;
        }
      }

      return path;
    };
  };

  /**
   * Cardinal / Catmull-Rome spline interpolation is the default smoothing function in Chartist. It produces nice results where the splines will always meet the points. It produces some artifacts though when data values are increased or decreased rapidly. The line may not follow a very accurate path and if the line should be accurate this smoothing function does not produce the best results.
   *
   * Cardinal splines can only be created if there are more than two data points. If this is not the case this smoothing will fallback to `Chartist.Smoothing.none`.
   *
   * All smoothing functions within Chartist are factory functions that accept an options parameter. The cardinal interpolation function accepts one configuration parameter `tension`, between 0 and 1, which controls the smoothing intensity.
   *
   * @example
   * var chart = new Chartist.Line('.ct-chart', {
   *   labels: [1, 2, 3, 4, 5],
   *   series: [[1, 2, 8, 1, 7]]
   * }, {
   *   lineSmooth: Chartist.Interpolation.cardinal({
   *     tension: 1,
   *     fillHoles: false
   *   })
   * });
   *
   * @memberof Chartist.Interpolation
   * @param {Object} options The options of the cardinal factory function.
   * @return {Function}
   */
  Chartist.Interpolation.cardinal = function(options) {
    var defaultOptions = {
      tension: 1,
      fillHoles: false
    };

    options = Chartist.extend({}, defaultOptions, options);

    var t = Math.min(1, Math.max(0, options.tension)),
      c = 1 - t;

    return function cardinal(pathCoordinates, valueData) {
      // First we try to split the coordinates into segments
      // This is necessary to treat "holes" in line charts
      var segments = Chartist.splitIntoSegments(pathCoordinates, valueData, {
        fillHoles: options.fillHoles
      });

      if(!segments.length) {
        // If there were no segments return 'Chartist.Interpolation.none'
        return Chartist.Interpolation.none()([]);
      } else if(segments.length > 1) {
        // If the split resulted in more that one segment we need to interpolate each segment individually and join them
        // afterwards together into a single path.
          var paths = [];
        // For each segment we will recurse the cardinal function
        segments.forEach(function(segment) {
          paths.push(cardinal(segment.pathCoordinates, segment.valueData));
        });
        // Join the segment path data into a single path and return
        return Chartist.Svg.Path.join(paths);
      } else {
        // If there was only one segment we can proceed regularly by using pathCoordinates and valueData from the first
        // segment
        pathCoordinates = segments[0].pathCoordinates;
        valueData = segments[0].valueData;

        // If less than two points we need to fallback to no smoothing
        if(pathCoordinates.length <= 4) {
          return Chartist.Interpolation.none()(pathCoordinates, valueData);
        }

        var path = new Chartist.Svg.Path().move(pathCoordinates[0], pathCoordinates[1], false, valueData[0]),
          z;

        for (var i = 0, iLen = pathCoordinates.length; iLen - 2 * !z > i; i += 2) {
          var p = [
            {x: +pathCoordinates[i - 2], y: +pathCoordinates[i - 1]},
            {x: +pathCoordinates[i], y: +pathCoordinates[i + 1]},
            {x: +pathCoordinates[i + 2], y: +pathCoordinates[i + 3]},
            {x: +pathCoordinates[i + 4], y: +pathCoordinates[i + 5]}
          ];
          if (z) {
            if (!i) {
              p[0] = {x: +pathCoordinates[iLen - 2], y: +pathCoordinates[iLen - 1]};
            } else if (iLen - 4 === i) {
              p[3] = {x: +pathCoordinates[0], y: +pathCoordinates[1]};
            } else if (iLen - 2 === i) {
              p[2] = {x: +pathCoordinates[0], y: +pathCoordinates[1]};
              p[3] = {x: +pathCoordinates[2], y: +pathCoordinates[3]};
            }
          } else {
            if (iLen - 4 === i) {
              p[3] = p[2];
            } else if (!i) {
              p[0] = {x: +pathCoordinates[i], y: +pathCoordinates[i + 1]};
            }
          }

          path.curve(
            (t * (-p[0].x + 6 * p[1].x + p[2].x) / 6) + (c * p[2].x),
            (t * (-p[0].y + 6 * p[1].y + p[2].y) / 6) + (c * p[2].y),
            (t * (p[1].x + 6 * p[2].x - p[3].x) / 6) + (c * p[2].x),
            (t * (p[1].y + 6 * p[2].y - p[3].y) / 6) + (c * p[2].y),
            p[2].x,
            p[2].y,
            false,
            valueData[(i + 2) / 2]
          );
        }

        return path;
      }
    };
  };

  /**
   * Monotone Cubic spline interpolation produces a smooth curve which preserves monotonicity. Unlike cardinal splines, the curve will not extend beyond the range of y-values of the original data points.
   *
   * Monotone Cubic splines can only be created if there are more than two data points. If this is not the case this smoothing will fallback to `Chartist.Smoothing.none`.
   *
   * The x-values of subsequent points must be increasing to fit a Monotone Cubic spline. If this condition is not met for a pair of adjacent points, then there will be a break in the curve between those data points.
   *
   * All smoothing functions within Chartist are factory functions that accept an options parameter.
   *
   * @example
   * var chart = new Chartist.Line('.ct-chart', {
   *   labels: [1, 2, 3, 4, 5],
   *   series: [[1, 2, 8, 1, 7]]
   * }, {
   *   lineSmooth: Chartist.Interpolation.monotoneCubic({
   *     fillHoles: false
   *   })
   * });
   *
   * @memberof Chartist.Interpolation
   * @param {Object} options The options of the monotoneCubic factory function.
   * @return {Function}
   */
  Chartist.Interpolation.monotoneCubic = function(options) {
    var defaultOptions = {
      fillHoles: false
    };

    options = Chartist.extend({}, defaultOptions, options);

    return function monotoneCubic(pathCoordinates, valueData) {
      // First we try to split the coordinates into segments
      // This is necessary to treat "holes" in line charts
      var segments = Chartist.splitIntoSegments(pathCoordinates, valueData, {
        fillHoles: options.fillHoles,
        increasingX: true
      });

      if(!segments.length) {
        // If there were no segments return 'Chartist.Interpolation.none'
        return Chartist.Interpolation.none()([]);
      } else if(segments.length > 1) {
        // If the split resulted in more that one segment we need to interpolate each segment individually and join them
        // afterwards together into a single path.
          var paths = [];
        // For each segment we will recurse the monotoneCubic fn function
        segments.forEach(function(segment) {
          paths.push(monotoneCubic(segment.pathCoordinates, segment.valueData));
        });
        // Join the segment path data into a single path and return
        return Chartist.Svg.Path.join(paths);
      } else {
        // If there was only one segment we can proceed regularly by using pathCoordinates and valueData from the first
        // segment
        pathCoordinates = segments[0].pathCoordinates;
        valueData = segments[0].valueData;

        // If less than three points we need to fallback to no smoothing
        if(pathCoordinates.length <= 4) {
          return Chartist.Interpolation.none()(pathCoordinates, valueData);
        }

        var xs = [],
          ys = [],
          i,
          n = pathCoordinates.length / 2,
          ms = [],
          ds = [], dys = [], dxs = [],
          path;

        // Populate x and y coordinates into separate arrays, for readability

        for(i = 0; i < n; i++) {
          xs[i] = pathCoordinates[i * 2];
          ys[i] = pathCoordinates[i * 2 + 1];
        }

        // Calculate deltas and derivative

        for(i = 0; i < n - 1; i++) {
          dys[i] = ys[i + 1] - ys[i];
          dxs[i] = xs[i + 1] - xs[i];
          ds[i] = dys[i] / dxs[i];
        }

        // Determine desired slope (m) at each point using Fritsch-Carlson method
        // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation

        ms[0] = ds[0];
        ms[n - 1] = ds[n - 2];

        for(i = 1; i < n - 1; i++) {
          if(ds[i] === 0 || ds[i - 1] === 0 || (ds[i - 1] > 0) !== (ds[i] > 0)) {
            ms[i] = 0;
          } else {
            ms[i] = 3 * (dxs[i - 1] + dxs[i]) / (
              (2 * dxs[i] + dxs[i - 1]) / ds[i - 1] +
              (dxs[i] + 2 * dxs[i - 1]) / ds[i]);

            if(!isFinite(ms[i])) {
              ms[i] = 0;
            }
          }
        }

        // Now build a path from the slopes

        path = new Chartist.Svg.Path().move(xs[0], ys[0], false, valueData[0]);

        for(i = 0; i < n - 1; i++) {
          path.curve(
            // First control point
            xs[i] + dxs[i] / 3,
            ys[i] + ms[i] * dxs[i] / 3,
            // Second control point
            xs[i + 1] - dxs[i] / 3,
            ys[i + 1] - ms[i + 1] * dxs[i] / 3,
            // End point
            xs[i + 1],
            ys[i + 1],

            false,
            valueData[i + 1]
          );
        }

        return path;
      }
    };
  };

  /**
   * Step interpolation will cause the line chart to move in steps rather than diagonal or smoothed lines. This interpolation will create additional points that will also be drawn when the `showPoint` option is enabled.
   *
   * All smoothing functions within Chartist are factory functions that accept an options parameter. The step interpolation function accepts one configuration parameter `postpone`, that can be `true` or `false`. The default value is `true` and will cause the step to occur where the value actually changes. If a different behaviour is needed where the step is shifted to the left and happens before the actual value, this option can be set to `false`.
   *
   * @example
   * var chart = new Chartist.Line('.ct-chart', {
   *   labels: [1, 2, 3, 4, 5],
   *   series: [[1, 2, 8, 1, 7]]
   * }, {
   *   lineSmooth: Chartist.Interpolation.step({
   *     postpone: true,
   *     fillHoles: false
   *   })
   * });
   *
   * @memberof Chartist.Interpolation
   * @param options
   * @returns {Function}
   */
  Chartist.Interpolation.step = function(options) {
    var defaultOptions = {
      postpone: true,
      fillHoles: false
    };

    options = Chartist.extend({}, defaultOptions, options);

    return function step(pathCoordinates, valueData) {
      var path = new Chartist.Svg.Path();

      var prevX, prevY, prevData;

      for (var i = 0; i < pathCoordinates.length; i += 2) {
        var currX = pathCoordinates[i];
        var currY = pathCoordinates[i + 1];
        var currData = valueData[i / 2];

        // If the current point is also not a hole we can draw the step lines
        if(currData.value !== undefined) {
          if(prevData === undefined) {
            path.move(currX, currY, false, currData);
          } else {
            if(options.postpone) {
              // If postponed we should draw the step line with the value of the previous value
              path.line(currX, prevY, false, prevData);
            } else {
              // If not postponed we should draw the step line with the value of the current value
              path.line(prevX, currY, false, currData);
            }
            // Line to the actual point (this should only be a Y-Axis movement
            path.line(currX, currY, false, currData);
          }

          prevX = currX;
          prevY = currY;
          prevData = currData;
        } else if(!options.fillHoles) {
          prevX = prevY = prevData = undefined;
        }
      }

      return path;
    };
  };

}(window, document, Chartist));
;/**
 * A very basic event module that helps to generate and catch events.
 *
 * @module Chartist.Event
 */
/* global Chartist */
(function (window, document, Chartist) {
  'use strict';

  Chartist.EventEmitter = function () {
    var handlers = [];

    /**
     * Add an event handler for a specific event
     *
     * @memberof Chartist.Event
     * @param {String} event The event name
     * @param {Function} handler A event handler function
     */
    function addEventHandler(event, handler) {
      handlers[event] = handlers[event] || [];
      handlers[event].push(handler);
    }

    /**
     * Remove an event handler of a specific event name or remove all event handlers for a specific event.
     *
     * @memberof Chartist.Event
     * @param {String} event The event name where a specific or all handlers should be removed
     * @param {Function} [handler] An optional event handler function. If specified only this specific handler will be removed and otherwise all handlers are removed.
     */
    function removeEventHandler(event, handler) {
      // Only do something if there are event handlers with this name existing
      if(handlers[event]) {
        // If handler is set we will look for a specific handler and only remove this
        if(handler) {
          handlers[event].splice(handlers[event].indexOf(handler), 1);
          if(handlers[event].length === 0) {
            delete handlers[event];
          }
        } else {
          // If no handler is specified we remove all handlers for this event
          delete handlers[event];
        }
      }
    }

    /**
     * Use this function to emit an event. All handlers that are listening for this event will be triggered with the data parameter.
     *
     * @memberof Chartist.Event
     * @param {String} event The event name that should be triggered
     * @param {*} data Arbitrary data that will be passed to the event handler callback functions
     */
    function emit(event, data) {
      // Only do something if there are event handlers with this name existing
      if(handlers[event]) {
        handlers[event].forEach(function(handler) {
          handler(data);
        });
      }

      // Emit event to star event handlers
      if(handlers['*']) {
        handlers['*'].forEach(function(starHandler) {
          starHandler(event, data);
        });
      }
    }

    return {
      addEventHandler: addEventHandler,
      removeEventHandler: removeEventHandler,
      emit: emit
    };
  };

}(window, document, Chartist));
;/**
 * This module provides some basic prototype inheritance utilities.
 *
 * @module Chartist.Class
 */
/* global Chartist */
(function(window, document, Chartist) {
  'use strict';

  function listToArray(list) {
    var arr = [];
    if (list.length) {
      for (var i = 0; i < list.length; i++) {
        arr.push(list[i]);
      }
    }
    return arr;
  }

  /**
   * Method to extend from current prototype.
   *
   * @memberof Chartist.Class
   * @param {Object} properties The object that serves as definition for the prototype that gets created for the new class. This object should always contain a constructor property that is the desired constructor for the newly created class.
   * @param {Object} [superProtoOverride] By default extens will use the current class prototype or Chartist.class. With this parameter you can specify any super prototype that will be used.
   * @return {Function} Constructor function of the new class
   *
   * @example
   * var Fruit = Class.extend({
     * color: undefined,
     *   sugar: undefined,
     *
     *   constructor: function(color, sugar) {
     *     this.color = color;
     *     this.sugar = sugar;
     *   },
     *
     *   eat: function() {
     *     this.sugar = 0;
     *     return this;
     *   }
     * });
   *
   * var Banana = Fruit.extend({
     *   length: undefined,
     *
     *   constructor: function(length, sugar) {
     *     Banana.super.constructor.call(this, 'Yellow', sugar);
     *     this.length = length;
     *   }
     * });
   *
   * var banana = new Banana(20, 40);
   * console.log('banana instanceof Fruit', banana instanceof Fruit);
   * console.log('Fruit is prototype of banana', Fruit.prototype.isPrototypeOf(banana));
   * console.log('bananas prototype is Fruit', Object.getPrototypeOf(banana) === Fruit.prototype);
   * console.log(banana.sugar);
   * console.log(banana.eat().sugar);
   * console.log(banana.color);
   */
  function extend(properties, superProtoOverride) {
    var superProto = superProtoOverride || this.prototype || Chartist.Class;
    var proto = Object.create(superProto);

    Chartist.Class.cloneDefinitions(proto, properties);

    var constr = function() {
      var fn = proto.constructor || function () {},
        instance;

      // If this is linked to the Chartist namespace the constructor was not called with new
      // To provide a fallback we will instantiate here and return the instance
      instance = this === Chartist ? Object.create(proto) : this;
      fn.apply(instance, Array.prototype.slice.call(arguments, 0));

      // If this constructor was not called with new we need to return the instance
      // This will not harm when the constructor has been called with new as the returned value is ignored
      return instance;
    };

    constr.prototype = proto;
    constr.super = superProto;
    constr.extend = this.extend;

    return constr;
  }

  // Variable argument list clones args > 0 into args[0] and retruns modified args[0]
  function cloneDefinitions() {
    var args = listToArray(arguments);
    var target = args[0];

    args.splice(1, args.length - 1).forEach(function (source) {
      Object.getOwnPropertyNames(source).forEach(function (propName) {
        // If this property already exist in target we delete it first
        delete target[propName];
        // Define the property with the descriptor from source
        Object.defineProperty(target, propName,
          Object.getOwnPropertyDescriptor(source, propName));
      });
    });

    return target;
  }

  Chartist.Class = {
    extend: extend,
    cloneDefinitions: cloneDefinitions
  };

}(window, document, Chartist));
;/**
 * Base for all chart types. The methods in Chartist.Base are inherited to all chart types.
 *
 * @module Chartist.Base
 */
/* global Chartist */
(function(window, document, Chartist) {
  'use strict';

  // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.
  // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not
  // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.
  // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html
  // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj
  // The problem is with the label offsets that can't be converted into percentage and affecting the chart container
  /**
   * Updates the chart which currently does a full reconstruction of the SVG DOM
   *
   * @param {Object} [data] Optional data you'd like to set for the chart before it will update. If not specified the update method will use the data that is already configured with the chart.
   * @param {Object} [options] Optional options you'd like to add to the previous options for the chart before it will update. If not specified the update method will use the options that have been already configured with the chart.
   * @param {Boolean} [override] If set to true, the passed options will be used to extend the options that have been configured already. Otherwise the chart default options will be used as the base
   * @memberof Chartist.Base
   */
  function update(data, options, override) {
    if(data) {
      this.data = data;
      // Event for data transformation that allows to manipulate the data before it gets rendered in the charts
      this.eventEmitter.emit('data', {
        type: 'update',
        data: this.data
      });
    }

    if(options) {
      this.options = Chartist.extend({}, override ? this.options : this.defaultOptions, options);

      // If chartist was not initialized yet, we just set the options and leave the rest to the initialization
      // Otherwise we re-create the optionsProvider at this point
      if(!this.initializeTimeoutId) {
        this.optionsProvider.removeMediaQueryListeners();
        this.optionsProvider = Chartist.optionsProvider(this.options, this.responsiveOptions, this.eventEmitter);
      }
    }

    // Only re-created the chart if it has been initialized yet
    if(!this.initializeTimeoutId) {
      this.createChart(this.optionsProvider.getCurrentOptions());
    }

    // Return a reference to the chart object to chain up calls
    return this;
  }

  /**
   * This method can be called on the API object of each chart and will un-register all event listeners that were added to other components. This currently includes a window.resize listener as well as media query listeners if any responsive options have been provided. Use this function if you need to destroy and recreate Chartist charts dynamically.
   *
   * @memberof Chartist.Base
   */
  function detach() {
    // Only detach if initialization already occurred on this chart. If this chart still hasn't initialized (therefore
    // the initializationTimeoutId is still a valid timeout reference, we will clear the timeout
    if(!this.initializeTimeoutId) {
      window.removeEventListener('resize', this.resizeListener);
      this.optionsProvider.removeMediaQueryListeners();
    } else {
      window.clearTimeout(this.initializeTimeoutId);
    }

    return this;
  }

  /**
   * Use this function to register event handlers. The handler callbacks are synchronous and will run in the main thread rather than the event loop.
   *
   * @memberof Chartist.Base
   * @param {String} event Name of the event. Check the examples for supported events.
   * @param {Function} handler The handler function that will be called when an event with the given name was emitted. This function will receive a data argument which contains event data. See the example for more details.
   */
  function on(event, handler) {
    this.eventEmitter.addEventHandler(event, handler);
    return this;
  }

  /**
   * Use this function to un-register event handlers. If the handler function parameter is omitted all handlers for the given event will be un-registered.
   *
   * @memberof Chartist.Base
   * @param {String} event Name of the event for which a handler should be removed
   * @param {Function} [handler] The handler function that that was previously used to register a new event handler. This handler will be removed from the event handler list. If this parameter is omitted then all event handlers for the given event are removed from the list.
   */
  function off(event, handler) {
    this.eventEmitter.removeEventHandler(event, handler);
    return this;
  }

  function initialize() {
    // Add window resize listener that re-creates the chart
    window.addEventListener('resize', this.resizeListener);

    // Obtain current options based on matching media queries (if responsive options are given)
    // This will also register a listener that is re-creating the chart based on media changes
    this.optionsProvider = Chartist.optionsProvider(this.options, this.responsiveOptions, this.eventEmitter);
    // Register options change listener that will trigger a chart update
    this.eventEmitter.addEventHandler('optionsChanged', function() {
      this.update();
    }.bind(this));

    // Before the first chart creation we need to register us with all plugins that are configured
    // Initialize all relevant plugins with our chart object and the plugin options specified in the config
    if(this.options.plugins) {
      this.options.plugins.forEach(function(plugin) {
        if(plugin instanceof Array) {
          plugin[0](this, plugin[1]);
        } else {
          plugin(this);
        }
      }.bind(this));
    }

    // Event for data transformation that allows to manipulate the data before it gets rendered in the charts
    this.eventEmitter.emit('data', {
      type: 'initial',
      data: this.data
    });

    // Create the first chart
    this.createChart(this.optionsProvider.getCurrentOptions());

    // As chart is initialized from the event loop now we can reset our timeout reference
    // This is important if the chart gets initialized on the same element twice
    this.initializeTimeoutId = undefined;
  }

  /**
   * Constructor of chart base class.
   *
   * @param query
   * @param data
   * @param defaultOptions
   * @param options
   * @param responsiveOptions
   * @constructor
   */
  function Base(query, data, defaultOptions, options, responsiveOptions) {
    this.container = Chartist.querySelector(query);
    this.data = data;
    this.defaultOptions = defaultOptions;
    this.options = options;
    this.responsiveOptions = responsiveOptions;
    this.eventEmitter = Chartist.EventEmitter();
    this.supportsForeignObject = Chartist.Svg.isSupported('Extensibility');
    this.supportsAnimations = Chartist.Svg.isSupported('AnimationEventsAttribute');
    this.resizeListener = function resizeListener(){
      this.update();
    }.bind(this);

    if(this.container) {
      // If chartist was already initialized in this container we are detaching all event listeners first
      if(this.container.__chartist__) {
        this.container.__chartist__.detach();
      }

      this.container.__chartist__ = this;
    }

    // Using event loop for first draw to make it possible to register event listeners in the same call stack where
    // the chart was created.
    this.initializeTimeoutId = setTimeout(initialize.bind(this), 0);
  }

  // Creating the chart base class
  Chartist.Base = Chartist.Class.extend({
    constructor: Base,
    optionsProvider: undefined,
    container: undefined,
    svg: undefined,
    eventEmitter: undefined,
    createChart: function() {
      throw new Error('Base chart type can\'t be instantiated!');
    },
    update: update,
    detach: detach,
    on: on,
    off: off,
    version: Chartist.version,
    supportsForeignObject: false
  });

}(window, document, Chartist));
;/**
 * Chartist SVG module for simple SVG DOM abstraction
 *
 * @module Chartist.Svg
 */
/* global Chartist */
(function(window, document, Chartist) {
  'use strict';

  /**
   * Chartist.Svg creates a new SVG object wrapper with a starting element. You can use the wrapper to fluently create sub-elements and modify them.
   *
   * @memberof Chartist.Svg
   * @constructor
   * @param {String|Element} name The name of the SVG element to create or an SVG dom element which should be wrapped into Chartist.Svg
   * @param {Object} attributes An object with properties that will be added as attributes to the SVG element that is created. Attributes with undefined values will not be added.
   * @param {String} className This class or class list will be added to the SVG element
   * @param {Object} parent The parent SVG wrapper object where this newly created wrapper and it's element will be attached to as child
   * @param {Boolean} insertFirst If this param is set to true in conjunction with a parent element the newly created element will be added as first child element in the parent element
   */
  function Svg(name, attributes, className, parent, insertFirst) {
    // If Svg is getting called with an SVG element we just return the wrapper
    if(name instanceof Element) {
      this._node = name;
    } else {
      this._node = document.createElementNS(Chartist.namespaces.svg, name);

      // If this is an SVG element created then custom namespace
      if(name === 'svg') {
        this.attr({
          'xmlns:ct': Chartist.namespaces.ct
        });
      }
    }

    if(attributes) {
      this.attr(attributes);
    }

    if(className) {
      this.addClass(className);
    }

    if(parent) {
      if (insertFirst && parent._node.firstChild) {
        parent._node.insertBefore(this._node, parent._node.firstChild);
      } else {
        parent._node.appendChild(this._node);
      }
    }
  }

  /**
   * Set attributes on the current SVG element of the wrapper you're currently working on.
   *
   * @memberof Chartist.Svg
   * @param {Object|String} attributes An object with properties that will be added as attributes to the SVG element that is created. Attributes with undefined values will not be added. If this parameter is a String then the function is used as a getter and will return the attribute value.
   * @param {String} ns If specified, the attribute will be obtained using getAttributeNs. In order to write namepsaced attributes you can use the namespace:attribute notation within the attributes object.
   * @return {Object|String} The current wrapper object will be returned so it can be used for chaining or the attribute value if used as getter function.
   */
  function attr(attributes, ns) {
    if(typeof attributes === 'string') {
      if(ns) {
        return this._node.getAttributeNS(ns, attributes);
      } else {
        return this._node.getAttribute(attributes);
      }
    }

    Object.keys(attributes).forEach(function(key) {
      // If the attribute value is undefined we can skip this one
      if(attributes[key] === undefined) {
        return;
      }

      if (key.indexOf(':') !== -1) {
        var namespacedAttribute = key.split(':');
        this._node.setAttributeNS(Chartist.namespaces[namespacedAttribute[0]], key, attributes[key]);
      } else {
        this._node.setAttribute(key, attributes[key]);
      }
    }.bind(this));

    return this;
  }

  /**
   * Create a new SVG element whose wrapper object will be selected for further operations. This way you can also create nested groups easily.
   *
   * @memberof Chartist.Svg
   * @param {String} name The name of the SVG element that should be created as child element of the currently selected element wrapper
   * @param {Object} [attributes] An object with properties that will be added as attributes to the SVG element that is created. Attributes with undefined values will not be added.
   * @param {String} [className] This class or class list will be added to the SVG element
   * @param {Boolean} [insertFirst] If this param is set to true in conjunction with a parent element the newly created element will be added as first child element in the parent element
   * @return {Chartist.Svg} Returns a Chartist.Svg wrapper object that can be used to modify the containing SVG data
   */
  function elem(name, attributes, className, insertFirst) {
    return new Chartist.Svg(name, attributes, className, this, insertFirst);
  }

  /**
   * Returns the parent Chartist.SVG wrapper object
   *
   * @memberof Chartist.Svg
   * @return {Chartist.Svg} Returns a Chartist.Svg wrapper around the parent node of the current node. If the parent node is not existing or it's not an SVG node then this function will return null.
   */
  function parent() {
    return this._node.parentNode instanceof SVGElement ? new Chartist.Svg(this._node.parentNode) : null;
  }

  /**
   * This method returns a Chartist.Svg wrapper around the root SVG element of the current tree.
   *
   * @memberof Chartist.Svg
   * @return {Chartist.Svg} The root SVG element wrapped in a Chartist.Svg element
   */
  function root() {
    var node = this._node;
    while(node.nodeName !== 'svg') {
      node = node.parentNode;
    }
    return new Chartist.Svg(node);
  }

  /**
   * Find the first child SVG element of the current element that matches a CSS selector. The returned object is a Chartist.Svg wrapper.
   *
   * @memberof Chartist.Svg
   * @param {String} selector A CSS selector that is used to query for child SVG elements
   * @return {Chartist.Svg} The SVG wrapper for the element found or null if no element was found
   */
  function querySelector(selector) {
    var foundNode = this._node.querySelector(selector);
    return foundNode ? new Chartist.Svg(foundNode) : null;
  }

  /**
   * Find the all child SVG elements of the current element that match a CSS selector. The returned object is a Chartist.Svg.List wrapper.
   *
   * @memberof Chartist.Svg
   * @param {String} selector A CSS selector that is used to query for child SVG elements
   * @return {Chartist.Svg.List} The SVG wrapper list for the element found or null if no element was found
   */
  function querySelectorAll(selector) {
    var foundNodes = this._node.querySelectorAll(selector);
    return foundNodes.length ? new Chartist.Svg.List(foundNodes) : null;
  }

  /**
   * This method creates a foreignObject (see https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject) that allows to embed HTML content into a SVG graphic. With the help of foreignObjects you can enable the usage of regular HTML elements inside of SVG where they are subject for SVG positioning and transformation but the Browser will use the HTML rendering capabilities for the containing DOM.
   *
   * @memberof Chartist.Svg
   * @param {Node|String} content The DOM Node, or HTML string that will be converted to a DOM Node, that is then placed into and wrapped by the foreignObject
   * @param {String} [attributes] An object with properties that will be added as attributes to the foreignObject element that is created. Attributes with undefined values will not be added.
   * @param {String} [className] This class or class list will be added to the SVG element
   * @param {Boolean} [insertFirst] Specifies if the foreignObject should be inserted as first child
   * @return {Chartist.Svg} New wrapper object that wraps the foreignObject element
   */
  function foreignObject(content, attributes, className, insertFirst) {
    // If content is string then we convert it to DOM
    // TODO: Handle case where content is not a string nor a DOM Node
    if(typeof content === 'string') {
      var container = document.createElement('div');
      container.innerHTML = content;
      content = container.firstChild;
    }

    // Adding namespace to content element
    content.setAttribute('xmlns', Chartist.namespaces.xmlns);

    // Creating the foreignObject without required extension attribute (as described here
    // http://www.w3.org/TR/SVG/extend.html#ForeignObjectElement)
    var fnObj = this.elem('foreignObject', attributes, className, insertFirst);

    // Add content to foreignObjectElement
    fnObj._node.appendChild(content);

    return fnObj;
  }

  /**
   * This method adds a new text element to the current Chartist.Svg wrapper.
   *
   * @memberof Chartist.Svg
   * @param {String} t The text that should be added to the text element that is created
   * @return {Chartist.Svg} The same wrapper object that was used to add the newly created element
   */
  function text(t) {
    this._node.appendChild(document.createTextNode(t));
    return this;
  }

  /**
   * This method will clear all child nodes of the current wrapper object.
   *
   * @memberof Chartist.Svg
   * @return {Chartist.Svg} The same wrapper object that got emptied
   */
  function empty() {
    while (this._node.firstChild) {
      this._node.removeChild(this._node.firstChild);
    }

    return this;
  }

  /**
   * This method will cause the current wrapper to remove itself from its parent wrapper. Use this method if you'd like to get rid of an element in a given DOM structure.
   *
   * @memberof Chartist.Svg
   * @return {Chartist.Svg} The parent wrapper object of the element that got removed
   */
  function remove() {
    this._node.parentNode.removeChild(this._node);
    return this.parent();
  }

  /**
   * This method will replace the element with a new element that can be created outside of the current DOM.
   *
   * @memberof Chartist.Svg
   * @param {Chartist.Svg} newElement The new Chartist.Svg object that will be used to replace the current wrapper object
   * @return {Chartist.Svg} The wrapper of the new element
   */
  function replace(newElement) {
    this._node.parentNode.replaceChild(newElement._node, this._node);
    return newElement;
  }

  /**
   * This method will append an element to the current element as a child.
   *
   * @memberof Chartist.Svg
   * @param {Chartist.Svg} element The Chartist.Svg element that should be added as a child
   * @param {Boolean} [insertFirst] Specifies if the element should be inserted as first child
   * @return {Chartist.Svg} The wrapper of the appended object
   */
  function append(element, insertFirst) {
    if(insertFirst && this._node.firstChild) {
      this._node.insertBefore(element._node, this._node.firstChild);
    } else {
      this._node.appendChild(element._node);
    }

    return this;
  }

  /**
   * Returns an array of class names that are attached to the current wrapper element. This method can not be chained further.
   *
   * @memberof Chartist.Svg
   * @return {Array} A list of classes or an empty array if there are no classes on the current element
   */
  function classes() {
    return this._node.getAttribute('class') ? this._node.getAttribute('class').trim().split(/\s+/) : [];
  }

  /**
   * Adds one or a space separated list of classes to the current element and ensures the classes are only existing once.
   *
   * @memberof Chartist.Svg
   * @param {String} names A white space separated list of class names
   * @return {Chartist.Svg} The wrapper of the current element
   */
  function addClass(names) {
    this._node.setAttribute('class',
      this.classes(this._node)
        .concat(names.trim().split(/\s+/))
        .filter(function(elem, pos, self) {
          return self.indexOf(elem) === pos;
        }).join(' ')
    );

    return this;
  }

  /**
   * Removes one or a space separated list of classes from the current element.
   *
   * @memberof Chartist.Svg
   * @param {String} names A white space separated list of class names
   * @return {Chartist.Svg} The wrapper of the current element
   */
  function removeClass(names) {
    var removedClasses = names.trim().split(/\s+/);

    this._node.setAttribute('class', this.classes(this._node).filter(function(name) {
      return removedClasses.indexOf(name) === -1;
    }).join(' '));

    return this;
  }

  /**
   * Removes all classes from the current element.
   *
   * @memberof Chartist.Svg
   * @return {Chartist.Svg} The wrapper of the current element
   */
  function removeAllClasses() {
    this._node.setAttribute('class', '');

    return this;
  }

  /**
   * Get element height using `getBoundingClientRect`
   *
   * @memberof Chartist.Svg
   * @return {Number} The elements height in pixels
   */
  function height() {
    return this._node.getBoundingClientRect().height;
  }

  /**
   * Get element width using `getBoundingClientRect`
   *
   * @memberof Chartist.Core
   * @return {Number} The elements width in pixels
   */
  function width() {
    return this._node.getBoundingClientRect().width;
  }

  /**
   * The animate function lets you animate the current element with SMIL animations. You can add animations for multiple attributes at the same time by using an animation definition object. This object should contain SMIL animation attributes. Please refer to http://www.w3.org/TR/SVG/animate.html for a detailed specification about the available animation attributes. Additionally an easing property can be passed in the animation definition object. This can be a string with a name of an easing function in `Chartist.Svg.Easing` or an array with four numbers specifying a cubic Bézier curve.
   * **An animations object could look like this:**
   * ```javascript
   * element.animate({
   *   opacity: {
   *     dur: 1000,
   *     from: 0,
   *     to: 1
   *   },
   *   x1: {
   *     dur: '1000ms',
   *     from: 100,
   *     to: 200,
   *     easing: 'easeOutQuart'
   *   },
   *   y1: {
   *     dur: '2s',
   *     from: 0,
   *     to: 100
   *   }
   * });
   * ```
   * **Automatic unit conversion**
   * For the `dur` and the `begin` animate attribute you can also omit a unit by passing a number. The number will automatically be converted to milli seconds.
   * **Guided mode**
   * The default behavior of SMIL animations with offset using the `begin` attribute is that the attribute will keep it's original value until the animation starts. Mostly this behavior is not desired as you'd like to have your element attributes already initialized with the animation `from` value even before the animation starts. Also if you don't specify `fill="freeze"` on an animate element or if you delete the animation after it's done (which is done in guided mode) the attribute will switch back to the initial value. This behavior is also not desired when performing simple one-time animations. For one-time animations you'd want to trigger animations immediately instead of relative to the document begin time. That's why in guided mode Chartist.Svg will also use the `begin` property to schedule a timeout and manually start the animation after the timeout. If you're using multiple SMIL definition objects for an attribute (in an array), guided mode will be disabled for this attribute, even if you explicitly enabled it.
   * If guided mode is enabled the following behavior is added:
   * - Before the animation starts (even when delayed with `begin`) the animated attribute will be set already to the `from` value of the animation
   * - `begin` is explicitly set to `indefinite` so it can be started manually without relying on document begin time (creation)
   * - The animate element will be forced to use `fill="freeze"`
   * - The animation will be triggered with `beginElement()` in a timeout where `begin` of the definition object is interpreted in milli seconds. If no `begin` was specified the timeout is triggered immediately.
   * - After the animation the element attribute value will be set to the `to` value of the animation
   * - The animate element is deleted from the DOM
   *
   * @memberof Chartist.Svg
   * @param {Object} animations An animations object where the property keys are the attributes you'd like to animate. The properties should be objects again that contain the SMIL animation attributes (usually begin, dur, from, and to). The property begin and dur is auto converted (see Automatic unit conversion). You can also schedule multiple animations for the same attribute by passing an Array of SMIL definition objects. Attributes that contain an array of SMIL definition objects will not be executed in guided mode.
   * @param {Boolean} guided Specify if guided mode should be activated for this animation (see Guided mode). If not otherwise specified, guided mode will be activated.
   * @param {Object} eventEmitter If specified, this event emitter will be notified when an animation starts or ends.
   * @return {Chartist.Svg} The current element where the animation was added
   */
  function animate(animations, guided, eventEmitter) {
    if(guided === undefined) {
      guided = true;
    }

    Object.keys(animations).forEach(function createAnimateForAttributes(attribute) {

      function createAnimate(animationDefinition, guided) {
        var attributeProperties = {},
          animate,
          timeout,
          easing;

        // Check if an easing is specified in the definition object and delete it from the object as it will not
        // be part of the animate element attributes.
        if(animationDefinition.easing) {
          // If already an easing Bézier curve array we take it or we lookup a easing array in the Easing object
          easing = animationDefinition.easing instanceof Array ?
            animationDefinition.easing :
            Chartist.Svg.Easing[animationDefinition.easing];
          delete animationDefinition.easing;
        }

        // If numeric dur or begin was provided we assume milli seconds
        animationDefinition.begin = Chartist.ensureUnit(animationDefinition.begin, 'ms');
        animationDefinition.dur = Chartist.ensureUnit(animationDefinition.dur, 'ms');

        if(easing) {
          animationDefinition.calcMode = 'spline';
          animationDefinition.keySplines = easing.join(' ');
          animationDefinition.keyTimes = '0;1';
        }

        // Adding "fill: freeze" if we are in guided mode and set initial attribute values
        if(guided) {
          animationDefinition.fill = 'freeze';
          // Animated property on our element should already be set to the animation from value in guided mode
          attributeProperties[attribute] = animationDefinition.from;
          this.attr(attributeProperties);

          // In guided mode we also set begin to indefinite so we can trigger the start manually and put the begin
          // which needs to be in ms aside
          timeout = Chartist.quantity(animationDefinition.begin || 0).value;
          animationDefinition.begin = 'indefinite';
        }

        animate = this.elem('animate', Chartist.extend({
          attributeName: attribute
        }, animationDefinition));

        if(guided) {
          // If guided we take the value that was put aside in timeout and trigger the animation manually with a timeout
          setTimeout(function() {
            // If beginElement fails we set the animated attribute to the end position and remove the animate element
            // This happens if the SMIL ElementTimeControl interface is not supported or any other problems occured in
            // the browser. (Currently FF 34 does not support animate elements in foreignObjects)
            try {
              animate._node.beginElement();
            } catch(err) {
              // Set animated attribute to current animated value
              attributeProperties[attribute] = animationDefinition.to;
              this.attr(attributeProperties);
              // Remove the animate element as it's no longer required
              animate.remove();
            }
          }.bind(this), timeout);
        }

        if(eventEmitter) {
          animate._node.addEventListener('beginEvent', function handleBeginEvent() {
            eventEmitter.emit('animationBegin', {
              element: this,
              animate: animate._node,
              params: animationDefinition
            });
          }.bind(this));
        }

        animate._node.addEventListener('endEvent', function handleEndEvent() {
          if(eventEmitter) {
            eventEmitter.emit('animationEnd', {
              element: this,
              animate: animate._node,
              params: animationDefinition
            });
          }

          if(guided) {
            // Set animated attribute to current animated value
            attributeProperties[attribute] = animationDefinition.to;
            this.attr(attributeProperties);
            // Remove the animate element as it's no longer required
            animate.remove();
          }
        }.bind(this));
      }

      // If current attribute is an array of definition objects we create an animate for each and disable guided mode
      if(animations[attribute] instanceof Array) {
        animations[attribute].forEach(function(animationDefinition) {
          createAnimate.bind(this)(animationDefinition, false);
        }.bind(this));
      } else {
        createAnimate.bind(this)(animations[attribute], guided);
      }

    }.bind(this));

    return this;
  }

  Chartist.Svg = Chartist.Class.extend({
    constructor: Svg,
    attr: attr,
    elem: elem,
    parent: parent,
    root: root,
    querySelector: querySelector,
    querySelectorAll: querySelectorAll,
    foreignObject: foreignObject,
    text: text,
    empty: empty,
    remove: remove,
    replace: replace,
    append: append,
    classes: classes,
    addClass: addClass,
    removeClass: removeClass,
    removeAllClasses: removeAllClasses,
    height: height,
    width: width,
    animate: animate
  });

  /**
   * This method checks for support of a given SVG feature like Extensibility, SVG-animation or the like. Check http://www.w3.org/TR/SVG11/feature for a detailed list.
   *
   * @memberof Chartist.Svg
   * @param {String} feature The SVG 1.1 feature that should be checked for support.
   * @return {Boolean} True of false if the feature is supported or not
   */
  Chartist.Svg.isSupported = function(feature) {
    return document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#' + feature, '1.1');
  };

  /**
   * This Object contains some standard easing cubic bezier curves. Then can be used with their name in the `Chartist.Svg.animate`. You can also extend the list and use your own name in the `animate` function. Click the show code button to see the available bezier functions.
   *
   * @memberof Chartist.Svg
   */
  var easingCubicBeziers = {
    easeInSine: [0.47, 0, 0.745, 0.715],
    easeOutSine: [0.39, 0.575, 0.565, 1],
    easeInOutSine: [0.445, 0.05, 0.55, 0.95],
    easeInQuad: [0.55, 0.085, 0.68, 0.53],
    easeOutQuad: [0.25, 0.46, 0.45, 0.94],
    easeInOutQuad: [0.455, 0.03, 0.515, 0.955],
    easeInCubic: [0.55, 0.055, 0.675, 0.19],
    easeOutCubic: [0.215, 0.61, 0.355, 1],
    easeInOutCubic: [0.645, 0.045, 0.355, 1],
    easeInQuart: [0.895, 0.03, 0.685, 0.22],
    easeOutQuart: [0.165, 0.84, 0.44, 1],
    easeInOutQuart: [0.77, 0, 0.175, 1],
    easeInQuint: [0.755, 0.05, 0.855, 0.06],
    easeOutQuint: [0.23, 1, 0.32, 1],
    easeInOutQuint: [0.86, 0, 0.07, 1],
    easeInExpo: [0.95, 0.05, 0.795, 0.035],
    easeOutExpo: [0.19, 1, 0.22, 1],
    easeInOutExpo: [1, 0, 0, 1],
    easeInCirc: [0.6, 0.04, 0.98, 0.335],
    easeOutCirc: [0.075, 0.82, 0.165, 1],
    easeInOutCirc: [0.785, 0.135, 0.15, 0.86],
    easeInBack: [0.6, -0.28, 0.735, 0.045],
    easeOutBack: [0.175, 0.885, 0.32, 1.275],
    easeInOutBack: [0.68, -0.55, 0.265, 1.55]
  };

  Chartist.Svg.Easing = easingCubicBeziers;

  /**
   * This helper class is to wrap multiple `Chartist.Svg` elements into a list where you can call the `Chartist.Svg` functions on all elements in the list with one call. This is helpful when you'd like to perform calls with `Chartist.Svg` on multiple elements.
   * An instance of this class is also returned by `Chartist.Svg.querySelectorAll`.
   *
   * @memberof Chartist.Svg
   * @param {Array<Node>|NodeList} nodeList An Array of SVG DOM nodes or a SVG DOM NodeList (as returned by document.querySelectorAll)
   * @constructor
   */
  function SvgList(nodeList) {
    var list = this;

    this.svgElements = [];
    for(var i = 0; i < nodeList.length; i++) {
      this.svgElements.push(new Chartist.Svg(nodeList[i]));
    }

    // Add delegation methods for Chartist.Svg
    Object.keys(Chartist.Svg.prototype).filter(function(prototypeProperty) {
      return ['constructor',
          'parent',
          'querySelector',
          'querySelectorAll',
          'replace',
          'append',
          'classes',
          'height',
          'width'].indexOf(prototypeProperty) === -1;
    }).forEach(function(prototypeProperty) {
      list[prototypeProperty] = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        list.svgElements.forEach(function(element) {
          Chartist.Svg.prototype[prototypeProperty].apply(element, args);
        });
        return list;
      };
    });
  }

  Chartist.Svg.List = Chartist.Class.extend({
    constructor: SvgList
  });
}(window, document, Chartist));
;/**
 * Chartist SVG path module for SVG path description creation and modification.
 *
 * @module Chartist.Svg.Path
 */
/* global Chartist */
(function(window, document, Chartist) {
  'use strict';

  /**
   * Contains the descriptors of supported element types in a SVG path. Currently only move, line and curve are supported.
   *
   * @memberof Chartist.Svg.Path
   * @type {Object}
   */
  var elementDescriptions = {
    m: ['x', 'y'],
    l: ['x', 'y'],
    c: ['x1', 'y1', 'x2', 'y2', 'x', 'y'],
    a: ['rx', 'ry', 'xAr', 'lAf', 'sf', 'x', 'y']
  };

  /**
   * Default options for newly created SVG path objects.
   *
   * @memberof Chartist.Svg.Path
   * @type {Object}
   */
  var defaultOptions = {
    // The accuracy in digit count after the decimal point. This will be used to round numbers in the SVG path. If this option is set to false then no rounding will be performed.
    accuracy: 3
  };

  function element(command, params, pathElements, pos, relative, data) {
    var pathElement = Chartist.extend({
      command: relative ? command.toLowerCase() : command.toUpperCase()
    }, params, data ? { data: data } : {} );

    pathElements.splice(pos, 0, pathElement);
  }

  function forEachParam(pathElements, cb) {
    pathElements.forEach(function(pathElement, pathElementIndex) {
      elementDescriptions[pathElement.command.toLowerCase()].forEach(function(paramName, paramIndex) {
        cb(pathElement, paramName, pathElementIndex, paramIndex, pathElements);
      });
    });
  }

  /**
   * Used to construct a new path object.
   *
   * @memberof Chartist.Svg.Path
   * @param {Boolean} close If set to true then this path will be closed when stringified (with a Z at the end)
   * @param {Object} options Options object that overrides the default objects. See default options for more details.
   * @constructor
   */
  function SvgPath(close, options) {
    this.pathElements = [];
    this.pos = 0;
    this.close = close;
    this.options = Chartist.extend({}, defaultOptions, options);
  }

  /**
   * Gets or sets the current position (cursor) inside of the path. You can move around the cursor freely but limited to 0 or the count of existing elements. All modifications with element functions will insert new elements at the position of this cursor.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} [pos] If a number is passed then the cursor is set to this position in the path element array.
   * @return {Chartist.Svg.Path|Number} If the position parameter was passed then the return value will be the path object for easy call chaining. If no position parameter was passed then the current position is returned.
   */
  function position(pos) {
    if(pos !== undefined) {
      this.pos = Math.max(0, Math.min(this.pathElements.length, pos));
      return this;
    } else {
      return this.pos;
    }
  }

  /**
   * Removes elements from the path starting at the current position.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} count Number of path elements that should be removed from the current position.
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function remove(count) {
    this.pathElements.splice(this.pos, count);
    return this;
  }

  /**
   * Use this function to add a new move SVG path element.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} x The x coordinate for the move element.
   * @param {Number} y The y coordinate for the move element.
   * @param {Boolean} [relative] If set to true the move element will be created with relative coordinates (lowercase letter)
   * @param {*} [data] Any data that should be stored with the element object that will be accessible in pathElement
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function move(x, y, relative, data) {
    element('M', {
      x: +x,
      y: +y
    }, this.pathElements, this.pos++, relative, data);
    return this;
  }

  /**
   * Use this function to add a new line SVG path element.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} x The x coordinate for the line element.
   * @param {Number} y The y coordinate for the line element.
   * @param {Boolean} [relative] If set to true the line element will be created with relative coordinates (lowercase letter)
   * @param {*} [data] Any data that should be stored with the element object that will be accessible in pathElement
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function line(x, y, relative, data) {
    element('L', {
      x: +x,
      y: +y
    }, this.pathElements, this.pos++, relative, data);
    return this;
  }

  /**
   * Use this function to add a new curve SVG path element.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} x1 The x coordinate for the first control point of the bezier curve.
   * @param {Number} y1 The y coordinate for the first control point of the bezier curve.
   * @param {Number} x2 The x coordinate for the second control point of the bezier curve.
   * @param {Number} y2 The y coordinate for the second control point of the bezier curve.
   * @param {Number} x The x coordinate for the target point of the curve element.
   * @param {Number} y The y coordinate for the target point of the curve element.
   * @param {Boolean} [relative] If set to true the curve element will be created with relative coordinates (lowercase letter)
   * @param {*} [data] Any data that should be stored with the element object that will be accessible in pathElement
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function curve(x1, y1, x2, y2, x, y, relative, data) {
    element('C', {
      x1: +x1,
      y1: +y1,
      x2: +x2,
      y2: +y2,
      x: +x,
      y: +y
    }, this.pathElements, this.pos++, relative, data);
    return this;
  }

  /**
   * Use this function to add a new non-bezier curve SVG path element.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} rx The radius to be used for the x-axis of the arc.
   * @param {Number} ry The radius to be used for the y-axis of the arc.
   * @param {Number} xAr Defines the orientation of the arc
   * @param {Number} lAf Large arc flag
   * @param {Number} sf Sweep flag
   * @param {Number} x The x coordinate for the target point of the curve element.
   * @param {Number} y The y coordinate for the target point of the curve element.
   * @param {Boolean} [relative] If set to true the curve element will be created with relative coordinates (lowercase letter)
   * @param {*} [data] Any data that should be stored with the element object that will be accessible in pathElement
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function arc(rx, ry, xAr, lAf, sf, x, y, relative, data) {
    element('A', {
      rx: +rx,
      ry: +ry,
      xAr: +xAr,
      lAf: +lAf,
      sf: +sf,
      x: +x,
      y: +y
    }, this.pathElements, this.pos++, relative, data);
    return this;
  }

  /**
   * Parses an SVG path seen in the d attribute of path elements, and inserts the parsed elements into the existing path object at the current cursor position. Any closing path indicators (Z at the end of the path) will be ignored by the parser as this is provided by the close option in the options of the path object.
   *
   * @memberof Chartist.Svg.Path
   * @param {String} path Any SVG path that contains move (m), line (l) or curve (c) components.
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function parse(path) {
    // Parsing the SVG path string into an array of arrays [['M', '10', '10'], ['L', '100', '100']]
    var chunks = path.replace(/([A-Za-z])([0-9])/g, '$1 $2')
      .replace(/([0-9])([A-Za-z])/g, '$1 $2')
      .split(/[\s,]+/)
      .reduce(function(result, element) {
        if(element.match(/[A-Za-z]/)) {
          result.push([]);
        }

        result[result.length - 1].push(element);
        return result;
      }, []);

    // If this is a closed path we remove the Z at the end because this is determined by the close option
    if(chunks[chunks.length - 1][0].toUpperCase() === 'Z') {
      chunks.pop();
    }

    // Using svgPathElementDescriptions to map raw path arrays into objects that contain the command and the parameters
    // For example {command: 'M', x: '10', y: '10'}
    var elements = chunks.map(function(chunk) {
        var command = chunk.shift(),
          description = elementDescriptions[command.toLowerCase()];

        return Chartist.extend({
          command: command
        }, description.reduce(function(result, paramName, index) {
          result[paramName] = +chunk[index];
          return result;
        }, {}));
      });

    // Preparing a splice call with the elements array as var arg params and insert the parsed elements at the current position
    var spliceArgs = [this.pos, 0];
    Array.prototype.push.apply(spliceArgs, elements);
    Array.prototype.splice.apply(this.pathElements, spliceArgs);
    // Increase the internal position by the element count
    this.pos += elements.length;

    return this;
  }

  /**
   * This function renders to current SVG path object into a final SVG string that can be used in the d attribute of SVG path elements. It uses the accuracy option to round big decimals. If the close parameter was set in the constructor of this path object then a path closing Z will be appended to the output string.
   *
   * @memberof Chartist.Svg.Path
   * @return {String}
   */
  function stringify() {
    var accuracyMultiplier = Math.pow(10, this.options.accuracy);

    return this.pathElements.reduce(function(path, pathElement) {
        var params = elementDescriptions[pathElement.command.toLowerCase()].map(function(paramName) {
          return this.options.accuracy ?
            (Math.round(pathElement[paramName] * accuracyMultiplier) / accuracyMultiplier) :
            pathElement[paramName];
        }.bind(this));

        return path + pathElement.command + params.join(',');
      }.bind(this), '') + (this.close ? 'Z' : '');
  }

  /**
   * Scales all elements in the current SVG path object. There is an individual parameter for each coordinate. Scaling will also be done for control points of curves, affecting the given coordinate.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} x The number which will be used to scale the x, x1 and x2 of all path elements.
   * @param {Number} y The number which will be used to scale the y, y1 and y2 of all path elements.
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function scale(x, y) {
    forEachParam(this.pathElements, function(pathElement, paramName) {
      pathElement[paramName] *= paramName[0] === 'x' ? x : y;
    });
    return this;
  }

  /**
   * Translates all elements in the current SVG path object. The translation is relative and there is an individual parameter for each coordinate. Translation will also be done for control points of curves, affecting the given coordinate.
   *
   * @memberof Chartist.Svg.Path
   * @param {Number} x The number which will be used to translate the x, x1 and x2 of all path elements.
   * @param {Number} y The number which will be used to translate the y, y1 and y2 of all path elements.
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function translate(x, y) {
    forEachParam(this.pathElements, function(pathElement, paramName) {
      pathElement[paramName] += paramName[0] === 'x' ? x : y;
    });
    return this;
  }

  /**
   * This function will run over all existing path elements and then loop over their attributes. The callback function will be called for every path element attribute that exists in the current path.
   * The method signature of the callback function looks like this:
   * ```javascript
   * function(pathElement, paramName, pathElementIndex, paramIndex, pathElements)
   * ```
   * If something else than undefined is returned by the callback function, this value will be used to replace the old value. This allows you to build custom transformations of path objects that can't be achieved using the basic transformation functions scale and translate.
   *
   * @memberof Chartist.Svg.Path
   * @param {Function} transformFnc The callback function for the transformation. Check the signature in the function description.
   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
   */
  function transform(transformFnc) {
    forEachParam(this.pathElements, function(pathElement, paramName, pathElementIndex, paramIndex, pathElements) {
      var transformed = transformFnc(pathElement, paramName, pathElementIndex, paramIndex, pathElements);
      if(transformed || transformed === 0) {
        pathElement[paramName] = transformed;
      }
    });
    return this;
  }

  /**
   * This function clones a whole path object with all its properties. This is a deep clone and path element objects will also be cloned.
   *
   * @memberof Chartist.Svg.Path
   * @param {Boolean} [close] Optional option to set the new cloned path to closed. If not specified or false, the original path close option will be used.
   * @return {Chartist.Svg.Path}
   */
  function clone(close) {
    var c = new Chartist.Svg.Path(close || this.close);
    c.pos = this.pos;
    c.pathElements = this.pathElements.slice().map(function cloneElements(pathElement) {
      return Chartist.extend({}, pathElement);
    });
    c.options = Chartist.extend({}, this.options);
    return c;
  }

  /**
   * Split a Svg.Path object by a specific command in the path chain. The path chain will be split and an array of newly created paths objects will be returned. This is useful if you'd like to split an SVG path by it's move commands, for example, in order to isolate chunks of drawings.
   *
   * @memberof Chartist.Svg.Path
   * @param {String} command The command you'd like to use to split the path
   * @return {Array<Chartist.Svg.Path>}
   */
  function splitByCommand(command) {
    var split = [
      new Chartist.Svg.Path()
    ];

    this.pathElements.forEach(function(pathElement) {
      if(pathElement.command === command.toUpperCase() && split[split.length - 1].pathElements.length !== 0) {
        split.push(new Chartist.Svg.Path());
      }

      split[split.length - 1].pathElements.push(pathElement);
    });

    return split;
  }

  /**
   * This static function on `Chartist.Svg.Path` is joining multiple paths together into one paths.
   *
   * @memberof Chartist.Svg.Path
   * @param {Array<Chartist.Svg.Path>} paths A list of paths to be joined together. The order is important.
   * @param {boolean} close If the newly created path should be a closed path
   * @param {Object} options Path options for the newly created path.
   * @return {Chartist.Svg.Path}
   */

  function join(paths, close, options) {
    var joinedPath = new Chartist.Svg.Path(close, options);
    for(var i = 0; i < paths.length; i++) {
      var path = paths[i];
      for(var j = 0; j < path.pathElements.length; j++) {
        joinedPath.pathElements.push(path.pathElements[j]);
      }
    }
    return joinedPath;
  }

  Chartist.Svg.Path = Chartist.Class.extend({
    constructor: SvgPath,
    position: position,
    remove: remove,
    move: move,
    line: line,
    curve: curve,
    arc: arc,
    scale: scale,
    translate: translate,
    transform: transform,
    parse: parse,
    stringify: stringify,
    clone: clone,
    splitByCommand: splitByCommand
  });

  Chartist.Svg.Path.elementDescriptions = elementDescriptions;
  Chartist.Svg.Path.join = join;
}(window, document, Chartist));
;/* global Chartist */
(function (window, document, Chartist) {
  'use strict';

  var axisUnits = {
    x: {
      pos: 'x',
      len: 'width',
      dir: 'horizontal',
      rectStart: 'x1',
      rectEnd: 'x2',
      rectOffset: 'y2'
    },
    y: {
      pos: 'y',
      len: 'height',
      dir: 'vertical',
      rectStart: 'y2',
      rectEnd: 'y1',
      rectOffset: 'x1'
    }
  };

  function Axis(units, chartRect, ticks, options) {
    this.units = units;
    this.counterUnits = units === axisUnits.x ? axisUnits.y : axisUnits.x;
    this.chartRect = chartRect;
    this.axisLength = chartRect[units.rectEnd] - chartRect[units.rectStart];
    this.gridOffset = chartRect[units.rectOffset];
    this.ticks = ticks;
    this.options = options;
  }

  function createGridAndLabels(gridGroup, labelGroup, useForeignObject, chartOptions, eventEmitter) {
    var axisOptions = chartOptions['axis' + this.units.pos.toUpperCase()];
    var projectedValues = this.ticks.map(this.projectValue.bind(this));
    var labelValues = this.ticks.map(axisOptions.labelInterpolationFnc);

    projectedValues.forEach(function(projectedValue, index) {
      var labelOffset = {
        x: 0,
        y: 0
      };

      // TODO: Find better solution for solving this problem
      // Calculate how much space we have available for the label
      var labelLength;
      if(projectedValues[index + 1]) {
        // If we still have one label ahead, we can calculate the distance to the next tick / label
        labelLength = projectedValues[index + 1] - projectedValue;
      } else {
        // If we don't have a label ahead and we have only two labels in total, we just take the remaining distance to
        // on the whole axis length. We limit that to a minimum of 30 pixel, so that labels close to the border will
        // still be visible inside of the chart padding.
        labelLength = Math.max(this.axisLength - projectedValue, 30);
      }

      // Skip grid lines and labels where interpolated label values are falsey (execpt for 0)
      if(Chartist.isFalseyButZero(labelValues[index]) && labelValues[index] !== '') {
        return;
      }

      // Transform to global coordinates using the chartRect
      // We also need to set the label offset for the createLabel function
      if(this.units.pos === 'x') {
        projectedValue = this.chartRect.x1 + projectedValue;
        labelOffset.x = chartOptions.axisX.labelOffset.x;

        // If the labels should be positioned in start position (top side for vertical axis) we need to set a
        // different offset as for positioned with end (bottom)
        if(chartOptions.axisX.position === 'start') {
          labelOffset.y = this.chartRect.padding.top + chartOptions.axisX.labelOffset.y + (useForeignObject ? 5 : 20);
        } else {
          labelOffset.y = this.chartRect.y1 + chartOptions.axisX.labelOffset.y + (useForeignObject ? 5 : 20);
        }
      } else {
        projectedValue = this.chartRect.y1 - projectedValue;
        labelOffset.y = chartOptions.axisY.labelOffset.y - (useForeignObject ? labelLength : 0);

        // If the labels should be positioned in start position (left side for horizontal axis) we need to set a
        // different offset as for positioned with end (right side)
        if(chartOptions.axisY.position === 'start') {
          labelOffset.x = useForeignObject ? this.chartRect.padding.left + chartOptions.axisY.labelOffset.x : this.chartRect.x1 - 10;
        } else {
          labelOffset.x = this.chartRect.x2 + chartOptions.axisY.labelOffset.x + 10;
        }
      }

      if(axisOptions.showGrid) {
        Chartist.createGrid(projectedValue, index, this, this.gridOffset, this.chartRect[this.counterUnits.len](), gridGroup, [
          chartOptions.classNames.grid,
          chartOptions.classNames[this.units.dir]
        ], eventEmitter);
      }

      if(axisOptions.showLabel) {
        Chartist.createLabel(projectedValue, labelLength, index, labelValues, this, axisOptions.offset, labelOffset, labelGroup, [
          chartOptions.classNames.label,
          chartOptions.classNames[this.units.dir],
          chartOptions.classNames[axisOptions.position]
        ], useForeignObject, eventEmitter);
      }
    }.bind(this));
  }

  Chartist.Axis = Chartist.Class.extend({
    constructor: Axis,
    createGridAndLabels: createGridAndLabels,
    projectValue: function(value, index, data) {
      throw new Error('Base axis can\'t be instantiated!');
    }
  });

  Chartist.Axis.units = axisUnits;

}(window, document, Chartist));
;/**
 * The auto scale axis uses standard linear scale projection of values along an axis. It uses order of magnitude to find a scale automatically and evaluates the available space in order to find the perfect amount of ticks for your chart.
 * **Options**
 * The following options are used by this axis in addition to the default axis options outlined in the axis configuration of the chart default settings.
 * ```javascript
 * var options = {
 *   // If high is specified then the axis will display values explicitly up to this value and the computed maximum from the data is ignored
 *   high: 100,
 *   // If low is specified then the axis will display values explicitly down to this value and the computed minimum from the data is ignored
 *   low: 0,
 *   // This option will be used when finding the right scale division settings. The amount of ticks on the scale will be determined so that as many ticks as possible will be displayed, while not violating this minimum required space (in pixel).
 *   scaleMinSpace: 20,
 *   // Can be set to true or false. If set to true, the scale will be generated with whole numbers only.
 *   onlyInteger: true,
 *   // The reference value can be used to make sure that this value will always be on the chart. This is especially useful on bipolar charts where the bipolar center always needs to be part of the chart.
 *   referenceValue: 5
 * };
 * ```
 *
 * @module Chartist.AutoScaleAxis
 */
/* global Chartist */
(function (window, document, Chartist) {
  'use strict';

  function AutoScaleAxis(axisUnit, data, chartRect, options) {
    // Usually we calculate highLow based on the data but this can be overriden by a highLow object in the options
    var highLow = options.highLow || Chartist.getHighLow(data.normalized, options, axisUnit.pos);
    this.bounds = Chartist.getBounds(chartRect[axisUnit.rectEnd] - chartRect[axisUnit.rectStart], highLow, options.scaleMinSpace || 20, options.onlyInteger);
    this.range = {
      min: this.bounds.min,
      max: this.bounds.max
    };

    Chartist.AutoScaleAxis.super.constructor.call(this,
      axisUnit,
      chartRect,
      this.bounds.values,
      options);
  }

  function projectValue(value) {
    return this.axisLength * (+Chartist.getMultiValue(value, this.units.pos) - this.bounds.min) / this.bounds.range;
  }

  Chartist.AutoScaleAxis = Chartist.Axis.extend({
    constructor: AutoScaleAxis,
    projectValue: projectValue
  });

}(window, document, Chartist));
;/**
 * The fixed scale axis uses standard linear projection of values along an axis. It makes use of a divisor option to divide the range provided from the minimum and maximum value or the options high and low that will override the computed minimum and maximum.
 * **Options**
 * The following options are used by this axis in addition to the default axis options outlined in the axis configuration of the chart default settings.
 * ```javascript
 * var options = {
 *   // If high is specified then the axis will display values explicitly up to this value and the computed maximum from the data is ignored
 *   high: 100,
 *   // If low is specified then the axis will display values explicitly down to this value and the computed minimum from the data is ignored
 *   low: 0,
 *   // If specified then the value range determined from minimum to maximum (or low and high) will be divided by this number and ticks will be generated at those division points. The default divisor is 1.
 *   divisor: 4,
 *   // If ticks is explicitly set, then the axis will not compute the ticks with the divisor, but directly use the data in ticks to determine at what points on the axis a tick need to be generated.
 *   ticks: [1, 10, 20, 30]
 * };
 * ```
 *
 * @module Chartist.FixedScaleAxis
 */
/* global Chartist */
(function (window, document, Chartist) {
  'use strict';

  function FixedScaleAxis(axisUnit, data, chartRect, options) {
    var highLow = options.highLow || Chartist.getHighLow(data.normalized, options, axisUnit.pos);
    this.divisor = options.divisor || 1;
    this.ticks = options.ticks || Chartist.times(this.divisor).map(function(value, index) {
      return highLow.low + (highLow.high - highLow.low) / this.divisor * index;
    }.bind(this));
    this.ticks.sort(function(a, b) {
      return a - b;
    });
    this.range = {
      min: highLow.low,
      max: highLow.high
    };

    Chartist.FixedScaleAxis.super.constructor.call(this,
      axisUnit,
      chartRect,
      this.ticks,
      options);

    this.stepLength = this.axisLength / this.divisor;
  }

  function projectValue(value) {
    return this.axisLength * (+Chartist.getMultiValue(value, this.units.pos) - this.range.min) / (this.range.max - this.range.min);
  }

  Chartist.FixedScaleAxis = Chartist.Axis.extend({
    constructor: FixedScaleAxis,
    projectValue: projectValue
  });

}(window, document, Chartist));
;/**
 * The step axis for step based charts like bar chart or step based line charts. It uses a fixed amount of ticks that will be equally distributed across the whole axis length. The projection is done using the index of the data value rather than the value itself and therefore it's only useful for distribution purpose.
 * **Options**
 * The following options are used by this axis in addition to the default axis options outlined in the axis configuration of the chart default settings.
 * ```javascript
 * var options = {
 *   // Ticks to be used to distribute across the axis length. As this axis type relies on the index of the value rather than the value, arbitrary data that can be converted to a string can be used as ticks.
 *   ticks: ['One', 'Two', 'Three'],
 *   // If set to true the full width will be used to distribute the values where the last value will be at the maximum of the axis length. If false the spaces between the ticks will be evenly distributed instead.
 *   stretch: true
 * };
 * ```
 *
 * @module Chartist.StepAxis
 */
/* global Chartist */
(function (window, document, Chartist) {
  'use strict';

  function StepAxis(axisUnit, data, chartRect, options) {
    Chartist.StepAxis.super.constructor.call(this,
      axisUnit,
      chartRect,
      options.ticks,
      options);

    this.stepLength = this.axisLength / (options.ticks.length - (options.stretch ? 1 : 0));
  }

  function projectValue(value, index) {
    return this.stepLength * index;
  }

  Chartist.StepAxis = Chartist.Axis.extend({
    constructor: StepAxis,
    projectValue: projectValue
  });

}(window, document, Chartist));
;/**
 * The Chartist line chart can be used to draw Line or Scatter charts. If used in the browser you can access the global `Chartist` namespace where you find the `Line` function as a main entry point.
 *
 * For examples on how to use the line chart please check the examples of the `Chartist.Line` method.
 *
 * @module Chartist.Line
 */
/* global Chartist */
(function(window, document, Chartist){
  'use strict';

  /**
   * Default options in line charts. Expand the code view to see a detailed list of options with comments.
   *
   * @memberof Chartist.Line
   */
  var defaultOptions = {
    // Options for X-Axis
    axisX: {
      // The offset of the labels to the chart area
      offset: 30,
      // Position where labels are placed. Can be set to `start` or `end` where `start` is equivalent to left or top on vertical axis and `end` is equivalent to right or bottom on horizontal axis.
      position: 'end',
      // Allows you to correct label positioning on this axis by positive or negative x and y offset.
      labelOffset: {
        x: 0,
        y: 0
      },
      // If labels should be shown or not
      showLabel: true,
      // If the axis grid should be drawn or not
      showGrid: true,
      // Interpolation function that allows you to intercept the value from the axis label
      labelInterpolationFnc: Chartist.noop,
      // Set the axis type to be used to project values on this axis. If not defined, Chartist.StepAxis will be used for the X-Axis, where the ticks option will be set to the labels in the data and the stretch option will be set to the global fullWidth option. This type can be changed to any axis constructor available (e.g. Chartist.FixedScaleAxis), where all axis options should be present here.
      type: undefined
    },
    // Options for Y-Axis
    axisY: {
      // The offset of the labels to the chart area
      offset: 40,
      // Position where labels are placed. Can be set to `start` or `end` where `start` is equivalent to left or top on vertical axis and `end` is equivalent to right or bottom on horizontal axis.
      position: 'start',
      // Allows you to correct label positioning on this axis by positive or negative x and y offset.
      labelOffset: {
        x: 0,
        y: 0
      },
      // If labels should be shown or not
      showLabel: true,
      // If the axis grid should be drawn or not
      showGrid: true,
      // Interpolation function that allows you to intercept the value from the axis label
      labelInterpolationFnc: Chartist.noop,
      // Set the axis type to be used to project values on this axis. If not defined, Chartist.AutoScaleAxis will be used for the Y-Axis, where the high and low options will be set to the global high and low options. This type can be changed to any axis constructor available (e.g. Chartist.FixedScaleAxis), where all axis options should be present here.
      type: undefined,
      // This value specifies the minimum height in pixel of the scale steps
      scaleMinSpace: 20,
      // Use only integer values (whole numbers) for the scale steps
      onlyInteger: false
    },
    // Specify a fixed width for the chart as a string (i.e. '100px' or '50%')
    width: undefined,
    // Specify a fixed height for the chart as a string (i.e. '100px' or '50%')
    height: undefined,
    // If the line should be drawn or not
    showLine: true,
    // If dots should be drawn or not
    showPoint: true,
    // If the line chart should draw an area
    showArea: false,
    // The base for the area chart that will be used to close the area shape (is normally 0)
    areaBase: 0,
    // Specify if the lines should be smoothed. This value can be true or false where true will result in smoothing using the default smoothing interpolation function Chartist.Interpolation.cardinal and false results in Chartist.Interpolation.none. You can also choose other smoothing / interpolation functions available in the Chartist.Interpolation module, or write your own interpolation function. Check the examples for a brief description.
    lineSmooth: true,
    // Overriding the natural low of the chart allows you to zoom in or limit the charts lowest displayed value
    low: undefined,
    // Overriding the natural high of the chart allows you to zoom in or limit the charts highest displayed value
    high: undefined,
    // Padding of the chart drawing area to the container element and labels as a number or padding object {top: 5, right: 5, bottom: 5, left: 5}
    chartPadding: {
      top: 15,
      right: 15,
      bottom: 5,
      left: 10
    },
    // When set to true, the last grid line on the x-axis is not drawn and the chart elements will expand to the full available width of the chart. For the last label to be drawn correctly you might need to add chart padding or offset the last label with a draw event handler.
    fullWidth: false,
    // If true the whole data is reversed including labels, the series order as well as the whole series data arrays.
    reverseData: false,
    // Override the class names that get used to generate the SVG structure of the chart
    classNames: {
      chart: 'ct-chart-line',
      label: 'ct-label',
      labelGroup: 'ct-labels',
      series: 'ct-series',
      line: 'ct-line',
      point: 'ct-point',
      area: 'ct-area',
      grid: 'ct-grid',
      gridGroup: 'ct-grids',
      vertical: 'ct-vertical',
      horizontal: 'ct-horizontal',
      start: 'ct-start',
      end: 'ct-end'
    }
  };

  /**
   * Creates a new chart
   *
   */
  function createChart(options) {
    this.data = Chartist.normalizeData(this.data);
    var data = {
      raw: this.data,
      normalized: Chartist.getDataArray(this.data, options.reverseData, true)
    };

    // Create new svg object
    this.svg = Chartist.createSvg(this.container, options.width, options.height, options.classNames.chart);
    // Create groups for labels, grid and series
    var gridGroup = this.svg.elem('g').addClass(options.classNames.gridGroup);
    var seriesGroup = this.svg.elem('g');
    var labelGroup = this.svg.elem('g').addClass(options.classNames.labelGroup);

    var chartRect = Chartist.createChartRect(this.svg, options, defaultOptions.padding);
    var axisX, axisY;

    if(options.axisX.type === undefined) {
      axisX = new Chartist.StepAxis(Chartist.Axis.units.x, data, chartRect, Chartist.extend({}, options.axisX, {
        ticks: data.raw.labels,
        stretch: options.fullWidth
      }));
    } else {
      axisX = options.axisX.type.call(Chartist, Chartist.Axis.units.x, data, chartRect, options.axisX);
    }

    if(options.axisY.type === undefined) {
      axisY = new Chartist.AutoScaleAxis(Chartist.Axis.units.y, data, chartRect, Chartist.extend({}, options.axisY, {
        high: Chartist.isNum(options.high) ? options.high : options.axisY.high,
        low: Chartist.isNum(options.low) ? options.low : options.axisY.low
      }));
    } else {
      axisY = options.axisY.type.call(Chartist, Chartist.Axis.units.y, data, chartRect, options.axisY);
    }

    axisX.createGridAndLabels(gridGroup, labelGroup, this.supportsForeignObject, options, this.eventEmitter);
    axisY.createGridAndLabels(gridGroup, labelGroup, this.supportsForeignObject, options, this.eventEmitter);

    // Draw the series
    data.raw.series.forEach(function(series, seriesIndex) {
      var seriesElement = seriesGroup.elem('g');

      // Write attributes to series group element. If series name or meta is undefined the attributes will not be written
      seriesElement.attr({
        'ct:series-name': series.name,
        'ct:meta': Chartist.serialize(series.meta)
      });

      // Use series class from series data or if not set generate one
      seriesElement.addClass([
        options.classNames.series,
        (series.className || options.classNames.series + '-' + Chartist.alphaNumerate(seriesIndex))
      ].join(' '));

      var pathCoordinates = [],
        pathData = [];

      data.normalized[seriesIndex].forEach(function(value, valueIndex) {
        var p = {
          x: chartRect.x1 + axisX.projectValue(value, valueIndex, data.normalized[seriesIndex]),
          y: chartRect.y1 - axisY.projectValue(value, valueIndex, data.normalized[seriesIndex])
        };
        pathCoordinates.push(p.x, p.y);
        pathData.push({
          value: value,
          valueIndex: valueIndex,
          meta: Chartist.getMetaData(series, valueIndex)
        });
      }.bind(this));

      var seriesOptions = {
        lineSmooth: Chartist.getSeriesOption(series, options, 'lineSmooth'),
        showPoint: Chartist.getSeriesOption(series, options, 'showPoint'),
        showLine: Chartist.getSeriesOption(series, options, 'showLine'),
        showArea: Chartist.getSeriesOption(series, options, 'showArea'),
        areaBase: Chartist.getSeriesOption(series, options, 'areaBase')
      };

      var smoothing = typeof seriesOptions.lineSmooth === 'function' ?
        seriesOptions.lineSmooth : (seriesOptions.lineSmooth ? Chartist.Interpolation.monotoneCubic() : Chartist.Interpolation.none());
      // Interpolating path where pathData will be used to annotate each path element so we can trace back the original
      // index, value and meta data
      var path = smoothing(pathCoordinates, pathData);

      // If we should show points we need to create them now to avoid secondary loop
      // Points are drawn from the pathElements returned by the interpolation function
      // Small offset for Firefox to render squares correctly
      if (seriesOptions.showPoint) {

        path.pathElements.forEach(function(pathElement) {
          var point = seriesElement.elem('line', {
            x1: pathElement.x,
            y1: pathElement.y,
            x2: pathElement.x + 0.01,
            y2: pathElement.y
          }, options.classNames.point).attr({
            'ct:value': [pathElement.data.value.x, pathElement.data.value.y].filter(Chartist.isNum).join(','),
            'ct:meta': pathElement.data.meta
          });

          this.eventEmitter.emit('draw', {
            type: 'point',
            value: pathElement.data.value,
            index: pathElement.data.valueIndex,
            meta: pathElement.data.meta,
            series: series,
            seriesIndex: seriesIndex,
            axisX: axisX,
            axisY: axisY,
            group: seriesElement,
            element: point,
            x: pathElement.x,
            y: pathElement.y
          });
        }.bind(this));
      }

      if(seriesOptions.showLine) {
        var line = seriesElement.elem('path', {
          d: path.stringify()
        }, options.classNames.line, true);

        this.eventEmitter.emit('draw', {
          type: 'line',
          values: data.normalized[seriesIndex],
          path: path.clone(),
          chartRect: chartRect,
          index: seriesIndex,
          series: series,
          seriesIndex: seriesIndex,
          axisX: axisX,
          axisY: axisY,
          group: seriesElement,
          element: line
        });
      }

      // Area currently only works with axes that support a range!
      if(seriesOptions.showArea && axisY.range) {
        // If areaBase is outside the chart area (< min or > max) we need to set it respectively so that
        // the area is not drawn outside the chart area.
        var areaBase = Math.max(Math.min(seriesOptions.areaBase, axisY.range.max), axisY.range.min);

        // We project the areaBase value into screen coordinates
        var areaBaseProjected = chartRect.y1 - axisY.projectValue(areaBase);

        // In order to form the area we'll first split the path by move commands so we can chunk it up into segments
        path.splitByCommand('M').filter(function onlySolidSegments(pathSegment) {
          // We filter only "solid" segments that contain more than one point. Otherwise there's no need for an area
          return pathSegment.pathElements.length > 1;
        }).map(function convertToArea(solidPathSegments) {
          // Receiving the filtered solid path segments we can now convert those segments into fill areas
          var firstElement = solidPathSegments.pathElements[0];
          var lastElement = solidPathSegments.pathElements[solidPathSegments.pathElements.length - 1];

          // Cloning the solid path segment with closing option and removing the first move command from the clone
          // We then insert a new move that should start at the area base and draw a straight line up or down
          // at the end of the path we add an additional straight line to the projected area base value
          // As the closing option is set our path will be automatically closed
          return solidPathSegments.clone(true)
            .position(0)
            .remove(1)
            .move(firstElement.x, areaBaseProjected)
            .line(firstElement.x, firstElement.y)
            .position(solidPathSegments.pathElements.length + 1)
            .line(lastElement.x, areaBaseProjected);

        }).forEach(function createArea(areaPath) {
          // For each of our newly created area paths, we'll now create path elements by stringifying our path objects
          // and adding the created DOM elements to the correct series group
          var area = seriesElement.elem('path', {
            d: areaPath.stringify()
          }, options.classNames.area, true);

          // Emit an event for each area that was drawn
          this.eventEmitter.emit('draw', {
            type: 'area',
            values: data.normalized[seriesIndex],
            path: areaPath.clone(),
            series: series,
            seriesIndex: seriesIndex,
            axisX: axisX,
            axisY: axisY,
            chartRect: chartRect,
            index: seriesIndex,
            group: seriesElement,
            element: area
          });
        }.bind(this));
      }
    }.bind(this));

    this.eventEmitter.emit('created', {
      bounds: axisY.bounds,
      chartRect: chartRect,
      axisX: axisX,
      axisY: axisY,
      svg: this.svg,
      options: options
    });
  }

  /**
   * This method creates a new line chart.
   *
   * @memberof Chartist.Line
   * @param {String|Node} query A selector query string or directly a DOM element
   * @param {Object} data The data object that needs to consist of a labels and a series array
   * @param {Object} [options] The options object with options that override the default options. Check the examples for a detailed list.
   * @param {Array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]]
   * @return {Object} An object which exposes the API for the created chart
   *
   * @example
   * // Create a simple line chart
   * var data = {
   *   // A labels array that can contain any sort of values
   *   labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
   *   // Our series array that contains series objects or in this case series data arrays
   *   series: [
   *     [5, 2, 4, 2, 0]
   *   ]
   * };
   *
   * // As options we currently only set a static size of 300x200 px
   * var options = {
   *   width: '300px',
   *   height: '200px'
   * };
   *
   * // In the global name space Chartist we call the Line function to initialize a line chart. As a first parameter we pass in a selector where we would like to get our chart created. Second parameter is the actual data object and as a third parameter we pass in our options
   * new Chartist.Line('.ct-chart', data, options);
   *
   * @example
   * // Use specific interpolation function with configuration from the Chartist.Interpolation module
   *
   * var chart = new Chartist.Line('.ct-chart', {
   *   labels: [1, 2, 3, 4, 5],
   *   series: [
   *     [1, 1, 8, 1, 7]
   *   ]
   * }, {
   *   lineSmooth: Chartist.Interpolation.cardinal({
   *     tension: 0.2
   *   })
   * });
   *
   * @example
   * // Create a line chart with responsive options
   *
   * var data = {
   *   // A labels array that can contain any sort of values
   *   labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
   *   // Our series array that contains series objects or in this case series data arrays
   *   series: [
   *     [5, 2, 4, 2, 0]
   *   ]
   * };
   *
   * // In addition to the regular options we specify responsive option overrides that will override the default configutation based on the matching media queries.
   * var responsiveOptions = [
   *   ['screen and (min-width: 641px) and (max-width: 1024px)', {
   *     showPoint: false,
   *     axisX: {
   *       labelInterpolationFnc: function(value) {
   *         // Will return Mon, Tue, Wed etc. on medium screens
   *         return value.slice(0, 3);
   *       }
   *     }
   *   }],
   *   ['screen and (max-width: 640px)', {
   *     showLine: false,
   *     axisX: {
   *       labelInterpolationFnc: function(value) {
   *         // Will return M, T, W etc. on small screens
   *         return value[0];
   *       }
   *     }
   *   }]
   * ];
   *
   * new Chartist.Line('.ct-chart', data, null, responsiveOptions);
   *
   */
  function Line(query, data, options, responsiveOptions) {
    Chartist.Line.super.constructor.call(this,
      query,
      data,
      defaultOptions,
      Chartist.extend({}, defaultOptions, options),
      responsiveOptions);
  }

  // Creating line chart type in Chartist namespace
  Chartist.Line = Chartist.Base.extend({
    constructor: Line,
    createChart: createChart
  });

}(window, document, Chartist));
;/**
 * The bar chart module of Chartist that can be used to draw unipolar or bipolar bar and grouped bar charts.
 *
 * @module Chartist.Bar
 */
/* global Chartist */
(function(window, document, Chartist){
  'use strict';

  /**
   * Default options in bar charts. Expand the code view to see a detailed list of options with comments.
   *
   * @memberof Chartist.Bar
   */
  var defaultOptions = {
    // Options for X-Axis
    axisX: {
      // The offset of the chart drawing area to the border of the container
      offset: 30,
      // Position where labels are placed. Can be set to `start` or `end` where `start` is equivalent to left or top on vertical axis and `end` is equivalent to right or bottom on horizontal axis.
      position: 'end',
      // Allows you to correct label positioning on this axis by positive or negative x and y offset.
      labelOffset: {
        x: 0,
        y: 0
      },
      // If labels should be shown or not
      showLabel: true,
      // If the axis grid should be drawn or not
      showGrid: true,
      // Interpolation function that allows you to intercept the value from the axis label
      labelInterpolationFnc: Chartist.noop,
      // This value specifies the minimum width in pixel of the scale steps
      scaleMinSpace: 30,
      // Use only integer values (whole numbers) for the scale steps
      onlyInteger: false
    },
    // Options for Y-Axis
    axisY: {
      // The offset of the chart drawing area to the border of the container
      offset: 40,
      // Position where labels are placed. Can be set to `start` or `end` where `start` is equivalent to left or top on vertical axis and `end` is equivalent to right or bottom on horizontal axis.
      position: 'start',
      // Allows you to correct label positioning on this axis by positive or negative x and y offset.
      labelOffset: {
        x: 0,
        y: 0
      },
      // If labels should be shown or not
      showLabel: true,
      // If the axis grid should be drawn or not
      showGrid: true,
      // Interpolation function that allows you to intercept the value from the axis label
      labelInterpolationFnc: Chartist.noop,
      // This value specifies the minimum height in pixel of the scale steps
      scaleMinSpace: 20,
      // Use only integer values (whole numbers) for the scale steps
      onlyInteger: false
    },
    // Specify a fixed width for the chart as a string (i.e. '100px' or '50%')
    width: undefined,
    // Specify a fixed height for the chart as a string (i.e. '100px' or '50%')
    height: undefined,
    // Overriding the natural high of the chart allows you to zoom in or limit the charts highest displayed value
    high: undefined,
    // Overriding the natural low of the chart allows you to zoom in or limit the charts lowest displayed value
    low: undefined,
    // Padding of the chart drawing area to the container element and labels as a number or padding object {top: 5, right: 5, bottom: 5, left: 5}
    chartPadding: {
      top: 15,
      right: 15,
      bottom: 5,
      left: 10
    },
    // Specify the distance in pixel of bars in a group
    seriesBarDistance: 15,
    // If set to true this property will cause the series bars to be stacked. Check the `stackMode` option for further stacking options.
    stackBars: false,
    // If set to 'overlap' this property will force the stacked bars to draw from the zero line.
    // If set to 'accumulate' this property will form a total for each series point. This will also influence the y-axis and the overall bounds of the chart. In stacked mode the seriesBarDistance property will have no effect.
    stackMode: 'accumulate',
    // Inverts the axes of the bar chart in order to draw a horizontal bar chart. Be aware that you also need to invert your axis settings as the Y Axis will now display the labels and the X Axis the values.
    horizontalBars: false,
    // If set to true then each bar will represent a series and the data array is expected to be a one dimensional array of data values rather than a series array of series. This is useful if the bar chart should represent a profile rather than some data over time.
    distributeSeries: false,
    // If true the whole data is reversed including labels, the series order as well as the whole series data arrays.
    reverseData: false,
    // Override the class names that get used to generate the SVG structure of the chart
    classNames: {
      chart: 'ct-chart-bar',
      horizontalBars: 'ct-horizontal-bars',
      label: 'ct-label',
      labelGroup: 'ct-labels',
      series: 'ct-series',
      bar: 'ct-bar',
      grid: 'ct-grid',
      gridGroup: 'ct-grids',
      vertical: 'ct-vertical',
      horizontal: 'ct-horizontal',
      start: 'ct-start',
      end: 'ct-end'
    }
  };

  /**
   * Creates a new chart
   *
   */
  function createChart(options) {
    this.data = Chartist.normalizeData(this.data);
    var data = {
      raw: this.data,
      normalized: options.distributeSeries ? Chartist.getDataArray(this.data, options.reverseData, options.horizontalBars ? 'x' : 'y').map(function(value) {
        return [value];
      }) : Chartist.getDataArray(this.data, options.reverseData, options.horizontalBars ? 'x' : 'y')
    };

    var highLow;

    // Create new svg element
    this.svg = Chartist.createSvg(
      this.container,
      options.width,
      options.height,
      options.classNames.chart + (options.horizontalBars ? ' ' + options.classNames.horizontalBars : '')
    );

    // Drawing groups in correct order
    var gridGroup = this.svg.elem('g').addClass(options.classNames.gridGroup);
    var seriesGroup = this.svg.elem('g');
    var labelGroup = this.svg.elem('g').addClass(options.classNames.labelGroup);

    if(options.stackBars && data.normalized.length !== 0) {
      // If stacked bars we need to calculate the high low from stacked values from each series
      var serialSums = Chartist.serialMap(data.normalized, function serialSums() {
        return Array.prototype.slice.call(arguments).map(function(value) {
          return value;
        }).reduce(function(prev, curr) {
          return {
            x: prev.x + (curr && curr.x) || 0,
            y: prev.y + (curr && curr.y) || 0
          };
        }, {x: 0, y: 0});
      });

      highLow = Chartist.getHighLow([serialSums], Chartist.extend({}, options, {
        referenceValue: 0
      }), options.horizontalBars ? 'x' : 'y');
    } else {
      highLow = Chartist.getHighLow(data.normalized, Chartist.extend({}, options, {
        referenceValue: 0
      }), options.horizontalBars ? 'x' : 'y');
    }
    // Overrides of high / low from settings
    highLow.high = +options.high || (options.high === 0 ? 0 : highLow.high);
    highLow.low = +options.low || (options.low === 0 ? 0 : highLow.low);

    var chartRect = Chartist.createChartRect(this.svg, options, defaultOptions.padding);

    var valueAxis,
      labelAxisTicks,
      labelAxis,
      axisX,
      axisY;

    // We need to set step count based on some options combinations
    if(options.distributeSeries && options.stackBars) {
      // If distributed series are enabled and bars need to be stacked, we'll only have one bar and therefore should
      // use only the first label for the step axis
      labelAxisTicks = data.raw.labels.slice(0, 1);
    } else {
      // If distributed series are enabled but stacked bars aren't, we should use the series labels
      // If we are drawing a regular bar chart with two dimensional series data, we just use the labels array
      // as the bars are normalized
      labelAxisTicks = data.raw.labels;
    }

    // Set labelAxis and valueAxis based on the horizontalBars setting. This setting will flip the axes if necessary.
    if(options.horizontalBars) {
      if(options.axisX.type === undefined) {
        valueAxis = axisX = new Chartist.AutoScaleAxis(Chartist.Axis.units.x, data, chartRect, Chartist.extend({}, options.axisX, {
          highLow: highLow,
          referenceValue: 0
        }));
      } else {
        valueAxis = axisX = options.axisX.type.call(Chartist, Chartist.Axis.units.x, data, chartRect, Chartist.extend({}, options.axisX, {
          highLow: highLow,
          referenceValue: 0
        }));
      }

      if(options.axisY.type === undefined) {
        labelAxis = axisY = new Chartist.StepAxis(Chartist.Axis.units.y, data, chartRect, {
          ticks: labelAxisTicks
        });
      } else {
        labelAxis = axisY = options.axisY.type.call(Chartist, Chartist.Axis.units.y, data, chartRect, options.axisY);
      }
    } else {
      if(options.axisX.type === undefined) {
        labelAxis = axisX = new Chartist.StepAxis(Chartist.Axis.units.x, data, chartRect, {
          ticks: labelAxisTicks
        });
      } else {
        labelAxis = axisX = options.axisX.type.call(Chartist, Chartist.Axis.units.x, data, chartRect, options.axisX);
      }

      if(options.axisY.type === undefined) {
        valueAxis = axisY = new Chartist.AutoScaleAxis(Chartist.Axis.units.y, data, chartRect, Chartist.extend({}, options.axisY, {
          highLow: highLow,
          referenceValue: 0
        }));
      } else {
        valueAxis = axisY = options.axisY.type.call(Chartist, Chartist.Axis.units.y, data, chartRect, Chartist.extend({}, options.axisY, {
          highLow: highLow,
          referenceValue: 0
        }));
      }
    }

    // Projected 0 point
    var zeroPoint = options.horizontalBars ? (chartRect.x1 + valueAxis.projectValue(0)) : (chartRect.y1 - valueAxis.projectValue(0));
    // Used to track the screen coordinates of stacked bars
    var stackedBarValues = [];

    labelAxis.createGridAndLabels(gridGroup, labelGroup, this.supportsForeignObject, options, this.eventEmitter);
    valueAxis.createGridAndLabels(gridGroup, labelGroup, this.supportsForeignObject, options, this.eventEmitter);

    // Draw the series
    data.raw.series.forEach(function(series, seriesIndex) {
      // Calculating bi-polar value of index for seriesOffset. For i = 0..4 biPol will be -1.5, -0.5, 0.5, 1.5 etc.
      var biPol = seriesIndex - (data.raw.series.length - 1) / 2;
      // Half of the period width between vertical grid lines used to position bars
      var periodHalfLength;
      // Current series SVG element
      var seriesElement;

      // We need to set periodHalfLength based on some options combinations
      if(options.distributeSeries && !options.stackBars) {
        // If distributed series are enabled but stacked bars aren't, we need to use the length of the normaizedData array
        // which is the series count and divide by 2
        periodHalfLength = labelAxis.axisLength / data.normalized.length / 2;
      } else if(options.distributeSeries && options.stackBars) {
        // If distributed series and stacked bars are enabled we'll only get one bar so we should just divide the axis
        // length by 2
        periodHalfLength = labelAxis.axisLength / 2;
      } else {
        // On regular bar charts we should just use the series length
        periodHalfLength = labelAxis.axisLength / data.normalized[seriesIndex].length / 2;
      }

      // Adding the series group to the series element
      seriesElement = seriesGroup.elem('g');

      // Write attributes to series group element. If series name or meta is undefined the attributes will not be written
      seriesElement.attr({
        'ct:series-name': series.name,
        'ct:meta': Chartist.serialize(series.meta)
      });

      // Use series class from series data or if not set generate one
      seriesElement.addClass([
        options.classNames.series,
        (series.className || options.classNames.series + '-' + Chartist.alphaNumerate(seriesIndex))
      ].join(' '));

      data.normalized[seriesIndex].forEach(function(value, valueIndex) {
        var projected,
          bar,
          previousStack,
          labelAxisValueIndex;

        // We need to set labelAxisValueIndex based on some options combinations
        if(options.distributeSeries && !options.stackBars) {
          // If distributed series are enabled but stacked bars aren't, we can use the seriesIndex for later projection
          // on the step axis for label positioning
          labelAxisValueIndex = seriesIndex;
        } else if(options.distributeSeries && options.stackBars) {
          // If distributed series and stacked bars are enabled, we will only get one bar and therefore always use
          // 0 for projection on the label step axis
          labelAxisValueIndex = 0;
        } else {
          // On regular bar charts we just use the value index to project on the label step axis
          labelAxisValueIndex = valueIndex;
        }

        // We need to transform coordinates differently based on the chart layout
        if(options.horizontalBars) {
          projected = {
            x: chartRect.x1 + valueAxis.projectValue(value && value.x ? value.x : 0, valueIndex, data.normalized[seriesIndex]),
            y: chartRect.y1 - labelAxis.projectValue(value && value.y ? value.y : 0, labelAxisValueIndex, data.normalized[seriesIndex])
          };
        } else {
          projected = {
            x: chartRect.x1 + labelAxis.projectValue(value && value.x ? value.x : 0, labelAxisValueIndex, data.normalized[seriesIndex]),
            y: chartRect.y1 - valueAxis.projectValue(value && value.y ? value.y : 0, valueIndex, data.normalized[seriesIndex])
          }
        }

        // If the label axis is a step based axis we will offset the bar into the middle of between two steps using
        // the periodHalfLength value. Also we do arrange the different series so that they align up to each other using
        // the seriesBarDistance. If we don't have a step axis, the bar positions can be chosen freely so we should not
        // add any automated positioning.
        if(labelAxis instanceof Chartist.StepAxis) {
          // Offset to center bar between grid lines, but only if the step axis is not stretched
          if(!labelAxis.options.stretch) {
            projected[labelAxis.units.pos] += periodHalfLength * (options.horizontalBars ? -1 : 1);
          }
          // Using bi-polar offset for multiple series if no stacked bars or series distribution is used
          projected[labelAxis.units.pos] += (options.stackBars || options.distributeSeries) ? 0 : biPol * options.seriesBarDistance * (options.horizontalBars ? -1 : 1);
        }

        // Enter value in stacked bar values used to remember previous screen value for stacking up bars
        previousStack = stackedBarValues[valueIndex] || zeroPoint;
        stackedBarValues[valueIndex] = previousStack - (zeroPoint - projected[labelAxis.counterUnits.pos]);

        // Skip if value is undefined
        if(value === undefined) {
          return;
        }

        var positions = {};
        positions[labelAxis.units.pos + '1'] = projected[labelAxis.units.pos];
        positions[labelAxis.units.pos + '2'] = projected[labelAxis.units.pos];

        if(options.stackBars && (options.stackMode === 'accumulate' || !options.stackMode)) {
          // Stack mode: accumulate (default)
          // If bars are stacked we use the stackedBarValues reference and otherwise base all bars off the zero line
          // We want backwards compatibility, so the expected fallback without the 'stackMode' option
          // to be the original behaviour (accumulate)
          positions[labelAxis.counterUnits.pos + '1'] = previousStack;
          positions[labelAxis.counterUnits.pos + '2'] = stackedBarValues[valueIndex];
        } else {
          // Draw from the zero line normally
          // This is also the same code for Stack mode: overlap
          positions[labelAxis.counterUnits.pos + '1'] = zeroPoint;
          positions[labelAxis.counterUnits.pos + '2'] = projected[labelAxis.counterUnits.pos];
        }

        // Limit x and y so that they are within the chart rect
        positions.x1 = Math.min(Math.max(positions.x1, chartRect.x1), chartRect.x2);
        positions.x2 = Math.min(Math.max(positions.x2, chartRect.x1), chartRect.x2);
        positions.y1 = Math.min(Math.max(positions.y1, chartRect.y2), chartRect.y1);
        positions.y2 = Math.min(Math.max(positions.y2, chartRect.y2), chartRect.y1);

        // Create bar element
        bar = seriesElement.elem('line', positions, options.classNames.bar).attr({
          'ct:value': [value.x, value.y].filter(Chartist.isNum).join(','),
          'ct:meta': Chartist.getMetaData(series, valueIndex)
        });

        this.eventEmitter.emit('draw', Chartist.extend({
          type: 'bar',
          value: value,
          index: valueIndex,
          meta: Chartist.getMetaData(series, valueIndex),
          series: series,
          seriesIndex: seriesIndex,
          axisX: axisX,
          axisY: axisY,
          chartRect: chartRect,
          group: seriesElement,
          element: bar
        }, positions));
      }.bind(this));
    }.bind(this));

    this.eventEmitter.emit('created', {
      bounds: valueAxis.bounds,
      chartRect: chartRect,
      axisX: axisX,
      axisY: axisY,
      svg: this.svg,
      options: options
    });
  }

  /**
   * This method creates a new bar chart and returns API object that you can use for later changes.
   *
   * @memberof Chartist.Bar
   * @param {String|Node} query A selector query string or directly a DOM element
   * @param {Object} data The data object that needs to consist of a labels and a series array
   * @param {Object} [options] The options object with options that override the default options. Check the examples for a detailed list.
   * @param {Array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]]
   * @return {Object} An object which exposes the API for the created chart
   *
   * @example
   * // Create a simple bar chart
   * var data = {
   *   labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
   *   series: [
   *     [5, 2, 4, 2, 0]
   *   ]
   * };
   *
   * // In the global name space Chartist we call the Bar function to initialize a bar chart. As a first parameter we pass in a selector where we would like to get our chart created and as a second parameter we pass our data object.
   * new Chartist.Bar('.ct-chart', data);
   *
   * @example
   * // This example creates a bipolar grouped bar chart where the boundaries are limitted to -10 and 10
   * new Chartist.Bar('.ct-chart', {
   *   labels: [1, 2, 3, 4, 5, 6, 7],
   *   series: [
   *     [1, 3, 2, -5, -3, 1, -6],
   *     [-5, -2, -4, -1, 2, -3, 1]
   *   ]
   * }, {
   *   seriesBarDistance: 12,
   *   low: -10,
   *   high: 10
   * });
   *
   */
  function Bar(query, data, options, responsiveOptions) {
    Chartist.Bar.super.constructor.call(this,
      query,
      data,
      defaultOptions,
      Chartist.extend({}, defaultOptions, options),
      responsiveOptions);
  }

  // Creating bar chart type in Chartist namespace
  Chartist.Bar = Chartist.Base.extend({
    constructor: Bar,
    createChart: createChart
  });

}(window, document, Chartist));
;/**
 * The pie chart module of Chartist that can be used to draw pie, donut or gauge charts
 *
 * @module Chartist.Pie
 */
/* global Chartist */
(function(window, document, Chartist) {
  'use strict';

  /**
   * Default options in line charts. Expand the code view to see a detailed list of options with comments.
   *
   * @memberof Chartist.Pie
   */
  var defaultOptions = {
    // Specify a fixed width for the chart as a string (i.e. '100px' or '50%')
    width: undefined,
    // Specify a fixed height for the chart as a string (i.e. '100px' or '50%')
    height: undefined,
    // Padding of the chart drawing area to the container element and labels as a number or padding object {top: 5, right: 5, bottom: 5, left: 5}
    chartPadding: 5,
    // Override the class names that are used to generate the SVG structure of the chart
    classNames: {
      chartPie: 'ct-chart-pie',
      chartDonut: 'ct-chart-donut',
      series: 'ct-series',
      slicePie: 'ct-slice-pie',
      sliceDonut: 'ct-slice-donut',
      label: 'ct-label'
    },
    // The start angle of the pie chart in degrees where 0 points north. A higher value offsets the start angle clockwise.
    startAngle: 0,
    // An optional total you can specify. By specifying a total value, the sum of the values in the series must be this total in order to draw a full pie. You can use this parameter to draw only parts of a pie or gauge charts.
    total: undefined,
    // If specified the donut CSS classes will be used and strokes will be drawn instead of pie slices.
    donut: false,
    // Specify the donut stroke width, currently done in javascript for convenience. May move to CSS styles in the future.
    // This option can be set as number or string to specify a relative width (i.e. 100 or '30%').
    donutWidth: 60,
    // If a label should be shown or not
    showLabel: true,
    // Label position offset from the standard position which is half distance of the radius. This value can be either positive or negative. Positive values will position the label away from the center.
    labelOffset: 0,
    // This option can be set to 'inside', 'outside' or 'center'. Positioned with 'inside' the labels will be placed on half the distance of the radius to the border of the Pie by respecting the 'labelOffset'. The 'outside' option will place the labels at the border of the pie and 'center' will place the labels in the absolute center point of the chart. The 'center' option only makes sense in conjunction with the 'labelOffset' option.
    labelPosition: 'inside',
    // An interpolation function for the label value
    labelInterpolationFnc: Chartist.noop,
    // Label direction can be 'neutral', 'explode' or 'implode'. The labels anchor will be positioned based on those settings as well as the fact if the labels are on the right or left side of the center of the chart. Usually explode is useful when labels are positioned far away from the center.
    labelDirection: 'neutral',
    // If true the whole data is reversed including labels, the series order as well as the whole series data arrays.
    reverseData: false,
    // If true empty values will be ignored to avoid drawing unncessary slices and labels
    ignoreEmptyValues: false
  };

  /**
   * Determines SVG anchor position based on direction and center parameter
   *
   * @param center
   * @param label
   * @param direction
   * @return {string}
   */
  function determineAnchorPosition(center, label, direction) {
    var toTheRight = label.x > center.x;

    if(toTheRight && direction === 'explode' ||
      !toTheRight && direction === 'implode') {
      return 'start';
    } else if(toTheRight && direction === 'implode' ||
      !toTheRight && direction === 'explode') {
      return 'end';
    } else {
      return 'middle';
    }
  }

  /**
   * Creates the pie chart
   *
   * @param options
   */
  function createChart(options) {
    this.data = Chartist.normalizeData(this.data);
    var seriesGroups = [],
      labelsGroup,
      chartRect,
      radius,
      labelRadius,
      totalDataSum,
      startAngle = options.startAngle,
      dataArray = Chartist.getDataArray(this.data, options.reverseData);

    // Create SVG.js draw
    this.svg = Chartist.createSvg(this.container, options.width, options.height,options.donut ? options.classNames.chartDonut : options.classNames.chartPie);
    // Calculate charting rect
    chartRect = Chartist.createChartRect(this.svg, options, defaultOptions.padding);
    // Get biggest circle radius possible within chartRect
    radius = Math.min(chartRect.width() / 2, chartRect.height() / 2);
    // Calculate total of all series to get reference value or use total reference from optional options
    totalDataSum = options.total || dataArray.reduce(function(previousValue, currentValue) {
      return previousValue + currentValue;
    }, 0);

    var donutWidth = Chartist.quantity(options.donutWidth);
    if (donutWidth.unit === '%') {
      donutWidth.value *= radius / 100;
    }

    // If this is a donut chart we need to adjust our radius to enable strokes to be drawn inside
    // Unfortunately this is not possible with the current SVG Spec
    // See this proposal for more details: http://lists.w3.org/Archives/Public/www-svg/2003Oct/0000.html
    radius -= options.donut ? donutWidth.value / 2  : 0;

    // If labelPosition is set to `outside` or a donut chart is drawn then the label position is at the radius,
    // if regular pie chart it's half of the radius
    if(options.labelPosition === 'outside' || options.donut) {
      labelRadius = radius;
    } else if(options.labelPosition === 'center') {
      // If labelPosition is center we start with 0 and will later wait for the labelOffset
      labelRadius = 0;
    } else {
      // Default option is 'inside' where we use half the radius so the label will be placed in the center of the pie
      // slice
      labelRadius = radius / 2;
    }
    // Add the offset to the labelRadius where a negative offset means closed to the center of the chart
    labelRadius += options.labelOffset;

    // Calculate end angle based on total sum and current data value and offset with padding
    var center = {
      x: chartRect.x1 + chartRect.width() / 2,
      y: chartRect.y2 + chartRect.height() / 2
    };

    // Check if there is only one non-zero value in the series array.
    var hasSingleValInSeries = this.data.series.filter(function(val) {
      return val.hasOwnProperty('value') ? val.value !== 0 : val !== 0;
    }).length === 1;

    //if we need to show labels we create the label group now
    if(options.showLabel) {
      labelsGroup = this.svg.elem('g', null, null, true);
    }

    // Draw the series
    // initialize series groups
    for (var i = 0; i < this.data.series.length; i++) {
      // If current value is zero and we are ignoring empty values then skip to next value
      if (dataArray[i] === 0 && options.ignoreEmptyValues) continue;

      var series = this.data.series[i];
      seriesGroups[i] = this.svg.elem('g', null, null, true);

      // If the series is an object and contains a name or meta data we add a custom attribute
      seriesGroups[i].attr({
        'ct:series-name': series.name
      });

      // Use series class from series data or if not set generate one
      seriesGroups[i].addClass([
        options.classNames.series,
        (series.className || options.classNames.series + '-' + Chartist.alphaNumerate(i))
      ].join(' '));

      var endAngle = startAngle + dataArray[i] / totalDataSum * 360;

      // Use slight offset so there are no transparent hairline issues
      var overlappigStartAngle = Math.max(0, startAngle - (i === 0 || hasSingleValInSeries ? 0 : 0.2));

      // If we need to draw the arc for all 360 degrees we need to add a hack where we close the circle
      // with Z and use 359.99 degrees
      if(endAngle - overlappigStartAngle >= 359.99) {
        endAngle = overlappigStartAngle + 359.99;
      }

      var start = Chartist.polarToCartesian(center.x, center.y, radius, overlappigStartAngle),
        end = Chartist.polarToCartesian(center.x, center.y, radius, endAngle);

      // Create a new path element for the pie chart. If this isn't a donut chart we should close the path for a correct stroke
      var path = new Chartist.Svg.Path(!options.donut)
        .move(end.x, end.y)
        .arc(radius, radius, 0, endAngle - startAngle > 180, 0, start.x, start.y);

      // If regular pie chart (no donut) we add a line to the center of the circle for completing the pie
      if(!options.donut) {
        path.line(center.x, center.y);
      }

      // Create the SVG path
      // If this is a donut chart we add the donut class, otherwise just a regular slice
      var pathElement = seriesGroups[i].elem('path', {
        d: path.stringify()
      }, options.donut ? options.classNames.sliceDonut : options.classNames.slicePie);

      // Adding the pie series value to the path
      pathElement.attr({
        'ct:value': dataArray[i],
        'ct:meta': Chartist.serialize(series.meta)
      });

      // If this is a donut, we add the stroke-width as style attribute
      if(options.donut) {
        pathElement.attr({
          'style': 'stroke-width: ' + donutWidth.value + 'px'
        });
      }

      // Fire off draw event
      this.eventEmitter.emit('draw', {
        type: 'slice',
        value: dataArray[i],
        totalDataSum: totalDataSum,
        index: i,
        meta: series.meta,
        series: series,
        group: seriesGroups[i],
        element: pathElement,
        path: path.clone(),
        center: center,
        radius: radius,
        startAngle: startAngle,
        endAngle: endAngle
      });

      // If we need to show labels we need to add the label for this slice now
      if(options.showLabel) {
        // Position at the labelRadius distance from center and between start and end angle
        var labelPosition = Chartist.polarToCartesian(center.x, center.y, labelRadius, startAngle + (endAngle - startAngle) / 2),
          interpolatedValue = options.labelInterpolationFnc(this.data.labels && !Chartist.isFalseyButZero(this.data.labels[i]) ? this.data.labels[i] : dataArray[i], i);

        if(interpolatedValue || interpolatedValue === 0) {
          var labelElement = labelsGroup.elem('text', {
            dx: labelPosition.x,
            dy: labelPosition.y,
            'text-anchor': determineAnchorPosition(center, labelPosition, options.labelDirection)
          }, options.classNames.label).text('' + interpolatedValue);

          // Fire off draw event
          this.eventEmitter.emit('draw', {
            type: 'label',
            index: i,
            group: labelsGroup,
            element: labelElement,
            text: '' + interpolatedValue,
            x: labelPosition.x,
            y: labelPosition.y
          });
        }
      }

      // Set next startAngle to current endAngle.
      // (except for last slice)
      startAngle = endAngle;
    }

    this.eventEmitter.emit('created', {
      chartRect: chartRect,
      svg: this.svg,
      options: options
    });
  }

  /**
   * This method creates a new pie chart and returns an object that can be used to redraw the chart.
   *
   * @memberof Chartist.Pie
   * @param {String|Node} query A selector query string or directly a DOM element
   * @param {Object} data The data object in the pie chart needs to have a series property with a one dimensional data array. The values will be normalized against each other and don't necessarily need to be in percentage. The series property can also be an array of value objects that contain a value property and a className property to override the CSS class name for the series group.
   * @param {Object} [options] The options object with options that override the default options. Check the examples for a detailed list.
   * @param {Array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]]
   * @return {Object} An object with a version and an update method to manually redraw the chart
   *
   * @example
   * // Simple pie chart example with four series
   * new Chartist.Pie('.ct-chart', {
   *   series: [10, 2, 4, 3]
   * });
   *
   * @example
   * // Drawing a donut chart
   * new Chartist.Pie('.ct-chart', {
   *   series: [10, 2, 4, 3]
   * }, {
   *   donut: true
   * });
   *
   * @example
   * // Using donut, startAngle and total to draw a gauge chart
   * new Chartist.Pie('.ct-chart', {
   *   series: [20, 10, 30, 40]
   * }, {
   *   donut: true,
   *   donutWidth: 20,
   *   startAngle: 270,
   *   total: 200
   * });
   *
   * @example
   * // Drawing a pie chart with padding and labels that are outside the pie
   * new Chartist.Pie('.ct-chart', {
   *   series: [20, 10, 30, 40]
   * }, {
   *   chartPadding: 30,
   *   labelOffset: 50,
   *   labelDirection: 'explode'
   * });
   *
   * @example
   * // Overriding the class names for individual series as well as a name and meta data.
   * // The name will be written as ct:series-name attribute and the meta data will be serialized and written
   * // to a ct:meta attribute.
   * new Chartist.Pie('.ct-chart', {
   *   series: [{
   *     value: 20,
   *     name: 'Series 1',
   *     className: 'my-custom-class-one',
   *     meta: 'Meta One'
   *   }, {
   *     value: 10,
   *     name: 'Series 2',
   *     className: 'my-custom-class-two',
   *     meta: 'Meta Two'
   *   }, {
   *     value: 70,
   *     name: 'Series 3',
   *     className: 'my-custom-class-three',
   *     meta: 'Meta Three'
   *   }]
   * });
   */
  function Pie(query, data, options, responsiveOptions) {
    Chartist.Pie.super.constructor.call(this,
      query,
      data,
      defaultOptions,
      Chartist.extend({}, defaultOptions, options),
      responsiveOptions);
  }

  // Creating pie chart type in Chartist namespace
  Chartist.Pie = Chartist.Base.extend({
    constructor: Pie,
    createChart: createChart,
    determineAnchorPosition: determineAnchorPosition
  });

}(window, document, Chartist));

return Chartist;

}));


/***/ }),

/***/ "./node_modules/chartjs-color-string/color-string.js":
/***/ (function(module, exports, __webpack_require__) {

/* MIT license */
var colorNames = __webpack_require__("./node_modules/color-name/index.js");

module.exports = {
   getRgba: getRgba,
   getHsla: getHsla,
   getRgb: getRgb,
   getHsl: getHsl,
   getHwb: getHwb,
   getAlpha: getAlpha,

   hexString: hexString,
   rgbString: rgbString,
   rgbaString: rgbaString,
   percentString: percentString,
   percentaString: percentaString,
   hslString: hslString,
   hslaString: hslaString,
   hwbString: hwbString,
   keyword: keyword
}

function getRgba(string) {
   if (!string) {
      return;
   }
   var abbr =  /^#([a-fA-F0-9]{3})$/,
       hex =  /^#([a-fA-F0-9]{6})$/,
       rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
       per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
       keyword = /(\w+)/;

   var rgb = [0, 0, 0],
       a = 1,
       match = string.match(abbr);
   if (match) {
      match = match[1];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i] + match[i], 16);
      }
   }
   else if (match = string.match(hex)) {
      match = match[1];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
      }
   }
   else if (match = string.match(rgba)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i + 1]);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(per)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(keyword)) {
      if (match[1] == "transparent") {
         return [0, 0, 0, 0];
      }
      rgb = colorNames[match[1]];
      if (!rgb) {
         return;
      }
   }

   for (var i = 0; i < rgb.length; i++) {
      rgb[i] = scale(rgb[i], 0, 255);
   }
   if (!a && a != 0) {
      a = 1;
   }
   else {
      a = scale(a, 0, 1);
   }
   rgb[3] = a;
   return rgb;
}

function getHsla(string) {
   if (!string) {
      return;
   }
   var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
   var match = string.match(hsl);
   if (match) {
      var alpha = parseFloat(match[4]);
      var h = scale(parseInt(match[1]), 0, 360),
          s = scale(parseFloat(match[2]), 0, 100),
          l = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, s, l, a];
   }
}

function getHwb(string) {
   if (!string) {
      return;
   }
   var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
   var match = string.match(hwb);
   if (match) {
    var alpha = parseFloat(match[4]);
      var h = scale(parseInt(match[1]), 0, 360),
          w = scale(parseFloat(match[2]), 0, 100),
          b = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, w, b, a];
   }
}

function getRgb(string) {
   var rgba = getRgba(string);
   return rgba && rgba.slice(0, 3);
}

function getHsl(string) {
  var hsla = getHsla(string);
  return hsla && hsla.slice(0, 3);
}

function getAlpha(string) {
   var vals = getRgba(string);
   if (vals) {
      return vals[3];
   }
   else if (vals = getHsla(string)) {
      return vals[3];
   }
   else if (vals = getHwb(string)) {
      return vals[3];
   }
}

// generators
function hexString(rgb) {
   return "#" + hexDouble(rgb[0]) + hexDouble(rgb[1])
              + hexDouble(rgb[2]);
}

function rgbString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return rgbaString(rgba, alpha);
   }
   return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
}

function rgbaString(rgba, alpha) {
   if (alpha === undefined) {
      alpha = (rgba[3] !== undefined ? rgba[3] : 1);
   }
   return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
           + ", " + alpha + ")";
}

function percentString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return percentaString(rgba, alpha);
   }
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);

   return "rgb(" + r + "%, " + g + "%, " + b + "%)";
}

function percentaString(rgba, alpha) {
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);
   return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
}

function hslString(hsla, alpha) {
   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
      return hslaString(hsla, alpha);
   }
   return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
}

function hslaString(hsla, alpha) {
   if (alpha === undefined) {
      alpha = (hsla[3] !== undefined ? hsla[3] : 1);
   }
   return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
           + alpha + ")";
}

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
function hwbString(hwb, alpha) {
   if (alpha === undefined) {
      alpha = (hwb[3] !== undefined ? hwb[3] : 1);
   }
   return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
           + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
}

function keyword(rgb) {
  return reverseNames[rgb.slice(0, 3)];
}

// helpers
function scale(num, min, max) {
   return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
  var str = num.toString(16).toUpperCase();
  return (str.length < 2) ? "0" + str : str;
}


//create a list of reverse color names
var reverseNames = {};
for (var name in colorNames) {
   reverseNames[colorNames[name]] = name;
}


/***/ }),

/***/ "./node_modules/chartjs-color/src/color.js":
/***/ (function(module, exports, __webpack_require__) {

/* MIT license */

var convert = __webpack_require__("./node_modules/color-convert/index.js"),
  string = __webpack_require__("./node_modules/chartjs-color-string/color-string.js");

var Color = function(obj) {
  if (obj instanceof Color) return obj;
  if (!(this instanceof Color)) return new Color(obj);

  this.values = {
    rgb: [0, 0, 0],
    hsl: [0, 0, 0],
    hsv: [0, 0, 0],
    hwb: [0, 0, 0],
    cmyk: [0, 0, 0, 0],
    alpha: 1
  }

  // parse Color() argument
  if (typeof obj == "string") {
    var vals = string.getRgba(obj);
    if (vals) {
      this.setValues("rgb", vals);
    } else if (vals = string.getHsla(obj)) {
      this.setValues("hsl", vals);
    } else if (vals = string.getHwb(obj)) {
      this.setValues("hwb", vals);
    } else {
      throw new Error("Unable to parse color from string \"" + obj + "\"");
    }
  } else if (typeof obj == "object") {
    var vals = obj;
    if (vals["r"] !== undefined || vals["red"] !== undefined) {
      this.setValues("rgb", vals)
    } else if (vals["l"] !== undefined || vals["lightness"] !== undefined) {
      this.setValues("hsl", vals)
    } else if (vals["v"] !== undefined || vals["value"] !== undefined) {
      this.setValues("hsv", vals)
    } else if (vals["w"] !== undefined || vals["whiteness"] !== undefined) {
      this.setValues("hwb", vals)
    } else if (vals["c"] !== undefined || vals["cyan"] !== undefined) {
      this.setValues("cmyk", vals)
    } else {
      throw new Error("Unable to parse color from object " + JSON.stringify(obj));
    }
  }
}

Color.prototype = {
  rgb: function(vals) {
    return this.setSpace("rgb", arguments);
  },
  hsl: function(vals) {
    return this.setSpace("hsl", arguments);
  },
  hsv: function(vals) {
    return this.setSpace("hsv", arguments);
  },
  hwb: function(vals) {
    return this.setSpace("hwb", arguments);
  },
  cmyk: function(vals) {
    return this.setSpace("cmyk", arguments);
  },

  rgbArray: function() {
    return this.values.rgb;
  },
  hslArray: function() {
    return this.values.hsl;
  },
  hsvArray: function() {
    return this.values.hsv;
  },
  hwbArray: function() {
    if (this.values.alpha !== 1) {
      return this.values.hwb.concat([this.values.alpha])
    }
    return this.values.hwb;
  },
  cmykArray: function() {
    return this.values.cmyk;
  },
  rgbaArray: function() {
    var rgb = this.values.rgb;
    return rgb.concat([this.values.alpha]);
  },
  hslaArray: function() {
    var hsl = this.values.hsl;
    return hsl.concat([this.values.alpha]);
  },
  alpha: function(val) {
    if (val === undefined) {
      return this.values.alpha;
    }
    this.setValues("alpha", val);
    return this;
  },

  red: function(val) {
    return this.setChannel("rgb", 0, val);
  },
  green: function(val) {
    return this.setChannel("rgb", 1, val);
  },
  blue: function(val) {
    return this.setChannel("rgb", 2, val);
  },
  hue: function(val) {
    return this.setChannel("hsl", 0, val);
  },
  saturation: function(val) {
    return this.setChannel("hsl", 1, val);
  },
  lightness: function(val) {
    return this.setChannel("hsl", 2, val);
  },
  saturationv: function(val) {
    return this.setChannel("hsv", 1, val);
  },
  whiteness: function(val) {
    return this.setChannel("hwb", 1, val);
  },
  blackness: function(val) {
    return this.setChannel("hwb", 2, val);
  },
  value: function(val) {
    return this.setChannel("hsv", 2, val);
  },
  cyan: function(val) {
    return this.setChannel("cmyk", 0, val);
  },
  magenta: function(val) {
    return this.setChannel("cmyk", 1, val);
  },
  yellow: function(val) {
    return this.setChannel("cmyk", 2, val);
  },
  black: function(val) {
    return this.setChannel("cmyk", 3, val);
  },

  hexString: function() {
    return string.hexString(this.values.rgb);
  },
  rgbString: function() {
    return string.rgbString(this.values.rgb, this.values.alpha);
  },
  rgbaString: function() {
    return string.rgbaString(this.values.rgb, this.values.alpha);
  },
  percentString: function() {
    return string.percentString(this.values.rgb, this.values.alpha);
  },
  hslString: function() {
    return string.hslString(this.values.hsl, this.values.alpha);
  },
  hslaString: function() {
    return string.hslaString(this.values.hsl, this.values.alpha);
  },
  hwbString: function() {
    return string.hwbString(this.values.hwb, this.values.alpha);
  },
  keyword: function() {
    return string.keyword(this.values.rgb, this.values.alpha);
  },

  rgbNumber: function() {
    return (this.values.rgb[0] << 16) | (this.values.rgb[1] << 8) | this.values.rgb[2];
  },

  luminosity: function() {
    // http://www.w3.org/TR/WCAG20/#relativeluminancedef
    var rgb = this.values.rgb;
    var lum = [];
    for (var i = 0; i < rgb.length; i++) {
      var chan = rgb[i] / 255;
      lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4)
    }
    return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
  },

  contrast: function(color2) {
    // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
    var lum1 = this.luminosity();
    var lum2 = color2.luminosity();
    if (lum1 > lum2) {
      return (lum1 + 0.05) / (lum2 + 0.05)
    };
    return (lum2 + 0.05) / (lum1 + 0.05);
  },

  level: function(color2) {
    var contrastRatio = this.contrast(color2);
    return (contrastRatio >= 7.1) ? 'AAA' : (contrastRatio >= 4.5) ? 'AA' : '';
  },

  dark: function() {
    // YIQ equation from http://24ways.org/2010/calculating-color-contrast
    var rgb = this.values.rgb,
      yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
    return yiq < 128;
  },

  light: function() {
    return !this.dark();
  },

  negate: function() {
    var rgb = []
    for (var i = 0; i < 3; i++) {
      rgb[i] = 255 - this.values.rgb[i];
    }
    this.setValues("rgb", rgb);
    return this;
  },

  lighten: function(ratio) {
    this.values.hsl[2] += this.values.hsl[2] * ratio;
    this.setValues("hsl", this.values.hsl);
    return this;
  },

  darken: function(ratio) {
    this.values.hsl[2] -= this.values.hsl[2] * ratio;
    this.setValues("hsl", this.values.hsl);
    return this;
  },

  saturate: function(ratio) {
    this.values.hsl[1] += this.values.hsl[1] * ratio;
    this.setValues("hsl", this.values.hsl);
    return this;
  },

  desaturate: function(ratio) {
    this.values.hsl[1] -= this.values.hsl[1] * ratio;
    this.setValues("hsl", this.values.hsl);
    return this;
  },

  whiten: function(ratio) {
    this.values.hwb[1] += this.values.hwb[1] * ratio;
    this.setValues("hwb", this.values.hwb);
    return this;
  },

  blacken: function(ratio) {
    this.values.hwb[2] += this.values.hwb[2] * ratio;
    this.setValues("hwb", this.values.hwb);
    return this;
  },

  greyscale: function() {
    var rgb = this.values.rgb;
    // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
    var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
    this.setValues("rgb", [val, val, val]);
    return this;
  },

  clearer: function(ratio) {
    this.setValues("alpha", this.values.alpha - (this.values.alpha * ratio));
    return this;
  },

  opaquer: function(ratio) {
    this.setValues("alpha", this.values.alpha + (this.values.alpha * ratio));
    return this;
  },

  rotate: function(degrees) {
    var hue = this.values.hsl[0];
    hue = (hue + degrees) % 360;
    hue = hue < 0 ? 360 + hue : hue;
    this.values.hsl[0] = hue;
    this.setValues("hsl", this.values.hsl);
    return this;
  },

  mix: function(color2, weight) {
    weight = 1 - (weight == null ? 0.5 : weight);

    // algorithm from Sass's mix(). Ratio of first color in mix is
    // determined by the alphas of both colors and the weight
    var t1 = weight * 2 - 1,
      d = this.alpha() - color2.alpha();

    var weight1 = (((t1 * d == -1) ? t1 : (t1 + d) / (1 + t1 * d)) + 1) / 2;
    var weight2 = 1 - weight1;

    var rgb = this.rgbArray();
    var rgb2 = color2.rgbArray();

    for (var i = 0; i < rgb.length; i++) {
      rgb[i] = rgb[i] * weight1 + rgb2[i] * weight2;
    }
    this.setValues("rgb", rgb);

    var alpha = this.alpha() * weight + color2.alpha() * (1 - weight);
    this.setValues("alpha", alpha);

    return this;
  },

  toJSON: function() {
    return this.rgb();
  },

  clone: function() {
    return new Color(this.rgb());
  }
}


Color.prototype.getValues = function(space) {
  var vals = {};
  for (var i = 0; i < space.length; i++) {
    vals[space.charAt(i)] = this.values[space][i];
  }
  if (this.values.alpha != 1) {
    vals["a"] = this.values.alpha;
  }
  // {r: 255, g: 255, b: 255, a: 0.4}
  return vals;
}

Color.prototype.setValues = function(space, vals) {
  var spaces = {
    "rgb": ["red", "green", "blue"],
    "hsl": ["hue", "saturation", "lightness"],
    "hsv": ["hue", "saturation", "value"],
    "hwb": ["hue", "whiteness", "blackness"],
    "cmyk": ["cyan", "magenta", "yellow", "black"]
  };

  var maxes = {
    "rgb": [255, 255, 255],
    "hsl": [360, 100, 100],
    "hsv": [360, 100, 100],
    "hwb": [360, 100, 100],
    "cmyk": [100, 100, 100, 100]
  };

  var alpha = 1;
  if (space == "alpha") {
    alpha = vals;
  } else if (vals.length) {
    // [10, 10, 10]
    this.values[space] = vals.slice(0, space.length);
    alpha = vals[space.length];
  } else if (vals[space.charAt(0)] !== undefined) {
    // {r: 10, g: 10, b: 10}
    for (var i = 0; i < space.length; i++) {
      this.values[space][i] = vals[space.charAt(i)];
    }
    alpha = vals.a;
  } else if (vals[spaces[space][0]] !== undefined) {
    // {red: 10, green: 10, blue: 10}
    var chans = spaces[space];
    for (var i = 0; i < space.length; i++) {
      this.values[space][i] = vals[chans[i]];
    }
    alpha = vals.alpha;
  }
  this.values.alpha = Math.max(0, Math.min(1, (alpha !== undefined ? alpha : this.values.alpha)));
  if (space == "alpha") {
    return;
  }

  // cap values of the space prior converting all values
  for (var i = 0; i < space.length; i++) {
    var capped = Math.max(0, Math.min(maxes[space][i], this.values[space][i]));
    this.values[space][i] = Math.round(capped);
  }

  // convert to all the other color spaces
  for (var sname in spaces) {
    if (sname != space) {
      this.values[sname] = convert[space][sname](this.values[space])
    }

    // cap values
    for (var i = 0; i < sname.length; i++) {
      var capped = Math.max(0, Math.min(maxes[sname][i], this.values[sname][i]));
      this.values[sname][i] = Math.round(capped);
    }
  }
  return true;
}

Color.prototype.setSpace = function(space, args) {
  var vals = args[0];
  if (vals === undefined) {
    // color.rgb()
    return this.getValues(space);
  }
  // color.rgb(10, 10, 10)
  if (typeof vals == "number") {
    vals = Array.prototype.slice.call(args);
  }
  this.setValues(space, vals);
  return this;
}

Color.prototype.setChannel = function(space, index, val) {
  if (val === undefined) {
    // color.red()
    return this.values[space][index];
  }
  // color.red(100)
  this.values[space][index] = val;
  this.setValues(space, this.values[space]);
  return this;
}

window.Color = module.exports = Color


/***/ }),

/***/ "./node_modules/color-convert/conversions.js":
/***/ (function(module, exports) {

/* MIT license */

module.exports = {
  rgb2hsl: rgb2hsl,
  rgb2hsv: rgb2hsv,
  rgb2hwb: rgb2hwb,
  rgb2cmyk: rgb2cmyk,
  rgb2keyword: rgb2keyword,
  rgb2xyz: rgb2xyz,
  rgb2lab: rgb2lab,
  rgb2lch: rgb2lch,

  hsl2rgb: hsl2rgb,
  hsl2hsv: hsl2hsv,
  hsl2hwb: hsl2hwb,
  hsl2cmyk: hsl2cmyk,
  hsl2keyword: hsl2keyword,

  hsv2rgb: hsv2rgb,
  hsv2hsl: hsv2hsl,
  hsv2hwb: hsv2hwb,
  hsv2cmyk: hsv2cmyk,
  hsv2keyword: hsv2keyword,

  hwb2rgb: hwb2rgb,
  hwb2hsl: hwb2hsl,
  hwb2hsv: hwb2hsv,
  hwb2cmyk: hwb2cmyk,
  hwb2keyword: hwb2keyword,

  cmyk2rgb: cmyk2rgb,
  cmyk2hsl: cmyk2hsl,
  cmyk2hsv: cmyk2hsv,
  cmyk2hwb: cmyk2hwb,
  cmyk2keyword: cmyk2keyword,

  keyword2rgb: keyword2rgb,
  keyword2hsl: keyword2hsl,
  keyword2hsv: keyword2hsv,
  keyword2hwb: keyword2hwb,
  keyword2cmyk: keyword2cmyk,
  keyword2lab: keyword2lab,
  keyword2xyz: keyword2xyz,

  xyz2rgb: xyz2rgb,
  xyz2lab: xyz2lab,
  xyz2lch: xyz2lch,

  lab2xyz: lab2xyz,
  lab2rgb: lab2rgb,
  lab2lch: lab2lch,

  lch2lab: lch2lab,
  lch2xyz: lch2xyz,
  lch2rgb: lch2rgb
}


function rgb2hsl(rgb) {
  var r = rgb[0]/255,
      g = rgb[1]/255,
      b = rgb[2]/255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      delta = max - min,
      h, s, l;

  if (max == min)
    h = 0;
  else if (r == max)
    h = (g - b) / delta;
  else if (g == max)
    h = 2 + (b - r) / delta;
  else if (b == max)
    h = 4 + (r - g)/ delta;

  h = Math.min(h * 60, 360);

  if (h < 0)
    h += 360;

  l = (min + max) / 2;

  if (max == min)
    s = 0;
  else if (l <= 0.5)
    s = delta / (max + min);
  else
    s = delta / (2 - max - min);

  return [h, s * 100, l * 100];
}

function rgb2hsv(rgb) {
  var r = rgb[0],
      g = rgb[1],
      b = rgb[2],
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      delta = max - min,
      h, s, v;

  if (max == 0)
    s = 0;
  else
    s = (delta/max * 1000)/10;

  if (max == min)
    h = 0;
  else if (r == max)
    h = (g - b) / delta;
  else if (g == max)
    h = 2 + (b - r) / delta;
  else if (b == max)
    h = 4 + (r - g) / delta;

  h = Math.min(h * 60, 360);

  if (h < 0)
    h += 360;

  v = ((max / 255) * 1000) / 10;

  return [h, s, v];
}

function rgb2hwb(rgb) {
  var r = rgb[0],
      g = rgb[1],
      b = rgb[2],
      h = rgb2hsl(rgb)[0],
      w = 1/255 * Math.min(r, Math.min(g, b)),
      b = 1 - 1/255 * Math.max(r, Math.max(g, b));

  return [h, w * 100, b * 100];
}

function rgb2cmyk(rgb) {
  var r = rgb[0] / 255,
      g = rgb[1] / 255,
      b = rgb[2] / 255,
      c, m, y, k;

  k = Math.min(1 - r, 1 - g, 1 - b);
  c = (1 - r - k) / (1 - k) || 0;
  m = (1 - g - k) / (1 - k) || 0;
  y = (1 - b - k) / (1 - k) || 0;
  return [c * 100, m * 100, y * 100, k * 100];
}

function rgb2keyword(rgb) {
  return reverseKeywords[JSON.stringify(rgb)];
}

function rgb2xyz(rgb) {
  var r = rgb[0] / 255,
      g = rgb[1] / 255,
      b = rgb[2] / 255;

  // assume sRGB
  r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
  g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
  b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

  var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
  var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
  var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

  return [x * 100, y *100, z * 100];
}

function rgb2lab(rgb) {
  var xyz = rgb2xyz(rgb),
        x = xyz[0],
        y = xyz[1],
        z = xyz[2],
        l, a, b;

  x /= 95.047;
  y /= 100;
  z /= 108.883;

  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

  l = (116 * y) - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);

  return [l, a, b];
}

function rgb2lch(args) {
  return lab2lch(rgb2lab(args));
}

function hsl2rgb(hsl) {
  var h = hsl[0] / 360,
      s = hsl[1] / 100,
      l = hsl[2] / 100,
      t1, t2, t3, rgb, val;

  if (s == 0) {
    val = l * 255;
    return [val, val, val];
  }

  if (l < 0.5)
    t2 = l * (1 + s);
  else
    t2 = l + s - l * s;
  t1 = 2 * l - t2;

  rgb = [0, 0, 0];
  for (var i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * - (i - 1);
    t3 < 0 && t3++;
    t3 > 1 && t3--;

    if (6 * t3 < 1)
      val = t1 + (t2 - t1) * 6 * t3;
    else if (2 * t3 < 1)
      val = t2;
    else if (3 * t3 < 2)
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    else
      val = t1;

    rgb[i] = val * 255;
  }

  return rgb;
}

function hsl2hsv(hsl) {
  var h = hsl[0],
      s = hsl[1] / 100,
      l = hsl[2] / 100,
      sv, v;

  if(l === 0) {
      // no need to do calc on black
      // also avoids divide by 0 error
      return [0, 0, 0];
  }

  l *= 2;
  s *= (l <= 1) ? l : 2 - l;
  v = (l + s) / 2;
  sv = (2 * s) / (l + s);
  return [h, sv * 100, v * 100];
}

function hsl2hwb(args) {
  return rgb2hwb(hsl2rgb(args));
}

function hsl2cmyk(args) {
  return rgb2cmyk(hsl2rgb(args));
}

function hsl2keyword(args) {
  return rgb2keyword(hsl2rgb(args));
}


function hsv2rgb(hsv) {
  var h = hsv[0] / 60,
      s = hsv[1] / 100,
      v = hsv[2] / 100,
      hi = Math.floor(h) % 6;

  var f = h - Math.floor(h),
      p = 255 * v * (1 - s),
      q = 255 * v * (1 - (s * f)),
      t = 255 * v * (1 - (s * (1 - f))),
      v = 255 * v;

  switch(hi) {
    case 0:
      return [v, t, p];
    case 1:
      return [q, v, p];
    case 2:
      return [p, v, t];
    case 3:
      return [p, q, v];
    case 4:
      return [t, p, v];
    case 5:
      return [v, p, q];
  }
}

function hsv2hsl(hsv) {
  var h = hsv[0],
      s = hsv[1] / 100,
      v = hsv[2] / 100,
      sl, l;

  l = (2 - s) * v;
  sl = s * v;
  sl /= (l <= 1) ? l : 2 - l;
  sl = sl || 0;
  l /= 2;
  return [h, sl * 100, l * 100];
}

function hsv2hwb(args) {
  return rgb2hwb(hsv2rgb(args))
}

function hsv2cmyk(args) {
  return rgb2cmyk(hsv2rgb(args));
}

function hsv2keyword(args) {
  return rgb2keyword(hsv2rgb(args));
}

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
function hwb2rgb(hwb) {
  var h = hwb[0] / 360,
      wh = hwb[1] / 100,
      bl = hwb[2] / 100,
      ratio = wh + bl,
      i, v, f, n;

  // wh + bl cant be > 1
  if (ratio > 1) {
    wh /= ratio;
    bl /= ratio;
  }

  i = Math.floor(6 * h);
  v = 1 - bl;
  f = 6 * h - i;
  if ((i & 0x01) != 0) {
    f = 1 - f;
  }
  n = wh + f * (v - wh);  // linear interpolation

  switch (i) {
    default:
    case 6:
    case 0: r = v; g = n; b = wh; break;
    case 1: r = n; g = v; b = wh; break;
    case 2: r = wh; g = v; b = n; break;
    case 3: r = wh; g = n; b = v; break;
    case 4: r = n; g = wh; b = v; break;
    case 5: r = v; g = wh; b = n; break;
  }

  return [r * 255, g * 255, b * 255];
}

function hwb2hsl(args) {
  return rgb2hsl(hwb2rgb(args));
}

function hwb2hsv(args) {
  return rgb2hsv(hwb2rgb(args));
}

function hwb2cmyk(args) {
  return rgb2cmyk(hwb2rgb(args));
}

function hwb2keyword(args) {
  return rgb2keyword(hwb2rgb(args));
}

function cmyk2rgb(cmyk) {
  var c = cmyk[0] / 100,
      m = cmyk[1] / 100,
      y = cmyk[2] / 100,
      k = cmyk[3] / 100,
      r, g, b;

  r = 1 - Math.min(1, c * (1 - k) + k);
  g = 1 - Math.min(1, m * (1 - k) + k);
  b = 1 - Math.min(1, y * (1 - k) + k);
  return [r * 255, g * 255, b * 255];
}

function cmyk2hsl(args) {
  return rgb2hsl(cmyk2rgb(args));
}

function cmyk2hsv(args) {
  return rgb2hsv(cmyk2rgb(args));
}

function cmyk2hwb(args) {
  return rgb2hwb(cmyk2rgb(args));
}

function cmyk2keyword(args) {
  return rgb2keyword(cmyk2rgb(args));
}


function xyz2rgb(xyz) {
  var x = xyz[0] / 100,
      y = xyz[1] / 100,
      z = xyz[2] / 100,
      r, g, b;

  r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
  g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
  b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

  // assume sRGB
  r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
    : r = (r * 12.92);

  g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
    : g = (g * 12.92);

  b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
    : b = (b * 12.92);

  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);

  return [r * 255, g * 255, b * 255];
}

function xyz2lab(xyz) {
  var x = xyz[0],
      y = xyz[1],
      z = xyz[2],
      l, a, b;

  x /= 95.047;
  y /= 100;
  z /= 108.883;

  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

  l = (116 * y) - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);

  return [l, a, b];
}

function xyz2lch(args) {
  return lab2lch(xyz2lab(args));
}

function lab2xyz(lab) {
  var l = lab[0],
      a = lab[1],
      b = lab[2],
      x, y, z, y2;

  if (l <= 8) {
    y = (l * 100) / 903.3;
    y2 = (7.787 * (y / 100)) + (16 / 116);
  } else {
    y = 100 * Math.pow((l + 16) / 116, 3);
    y2 = Math.pow(y / 100, 1/3);
  }

  x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);

  z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);

  return [x, y, z];
}

function lab2lch(lab) {
  var l = lab[0],
      a = lab[1],
      b = lab[2],
      hr, h, c;

  hr = Math.atan2(b, a);
  h = hr * 360 / 2 / Math.PI;
  if (h < 0) {
    h += 360;
  }
  c = Math.sqrt(a * a + b * b);
  return [l, c, h];
}

function lab2rgb(args) {
  return xyz2rgb(lab2xyz(args));
}

function lch2lab(lch) {
  var l = lch[0],
      c = lch[1],
      h = lch[2],
      a, b, hr;

  hr = h / 360 * 2 * Math.PI;
  a = c * Math.cos(hr);
  b = c * Math.sin(hr);
  return [l, a, b];
}

function lch2xyz(args) {
  return lab2xyz(lch2lab(args));
}

function lch2rgb(args) {
  return lab2rgb(lch2lab(args));
}

function keyword2rgb(keyword) {
  return cssKeywords[keyword];
}

function keyword2hsl(args) {
  return rgb2hsl(keyword2rgb(args));
}

function keyword2hsv(args) {
  return rgb2hsv(keyword2rgb(args));
}

function keyword2hwb(args) {
  return rgb2hwb(keyword2rgb(args));
}

function keyword2cmyk(args) {
  return rgb2cmyk(keyword2rgb(args));
}

function keyword2lab(args) {
  return rgb2lab(keyword2rgb(args));
}

function keyword2xyz(args) {
  return rgb2xyz(keyword2rgb(args));
}

var cssKeywords = {
  aliceblue:  [240,248,255],
  antiquewhite: [250,235,215],
  aqua: [0,255,255],
  aquamarine: [127,255,212],
  azure:  [240,255,255],
  beige:  [245,245,220],
  bisque: [255,228,196],
  black:  [0,0,0],
  blanchedalmond: [255,235,205],
  blue: [0,0,255],
  blueviolet: [138,43,226],
  brown:  [165,42,42],
  burlywood:  [222,184,135],
  cadetblue:  [95,158,160],
  chartreuse: [127,255,0],
  chocolate:  [210,105,30],
  coral:  [255,127,80],
  cornflowerblue: [100,149,237],
  cornsilk: [255,248,220],
  crimson:  [220,20,60],
  cyan: [0,255,255],
  darkblue: [0,0,139],
  darkcyan: [0,139,139],
  darkgoldenrod:  [184,134,11],
  darkgray: [169,169,169],
  darkgreen:  [0,100,0],
  darkgrey: [169,169,169],
  darkkhaki:  [189,183,107],
  darkmagenta:  [139,0,139],
  darkolivegreen: [85,107,47],
  darkorange: [255,140,0],
  darkorchid: [153,50,204],
  darkred:  [139,0,0],
  darksalmon: [233,150,122],
  darkseagreen: [143,188,143],
  darkslateblue:  [72,61,139],
  darkslategray:  [47,79,79],
  darkslategrey:  [47,79,79],
  darkturquoise:  [0,206,209],
  darkviolet: [148,0,211],
  deeppink: [255,20,147],
  deepskyblue:  [0,191,255],
  dimgray:  [105,105,105],
  dimgrey:  [105,105,105],
  dodgerblue: [30,144,255],
  firebrick:  [178,34,34],
  floralwhite:  [255,250,240],
  forestgreen:  [34,139,34],
  fuchsia:  [255,0,255],
  gainsboro:  [220,220,220],
  ghostwhite: [248,248,255],
  gold: [255,215,0],
  goldenrod:  [218,165,32],
  gray: [128,128,128],
  green:  [0,128,0],
  greenyellow:  [173,255,47],
  grey: [128,128,128],
  honeydew: [240,255,240],
  hotpink:  [255,105,180],
  indianred:  [205,92,92],
  indigo: [75,0,130],
  ivory:  [255,255,240],
  khaki:  [240,230,140],
  lavender: [230,230,250],
  lavenderblush:  [255,240,245],
  lawngreen:  [124,252,0],
  lemonchiffon: [255,250,205],
  lightblue:  [173,216,230],
  lightcoral: [240,128,128],
  lightcyan:  [224,255,255],
  lightgoldenrodyellow: [250,250,210],
  lightgray:  [211,211,211],
  lightgreen: [144,238,144],
  lightgrey:  [211,211,211],
  lightpink:  [255,182,193],
  lightsalmon:  [255,160,122],
  lightseagreen:  [32,178,170],
  lightskyblue: [135,206,250],
  lightslategray: [119,136,153],
  lightslategrey: [119,136,153],
  lightsteelblue: [176,196,222],
  lightyellow:  [255,255,224],
  lime: [0,255,0],
  limegreen:  [50,205,50],
  linen:  [250,240,230],
  magenta:  [255,0,255],
  maroon: [128,0,0],
  mediumaquamarine: [102,205,170],
  mediumblue: [0,0,205],
  mediumorchid: [186,85,211],
  mediumpurple: [147,112,219],
  mediumseagreen: [60,179,113],
  mediumslateblue:  [123,104,238],
  mediumspringgreen:  [0,250,154],
  mediumturquoise:  [72,209,204],
  mediumvioletred:  [199,21,133],
  midnightblue: [25,25,112],
  mintcream:  [245,255,250],
  mistyrose:  [255,228,225],
  moccasin: [255,228,181],
  navajowhite:  [255,222,173],
  navy: [0,0,128],
  oldlace:  [253,245,230],
  olive:  [128,128,0],
  olivedrab:  [107,142,35],
  orange: [255,165,0],
  orangered:  [255,69,0],
  orchid: [218,112,214],
  palegoldenrod:  [238,232,170],
  palegreen:  [152,251,152],
  paleturquoise:  [175,238,238],
  palevioletred:  [219,112,147],
  papayawhip: [255,239,213],
  peachpuff:  [255,218,185],
  peru: [205,133,63],
  pink: [255,192,203],
  plum: [221,160,221],
  powderblue: [176,224,230],
  purple: [128,0,128],
  rebeccapurple: [102, 51, 153],
  red:  [255,0,0],
  rosybrown:  [188,143,143],
  royalblue:  [65,105,225],
  saddlebrown:  [139,69,19],
  salmon: [250,128,114],
  sandybrown: [244,164,96],
  seagreen: [46,139,87],
  seashell: [255,245,238],
  sienna: [160,82,45],
  silver: [192,192,192],
  skyblue:  [135,206,235],
  slateblue:  [106,90,205],
  slategray:  [112,128,144],
  slategrey:  [112,128,144],
  snow: [255,250,250],
  springgreen:  [0,255,127],
  steelblue:  [70,130,180],
  tan:  [210,180,140],
  teal: [0,128,128],
  thistle:  [216,191,216],
  tomato: [255,99,71],
  turquoise:  [64,224,208],
  violet: [238,130,238],
  wheat:  [245,222,179],
  white:  [255,255,255],
  whitesmoke: [245,245,245],
  yellow: [255,255,0],
  yellowgreen:  [154,205,50]
};

var reverseKeywords = {};
for (var key in cssKeywords) {
  reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
}


/***/ }),

/***/ "./node_modules/color-convert/index.js":
/***/ (function(module, exports, __webpack_require__) {

var conversions = __webpack_require__("./node_modules/color-convert/conversions.js");

var convert = function() {
   return new Converter();
}

for (var func in conversions) {
  // export Raw versions
  convert[func + "Raw"] =  (function(func) {
    // accept array or plain args
    return function(arg) {
      if (typeof arg == "number")
        arg = Array.prototype.slice.call(arguments);
      return conversions[func](arg);
    }
  })(func);

  var pair = /(\w+)2(\w+)/.exec(func),
      from = pair[1],
      to = pair[2];

  // export rgb2hsl and ["rgb"]["hsl"]
  convert[from] = convert[from] || {};

  convert[from][to] = convert[func] = (function(func) { 
    return function(arg) {
      if (typeof arg == "number")
        arg = Array.prototype.slice.call(arguments);
      
      var val = conversions[func](arg);
      if (typeof val == "string" || val === undefined)
        return val; // keyword

      for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
      return val;
    }
  })(func);
}


/* Converter does lazy conversion and caching */
var Converter = function() {
   this.convs = {};
};

/* Either get the values for a space or
  set the values for a space, depending on args */
Converter.prototype.routeSpace = function(space, args) {
   var values = args[0];
   if (values === undefined) {
      // color.rgb()
      return this.getValues(space);
   }
   // color.rgb(10, 10, 10)
   if (typeof values == "number") {
      values = Array.prototype.slice.call(args);        
   }

   return this.setValues(space, values);
};
  
/* Set the values for a space, invalidating cache */
Converter.prototype.setValues = function(space, values) {
   this.space = space;
   this.convs = {};
   this.convs[space] = values;
   return this;
};

/* Get the values for a space. If there's already
  a conversion for the space, fetch it, otherwise
  compute it */
Converter.prototype.getValues = function(space) {
   var vals = this.convs[space];
   if (!vals) {
      var fspace = this.space,
          from = this.convs[fspace];
      vals = convert[fspace][space](from);

      this.convs[space] = vals;
   }
  return vals;
};

["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function(space) {
   Converter.prototype[space] = function(vals) {
      return this.routeSpace(space, arguments);
   }
});

module.exports = convert;

/***/ }),

/***/ "./node_modules/color-name/index.js":
/***/ (function(module, exports) {

module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

/***/ }),

/***/ "./node_modules/easy-pie-chart/dist/jquery.easypiechart.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**!
 * easy-pie-chart
 * Lightweight plugin to render simple, animated and retina optimized pie charts
 *
 * @license 
 * @author Robert Fleischmann <rendro87@gmail.com> (http://robert-fleischmann.de)
 * @version 2.1.7
 **/

(function (root, factory) {
  if (true) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__("./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = function (a0) {
      return (factory(a0));
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory(require("jquery"));
  } else {
    factory(jQuery);
  }
}(this, function ($) {

/**
 * Renderer to render the chart on a canvas object
 * @param {DOMElement} el      DOM element to host the canvas (root of the plugin)
 * @param {object}     options options object of the plugin
 */
var CanvasRenderer = function(el, options) {
	var cachedBackground;
	var canvas = document.createElement('canvas');

	el.appendChild(canvas);

	if (typeof(G_vmlCanvasManager) === 'object') {
		G_vmlCanvasManager.initElement(canvas);
	}

	var ctx = canvas.getContext('2d');

	canvas.width = canvas.height = options.size;

	// canvas on retina devices
	var scaleBy = 1;
	if (window.devicePixelRatio > 1) {
		scaleBy = window.devicePixelRatio;
		canvas.style.width = canvas.style.height = [options.size, 'px'].join('');
		canvas.width = canvas.height = options.size * scaleBy;
		ctx.scale(scaleBy, scaleBy);
	}

	// move 0,0 coordinates to the center
	ctx.translate(options.size / 2, options.size / 2);

	// rotate canvas -90deg
	ctx.rotate((-1 / 2 + options.rotate / 180) * Math.PI);

	var radius = (options.size - options.lineWidth) / 2;
	if (options.scaleColor && options.scaleLength) {
		radius -= options.scaleLength + 2; // 2 is the distance between scale and bar
	}

	// IE polyfill for Date
	Date.now = Date.now || function() {
		return +(new Date());
	};

	/**
	 * Draw a circle around the center of the canvas
	 * @param {strong} color     Valid CSS color string
	 * @param {number} lineWidth Width of the line in px
	 * @param {number} percent   Percentage to draw (float between -1 and 1)
	 */
	var drawCircle = function(color, lineWidth, percent) {
		percent = Math.min(Math.max(-1, percent || 0), 1);
		var isNegative = percent <= 0 ? true : false;

		ctx.beginPath();
		ctx.arc(0, 0, radius, 0, Math.PI * 2 * percent, isNegative);

		ctx.strokeStyle = color;
		ctx.lineWidth = lineWidth;

		ctx.stroke();
	};

	/**
	 * Draw the scale of the chart
	 */
	var drawScale = function() {
		var offset;
		var length;

		ctx.lineWidth = 1;
		ctx.fillStyle = options.scaleColor;

		ctx.save();
		for (var i = 24; i > 0; --i) {
			if (i % 6 === 0) {
				length = options.scaleLength;
				offset = 0;
			} else {
				length = options.scaleLength * 0.6;
				offset = options.scaleLength - length;
			}
			ctx.fillRect(-options.size/2 + offset, 0, length, 1);
			ctx.rotate(Math.PI / 12);
		}
		ctx.restore();
	};

	/**
	 * Request animation frame wrapper with polyfill
	 * @return {function} Request animation frame method or timeout fallback
	 */
	var reqAnimationFrame = (function() {
		return  window.requestAnimationFrame ||
				window.webkitRequestAnimationFrame ||
				window.mozRequestAnimationFrame ||
				function(callback) {
					window.setTimeout(callback, 1000 / 60);
				};
	}());

	/**
	 * Draw the background of the plugin including the scale and the track
	 */
	var drawBackground = function() {
		if(options.scaleColor) drawScale();
		if(options.trackColor) drawCircle(options.trackColor, options.trackWidth || options.lineWidth, 1);
	};

  /**
    * Canvas accessor
   */
  this.getCanvas = function() {
    return canvas;
  };

  /**
    * Canvas 2D context 'ctx' accessor
   */
  this.getCtx = function() {
    return ctx;
  };

	/**
	 * Clear the complete canvas
	 */
	this.clear = function() {
		ctx.clearRect(options.size / -2, options.size / -2, options.size, options.size);
	};

	/**
	 * Draw the complete chart
	 * @param {number} percent Percent shown by the chart between -100 and 100
	 */
	this.draw = function(percent) {
		// do we need to render a background
		if (!!options.scaleColor || !!options.trackColor) {
			// getImageData and putImageData are supported
			if (ctx.getImageData && ctx.putImageData) {
				if (!cachedBackground) {
					drawBackground();
					cachedBackground = ctx.getImageData(0, 0, options.size * scaleBy, options.size * scaleBy);
				} else {
					ctx.putImageData(cachedBackground, 0, 0);
				}
			} else {
				this.clear();
				drawBackground();
			}
		} else {
			this.clear();
		}

		ctx.lineCap = options.lineCap;

		// if barcolor is a function execute it and pass the percent as a value
		var color;
		if (typeof(options.barColor) === 'function') {
			color = options.barColor(percent);
		} else {
			color = options.barColor;
		}

		// draw bar
		drawCircle(color, options.lineWidth, percent / 100);
	}.bind(this);

	/**
	 * Animate from some percent to some other percentage
	 * @param {number} from Starting percentage
	 * @param {number} to   Final percentage
	 */
	this.animate = function(from, to) {
		var startTime = Date.now();
		options.onStart(from, to);
		var animation = function() {
			var process = Math.min(Date.now() - startTime, options.animate.duration);
			var currentValue = options.easing(this, process, from, to - from, options.animate.duration);
			this.draw(currentValue);
			options.onStep(from, to, currentValue);
			if (process >= options.animate.duration) {
				options.onStop(from, to);
			} else {
				reqAnimationFrame(animation);
			}
		}.bind(this);

		reqAnimationFrame(animation);
	}.bind(this);
};

var EasyPieChart = function(el, opts) {
	var defaultOptions = {
		barColor: '#ef1e25',
		trackColor: '#f9f9f9',
		scaleColor: '#dfe0e0',
		scaleLength: 5,
		lineCap: 'round',
		lineWidth: 3,
		trackWidth: undefined,
		size: 110,
		rotate: 0,
		animate: {
			duration: 1000,
			enabled: true
		},
		easing: function (x, t, b, c, d) { // more can be found here: http://gsgd.co.uk/sandbox/jquery/easing/
			t = t / (d/2);
			if (t < 1) {
				return c / 2 * t * t + b;
			}
			return -c/2 * ((--t)*(t-2) - 1) + b;
		},
		onStart: function(from, to) {
			return;
		},
		onStep: function(from, to, currentValue) {
			return;
		},
		onStop: function(from, to) {
			return;
		}
	};

	// detect present renderer
	if (typeof(CanvasRenderer) !== 'undefined') {
		defaultOptions.renderer = CanvasRenderer;
	} else if (typeof(SVGRenderer) !== 'undefined') {
		defaultOptions.renderer = SVGRenderer;
	} else {
		throw new Error('Please load either the SVG- or the CanvasRenderer');
	}

	var options = {};
	var currentValue = 0;

	/**
	 * Initialize the plugin by creating the options object and initialize rendering
	 */
	var init = function() {
		this.el = el;
		this.options = options;

		// merge user options into default options
		for (var i in defaultOptions) {
			if (defaultOptions.hasOwnProperty(i)) {
				options[i] = opts && typeof(opts[i]) !== 'undefined' ? opts[i] : defaultOptions[i];
				if (typeof(options[i]) === 'function') {
					options[i] = options[i].bind(this);
				}
			}
		}

		// check for jQuery easing
		if (typeof(options.easing) === 'string' && typeof(jQuery) !== 'undefined' && jQuery.isFunction(jQuery.easing[options.easing])) {
			options.easing = jQuery.easing[options.easing];
		} else {
			options.easing = defaultOptions.easing;
		}

		// process earlier animate option to avoid bc breaks
		if (typeof(options.animate) === 'number') {
			options.animate = {
				duration: options.animate,
				enabled: true
			};
		}

		if (typeof(options.animate) === 'boolean' && !options.animate) {
			options.animate = {
				duration: 1000,
				enabled: options.animate
			};
		}

		// create renderer
		this.renderer = new options.renderer(el, options);

		// initial draw
		this.renderer.draw(currentValue);

		// initial update
		if (el.dataset && el.dataset.percent) {
			this.update(parseFloat(el.dataset.percent));
		} else if (el.getAttribute && el.getAttribute('data-percent')) {
			this.update(parseFloat(el.getAttribute('data-percent')));
		}
	}.bind(this);

	/**
	 * Update the value of the chart
	 * @param  {number} newValue Number between 0 and 100
	 * @return {object}          Instance of the plugin for method chaining
	 */
	this.update = function(newValue) {
		newValue = parseFloat(newValue);
		if (options.animate.enabled) {
			this.renderer.animate(currentValue, newValue);
		} else {
			this.renderer.draw(newValue);
		}
		currentValue = newValue;
		return this;
	}.bind(this);

	/**
	 * Disable animation
	 * @return {object} Instance of the plugin for method chaining
	 */
	this.disableAnimation = function() {
		options.animate.enabled = false;
		return this;
	};

	/**
	 * Enable animation
	 * @return {object} Instance of the plugin for method chaining
	 */
	this.enableAnimation = function() {
		options.animate.enabled = true;
		return this;
	};

	init();
};

$.fn.easyPieChart = function(options) {
	return this.each(function() {
		var instanceOptions;

		if (!$.data(this, 'easyPieChart')) {
			instanceOptions = $.extend({}, options, $(this).data());
			$.data(this, 'easyPieChart', new EasyPieChart(this, instanceOptions));
		}
	});
};


}));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./node_modules/exports-loader/index.js?Alert!./node_modules/bootstrap/js/dist/alert.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery, Util) {var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.5): alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Alert = function ($) {

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'alert';
  var VERSION = '4.0.0-alpha.5';
  var DATA_KEY = 'bs.alert';
  var EVENT_KEY = '.' + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $.fn[NAME];
  var TRANSITION_DURATION = 150;

  var Selector = {
    DISMISS: '[data-dismiss="alert"]'
  };

  var Event = {
    CLOSE: 'close' + EVENT_KEY,
    CLOSED: 'closed' + EVENT_KEY,
    CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY
  };

  var ClassName = {
    ALERT: 'alert',
    FADE: 'fade',
    IN: 'in'
  };

  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Alert = function () {
    function Alert(element) {
      _classCallCheck(this, Alert);

      this._element = element;
    }

    // getters

    // public

    Alert.prototype.close = function close(element) {
      element = element || this._element;

      var rootElement = this._getRootElement(element);
      var customEvent = this._triggerCloseEvent(rootElement);

      if (customEvent.isDefaultPrevented()) {
        return;
      }

      this._removeElement(rootElement);
    };

    Alert.prototype.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY);
      this._element = null;
    };

    // private

    Alert.prototype._getRootElement = function _getRootElement(element) {
      var selector = Util.getSelectorFromElement(element);
      var parent = false;

      if (selector) {
        parent = $(selector)[0];
      }

      if (!parent) {
        parent = $(element).closest('.' + ClassName.ALERT)[0];
      }

      return parent;
    };

    Alert.prototype._triggerCloseEvent = function _triggerCloseEvent(element) {
      var closeEvent = $.Event(Event.CLOSE);

      $(element).trigger(closeEvent);
      return closeEvent;
    };

    Alert.prototype._removeElement = function _removeElement(element) {
      $(element).removeClass(ClassName.IN);

      if (!Util.supportsTransitionEnd() || !$(element).hasClass(ClassName.FADE)) {
        this._destroyElement(element);
        return;
      }

      $(element).one(Util.TRANSITION_END, $.proxy(this._destroyElement, this, element)).emulateTransitionEnd(TRANSITION_DURATION);
    };

    Alert.prototype._destroyElement = function _destroyElement(element) {
      $(element).detach().trigger(Event.CLOSED).remove();
    };

    // static

    Alert._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $(this);
        var data = $element.data(DATA_KEY);

        if (!data) {
          data = new Alert(this);
          $element.data(DATA_KEY, data);
        }

        if (config === 'close') {
          data[config](this);
        }
      });
    };

    Alert._handleDismiss = function _handleDismiss(alertInstance) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }

        alertInstance.close(this);
      };
    };

    _createClass(Alert, null, [{
      key: 'VERSION',
      get: function get() {
        return VERSION;
      }
    }]);

    return Alert;
  }();

  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

  $(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));

  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Alert._jQueryInterface;
  $.fn[NAME].Constructor = Alert;
  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return Alert._jQueryInterface;
  };

  return Alert;
}(jQuery);
//# sourceMappingURL=alert.js.map


/*** EXPORTS FROM exports-loader ***/
module.exports = Alert;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js"), __webpack_require__("./node_modules/exports-loader/index.js?Util!./node_modules/bootstrap/js/dist/util.js")))

/***/ }),

/***/ "./node_modules/moment/locale recursive ^\\.\\/.*$":
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale recursive ^\\.\\/.*$";


/***/ }),

/***/ "./node_modules/moment/locale/af.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Afrikaans [af]
//! author : Werner Mollentze : https://github.com/wernerm

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var af = moment.defineLocale('af', {
    months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
    monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
    weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
    weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
    weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
    meridiemParse: /vm|nm/i,
    isPM : function (input) {
        return /^nm$/i.test(input);
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 12) {
            return isLower ? 'vm' : 'VM';
        } else {
            return isLower ? 'nm' : 'NM';
        }
    },
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Vandag om] LT',
        nextDay : '[Môre om] LT',
        nextWeek : 'dddd [om] LT',
        lastDay : '[Gister om] LT',
        lastWeek : '[Laas] dddd [om] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'oor %s',
        past : '%s gelede',
        s : '\'n paar sekondes',
        m : '\'n minuut',
        mm : '%d minute',
        h : '\'n uur',
        hh : '%d ure',
        d : '\'n dag',
        dd : '%d dae',
        M : '\'n maand',
        MM : '%d maande',
        y : '\'n jaar',
        yy : '%d jaar'
    },
    ordinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
    },
    week : {
        dow : 1, // Maandag is die eerste dag van die week.
        doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
    }
});

return af;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-dz.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Algeria) [ar-dz]
//! author : Noureddine LOUAHEDJ : https://github.com/noureddineme

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var arDz = moment.defineLocale('ar-dz', {
    months : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    monthsShort : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'في %s',
        past : 'منذ %s',
        s : 'ثوان',
        m : 'دقيقة',
        mm : '%d دقائق',
        h : 'ساعة',
        hh : '%d ساعات',
        d : 'يوم',
        dd : '%d أيام',
        M : 'شهر',
        MM : '%d أشهر',
        y : 'سنة',
        yy : '%d سنوات'
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 4  // The week that contains Jan 1st is the first week of the year.
    }
});

return arDz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-ly.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Lybia) [ar-ly]
//! author : Ali Hmer: https://github.com/kikoanis

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '1',
    '2': '2',
    '3': '3',
    '4': '4',
    '5': '5',
    '6': '6',
    '7': '7',
    '8': '8',
    '9': '9',
    '0': '0'
};
var pluralForm = function (n) {
    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
};
var plurals = {
    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
};
var pluralize = function (u) {
    return function (number, withoutSuffix, string, isFuture) {
        var f = pluralForm(number),
            str = plurals[u][pluralForm(number)];
        if (f === 2) {
            str = str[withoutSuffix ? 0 : 1];
        }
        return str.replace(/%d/i, number);
    };
};
var months = [
    'يناير',
    'فبراير',
    'مارس',
    'أبريل',
    'مايو',
    'يونيو',
    'يوليو',
    'أغسطس',
    'سبتمبر',
    'أكتوبر',
    'نوفمبر',
    'ديسمبر'
];

var arLy = moment.defineLocale('ar-ly', {
    months : months,
    monthsShort : months,
    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'D/\u200FM/\u200FYYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /ص|م/,
    isPM : function (input) {
        return 'م' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ص';
        } else {
            return 'م';
        }
    },
    calendar : {
        sameDay: '[اليوم عند الساعة] LT',
        nextDay: '[غدًا عند الساعة] LT',
        nextWeek: 'dddd [عند الساعة] LT',
        lastDay: '[أمس عند الساعة] LT',
        lastWeek: 'dddd [عند الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'بعد %s',
        past : 'منذ %s',
        s : pluralize('s'),
        m : pluralize('m'),
        mm : pluralize('m'),
        h : pluralize('h'),
        hh : pluralize('h'),
        d : pluralize('d'),
        dd : pluralize('d'),
        M : pluralize('M'),
        MM : pluralize('M'),
        y : pluralize('y'),
        yy : pluralize('y')
    },
    preparse: function (string) {
        return string.replace(/\u200f/g, '').replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        }).replace(/,/g, '،');
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return arLy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-ma.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Morocco) [ar-ma]
//! author : ElFadili Yassine : https://github.com/ElFadiliY
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var arMa = moment.defineLocale('ar-ma', {
    months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
    monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
    weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'في %s',
        past : 'منذ %s',
        s : 'ثوان',
        m : 'دقيقة',
        mm : '%d دقائق',
        h : 'ساعة',
        hh : '%d ساعات',
        d : 'يوم',
        dd : '%d أيام',
        M : 'شهر',
        MM : '%d أشهر',
        y : 'سنة',
        yy : '%d سنوات'
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return arMa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-sa.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Saudi Arabia) [ar-sa]
//! author : Suhail Alkowaileet : https://github.com/xsoh

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '١',
    '2': '٢',
    '3': '٣',
    '4': '٤',
    '5': '٥',
    '6': '٦',
    '7': '٧',
    '8': '٨',
    '9': '٩',
    '0': '٠'
};
var numberMap = {
    '١': '1',
    '٢': '2',
    '٣': '3',
    '٤': '4',
    '٥': '5',
    '٦': '6',
    '٧': '7',
    '٨': '8',
    '٩': '9',
    '٠': '0'
};

var arSa = moment.defineLocale('ar-sa', {
    months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /ص|م/,
    isPM : function (input) {
        return 'م' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ص';
        } else {
            return 'م';
        }
    },
    calendar : {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'في %s',
        past : 'منذ %s',
        s : 'ثوان',
        m : 'دقيقة',
        mm : '%d دقائق',
        h : 'ساعة',
        hh : '%d ساعات',
        d : 'يوم',
        dd : '%d أيام',
        M : 'شهر',
        MM : '%d أشهر',
        y : 'سنة',
        yy : '%d سنوات'
    },
    preparse: function (string) {
        return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
            return numberMap[match];
        }).replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        }).replace(/,/g, '،');
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return arSa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-tn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale  :  Arabic (Tunisia) [ar-tn]
//! author : Nader Toukabri : https://github.com/naderio

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var arTn = moment.defineLocale('ar-tn', {
    months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
    weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[اليوم على الساعة] LT',
        nextDay: '[غدا على الساعة] LT',
        nextWeek: 'dddd [على الساعة] LT',
        lastDay: '[أمس على الساعة] LT',
        lastWeek: 'dddd [على الساعة] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'في %s',
        past: 'منذ %s',
        s: 'ثوان',
        m: 'دقيقة',
        mm: '%d دقائق',
        h: 'ساعة',
        hh: '%d ساعات',
        d: 'يوم',
        dd: '%d أيام',
        M: 'شهر',
        MM: '%d أشهر',
        y: 'سنة',
        yy: '%d سنوات'
    },
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 4th is the first week of the year.
    }
});

return arTn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic [ar]
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '١',
    '2': '٢',
    '3': '٣',
    '4': '٤',
    '5': '٥',
    '6': '٦',
    '7': '٧',
    '8': '٨',
    '9': '٩',
    '0': '٠'
};
var numberMap = {
    '١': '1',
    '٢': '2',
    '٣': '3',
    '٤': '4',
    '٥': '5',
    '٦': '6',
    '٧': '7',
    '٨': '8',
    '٩': '9',
    '٠': '0'
};
var pluralForm = function (n) {
    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
};
var plurals = {
    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
};
var pluralize = function (u) {
    return function (number, withoutSuffix, string, isFuture) {
        var f = pluralForm(number),
            str = plurals[u][pluralForm(number)];
        if (f === 2) {
            str = str[withoutSuffix ? 0 : 1];
        }
        return str.replace(/%d/i, number);
    };
};
var months = [
    'كانون الثاني يناير',
    'شباط فبراير',
    'آذار مارس',
    'نيسان أبريل',
    'أيار مايو',
    'حزيران يونيو',
    'تموز يوليو',
    'آب أغسطس',
    'أيلول سبتمبر',
    'تشرين الأول أكتوبر',
    'تشرين الثاني نوفمبر',
    'كانون الأول ديسمبر'
];

var ar = moment.defineLocale('ar', {
    months : months,
    monthsShort : months,
    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'D/\u200FM/\u200FYYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /ص|م/,
    isPM : function (input) {
        return 'م' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ص';
        } else {
            return 'م';
        }
    },
    calendar : {
        sameDay: '[اليوم عند الساعة] LT',
        nextDay: '[غدًا عند الساعة] LT',
        nextWeek: 'dddd [عند الساعة] LT',
        lastDay: '[أمس عند الساعة] LT',
        lastWeek: 'dddd [عند الساعة] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'بعد %s',
        past : 'منذ %s',
        s : pluralize('s'),
        m : pluralize('m'),
        mm : pluralize('m'),
        h : pluralize('h'),
        hh : pluralize('h'),
        d : pluralize('d'),
        dd : pluralize('d'),
        M : pluralize('M'),
        MM : pluralize('M'),
        y : pluralize('y'),
        yy : pluralize('y')
    },
    preparse: function (string) {
        return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
            return numberMap[match];
        }).replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        }).replace(/,/g, '،');
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return ar;

})));


/***/ }),

/***/ "./node_modules/moment/locale/az.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Azerbaijani [az]
//! author : topchiyev : https://github.com/topchiyev

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var suffixes = {
    1: '-inci',
    5: '-inci',
    8: '-inci',
    70: '-inci',
    80: '-inci',
    2: '-nci',
    7: '-nci',
    20: '-nci',
    50: '-nci',
    3: '-üncü',
    4: '-üncü',
    100: '-üncü',
    6: '-ncı',
    9: '-uncu',
    10: '-uncu',
    30: '-uncu',
    60: '-ıncı',
    90: '-ıncı'
};

var az = moment.defineLocale('az', {
    months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
    monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
    weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
    weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
    weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[bugün saat] LT',
        nextDay : '[sabah saat] LT',
        nextWeek : '[gələn həftə] dddd [saat] LT',
        lastDay : '[dünən] LT',
        lastWeek : '[keçən həftə] dddd [saat] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s sonra',
        past : '%s əvvəl',
        s : 'birneçə saniyyə',
        m : 'bir dəqiqə',
        mm : '%d dəqiqə',
        h : 'bir saat',
        hh : '%d saat',
        d : 'bir gün',
        dd : '%d gün',
        M : 'bir ay',
        MM : '%d ay',
        y : 'bir il',
        yy : '%d il'
    },
    meridiemParse: /gecə|səhər|gündüz|axşam/,
    isPM : function (input) {
        return /^(gündüz|axşam)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'gecə';
        } else if (hour < 12) {
            return 'səhər';
        } else if (hour < 17) {
            return 'gündüz';
        } else {
            return 'axşam';
        }
    },
    ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
    ordinal : function (number) {
        if (number === 0) {  // special case for zero
            return number + '-ıncı';
        }
        var a = number % 10,
            b = number % 100 - a,
            c = number >= 100 ? 100 : null;
        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return az;

})));


/***/ }),

/***/ "./node_modules/moment/locale/be.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Belarusian [be]
//! author : Dmitry Demidov : https://github.com/demidov91
//! author: Praleska: http://praleska.pro/
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function plural(word, num) {
    var forms = word.split('_');
    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
}
function relativeTimeWithPlural(number, withoutSuffix, key) {
    var format = {
        'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
        'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
        'dd': 'дзень_дні_дзён',
        'MM': 'месяц_месяцы_месяцаў',
        'yy': 'год_гады_гадоў'
    };
    if (key === 'm') {
        return withoutSuffix ? 'хвіліна' : 'хвіліну';
    }
    else if (key === 'h') {
        return withoutSuffix ? 'гадзіна' : 'гадзіну';
    }
    else {
        return number + ' ' + plural(format[key], +number);
    }
}

var be = moment.defineLocale('be', {
    months : {
        format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
        standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
    },
    monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
    weekdays : {
        format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
        standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
        isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
    },
    weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
    weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY г.',
        LLL : 'D MMMM YYYY г., HH:mm',
        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
    },
    calendar : {
        sameDay: '[Сёння ў] LT',
        nextDay: '[Заўтра ў] LT',
        lastDay: '[Учора ў] LT',
        nextWeek: function () {
            return '[У] dddd [ў] LT';
        },
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return '[У мінулую] dddd [ў] LT';
                case 1:
                case 2:
                case 4:
                    return '[У мінулы] dddd [ў] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'праз %s',
        past : '%s таму',
        s : 'некалькі секунд',
        m : relativeTimeWithPlural,
        mm : relativeTimeWithPlural,
        h : relativeTimeWithPlural,
        hh : relativeTimeWithPlural,
        d : 'дзень',
        dd : relativeTimeWithPlural,
        M : 'месяц',
        MM : relativeTimeWithPlural,
        y : 'год',
        yy : relativeTimeWithPlural
    },
    meridiemParse: /ночы|раніцы|дня|вечара/,
    isPM : function (input) {
        return /^(дня|вечара)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ночы';
        } else if (hour < 12) {
            return 'раніцы';
        } else if (hour < 17) {
            return 'дня';
        } else {
            return 'вечара';
        }
    },
    ordinalParse: /\d{1,2}-(і|ы|га)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
            case 'D':
                return number + '-га';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return be;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bg.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bulgarian [bg]
//! author : Krasen Borisov : https://github.com/kraz

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var bg = moment.defineLocale('bg', {
    months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
    monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
    weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
    weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'D.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd, D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay : '[Днес в] LT',
        nextDay : '[Утре в] LT',
        nextWeek : 'dddd [в] LT',
        lastDay : '[Вчера в] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[В изминалата] dddd [в] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[В изминалия] dddd [в] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'след %s',
        past : 'преди %s',
        s : 'няколко секунди',
        m : 'минута',
        mm : '%d минути',
        h : 'час',
        hh : '%d часа',
        d : 'ден',
        dd : '%d дни',
        M : 'месец',
        MM : '%d месеца',
        y : 'година',
        yy : '%d години'
    },
    ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
    ordinal : function (number) {
        var lastDigit = number % 10,
            last2Digits = number % 100;
        if (number === 0) {
            return number + '-ев';
        } else if (last2Digits === 0) {
            return number + '-ен';
        } else if (last2Digits > 10 && last2Digits < 20) {
            return number + '-ти';
        } else if (lastDigit === 1) {
            return number + '-ви';
        } else if (lastDigit === 2) {
            return number + '-ри';
        } else if (lastDigit === 7 || lastDigit === 8) {
            return number + '-ми';
        } else {
            return number + '-ти';
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return bg;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali [bn]
//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '১',
    '2': '২',
    '3': '৩',
    '4': '৪',
    '5': '৫',
    '6': '৬',
    '7': '৭',
    '8': '৮',
    '9': '৯',
    '0': '০'
};
var numberMap = {
    '১': '1',
    '২': '2',
    '৩': '3',
    '৪': '4',
    '৫': '5',
    '৬': '6',
    '৭': '7',
    '৮': '8',
    '৯': '9',
    '০': '0'
};

var bn = moment.defineLocale('bn', {
    months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
    monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
    weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
    weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
    weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
    longDateFormat : {
        LT : 'A h:mm সময়',
        LTS : 'A h:mm:ss সময়',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm সময়',
        LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
    },
    calendar : {
        sameDay : '[আজ] LT',
        nextDay : '[আগামীকাল] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[গতকাল] LT',
        lastWeek : '[গত] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s পরে',
        past : '%s আগে',
        s : 'কয়েক সেকেন্ড',
        m : 'এক মিনিট',
        mm : '%d মিনিট',
        h : 'এক ঘন্টা',
        hh : '%d ঘন্টা',
        d : 'এক দিন',
        dd : '%d দিন',
        M : 'এক মাস',
        MM : '%d মাস',
        y : 'এক বছর',
        yy : '%d বছর'
    },
    preparse: function (string) {
        return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if ((meridiem === 'রাত' && hour >= 4) ||
                (meridiem === 'দুপুর' && hour < 5) ||
                meridiem === 'বিকাল') {
            return hour + 12;
        } else {
            return hour;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'রাত';
        } else if (hour < 10) {
            return 'সকাল';
        } else if (hour < 17) {
            return 'দুপুর';
        } else if (hour < 20) {
            return 'বিকাল';
        } else {
            return 'রাত';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return bn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tibetan [bo]
//! author : Thupten N. Chakrishar : https://github.com/vajradog

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '༡',
    '2': '༢',
    '3': '༣',
    '4': '༤',
    '5': '༥',
    '6': '༦',
    '7': '༧',
    '8': '༨',
    '9': '༩',
    '0': '༠'
};
var numberMap = {
    '༡': '1',
    '༢': '2',
    '༣': '3',
    '༤': '4',
    '༥': '5',
    '༦': '6',
    '༧': '7',
    '༨': '8',
    '༩': '9',
    '༠': '0'
};

var bo = moment.defineLocale('bo', {
    months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
    monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
    weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
    weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
    weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
    longDateFormat : {
        LT : 'A h:mm',
        LTS : 'A h:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm',
        LLLL : 'dddd, D MMMM YYYY, A h:mm'
    },
    calendar : {
        sameDay : '[དི་རིང] LT',
        nextDay : '[སང་ཉིན] LT',
        nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
        lastDay : '[ཁ་སང] LT',
        lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ལ་',
        past : '%s སྔན་ལ',
        s : 'ལམ་སང',
        m : 'སྐར་མ་གཅིག',
        mm : '%d སྐར་མ',
        h : 'ཆུ་ཚོད་གཅིག',
        hh : '%d ཆུ་ཚོད',
        d : 'ཉིན་གཅིག',
        dd : '%d ཉིན་',
        M : 'ཟླ་བ་གཅིག',
        MM : '%d ཟླ་བ',
        y : 'ལོ་གཅིག',
        yy : '%d ལོ'
    },
    preparse: function (string) {
        return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
                (meridiem === 'ཉིན་གུང' && hour < 5) ||
                meridiem === 'དགོང་དག') {
            return hour + 12;
        } else {
            return hour;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'མཚན་མོ';
        } else if (hour < 10) {
            return 'ཞོགས་ཀས';
        } else if (hour < 17) {
            return 'ཉིན་གུང';
        } else if (hour < 20) {
            return 'དགོང་དག';
        } else {
            return 'མཚན་མོ';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return bo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/br.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Breton [br]
//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function relativeTimeWithMutation(number, withoutSuffix, key) {
    var format = {
        'mm': 'munutenn',
        'MM': 'miz',
        'dd': 'devezh'
    };
    return number + ' ' + mutation(format[key], number);
}
function specialMutationForYears(number) {
    switch (lastNumber(number)) {
        case 1:
        case 3:
        case 4:
        case 5:
        case 9:
            return number + ' bloaz';
        default:
            return number + ' vloaz';
    }
}
function lastNumber(number) {
    if (number > 9) {
        return lastNumber(number % 10);
    }
    return number;
}
function mutation(text, number) {
    if (number === 2) {
        return softMutation(text);
    }
    return text;
}
function softMutation(text) {
    var mutationTable = {
        'm': 'v',
        'b': 'v',
        'd': 'z'
    };
    if (mutationTable[text.charAt(0)] === undefined) {
        return text;
    }
    return mutationTable[text.charAt(0)] + text.substring(1);
}

var br = moment.defineLocale('br', {
    months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
    monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
    weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
    weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
    weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'h[e]mm A',
        LTS : 'h[e]mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D [a viz] MMMM YYYY',
        LLL : 'D [a viz] MMMM YYYY h[e]mm A',
        LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
    },
    calendar : {
        sameDay : '[Hiziv da] LT',
        nextDay : '[Warc\'hoazh da] LT',
        nextWeek : 'dddd [da] LT',
        lastDay : '[Dec\'h da] LT',
        lastWeek : 'dddd [paset da] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'a-benn %s',
        past : '%s \'zo',
        s : 'un nebeud segondennoù',
        m : 'ur vunutenn',
        mm : relativeTimeWithMutation,
        h : 'un eur',
        hh : '%d eur',
        d : 'un devezh',
        dd : relativeTimeWithMutation,
        M : 'ur miz',
        MM : relativeTimeWithMutation,
        y : 'ur bloaz',
        yy : specialMutationForYears
    },
    ordinalParse: /\d{1,2}(añ|vet)/,
    ordinal : function (number) {
        var output = (number === 1) ? 'añ' : 'vet';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return br;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bs.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bosnian [bs]
//! author : Nedim Cholich : https://github.com/frontyard
//! based on (hr) translation by Bojan Marković

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function translate(number, withoutSuffix, key) {
    var result = number + ' ';
    switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
    }
}

var bs = moment.defineLocale('bs', {
    months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[danas u] LT',
        nextDay  : '[sutra u] LT',
        nextWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[jučer u] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'prije %s',
        s      : 'par sekundi',
        m      : translate,
        mm     : translate,
        h      : translate,
        hh     : translate,
        d      : 'dan',
        dd     : translate,
        M      : 'mjesec',
        MM     : translate,
        y      : 'godinu',
        yy     : translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return bs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ca.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Catalan [ca]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ca = moment.defineLocale('ca', {
    months : 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
    monthsShort : 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
    monthsParseExact : true,
    weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
    weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
    weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay : function () {
            return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        nextDay : function () {
            return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        lastDay : function () {
            return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        lastWeek : function () {
            return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'd\'aquí %s',
        past : 'fa %s',
        s : 'uns segons',
        m : 'un minut',
        mm : '%d minuts',
        h : 'una hora',
        hh : '%d hores',
        d : 'un dia',
        dd : '%d dies',
        M : 'un mes',
        MM : '%d mesos',
        y : 'un any',
        yy : '%d anys'
    },
    ordinalParse: /\d{1,2}(r|n|t|è|a)/,
    ordinal : function (number, period) {
        var output = (number === 1) ? 'r' :
            (number === 2) ? 'n' :
            (number === 3) ? 'r' :
            (number === 4) ? 't' : 'è';
        if (period === 'w' || period === 'W') {
            output = 'a';
        }
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return ca;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cs.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Czech [cs]
//! author : petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');
var monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
function plural(n) {
    return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
}
function translate(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minuty' : 'minut');
            } else {
                return result + 'minutami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodin');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dny' : 'dní');
            } else {
                return result + 'dny';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'měsíce' : 'měsíců');
            } else {
                return result + 'měsíci';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'let');
            } else {
                return result + 'lety';
            }
            break;
    }
}

var cs = moment.defineLocale('cs', {
    months : months,
    monthsShort : monthsShort,
    monthsParse : (function (months, monthsShort) {
        var i, _monthsParse = [];
        for (i = 0; i < 12; i++) {
            // use custom parser to solve problem with July (červenec)
            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
        }
        return _monthsParse;
    }(months, monthsShort)),
    shortMonthsParse : (function (monthsShort) {
        var i, _shortMonthsParse = [];
        for (i = 0; i < 12; i++) {
            _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
        }
        return _shortMonthsParse;
    }(monthsShort)),
    longMonthsParse : (function (months) {
        var i, _longMonthsParse = [];
        for (i = 0; i < 12; i++) {
            _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
        }
        return _longMonthsParse;
    }(months)),
    weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
    weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
    weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
    longDateFormat : {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd D. MMMM YYYY H:mm',
        l : 'D. M. YYYY'
    },
    calendar : {
        sameDay: '[dnes v] LT',
        nextDay: '[zítra v] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[v neděli v] LT';
                case 1:
                case 2:
                    return '[v] dddd [v] LT';
                case 3:
                    return '[ve středu v] LT';
                case 4:
                    return '[ve čtvrtek v] LT';
                case 5:
                    return '[v pátek v] LT';
                case 6:
                    return '[v sobotu v] LT';
            }
        },
        lastDay: '[včera v] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[minulou neděli v] LT';
                case 1:
                case 2:
                    return '[minulé] dddd [v] LT';
                case 3:
                    return '[minulou středu v] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [v] LT';
                case 6:
                    return '[minulou sobotu v] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'za %s',
        past : 'před %s',
        s : translate,
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    ordinalParse : /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return cs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chuvash [cv]
//! author : Anatoly Mironov : https://github.com/mirontoli

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var cv = moment.defineLocale('cv', {
    months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
    monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
    weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
    weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
    weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
        LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
        LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
    },
    calendar : {
        sameDay: '[Паян] LT [сехетре]',
        nextDay: '[Ыран] LT [сехетре]',
        lastDay: '[Ӗнер] LT [сехетре]',
        nextWeek: '[Ҫитес] dddd LT [сехетре]',
        lastWeek: '[Иртнӗ] dddd LT [сехетре]',
        sameElse: 'L'
    },
    relativeTime : {
        future : function (output) {
            var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
            return output + affix;
        },
        past : '%s каялла',
        s : 'пӗр-ик ҫеккунт',
        m : 'пӗр минут',
        mm : '%d минут',
        h : 'пӗр сехет',
        hh : '%d сехет',
        d : 'пӗр кун',
        dd : '%d кун',
        M : 'пӗр уйӑх',
        MM : '%d уйӑх',
        y : 'пӗр ҫул',
        yy : '%d ҫул'
    },
    ordinalParse: /\d{1,2}-мӗш/,
    ordinal : '%d-мӗш',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return cv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cy.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Welsh [cy]
//! author : Robert Allen : https://github.com/robgallen
//! author : https://github.com/ryangreaves

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var cy = moment.defineLocale('cy', {
    months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
    monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
    weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
    weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
    weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
    weekdaysParseExact : true,
    // time formats are the same as en-gb
    longDateFormat: {
        LT: 'HH:mm',
        LTS : 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[Heddiw am] LT',
        nextDay: '[Yfory am] LT',
        nextWeek: 'dddd [am] LT',
        lastDay: '[Ddoe am] LT',
        lastWeek: 'dddd [diwethaf am] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'mewn %s',
        past: '%s yn ôl',
        s: 'ychydig eiliadau',
        m: 'munud',
        mm: '%d munud',
        h: 'awr',
        hh: '%d awr',
        d: 'diwrnod',
        dd: '%d diwrnod',
        M: 'mis',
        MM: '%d mis',
        y: 'blwyddyn',
        yy: '%d flynedd'
    },
    ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
    // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
    ordinal: function (number) {
        var b = number,
            output = '',
            lookup = [
                '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
            ];
        if (b > 20) {
            if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                output = 'fed'; // not 30ain, 70ain or 90ain
            } else {
                output = 'ain';
            }
        } else if (b > 0) {
            output = lookup[b];
        }
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return cy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/da.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Danish [da]
//! author : Ulrik Nielsen : https://github.com/mrbase

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var da = moment.defineLocale('da', {
    months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
    weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH:mm',
        LLLL : 'dddd [d.] D. MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[I dag kl.] LT',
        nextDay : '[I morgen kl.] LT',
        nextWeek : 'dddd [kl.] LT',
        lastDay : '[I går kl.] LT',
        lastWeek : '[sidste] dddd [kl] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : '%s siden',
        s : 'få sekunder',
        m : 'et minut',
        mm : '%d minutter',
        h : 'en time',
        hh : '%d timer',
        d : 'en dag',
        dd : '%d dage',
        M : 'en måned',
        MM : '%d måneder',
        y : 'et år',
        yy : '%d år'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return da;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de-at.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Austria) [de-at]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Martin Groller : https://github.com/MadMG
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eine Minute', 'einer Minute'],
        'h': ['eine Stunde', 'einer Stunde'],
        'd': ['ein Tag', 'einem Tag'],
        'dd': [number + ' Tage', number + ' Tagen'],
        'M': ['ein Monat', 'einem Monat'],
        'MM': [number + ' Monate', number + ' Monaten'],
        'y': ['ein Jahr', 'einem Jahr'],
        'yy': [number + ' Jahre', number + ' Jahren']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}

var deAt = moment.defineLocale('de-at', {
    months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH:mm',
        LLLL : 'dddd, D. MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[heute um] LT [Uhr]',
        sameElse: 'L',
        nextDay: '[morgen um] LT [Uhr]',
        nextWeek: 'dddd [um] LT [Uhr]',
        lastDay: '[gestern um] LT [Uhr]',
        lastWeek: '[letzten] dddd [um] LT [Uhr]'
    },
    relativeTime : {
        future : 'in %s',
        past : 'vor %s',
        s : 'ein paar Sekunden',
        m : processRelativeTime,
        mm : '%d Minuten',
        h : processRelativeTime,
        hh : '%d Stunden',
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return deAt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German [de]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eine Minute', 'einer Minute'],
        'h': ['eine Stunde', 'einer Stunde'],
        'd': ['ein Tag', 'einem Tag'],
        'dd': [number + ' Tage', number + ' Tagen'],
        'M': ['ein Monat', 'einem Monat'],
        'MM': [number + ' Monate', number + ' Monaten'],
        'y': ['ein Jahr', 'einem Jahr'],
        'yy': [number + ' Jahre', number + ' Jahren']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}

var de = moment.defineLocale('de', {
    months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH:mm',
        LLLL : 'dddd, D. MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[heute um] LT [Uhr]',
        sameElse: 'L',
        nextDay: '[morgen um] LT [Uhr]',
        nextWeek: 'dddd [um] LT [Uhr]',
        lastDay: '[gestern um] LT [Uhr]',
        lastWeek: '[letzten] dddd [um] LT [Uhr]'
    },
    relativeTime : {
        future : 'in %s',
        past : 'vor %s',
        s : 'ein paar Sekunden',
        m : processRelativeTime,
        mm : '%d Minuten',
        h : processRelativeTime,
        hh : '%d Stunden',
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return de;

})));


/***/ }),

/***/ "./node_modules/moment/locale/dv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maldivian [dv]
//! author : Jawish Hameed : https://github.com/jawish

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = [
    'ޖެނުއަރީ',
    'ފެބްރުއަރީ',
    'މާރިޗު',
    'އޭޕްރީލު',
    'މޭ',
    'ޖޫން',
    'ޖުލައި',
    'އޯގަސްޓު',
    'ސެޕްޓެމްބަރު',
    'އޮކްޓޯބަރު',
    'ނޮވެމްބަރު',
    'ޑިސެމްބަރު'
];
var weekdays = [
    'އާދިއްތަ',
    'ހޯމަ',
    'އަންގާރަ',
    'ބުދަ',
    'ބުރާސްފަތި',
    'ހުކުރު',
    'ހޮނިހިރު'
];

var dv = moment.defineLocale('dv', {
    months : months,
    monthsShort : months,
    weekdays : weekdays,
    weekdaysShort : weekdays,
    weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
    longDateFormat : {

        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'D/M/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /މކ|މފ/,
    isPM : function (input) {
        return 'މފ' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'މކ';
        } else {
            return 'މފ';
        }
    },
    calendar : {
        sameDay : '[މިއަދު] LT',
        nextDay : '[މާދަމާ] LT',
        nextWeek : 'dddd LT',
        lastDay : '[އިއްޔެ] LT',
        lastWeek : '[ފާއިތުވި] dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ތެރޭގައި %s',
        past : 'ކުރިން %s',
        s : 'ސިކުންތުކޮޅެއް',
        m : 'މިނިޓެއް',
        mm : 'މިނިޓު %d',
        h : 'ގަޑިއިރެއް',
        hh : 'ގަޑިއިރު %d',
        d : 'ދުވަހެއް',
        dd : 'ދުވަސް %d',
        M : 'މަހެއް',
        MM : 'މަސް %d',
        y : 'އަހަރެއް',
        yy : 'އަހަރު %d'
    },
    preparse: function (string) {
        return string.replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/,/g, '،');
    },
    week : {
        dow : 7,  // Sunday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return dv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/el.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Greek [el]
//! author : Aggelos Karalias : https://github.com/mehiel

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}


var el = moment.defineLocale('el', {
    monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
    monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
    months : function (momentToFormat, format) {
        if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
            return this._monthsGenitiveEl[momentToFormat.month()];
        } else {
            return this._monthsNominativeEl[momentToFormat.month()];
        }
    },
    monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
    weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
    weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
    weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'μμ' : 'ΜΜ';
        } else {
            return isLower ? 'πμ' : 'ΠΜ';
        }
    },
    isPM : function (input) {
        return ((input + '').toLowerCase()[0] === 'μ');
    },
    meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendarEl : {
        sameDay : '[Σήμερα {}] LT',
        nextDay : '[Αύριο {}] LT',
        nextWeek : 'dddd [{}] LT',
        lastDay : '[Χθες {}] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 6:
                    return '[το προηγούμενο] dddd [{}] LT';
                default:
                    return '[την προηγούμενη] dddd [{}] LT';
            }
        },
        sameElse : 'L'
    },
    calendar : function (key, mom) {
        var output = this._calendarEl[key],
            hours = mom && mom.hours();
        if (isFunction(output)) {
            output = output.apply(mom);
        }
        return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
    },
    relativeTime : {
        future : 'σε %s',
        past : '%s πριν',
        s : 'λίγα δευτερόλεπτα',
        m : 'ένα λεπτό',
        mm : '%d λεπτά',
        h : 'μία ώρα',
        hh : '%d ώρες',
        d : 'μία μέρα',
        dd : '%d μέρες',
        M : 'ένας μήνας',
        MM : '%d μήνες',
        y : 'ένας χρόνος',
        yy : '%d χρόνια'
    },
    ordinalParse: /\d{1,2}η/,
    ordinal: '%dη',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4st is the first week of the year.
    }
});

return el;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-au.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Australia) [en-au]
//! author : Jared Morse : https://github.com/jarcoal

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enAu = moment.defineLocale('en-au', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enAu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-ca.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Canada) [en-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enCa = moment.defineLocale('en-ca', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'YYYY-MM-DD',
        LL : 'MMMM D, YYYY',
        LLL : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

return enCa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-gb.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (United Kingdom) [en-gb]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enGb = moment.defineLocale('en-gb', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enGb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-ie.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Ireland) [en-ie]
//! author : Chris Cartlidge : https://github.com/chriscartlidge

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enIe = moment.defineLocale('en-ie', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enIe;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-nz.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (New Zealand) [en-nz]
//! author : Luke McGregor : https://github.com/lukemcgregor

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enNz = moment.defineLocale('en-nz', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enNz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/eo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Esperanto [eo]
//! author : Colin Dean : https://github.com/colindean
//! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
//!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var eo = moment.defineLocale('eo', {
    months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
    weekdays : 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
    weekdaysShort : 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
    weekdaysMin : 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'D[-an de] MMMM, YYYY',
        LLL : 'D[-an de] MMMM, YYYY HH:mm',
        LLLL : 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'
    },
    meridiemParse: /[ap]\.t\.m/i,
    isPM: function (input) {
        return input.charAt(0).toLowerCase() === 'p';
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'p.t.m.' : 'P.T.M.';
        } else {
            return isLower ? 'a.t.m.' : 'A.T.M.';
        }
    },
    calendar : {
        sameDay : '[Hodiaŭ je] LT',
        nextDay : '[Morgaŭ je] LT',
        nextWeek : 'dddd [je] LT',
        lastDay : '[Hieraŭ je] LT',
        lastWeek : '[pasinta] dddd [je] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'je %s',
        past : 'antaŭ %s',
        s : 'sekundoj',
        m : 'minuto',
        mm : '%d minutoj',
        h : 'horo',
        hh : '%d horoj',
        d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
        dd : '%d tagoj',
        M : 'monato',
        MM : '%d monatoj',
        y : 'jaro',
        yy : '%d jaroj'
    },
    ordinalParse: /\d{1,2}a/,
    ordinal : '%da',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return eo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es-do.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Dominican Republic) [es-do]

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

var esDo = moment.defineLocale('es-do', {
    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
    monthsShort : function (m, format) {
        if (/-MMM-/.test(format)) {
            return monthsShort[m.month()];
        } else {
            return monthsShortDot[m.month()];
        }
    },
    monthsParseExact : true,
    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY h:mm A',
        LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
    },
    calendar : {
        sameDay : function () {
            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextDay : function () {
            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastDay : function () {
            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastWeek : function () {
            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'en %s',
        past : 'hace %s',
        s : 'unos segundos',
        m : 'un minuto',
        mm : '%d minutos',
        h : 'una hora',
        hh : '%d horas',
        d : 'un día',
        dd : '%d días',
        M : 'un mes',
        MM : '%d meses',
        y : 'un año',
        yy : '%d años'
    },
    ordinalParse : /\d{1,2}º/,
    ordinal : '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return esDo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish [es]
//! author : Julio Napurí : https://github.com/julionc

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

var es = moment.defineLocale('es', {
    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
    monthsShort : function (m, format) {
        if (/-MMM-/.test(format)) {
            return monthsShort[m.month()];
        } else {
            return monthsShortDot[m.month()];
        }
    },
    monthsParseExact : true,
    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY H:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
    },
    calendar : {
        sameDay : function () {
            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextDay : function () {
            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastDay : function () {
            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastWeek : function () {
            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'en %s',
        past : 'hace %s',
        s : 'unos segundos',
        m : 'un minuto',
        mm : '%d minutos',
        h : 'una hora',
        hh : '%d horas',
        d : 'un día',
        dd : '%d días',
        M : 'un mes',
        MM : '%d meses',
        y : 'un año',
        yy : '%d años'
    },
    ordinalParse : /\d{1,2}º/,
    ordinal : '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return es;

})));


/***/ }),

/***/ "./node_modules/moment/locale/et.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Estonian [et]
//! author : Henry Kehlmann : https://github.com/madhenry
//! improvements : Illimar Tambek : https://github.com/ragulka

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
        'm' : ['ühe minuti', 'üks minut'],
        'mm': [number + ' minuti', number + ' minutit'],
        'h' : ['ühe tunni', 'tund aega', 'üks tund'],
        'hh': [number + ' tunni', number + ' tundi'],
        'd' : ['ühe päeva', 'üks päev'],
        'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
        'MM': [number + ' kuu', number + ' kuud'],
        'y' : ['ühe aasta', 'aasta', 'üks aasta'],
        'yy': [number + ' aasta', number + ' aastat']
    };
    if (withoutSuffix) {
        return format[key][2] ? format[key][2] : format[key][1];
    }
    return isFuture ? format[key][0] : format[key][1];
}

var et = moment.defineLocale('et', {
    months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
    monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
    weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
    weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
    weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
    longDateFormat : {
        LT   : 'H:mm',
        LTS : 'H:mm:ss',
        L    : 'DD.MM.YYYY',
        LL   : 'D. MMMM YYYY',
        LLL  : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[Täna,] LT',
        nextDay  : '[Homme,] LT',
        nextWeek : '[Järgmine] dddd LT',
        lastDay  : '[Eile,] LT',
        lastWeek : '[Eelmine] dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s pärast',
        past   : '%s tagasi',
        s      : processRelativeTime,
        m      : processRelativeTime,
        mm     : processRelativeTime,
        h      : processRelativeTime,
        hh     : processRelativeTime,
        d      : processRelativeTime,
        dd     : '%d päeva',
        M      : processRelativeTime,
        MM     : processRelativeTime,
        y      : processRelativeTime,
        yy     : processRelativeTime
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return et;

})));


/***/ }),

/***/ "./node_modules/moment/locale/eu.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Basque [eu]
//! author : Eneko Illarramendi : https://github.com/eillarra

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var eu = moment.defineLocale('eu', {
    months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
    monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
    monthsParseExact : true,
    weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
    weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
    weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'YYYY[ko] MMMM[ren] D[a]',
        LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
        LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
        l : 'YYYY-M-D',
        ll : 'YYYY[ko] MMM D[a]',
        lll : 'YYYY[ko] MMM D[a] HH:mm',
        llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
    },
    calendar : {
        sameDay : '[gaur] LT[etan]',
        nextDay : '[bihar] LT[etan]',
        nextWeek : 'dddd LT[etan]',
        lastDay : '[atzo] LT[etan]',
        lastWeek : '[aurreko] dddd LT[etan]',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s barru',
        past : 'duela %s',
        s : 'segundo batzuk',
        m : 'minutu bat',
        mm : '%d minutu',
        h : 'ordu bat',
        hh : '%d ordu',
        d : 'egun bat',
        dd : '%d egun',
        M : 'hilabete bat',
        MM : '%d hilabete',
        y : 'urte bat',
        yy : '%d urte'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return eu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fa.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Persian [fa]
//! author : Ebrahim Byagowi : https://github.com/ebraminio

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '۱',
    '2': '۲',
    '3': '۳',
    '4': '۴',
    '5': '۵',
    '6': '۶',
    '7': '۷',
    '8': '۸',
    '9': '۹',
    '0': '۰'
};
var numberMap = {
    '۱': '1',
    '۲': '2',
    '۳': '3',
    '۴': '4',
    '۵': '5',
    '۶': '6',
    '۷': '7',
    '۸': '8',
    '۹': '9',
    '۰': '0'
};

var fa = moment.defineLocale('fa', {
    months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
    monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
    weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
    weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
    weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    meridiemParse: /قبل از ظهر|بعد از ظهر/,
    isPM: function (input) {
        return /بعد از ظهر/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'قبل از ظهر';
        } else {
            return 'بعد از ظهر';
        }
    },
    calendar : {
        sameDay : '[امروز ساعت] LT',
        nextDay : '[فردا ساعت] LT',
        nextWeek : 'dddd [ساعت] LT',
        lastDay : '[دیروز ساعت] LT',
        lastWeek : 'dddd [پیش] [ساعت] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'در %s',
        past : '%s پیش',
        s : 'چندین ثانیه',
        m : 'یک دقیقه',
        mm : '%d دقیقه',
        h : 'یک ساعت',
        hh : '%d ساعت',
        d : 'یک روز',
        dd : '%d روز',
        M : 'یک ماه',
        MM : '%d ماه',
        y : 'یک سال',
        yy : '%d سال'
    },
    preparse: function (string) {
        return string.replace(/[۰-۹]/g, function (match) {
            return numberMap[match];
        }).replace(/،/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        }).replace(/,/g, '،');
    },
    ordinalParse: /\d{1,2}م/,
    ordinal : '%dم',
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12 // The week that contains Jan 1st is the first week of the year.
    }
});

return fa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fi.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Finnish [fi]
//! author : Tarmo Aidantausta : https://github.com/bleadof

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' ');
var numbersFuture = [
        'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
        numbersPast[7], numbersPast[8], numbersPast[9]
    ];
function translate(number, withoutSuffix, key, isFuture) {
    var result = '';
    switch (key) {
        case 's':
            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
        case 'm':
            return isFuture ? 'minuutin' : 'minuutti';
        case 'mm':
            result = isFuture ? 'minuutin' : 'minuuttia';
            break;
        case 'h':
            return isFuture ? 'tunnin' : 'tunti';
        case 'hh':
            result = isFuture ? 'tunnin' : 'tuntia';
            break;
        case 'd':
            return isFuture ? 'päivän' : 'päivä';
        case 'dd':
            result = isFuture ? 'päivän' : 'päivää';
            break;
        case 'M':
            return isFuture ? 'kuukauden' : 'kuukausi';
        case 'MM':
            result = isFuture ? 'kuukauden' : 'kuukautta';
            break;
        case 'y':
            return isFuture ? 'vuoden' : 'vuosi';
        case 'yy':
            result = isFuture ? 'vuoden' : 'vuotta';
            break;
    }
    result = verbalNumber(number, isFuture) + ' ' + result;
    return result;
}
function verbalNumber(number, isFuture) {
    return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
}

var fi = moment.defineLocale('fi', {
    months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
    monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
    weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
    weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
    weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD.MM.YYYY',
        LL : 'Do MMMM[ta] YYYY',
        LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
        LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
        l : 'D.M.YYYY',
        ll : 'Do MMM YYYY',
        lll : 'Do MMM YYYY, [klo] HH.mm',
        llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
    },
    calendar : {
        sameDay : '[tänään] [klo] LT',
        nextDay : '[huomenna] [klo] LT',
        nextWeek : 'dddd [klo] LT',
        lastDay : '[eilen] [klo] LT',
        lastWeek : '[viime] dddd[na] [klo] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s päästä',
        past : '%s sitten',
        s : translate,
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return fi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Faroese [fo]
//! author : Ragnar Johannesen : https://github.com/ragnar123

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var fo = moment.defineLocale('fo', {
    months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
    weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
    weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
    weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D. MMMM, YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Í dag kl.] LT',
        nextDay : '[Í morgin kl.] LT',
        nextWeek : 'dddd [kl.] LT',
        lastDay : '[Í gjár kl.] LT',
        lastWeek : '[síðstu] dddd [kl] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'um %s',
        past : '%s síðani',
        s : 'fá sekund',
        m : 'ein minutt',
        mm : '%d minuttir',
        h : 'ein tími',
        hh : '%d tímar',
        d : 'ein dagur',
        dd : '%d dagar',
        M : 'ein mánaði',
        MM : '%d mánaðir',
        y : 'eitt ár',
        yy : '%d ár'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return fo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr-ca.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Canada) [fr-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var frCa = moment.defineLocale('fr-ca', {
    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Aujourd\'hui à] LT',
        nextDay: '[Demain à] LT',
        nextWeek: 'dddd [à] LT',
        lastDay: '[Hier à] LT',
        lastWeek: 'dddd [dernier à] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    ordinalParse: /\d{1,2}(er|e)/,
    ordinal : function (number) {
        return number + (number === 1 ? 'er' : 'e');
    }
});

return frCa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr-ch.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Switzerland) [fr-ch]
//! author : Gaspard Bucher : https://github.com/gaspard

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var frCh = moment.defineLocale('fr-ch', {
    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Aujourd\'hui à] LT',
        nextDay: '[Demain à] LT',
        nextWeek: 'dddd [à] LT',
        lastDay: '[Hier à] LT',
        lastWeek: 'dddd [dernier à] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    ordinalParse: /\d{1,2}(er|e)/,
    ordinal : function (number) {
        return number + (number === 1 ? 'er' : 'e');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return frCh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French [fr]
//! author : John Fischer : https://github.com/jfroffice

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var fr = moment.defineLocale('fr', {
    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Aujourd\'hui à] LT',
        nextDay: '[Demain à] LT',
        nextWeek: 'dddd [à] LT',
        lastDay: '[Hier à] LT',
        lastWeek: 'dddd [dernier à] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    ordinalParse: /\d{1,2}(er|)/,
    ordinal : function (number) {
        return number + (number === 1 ? 'er' : '');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return fr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fy.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Frisian [fy]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_');
var monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

var fy = moment.defineLocale('fy', {
    months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
    monthsShort : function (m, format) {
        if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots[m.month()];
        } else {
            return monthsShortWithDots[m.month()];
        }
    },
    monthsParseExact : true,
    weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
    weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
    weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[hjoed om] LT',
        nextDay: '[moarn om] LT',
        nextWeek: 'dddd [om] LT',
        lastDay: '[juster om] LT',
        lastWeek: '[ôfrûne] dddd [om] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'oer %s',
        past : '%s lyn',
        s : 'in pear sekonden',
        m : 'ien minút',
        mm : '%d minuten',
        h : 'ien oere',
        hh : '%d oeren',
        d : 'ien dei',
        dd : '%d dagen',
        M : 'ien moanne',
        MM : '%d moannen',
        y : 'ien jier',
        yy : '%d jierren'
    },
    ordinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return fy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gd.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Scottish Gaelic [gd]
//! author : Jon Ashdown : https://github.com/jonashdown

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = [
    'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
];

var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

var gd = moment.defineLocale('gd', {
    months : months,
    monthsShort : monthsShort,
    monthsParseExact : true,
    weekdays : weekdays,
    weekdaysShort : weekdaysShort,
    weekdaysMin : weekdaysMin,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[An-diugh aig] LT',
        nextDay : '[A-màireach aig] LT',
        nextWeek : 'dddd [aig] LT',
        lastDay : '[An-dè aig] LT',
        lastWeek : 'dddd [seo chaidh] [aig] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ann an %s',
        past : 'bho chionn %s',
        s : 'beagan diogan',
        m : 'mionaid',
        mm : '%d mionaidean',
        h : 'uair',
        hh : '%d uairean',
        d : 'latha',
        dd : '%d latha',
        M : 'mìos',
        MM : '%d mìosan',
        y : 'bliadhna',
        yy : '%d bliadhna'
    },
    ordinalParse : /\d{1,2}(d|na|mh)/,
    ordinal : function (number) {
        var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return gd;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Galician [gl]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var gl = moment.defineLocale('gl', {
    months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
    monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
    weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
    weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY H:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
    },
    calendar : {
        sameDay : function () {
            return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
        },
        nextDay : function () {
            return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
        },
        lastDay : function () {
            return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
        },
        lastWeek : function () {
            return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : function (str) {
            if (str.indexOf('un') === 0) {
                return 'n' + str;
            }
            return 'en ' + str;
        },
        past : 'hai %s',
        s : 'uns segundos',
        m : 'un minuto',
        mm : '%d minutos',
        h : 'unha hora',
        hh : '%d horas',
        d : 'un día',
        dd : '%d días',
        M : 'un mes',
        MM : '%d meses',
        y : 'un ano',
        yy : '%d anos'
    },
    ordinalParse : /\d{1,2}º/,
    ordinal : '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return gl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/he.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hebrew [he]
//! author : Tomer Cohen : https://github.com/tomer
//! author : Moshe Simantov : https://github.com/DevelopmentIL
//! author : Tal Ater : https://github.com/TalAter

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var he = moment.defineLocale('he', {
    months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
    monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
    weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
    weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
    weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [ב]MMMM YYYY',
        LLL : 'D [ב]MMMM YYYY HH:mm',
        LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
        l : 'D/M/YYYY',
        ll : 'D MMM YYYY',
        lll : 'D MMM YYYY HH:mm',
        llll : 'ddd, D MMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[היום ב־]LT',
        nextDay : '[מחר ב־]LT',
        nextWeek : 'dddd [בשעה] LT',
        lastDay : '[אתמול ב־]LT',
        lastWeek : '[ביום] dddd [האחרון בשעה] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'בעוד %s',
        past : 'לפני %s',
        s : 'מספר שניות',
        m : 'דקה',
        mm : '%d דקות',
        h : 'שעה',
        hh : function (number) {
            if (number === 2) {
                return 'שעתיים';
            }
            return number + ' שעות';
        },
        d : 'יום',
        dd : function (number) {
            if (number === 2) {
                return 'יומיים';
            }
            return number + ' ימים';
        },
        M : 'חודש',
        MM : function (number) {
            if (number === 2) {
                return 'חודשיים';
            }
            return number + ' חודשים';
        },
        y : 'שנה',
        yy : function (number) {
            if (number === 2) {
                return 'שנתיים';
            } else if (number % 10 === 0 && number !== 10) {
                return number + ' שנה';
            }
            return number + ' שנים';
        }
    },
    meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
    isPM : function (input) {
        return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 5) {
            return 'לפנות בוקר';
        } else if (hour < 10) {
            return 'בבוקר';
        } else if (hour < 12) {
            return isLower ? 'לפנה"צ' : 'לפני הצהריים';
        } else if (hour < 18) {
            return isLower ? 'אחה"צ' : 'אחרי הצהריים';
        } else {
            return 'בערב';
        }
    }
});

return he;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hi.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hindi [hi]
//! author : Mayank Singhal : https://github.com/mayanksinghal

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '१',
    '2': '२',
    '3': '३',
    '4': '४',
    '5': '५',
    '6': '६',
    '7': '७',
    '8': '८',
    '9': '९',
    '0': '०'
};
var numberMap = {
    '१': '1',
    '२': '2',
    '३': '3',
    '४': '4',
    '५': '5',
    '६': '6',
    '७': '7',
    '८': '8',
    '९': '9',
    '०': '0'
};

var hi = moment.defineLocale('hi', {
    months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
    monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
    monthsParseExact: true,
    weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
    weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
    longDateFormat : {
        LT : 'A h:mm बजे',
        LTS : 'A h:mm:ss बजे',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm बजे',
        LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
    },
    calendar : {
        sameDay : '[आज] LT',
        nextDay : '[कल] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[कल] LT',
        lastWeek : '[पिछले] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s में',
        past : '%s पहले',
        s : 'कुछ ही क्षण',
        m : 'एक मिनट',
        mm : '%d मिनट',
        h : 'एक घंटा',
        hh : '%d घंटे',
        d : 'एक दिन',
        dd : '%d दिन',
        M : 'एक महीने',
        MM : '%d महीने',
        y : 'एक वर्ष',
        yy : '%d वर्ष'
    },
    preparse: function (string) {
        return string.replace(/[१२३४५६७८९०]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    // Hindi notation for meridiems are quite fuzzy in practice. While there exists
    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
    meridiemParse: /रात|सुबह|दोपहर|शाम/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'रात') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'सुबह') {
            return hour;
        } else if (meridiem === 'दोपहर') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'शाम') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'रात';
        } else if (hour < 10) {
            return 'सुबह';
        } else if (hour < 17) {
            return 'दोपहर';
        } else if (hour < 20) {
            return 'शाम';
        } else {
            return 'रात';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return hi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Croatian [hr]
//! author : Bojan Marković : https://github.com/bmarkovic

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function translate(number, withoutSuffix, key) {
    var result = number + ' ';
    switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
    }
}

var hr = moment.defineLocale('hr', {
    months : {
        format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
        standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
    },
    monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
    monthsParseExact: true,
    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[danas u] LT',
        nextDay  : '[sutra u] LT',
        nextWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[jučer u] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'prije %s',
        s      : 'par sekundi',
        m      : translate,
        mm     : translate,
        h      : translate,
        hh     : translate,
        d      : 'dan',
        dd     : translate,
        M      : 'mjesec',
        MM     : translate,
        y      : 'godinu',
        yy     : translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return hr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hu.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hungarian [hu]
//! author : Adam Brunner : https://github.com/adambrunner

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
function translate(number, withoutSuffix, key, isFuture) {
    var num = number,
        suffix;
    switch (key) {
        case 's':
            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
        case 'm':
            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'mm':
            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'h':
            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'hh':
            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'd':
            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'dd':
            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'M':
            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'MM':
            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'y':
            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
        case 'yy':
            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
    }
    return '';
}
function week(isFuture) {
    return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
}

var hu = moment.defineLocale('hu', {
    months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
    monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
    weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
    weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
    weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'YYYY.MM.DD.',
        LL : 'YYYY. MMMM D.',
        LLL : 'YYYY. MMMM D. H:mm',
        LLLL : 'YYYY. MMMM D., dddd H:mm'
    },
    meridiemParse: /de|du/i,
    isPM: function (input) {
        return input.charAt(1).toLowerCase() === 'u';
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 12) {
            return isLower === true ? 'de' : 'DE';
        } else {
            return isLower === true ? 'du' : 'DU';
        }
    },
    calendar : {
        sameDay : '[ma] LT[-kor]',
        nextDay : '[holnap] LT[-kor]',
        nextWeek : function () {
            return week.call(this, true);
        },
        lastDay : '[tegnap] LT[-kor]',
        lastWeek : function () {
            return week.call(this, false);
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s múlva',
        past : '%s',
        s : translate,
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return hu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hy-am.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Armenian [hy-am]
//! author : Armendarabyan : https://github.com/armendarabyan

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var hyAm = moment.defineLocale('hy-am', {
    months : {
        format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
        standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
    },
    monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
    weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
    weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
    weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY թ.',
        LLL : 'D MMMM YYYY թ., HH:mm',
        LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
    },
    calendar : {
        sameDay: '[այսօր] LT',
        nextDay: '[վաղը] LT',
        lastDay: '[երեկ] LT',
        nextWeek: function () {
            return 'dddd [օրը ժամը] LT';
        },
        lastWeek: function () {
            return '[անցած] dddd [օրը ժամը] LT';
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s հետո',
        past : '%s առաջ',
        s : 'մի քանի վայրկյան',
        m : 'րոպե',
        mm : '%d րոպե',
        h : 'ժամ',
        hh : '%d ժամ',
        d : 'օր',
        dd : '%d օր',
        M : 'ամիս',
        MM : '%d ամիս',
        y : 'տարի',
        yy : '%d տարի'
    },
    meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
    isPM: function (input) {
        return /^(ցերեկվա|երեկոյան)$/.test(input);
    },
    meridiem : function (hour) {
        if (hour < 4) {
            return 'գիշերվա';
        } else if (hour < 12) {
            return 'առավոտվա';
        } else if (hour < 17) {
            return 'ցերեկվա';
        } else {
            return 'երեկոյան';
        }
    },
    ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'DDD':
            case 'w':
            case 'W':
            case 'DDDo':
                if (number === 1) {
                    return number + '-ին';
                }
                return number + '-րդ';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return hyAm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/id.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Indonesian [id]
//! author : Mohammad Satrio Utomo : https://github.com/tyok
//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var id = moment.defineLocale('id', {
    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
    weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
    weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /pagi|siang|sore|malam/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'pagi') {
            return hour;
        } else if (meridiem === 'siang') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'sore' || meridiem === 'malam') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'pagi';
        } else if (hours < 15) {
            return 'siang';
        } else if (hours < 19) {
            return 'sore';
        } else {
            return 'malam';
        }
    },
    calendar : {
        sameDay : '[Hari ini pukul] LT',
        nextDay : '[Besok pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kemarin pukul] LT',
        lastWeek : 'dddd [lalu pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dalam %s',
        past : '%s yang lalu',
        s : 'beberapa detik',
        m : 'semenit',
        mm : '%d menit',
        h : 'sejam',
        hh : '%d jam',
        d : 'sehari',
        dd : '%d hari',
        M : 'sebulan',
        MM : '%d bulan',
        y : 'setahun',
        yy : '%d tahun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return id;

})));


/***/ }),

/***/ "./node_modules/moment/locale/is.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Icelandic [is]
//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function plural(n) {
    if (n % 100 === 11) {
        return true;
    } else if (n % 10 === 1) {
        return false;
    }
    return true;
}
function translate(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
        case 'm':
            return withoutSuffix ? 'mínúta' : 'mínútu';
        case 'mm':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
            } else if (withoutSuffix) {
                return result + 'mínúta';
            }
            return result + 'mínútu';
        case 'hh':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
            }
            return result + 'klukkustund';
        case 'd':
            if (withoutSuffix) {
                return 'dagur';
            }
            return isFuture ? 'dag' : 'degi';
        case 'dd':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'dagar';
                }
                return result + (isFuture ? 'daga' : 'dögum');
            } else if (withoutSuffix) {
                return result + 'dagur';
            }
            return result + (isFuture ? 'dag' : 'degi');
        case 'M':
            if (withoutSuffix) {
                return 'mánuður';
            }
            return isFuture ? 'mánuð' : 'mánuði';
        case 'MM':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'mánuðir';
                }
                return result + (isFuture ? 'mánuði' : 'mánuðum');
            } else if (withoutSuffix) {
                return result + 'mánuður';
            }
            return result + (isFuture ? 'mánuð' : 'mánuði');
        case 'y':
            return withoutSuffix || isFuture ? 'ár' : 'ári';
        case 'yy':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
            }
            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
    }
}

var is = moment.defineLocale('is', {
    months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
    weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
    weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
    weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY [kl.] H:mm',
        LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
    },
    calendar : {
        sameDay : '[í dag kl.] LT',
        nextDay : '[á morgun kl.] LT',
        nextWeek : 'dddd [kl.] LT',
        lastDay : '[í gær kl.] LT',
        lastWeek : '[síðasta] dddd [kl.] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'eftir %s',
        past : 'fyrir %s síðan',
        s : translate,
        m : translate,
        mm : translate,
        h : 'klukkustund',
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return is;

})));


/***/ }),

/***/ "./node_modules/moment/locale/it.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian [it]
//! author : Lorenzo : https://github.com/aliem
//! author: Mattia Larentis: https://github.com/nostalgiaz

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var it = moment.defineLocale('it', {
    months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
    monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
    weekdays : 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
    weekdaysShort : 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
    weekdaysMin : 'Do_Lu_Ma_Me_Gi_Ve_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Oggi alle] LT',
        nextDay: '[Domani alle] LT',
        nextWeek: 'dddd [alle] LT',
        lastDay: '[Ieri alle] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[la scorsa] dddd [alle] LT';
                default:
                    return '[lo scorso] dddd [alle] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : function (s) {
            return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
        },
        past : '%s fa',
        s : 'alcuni secondi',
        m : 'un minuto',
        mm : '%d minuti',
        h : 'un\'ora',
        hh : '%d ore',
        d : 'un giorno',
        dd : '%d giorni',
        M : 'un mese',
        MM : '%d mesi',
        y : 'un anno',
        yy : '%d anni'
    },
    ordinalParse : /\d{1,2}º/,
    ordinal: '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return it;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ja.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Japanese [ja]
//! author : LI Long : https://github.com/baryon

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ja = moment.defineLocale('ja', {
    months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
    weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
    weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
    longDateFormat : {
        LT : 'Ah時m分',
        LTS : 'Ah時m分s秒',
        L : 'YYYY/MM/DD',
        LL : 'YYYY年M月D日',
        LLL : 'YYYY年M月D日Ah時m分',
        LLLL : 'YYYY年M月D日Ah時m分 dddd'
    },
    meridiemParse: /午前|午後/i,
    isPM : function (input) {
        return input === '午後';
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return '午前';
        } else {
            return '午後';
        }
    },
    calendar : {
        sameDay : '[今日] LT',
        nextDay : '[明日] LT',
        nextWeek : '[来週]dddd LT',
        lastDay : '[昨日] LT',
        lastWeek : '[前週]dddd LT',
        sameElse : 'L'
    },
    ordinalParse : /\d{1,2}日/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '日';
            default:
                return number;
        }
    },
    relativeTime : {
        future : '%s後',
        past : '%s前',
        s : '数秒',
        m : '1分',
        mm : '%d分',
        h : '1時間',
        hh : '%d時間',
        d : '1日',
        dd : '%d日',
        M : '1ヶ月',
        MM : '%dヶ月',
        y : '1年',
        yy : '%d年'
    }
});

return ja;

})));


/***/ }),

/***/ "./node_modules/moment/locale/jv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Javanese [jv]
//! author : Rony Lantip : https://github.com/lantip
//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var jv = moment.defineLocale('jv', {
    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
    weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
    weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /enjing|siyang|sonten|ndalu/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'enjing') {
            return hour;
        } else if (meridiem === 'siyang') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'enjing';
        } else if (hours < 15) {
            return 'siyang';
        } else if (hours < 19) {
            return 'sonten';
        } else {
            return 'ndalu';
        }
    },
    calendar : {
        sameDay : '[Dinten puniko pukul] LT',
        nextDay : '[Mbenjang pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kala wingi pukul] LT',
        lastWeek : 'dddd [kepengker pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'wonten ing %s',
        past : '%s ingkang kepengker',
        s : 'sawetawis detik',
        m : 'setunggal menit',
        mm : '%d menit',
        h : 'setunggal jam',
        hh : '%d jam',
        d : 'sedinten',
        dd : '%d dinten',
        M : 'sewulan',
        MM : '%d wulan',
        y : 'setaun',
        yy : '%d taun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return jv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ka.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Georgian [ka]
//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ka = moment.defineLocale('ka', {
    months : {
        standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
        format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
    },
    monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
    weekdays : {
        standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
        format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
        isFormat: /(წინა|შემდეგ)/
    },
    weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
    weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[დღეს] LT[-ზე]',
        nextDay : '[ხვალ] LT[-ზე]',
        lastDay : '[გუშინ] LT[-ზე]',
        nextWeek : '[შემდეგ] dddd LT[-ზე]',
        lastWeek : '[წინა] dddd LT-ზე',
        sameElse : 'L'
    },
    relativeTime : {
        future : function (s) {
            return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
                s.replace(/ი$/, 'ში') :
                s + 'ში';
        },
        past : function (s) {
            if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
                return s.replace(/(ი|ე)$/, 'ის წინ');
            }
            if ((/წელი/).test(s)) {
                return s.replace(/წელი$/, 'წლის წინ');
            }
        },
        s : 'რამდენიმე წამი',
        m : 'წუთი',
        mm : '%d წუთი',
        h : 'საათი',
        hh : '%d საათი',
        d : 'დღე',
        dd : '%d დღე',
        M : 'თვე',
        MM : '%d თვე',
        y : 'წელი',
        yy : '%d წელი'
    },
    ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
    ordinal : function (number) {
        if (number === 0) {
            return number;
        }
        if (number === 1) {
            return number + '-ლი';
        }
        if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
            return 'მე-' + number;
        }
        return number + '-ე';
    },
    week : {
        dow : 1,
        doy : 7
    }
});

return ka;

})));


/***/ }),

/***/ "./node_modules/moment/locale/kk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kazakh [kk]
//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var suffixes = {
    0: '-ші',
    1: '-ші',
    2: '-ші',
    3: '-ші',
    4: '-ші',
    5: '-ші',
    6: '-шы',
    7: '-ші',
    8: '-ші',
    9: '-шы',
    10: '-шы',
    20: '-шы',
    30: '-шы',
    40: '-шы',
    50: '-ші',
    60: '-шы',
    70: '-ші',
    80: '-ші',
    90: '-шы',
    100: '-ші'
};

var kk = moment.defineLocale('kk', {
    months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
    monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
    weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
    weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
    weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Бүгін сағат] LT',
        nextDay : '[Ертең сағат] LT',
        nextWeek : 'dddd [сағат] LT',
        lastDay : '[Кеше сағат] LT',
        lastWeek : '[Өткен аптаның] dddd [сағат] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ішінде',
        past : '%s бұрын',
        s : 'бірнеше секунд',
        m : 'бір минут',
        mm : '%d минут',
        h : 'бір сағат',
        hh : '%d сағат',
        d : 'бір күн',
        dd : '%d күн',
        M : 'бір ай',
        MM : '%d ай',
        y : 'бір жыл',
        yy : '%d жыл'
    },
    ordinalParse: /\d{1,2}-(ші|шы)/,
    ordinal : function (number) {
        var a = number % 10,
            b = number >= 100 ? 100 : null;
        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return kk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/km.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Cambodian [km]
//! author : Kruy Vanna : https://github.com/kruyvanna

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var km = moment.defineLocale('km', {
    months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
    monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
    weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
    weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
    weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
    longDateFormat: {
        LT: 'HH:mm',
        LTS : 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
        nextDay: '[ស្អែក ម៉ោង] LT',
        nextWeek: 'dddd [ម៉ោង] LT',
        lastDay: '[ម្សិលមិញ ម៉ោង] LT',
        lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: '%sទៀត',
        past: '%sមុន',
        s: 'ប៉ុន្មានវិនាទី',
        m: 'មួយនាទី',
        mm: '%d នាទី',
        h: 'មួយម៉ោង',
        hh: '%d ម៉ោង',
        d: 'មួយថ្ងៃ',
        dd: '%d ថ្ងៃ',
        M: 'មួយខែ',
        MM: '%d ខែ',
        y: 'មួយឆ្នាំ',
        yy: '%d ឆ្នាំ'
    },
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 4th is the first week of the year.
    }
});

return km;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ko.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Korean [ko]
//! author : Kyungwook, Park : https://github.com/kyungw00k
//! author : Jeeeyul Lee <jeeeyul@gmail.com>

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ko = moment.defineLocale('ko', {
    months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
    monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
    weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
    weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
    weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
    longDateFormat : {
        LT : 'A h시 m분',
        LTS : 'A h시 m분 s초',
        L : 'YYYY.MM.DD',
        LL : 'YYYY년 MMMM D일',
        LLL : 'YYYY년 MMMM D일 A h시 m분',
        LLLL : 'YYYY년 MMMM D일 dddd A h시 m분'
    },
    calendar : {
        sameDay : '오늘 LT',
        nextDay : '내일 LT',
        nextWeek : 'dddd LT',
        lastDay : '어제 LT',
        lastWeek : '지난주 dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s 후',
        past : '%s 전',
        s : '몇 초',
        ss : '%d초',
        m : '일분',
        mm : '%d분',
        h : '한 시간',
        hh : '%d시간',
        d : '하루',
        dd : '%d일',
        M : '한 달',
        MM : '%d달',
        y : '일 년',
        yy : '%d년'
    },
    ordinalParse : /\d{1,2}일/,
    ordinal : '%d일',
    meridiemParse : /오전|오후/,
    isPM : function (token) {
        return token === '오후';
    },
    meridiem : function (hour, minute, isUpper) {
        return hour < 12 ? '오전' : '오후';
    }
});

return ko;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ky.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kyrgyz [ky]
//! author : Chyngyz Arystan uulu : https://github.com/chyngyz

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';



var suffixes = {
    0: '-чү',
    1: '-чи',
    2: '-чи',
    3: '-чү',
    4: '-чү',
    5: '-чи',
    6: '-чы',
    7: '-чи',
    8: '-чи',
    9: '-чу',
    10: '-чу',
    20: '-чы',
    30: '-чу',
    40: '-чы',
    50: '-чү',
    60: '-чы',
    70: '-чи',
    80: '-чи',
    90: '-чу',
    100: '-чү'
};

var ky = moment.defineLocale('ky', {
    months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
    monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
    weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
    weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
    weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Бүгүн саат] LT',
        nextDay : '[Эртең саат] LT',
        nextWeek : 'dddd [саат] LT',
        lastDay : '[Кече саат] LT',
        lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ичинде',
        past : '%s мурун',
        s : 'бирнече секунд',
        m : 'бир мүнөт',
        mm : '%d мүнөт',
        h : 'бир саат',
        hh : '%d саат',
        d : 'бир күн',
        dd : '%d күн',
        M : 'бир ай',
        MM : '%d ай',
        y : 'бир жыл',
        yy : '%d жыл'
    },
    ordinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
    ordinal : function (number) {
        var a = number % 10,
            b = number >= 100 ? 100 : null;
        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return ky;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lb.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Luxembourgish [lb]
//! author : mweimerskirch : https://github.com/mweimerskirch
//! author : David Raison : https://github.com/kwisatz

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eng Minutt', 'enger Minutt'],
        'h': ['eng Stonn', 'enger Stonn'],
        'd': ['een Dag', 'engem Dag'],
        'M': ['ee Mount', 'engem Mount'],
        'y': ['ee Joer', 'engem Joer']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}
function processFutureTime(string) {
    var number = string.substr(0, string.indexOf(' '));
    if (eifelerRegelAppliesToNumber(number)) {
        return 'a ' + string;
    }
    return 'an ' + string;
}
function processPastTime(string) {
    var number = string.substr(0, string.indexOf(' '));
    if (eifelerRegelAppliesToNumber(number)) {
        return 'viru ' + string;
    }
    return 'virun ' + string;
}
/**
 * Returns true if the word before the given number loses the '-n' ending.
 * e.g. 'an 10 Deeg' but 'a 5 Deeg'
 *
 * @param number {integer}
 * @returns {boolean}
 */
function eifelerRegelAppliesToNumber(number) {
    number = parseInt(number, 10);
    if (isNaN(number)) {
        return false;
    }
    if (number < 0) {
        // Negative Number --> always true
        return true;
    } else if (number < 10) {
        // Only 1 digit
        if (4 <= number && number <= 7) {
            return true;
        }
        return false;
    } else if (number < 100) {
        // 2 digits
        var lastDigit = number % 10, firstDigit = number / 10;
        if (lastDigit === 0) {
            return eifelerRegelAppliesToNumber(firstDigit);
        }
        return eifelerRegelAppliesToNumber(lastDigit);
    } else if (number < 10000) {
        // 3 or 4 digits --> recursively check first digit
        while (number >= 10) {
            number = number / 10;
        }
        return eifelerRegelAppliesToNumber(number);
    } else {
        // Anything larger than 4 digits: recursively check first n-3 digits
        number = number / 1000;
        return eifelerRegelAppliesToNumber(number);
    }
}

var lb = moment.defineLocale('lb', {
    months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
    weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
    weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm [Auer]',
        LTS: 'H:mm:ss [Auer]',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm [Auer]',
        LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
    },
    calendar: {
        sameDay: '[Haut um] LT',
        sameElse: 'L',
        nextDay: '[Muer um] LT',
        nextWeek: 'dddd [um] LT',
        lastDay: '[Gëschter um] LT',
        lastWeek: function () {
            // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
            switch (this.day()) {
                case 2:
                case 4:
                    return '[Leschten] dddd [um] LT';
                default:
                    return '[Leschte] dddd [um] LT';
            }
        }
    },
    relativeTime : {
        future : processFutureTime,
        past : processPastTime,
        s : 'e puer Sekonnen',
        m : processRelativeTime,
        mm : '%d Minutten',
        h : processRelativeTime,
        hh : '%d Stonnen',
        d : processRelativeTime,
        dd : '%d Deeg',
        M : processRelativeTime,
        MM : '%d Méint',
        y : processRelativeTime,
        yy : '%d Joer'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return lb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lao [lo]
//! author : Ryan Hart : https://github.com/ryanhart2

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var lo = moment.defineLocale('lo', {
    months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
    monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
    weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
    weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
    weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
    isPM: function (input) {
        return input === 'ຕອນແລງ';
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ຕອນເຊົ້າ';
        } else {
            return 'ຕອນແລງ';
        }
    },
    calendar : {
        sameDay : '[ມື້ນີ້ເວລາ] LT',
        nextDay : '[ມື້ອື່ນເວລາ] LT',
        nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
        lastDay : '[ມື້ວານນີ້ເວລາ] LT',
        lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ອີກ %s',
        past : '%sຜ່ານມາ',
        s : 'ບໍ່ເທົ່າໃດວິນາທີ',
        m : '1 ນາທີ',
        mm : '%d ນາທີ',
        h : '1 ຊົ່ວໂມງ',
        hh : '%d ຊົ່ວໂມງ',
        d : '1 ມື້',
        dd : '%d ມື້',
        M : '1 ເດືອນ',
        MM : '%d ເດືອນ',
        y : '1 ປີ',
        yy : '%d ປີ'
    },
    ordinalParse: /(ທີ່)\d{1,2}/,
    ordinal : function (number) {
        return 'ທີ່' + number;
    }
});

return lo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lt.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lithuanian [lt]
//! author : Mindaugas Mozūras : https://github.com/mmozuras

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var units = {
    'm' : 'minutė_minutės_minutę',
    'mm': 'minutės_minučių_minutes',
    'h' : 'valanda_valandos_valandą',
    'hh': 'valandos_valandų_valandas',
    'd' : 'diena_dienos_dieną',
    'dd': 'dienos_dienų_dienas',
    'M' : 'mėnuo_mėnesio_mėnesį',
    'MM': 'mėnesiai_mėnesių_mėnesius',
    'y' : 'metai_metų_metus',
    'yy': 'metai_metų_metus'
};
function translateSeconds(number, withoutSuffix, key, isFuture) {
    if (withoutSuffix) {
        return 'kelios sekundės';
    } else {
        return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
    }
}
function translateSingular(number, withoutSuffix, key, isFuture) {
    return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
}
function special(number) {
    return number % 10 === 0 || (number > 10 && number < 20);
}
function forms(key) {
    return units[key].split('_');
}
function translate(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    if (number === 1) {
        return result + translateSingular(number, withoutSuffix, key[0], isFuture);
    } else if (withoutSuffix) {
        return result + (special(number) ? forms(key)[1] : forms(key)[0]);
    } else {
        if (isFuture) {
            return result + forms(key)[1];
        } else {
            return result + (special(number) ? forms(key)[1] : forms(key)[2]);
        }
    }
}
var lt = moment.defineLocale('lt', {
    months : {
        format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
        standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
        isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
    },
    monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
    weekdays : {
        format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
        standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
        isFormat: /dddd HH:mm/
    },
    weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
    weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'YYYY [m.] MMMM D [d.]',
        LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
        LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
        l : 'YYYY-MM-DD',
        ll : 'YYYY [m.] MMMM D [d.]',
        lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
        llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
    },
    calendar : {
        sameDay : '[Šiandien] LT',
        nextDay : '[Rytoj] LT',
        nextWeek : 'dddd LT',
        lastDay : '[Vakar] LT',
        lastWeek : '[Praėjusį] dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'po %s',
        past : 'prieš %s',
        s : translateSeconds,
        m : translateSingular,
        mm : translate,
        h : translateSingular,
        hh : translate,
        d : translateSingular,
        dd : translate,
        M : translateSingular,
        MM : translate,
        y : translateSingular,
        yy : translate
    },
    ordinalParse: /\d{1,2}-oji/,
    ordinal : function (number) {
        return number + '-oji';
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return lt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Latvian [lv]
//! author : Kristaps Karlsons : https://github.com/skakri
//! author : Jānis Elmeris : https://github.com/JanisE

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var units = {
    'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
    'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
    'h': 'stundas_stundām_stunda_stundas'.split('_'),
    'hh': 'stundas_stundām_stunda_stundas'.split('_'),
    'd': 'dienas_dienām_diena_dienas'.split('_'),
    'dd': 'dienas_dienām_diena_dienas'.split('_'),
    'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
    'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
    'y': 'gada_gadiem_gads_gadi'.split('_'),
    'yy': 'gada_gadiem_gads_gadi'.split('_')
};
/**
 * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
 */
function format(forms, number, withoutSuffix) {
    if (withoutSuffix) {
        // E.g. "21 minūte", "3 minūtes".
        return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
    } else {
        // E.g. "21 minūtes" as in "pēc 21 minūtes".
        // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
        return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
    }
}
function relativeTimeWithPlural(number, withoutSuffix, key) {
    return number + ' ' + format(units[key], number, withoutSuffix);
}
function relativeTimeWithSingular(number, withoutSuffix, key) {
    return format(units[key], number, withoutSuffix);
}
function relativeSeconds(number, withoutSuffix) {
    return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
}

var lv = moment.defineLocale('lv', {
    months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
    monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
    weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
    weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
    weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY.',
        LL : 'YYYY. [gada] D. MMMM',
        LLL : 'YYYY. [gada] D. MMMM, HH:mm',
        LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
    },
    calendar : {
        sameDay : '[Šodien pulksten] LT',
        nextDay : '[Rīt pulksten] LT',
        nextWeek : 'dddd [pulksten] LT',
        lastDay : '[Vakar pulksten] LT',
        lastWeek : '[Pagājušā] dddd [pulksten] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'pēc %s',
        past : 'pirms %s',
        s : relativeSeconds,
        m : relativeTimeWithSingular,
        mm : relativeTimeWithPlural,
        h : relativeTimeWithSingular,
        hh : relativeTimeWithPlural,
        d : relativeTimeWithSingular,
        dd : relativeTimeWithPlural,
        M : relativeTimeWithSingular,
        MM : relativeTimeWithPlural,
        y : relativeTimeWithSingular,
        yy : relativeTimeWithPlural
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return lv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/me.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Montenegrin [me]
//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var translator = {
    words: { //Different grammatical cases
        m: ['jedan minut', 'jednog minuta'],
        mm: ['minut', 'minuta', 'minuta'],
        h: ['jedan sat', 'jednog sata'],
        hh: ['sat', 'sata', 'sati'],
        dd: ['dan', 'dana', 'dana'],
        MM: ['mjesec', 'mjeseca', 'mjeseci'],
        yy: ['godina', 'godine', 'godina']
    },
    correctGrammaticalCase: function (number, wordKey) {
        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
    },
    translate: function (number, withoutSuffix, key) {
        var wordKey = translator.words[key];
        if (key.length === 1) {
            return withoutSuffix ? wordKey[0] : wordKey[1];
        } else {
            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
        }
    }
};

var me = moment.defineLocale('me', {
    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact : true,
    weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
    weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm'
    },
    calendar: {
        sameDay: '[danas u] LT',
        nextDay: '[sjutra u] LT',

        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[juče u] LT',
        lastWeek : function () {
            var lastWeekDays = [
                '[prošle] [nedjelje] [u] LT',
                '[prošlog] [ponedjeljka] [u] LT',
                '[prošlog] [utorka] [u] LT',
                '[prošle] [srijede] [u] LT',
                '[prošlog] [četvrtka] [u] LT',
                '[prošlog] [petka] [u] LT',
                '[prošle] [subote] [u] LT'
            ];
            return lastWeekDays[this.day()];
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'prije %s',
        s      : 'nekoliko sekundi',
        m      : translator.translate,
        mm     : translator.translate,
        h      : translator.translate,
        hh     : translator.translate,
        d      : 'dan',
        dd     : translator.translate,
        M      : 'mjesec',
        MM     : translator.translate,
        y      : 'godinu',
        yy     : translator.translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return me;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mi.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maori [mi]
//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var mi = moment.defineLocale('mi', {
    months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
    monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
    monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
    monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
    monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
    monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
    weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
    weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
    weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
    longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY [i] HH:mm',
        LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
    },
    calendar: {
        sameDay: '[i teie mahana, i] LT',
        nextDay: '[apopo i] LT',
        nextWeek: 'dddd [i] LT',
        lastDay: '[inanahi i] LT',
        lastWeek: 'dddd [whakamutunga i] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'i roto i %s',
        past: '%s i mua',
        s: 'te hēkona ruarua',
        m: 'he meneti',
        mm: '%d meneti',
        h: 'te haora',
        hh: '%d haora',
        d: 'he ra',
        dd: '%d ra',
        M: 'he marama',
        MM: '%d marama',
        y: 'he tau',
        yy: '%d tau'
    },
    ordinalParse: /\d{1,2}º/,
    ordinal: '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return mi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Macedonian [mk]
//! author : Borislav Mickov : https://github.com/B0k0

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var mk = moment.defineLocale('mk', {
    months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
    monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
    weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
    weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
    weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'D.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd, D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay : '[Денес во] LT',
        nextDay : '[Утре во] LT',
        nextWeek : '[Во] dddd [во] LT',
        lastDay : '[Вчера во] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[Изминатата] dddd [во] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[Изминатиот] dddd [во] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'после %s',
        past : 'пред %s',
        s : 'неколку секунди',
        m : 'минута',
        mm : '%d минути',
        h : 'час',
        hh : '%d часа',
        d : 'ден',
        dd : '%d дена',
        M : 'месец',
        MM : '%d месеци',
        y : 'година',
        yy : '%d години'
    },
    ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
    ordinal : function (number) {
        var lastDigit = number % 10,
            last2Digits = number % 100;
        if (number === 0) {
            return number + '-ев';
        } else if (last2Digits === 0) {
            return number + '-ен';
        } else if (last2Digits > 10 && last2Digits < 20) {
            return number + '-ти';
        } else if (lastDigit === 1) {
            return number + '-ви';
        } else if (lastDigit === 2) {
            return number + '-ри';
        } else if (lastDigit === 7 || lastDigit === 8) {
            return number + '-ми';
        } else {
            return number + '-ти';
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return mk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ml.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malayalam [ml]
//! author : Floyd Pink : https://github.com/floydpink

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ml = moment.defineLocale('ml', {
    months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
    monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
    monthsParseExact : true,
    weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
    weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
    weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
    longDateFormat : {
        LT : 'A h:mm -നു',
        LTS : 'A h:mm:ss -നു',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm -നു',
        LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
    },
    calendar : {
        sameDay : '[ഇന്ന്] LT',
        nextDay : '[നാളെ] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[ഇന്നലെ] LT',
        lastWeek : '[കഴിഞ്ഞ] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s കഴിഞ്ഞ്',
        past : '%s മുൻപ്',
        s : 'അൽപ നിമിഷങ്ങൾ',
        m : 'ഒരു മിനിറ്റ്',
        mm : '%d മിനിറ്റ്',
        h : 'ഒരു മണിക്കൂർ',
        hh : '%d മണിക്കൂർ',
        d : 'ഒരു ദിവസം',
        dd : '%d ദിവസം',
        M : 'ഒരു മാസം',
        MM : '%d മാസം',
        y : 'ഒരു വർഷം',
        yy : '%d വർഷം'
    },
    meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if ((meridiem === 'രാത്രി' && hour >= 4) ||
                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
                meridiem === 'വൈകുന്നേരം') {
            return hour + 12;
        } else {
            return hour;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'രാത്രി';
        } else if (hour < 12) {
            return 'രാവിലെ';
        } else if (hour < 17) {
            return 'ഉച്ച കഴിഞ്ഞ്';
        } else if (hour < 20) {
            return 'വൈകുന്നേരം';
        } else {
            return 'രാത്രി';
        }
    }
});

return ml;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Marathi [mr]
//! author : Harshad Kale : https://github.com/kalehv
//! author : Vivek Athalye : https://github.com/vnathalye

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '१',
    '2': '२',
    '3': '३',
    '4': '४',
    '5': '५',
    '6': '६',
    '7': '७',
    '8': '८',
    '9': '९',
    '0': '०'
};
var numberMap = {
    '१': '1',
    '२': '2',
    '३': '3',
    '४': '4',
    '५': '5',
    '६': '6',
    '७': '7',
    '८': '8',
    '९': '9',
    '०': '0'
};

function relativeTimeMr(number, withoutSuffix, string, isFuture)
{
    var output = '';
    if (withoutSuffix) {
        switch (string) {
            case 's': output = 'काही सेकंद'; break;
            case 'm': output = 'एक मिनिट'; break;
            case 'mm': output = '%d मिनिटे'; break;
            case 'h': output = 'एक तास'; break;
            case 'hh': output = '%d तास'; break;
            case 'd': output = 'एक दिवस'; break;
            case 'dd': output = '%d दिवस'; break;
            case 'M': output = 'एक महिना'; break;
            case 'MM': output = '%d महिने'; break;
            case 'y': output = 'एक वर्ष'; break;
            case 'yy': output = '%d वर्षे'; break;
        }
    }
    else {
        switch (string) {
            case 's': output = 'काही सेकंदां'; break;
            case 'm': output = 'एका मिनिटा'; break;
            case 'mm': output = '%d मिनिटां'; break;
            case 'h': output = 'एका तासा'; break;
            case 'hh': output = '%d तासां'; break;
            case 'd': output = 'एका दिवसा'; break;
            case 'dd': output = '%d दिवसां'; break;
            case 'M': output = 'एका महिन्या'; break;
            case 'MM': output = '%d महिन्यां'; break;
            case 'y': output = 'एका वर्षा'; break;
            case 'yy': output = '%d वर्षां'; break;
        }
    }
    return output.replace(/%d/i, number);
}

var mr = moment.defineLocale('mr', {
    months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
    monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
    monthsParseExact : true,
    weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
    weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
    longDateFormat : {
        LT : 'A h:mm वाजता',
        LTS : 'A h:mm:ss वाजता',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm वाजता',
        LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
    },
    calendar : {
        sameDay : '[आज] LT',
        nextDay : '[उद्या] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[काल] LT',
        lastWeek: '[मागील] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future: '%sमध्ये',
        past: '%sपूर्वी',
        s: relativeTimeMr,
        m: relativeTimeMr,
        mm: relativeTimeMr,
        h: relativeTimeMr,
        hh: relativeTimeMr,
        d: relativeTimeMr,
        dd: relativeTimeMr,
        M: relativeTimeMr,
        MM: relativeTimeMr,
        y: relativeTimeMr,
        yy: relativeTimeMr
    },
    preparse: function (string) {
        return string.replace(/[१२३४५६७८९०]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'रात्री') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'सकाळी') {
            return hour;
        } else if (meridiem === 'दुपारी') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'सायंकाळी') {
            return hour + 12;
        }
    },
    meridiem: function (hour, minute, isLower) {
        if (hour < 4) {
            return 'रात्री';
        } else if (hour < 10) {
            return 'सकाळी';
        } else if (hour < 17) {
            return 'दुपारी';
        } else if (hour < 20) {
            return 'सायंकाळी';
        } else {
            return 'रात्री';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return mr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ms-my.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms-my]
//! note : DEPRECATED, the correct one is [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var msMy = moment.defineLocale('ms-my', {
    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /pagi|tengahari|petang|malam/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'pagi') {
            return hour;
        } else if (meridiem === 'tengahari') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'petang' || meridiem === 'malam') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'pagi';
        } else if (hours < 15) {
            return 'tengahari';
        } else if (hours < 19) {
            return 'petang';
        } else {
            return 'malam';
        }
    },
    calendar : {
        sameDay : '[Hari ini pukul] LT',
        nextDay : '[Esok pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kelmarin pukul] LT',
        lastWeek : 'dddd [lepas pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dalam %s',
        past : '%s yang lepas',
        s : 'beberapa saat',
        m : 'seminit',
        mm : '%d minit',
        h : 'sejam',
        hh : '%d jam',
        d : 'sehari',
        dd : '%d hari',
        M : 'sebulan',
        MM : '%d bulan',
        y : 'setahun',
        yy : '%d tahun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return msMy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ms.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ms = moment.defineLocale('ms', {
    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /pagi|tengahari|petang|malam/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'pagi') {
            return hour;
        } else if (meridiem === 'tengahari') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'petang' || meridiem === 'malam') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'pagi';
        } else if (hours < 15) {
            return 'tengahari';
        } else if (hours < 19) {
            return 'petang';
        } else {
            return 'malam';
        }
    },
    calendar : {
        sameDay : '[Hari ini pukul] LT',
        nextDay : '[Esok pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kelmarin pukul] LT',
        lastWeek : 'dddd [lepas pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dalam %s',
        past : '%s yang lepas',
        s : 'beberapa saat',
        m : 'seminit',
        mm : '%d minit',
        h : 'sejam',
        hh : '%d jam',
        d : 'sehari',
        dd : '%d hari',
        M : 'sebulan',
        MM : '%d bulan',
        y : 'setahun',
        yy : '%d tahun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return ms;

})));


/***/ }),

/***/ "./node_modules/moment/locale/my.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Burmese [my]
//! author : Squar team, mysquar.com
//! author : David Rossellat : https://github.com/gholadr
//! author : Tin Aung Lin : https://github.com/thanyawzinmin

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '၁',
    '2': '၂',
    '3': '၃',
    '4': '၄',
    '5': '၅',
    '6': '၆',
    '7': '၇',
    '8': '၈',
    '9': '၉',
    '0': '၀'
};
var numberMap = {
    '၁': '1',
    '၂': '2',
    '၃': '3',
    '၄': '4',
    '၅': '5',
    '၆': '6',
    '၇': '7',
    '၈': '8',
    '၉': '9',
    '၀': '0'
};

var my = moment.defineLocale('my', {
    months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
    monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
    weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
    weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
    weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

    longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[ယနေ.] LT [မှာ]',
        nextDay: '[မနက်ဖြန်] LT [မှာ]',
        nextWeek: 'dddd LT [မှာ]',
        lastDay: '[မနေ.က] LT [မှာ]',
        lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'လာမည့် %s မှာ',
        past: 'လွန်ခဲ့သော %s က',
        s: 'စက္ကန်.အနည်းငယ်',
        m: 'တစ်မိနစ်',
        mm: '%d မိနစ်',
        h: 'တစ်နာရီ',
        hh: '%d နာရီ',
        d: 'တစ်ရက်',
        dd: '%d ရက်',
        M: 'တစ်လ',
        MM: '%d လ',
        y: 'တစ်နှစ်',
        yy: '%d နှစ်'
    },
    preparse: function (string) {
        return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 1st is the first week of the year.
    }
});

return my;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nb.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Norwegian Bokmål [nb]
//! authors : Espen Hovlandsdal : https://github.com/rexxars
//!           Sigurd Gartmann : https://github.com/sigurdga

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var nb = moment.defineLocale('nb', {
    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
    monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
    monthsParseExact : true,
    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
    weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY [kl.] HH:mm',
        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
    },
    calendar : {
        sameDay: '[i dag kl.] LT',
        nextDay: '[i morgen kl.] LT',
        nextWeek: 'dddd [kl.] LT',
        lastDay: '[i går kl.] LT',
        lastWeek: '[forrige] dddd [kl.] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : '%s siden',
        s : 'noen sekunder',
        m : 'ett minutt',
        mm : '%d minutter',
        h : 'en time',
        hh : '%d timer',
        d : 'en dag',
        dd : '%d dager',
        M : 'en måned',
        MM : '%d måneder',
        y : 'ett år',
        yy : '%d år'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return nb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ne.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nepalese [ne]
//! author : suvash : https://github.com/suvash

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '१',
    '2': '२',
    '3': '३',
    '4': '४',
    '5': '५',
    '6': '६',
    '7': '७',
    '8': '८',
    '9': '९',
    '0': '०'
};
var numberMap = {
    '१': '1',
    '२': '2',
    '३': '3',
    '४': '4',
    '५': '5',
    '६': '6',
    '७': '7',
    '८': '8',
    '९': '9',
    '०': '0'
};

var ne = moment.defineLocale('ne', {
    months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
    monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
    monthsParseExact : true,
    weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
    weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
    weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'Aको h:mm बजे',
        LTS : 'Aको h:mm:ss बजे',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, Aको h:mm बजे',
        LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
    },
    preparse: function (string) {
        return string.replace(/[१२३४५६७८९०]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'राति') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'बिहान') {
            return hour;
        } else if (meridiem === 'दिउँसो') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'साँझ') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 3) {
            return 'राति';
        } else if (hour < 12) {
            return 'बिहान';
        } else if (hour < 16) {
            return 'दिउँसो';
        } else if (hour < 20) {
            return 'साँझ';
        } else {
            return 'राति';
        }
    },
    calendar : {
        sameDay : '[आज] LT',
        nextDay : '[भोलि] LT',
        nextWeek : '[आउँदो] dddd[,] LT',
        lastDay : '[हिजो] LT',
        lastWeek : '[गएको] dddd[,] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%sमा',
        past : '%s अगाडि',
        s : 'केही क्षण',
        m : 'एक मिनेट',
        mm : '%d मिनेट',
        h : 'एक घण्टा',
        hh : '%d घण्टा',
        d : 'एक दिन',
        dd : '%d दिन',
        M : 'एक महिना',
        MM : '%d महिना',
        y : 'एक बर्ष',
        yy : '%d बर्ष'
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return ne;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nl-be.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch (Belgium) [nl-be]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

var nlBe = moment.defineLocale('nl-be', {
    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
    monthsShort : function (m, format) {
        if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots[m.month()];
        } else {
            return monthsShortWithDots[m.month()];
        }
    },

    monthsRegex: monthsRegex,
    monthsShortRegex: monthsRegex,
    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

    monthsParse : monthsParse,
    longMonthsParse : monthsParse,
    shortMonthsParse : monthsParse,

    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[vandaag om] LT',
        nextDay: '[morgen om] LT',
        nextWeek: 'dddd [om] LT',
        lastDay: '[gisteren om] LT',
        lastWeek: '[afgelopen] dddd [om] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'over %s',
        past : '%s geleden',
        s : 'een paar seconden',
        m : 'één minuut',
        mm : '%d minuten',
        h : 'één uur',
        hh : '%d uur',
        d : 'één dag',
        dd : '%d dagen',
        M : 'één maand',
        MM : '%d maanden',
        y : 'één jaar',
        yy : '%d jaar'
    },
    ordinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return nlBe;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch [nl]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

var nl = moment.defineLocale('nl', {
    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
    monthsShort : function (m, format) {
        if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots[m.month()];
        } else {
            return monthsShortWithDots[m.month()];
        }
    },

    monthsRegex: monthsRegex,
    monthsShortRegex: monthsRegex,
    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

    monthsParse : monthsParse,
    longMonthsParse : monthsParse,
    shortMonthsParse : monthsParse,

    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[vandaag om] LT',
        nextDay: '[morgen om] LT',
        nextWeek: 'dddd [om] LT',
        lastDay: '[gisteren om] LT',
        lastWeek: '[afgelopen] dddd [om] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'over %s',
        past : '%s geleden',
        s : 'een paar seconden',
        m : 'één minuut',
        mm : '%d minuten',
        h : 'één uur',
        hh : '%d uur',
        d : 'één dag',
        dd : '%d dagen',
        M : 'één maand',
        MM : '%d maanden',
        y : 'één jaar',
        yy : '%d jaar'
    },
    ordinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return nl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nynorsk [nn]
//! author : https://github.com/mechuwind

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var nn = moment.defineLocale('nn', {
    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
    weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
    weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
    weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY [kl.] H:mm',
        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
    },
    calendar : {
        sameDay: '[I dag klokka] LT',
        nextDay: '[I morgon klokka] LT',
        nextWeek: 'dddd [klokka] LT',
        lastDay: '[I går klokka] LT',
        lastWeek: '[Føregåande] dddd [klokka] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : '%s sidan',
        s : 'nokre sekund',
        m : 'eit minutt',
        mm : '%d minutt',
        h : 'ein time',
        hh : '%d timar',
        d : 'ein dag',
        dd : '%d dagar',
        M : 'ein månad',
        MM : '%d månader',
        y : 'eit år',
        yy : '%d år'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return nn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pa-in.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Punjabi (India) [pa-in]
//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '੧',
    '2': '੨',
    '3': '੩',
    '4': '੪',
    '5': '੫',
    '6': '੬',
    '7': '੭',
    '8': '੮',
    '9': '੯',
    '0': '੦'
};
var numberMap = {
    '੧': '1',
    '੨': '2',
    '੩': '3',
    '੪': '4',
    '੫': '5',
    '੬': '6',
    '੭': '7',
    '੮': '8',
    '੯': '9',
    '੦': '0'
};

var paIn = moment.defineLocale('pa-in', {
    // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
    months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
    monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
    weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
    weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
    weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
    longDateFormat : {
        LT : 'A h:mm ਵਜੇ',
        LTS : 'A h:mm:ss ਵਜੇ',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
        LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
    },
    calendar : {
        sameDay : '[ਅਜ] LT',
        nextDay : '[ਕਲ] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[ਕਲ] LT',
        lastWeek : '[ਪਿਛਲੇ] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ਵਿੱਚ',
        past : '%s ਪਿਛਲੇ',
        s : 'ਕੁਝ ਸਕਿੰਟ',
        m : 'ਇਕ ਮਿੰਟ',
        mm : '%d ਮਿੰਟ',
        h : 'ਇੱਕ ਘੰਟਾ',
        hh : '%d ਘੰਟੇ',
        d : 'ਇੱਕ ਦਿਨ',
        dd : '%d ਦਿਨ',
        M : 'ਇੱਕ ਮਹੀਨਾ',
        MM : '%d ਮਹੀਨੇ',
        y : 'ਇੱਕ ਸਾਲ',
        yy : '%d ਸਾਲ'
    },
    preparse: function (string) {
        return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
    meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'ਰਾਤ') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'ਸਵੇਰ') {
            return hour;
        } else if (meridiem === 'ਦੁਪਹਿਰ') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'ਸ਼ਾਮ') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ਰਾਤ';
        } else if (hour < 10) {
            return 'ਸਵੇਰ';
        } else if (hour < 17) {
            return 'ਦੁਪਹਿਰ';
        } else if (hour < 20) {
            return 'ਸ਼ਾਮ';
        } else {
            return 'ਰਾਤ';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return paIn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Polish [pl]
//! author : Rafal Hirsz : https://github.com/evoL

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');
var monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
function plural(n) {
    return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
}
function translate(number, withoutSuffix, key) {
    var result = number + ' ';
    switch (key) {
        case 'm':
            return withoutSuffix ? 'minuta' : 'minutę';
        case 'mm':
            return result + (plural(number) ? 'minuty' : 'minut');
        case 'h':
            return withoutSuffix  ? 'godzina'  : 'godzinę';
        case 'hh':
            return result + (plural(number) ? 'godziny' : 'godzin');
        case 'MM':
            return result + (plural(number) ? 'miesiące' : 'miesięcy');
        case 'yy':
            return result + (plural(number) ? 'lata' : 'lat');
    }
}

var pl = moment.defineLocale('pl', {
    months : function (momentToFormat, format) {
        if (format === '') {
            // Hack: if format empty we know this is used to generate
            // RegExp by moment. Give then back both valid forms of months
            // in RegExp ready format.
            return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
        } else if (/D MMMM/.test(format)) {
            return monthsSubjective[momentToFormat.month()];
        } else {
            return monthsNominative[momentToFormat.month()];
        }
    },
    monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
    weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
    weekdaysShort : 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
    weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Dziś o] LT',
        nextDay: '[Jutro o] LT',
        nextWeek: '[W] dddd [o] LT',
        lastDay: '[Wczoraj o] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[W zeszłą niedzielę o] LT';
                case 3:
                    return '[W zeszłą środę o] LT';
                case 6:
                    return '[W zeszłą sobotę o] LT';
                default:
                    return '[W zeszły] dddd [o] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'za %s',
        past : '%s temu',
        s : 'kilka sekund',
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : '1 dzień',
        dd : '%d dni',
        M : 'miesiąc',
        MM : translate,
        y : 'rok',
        yy : translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return pl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pt-br.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese (Brazil) [pt-br]
//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var ptBr = moment.defineLocale('pt-br', {
    months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
    weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
    weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
    },
    calendar : {
        sameDay: '[Hoje às] LT',
        nextDay: '[Amanhã às] LT',
        nextWeek: 'dddd [às] LT',
        lastDay: '[Ontem às] LT',
        lastWeek: function () {
            return (this.day() === 0 || this.day() === 6) ?
                '[Último] dddd [às] LT' : // Saturday + Sunday
                '[Última] dddd [às] LT'; // Monday - Friday
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'em %s',
        past : '%s atrás',
        s : 'poucos segundos',
        m : 'um minuto',
        mm : '%d minutos',
        h : 'uma hora',
        hh : '%d horas',
        d : 'um dia',
        dd : '%d dias',
        M : 'um mês',
        MM : '%d meses',
        y : 'um ano',
        yy : '%d anos'
    },
    ordinalParse: /\d{1,2}º/,
    ordinal : '%dº'
});

return ptBr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pt.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese [pt]
//! author : Jefferson : https://github.com/jalex79

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var pt = moment.defineLocale('pt', {
    months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
    weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
    weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY HH:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Hoje às] LT',
        nextDay: '[Amanhã às] LT',
        nextWeek: 'dddd [às] LT',
        lastDay: '[Ontem às] LT',
        lastWeek: function () {
            return (this.day() === 0 || this.day() === 6) ?
                '[Último] dddd [às] LT' : // Saturday + Sunday
                '[Última] dddd [às] LT'; // Monday - Friday
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'em %s',
        past : 'há %s',
        s : 'segundos',
        m : 'um minuto',
        mm : '%d minutos',
        h : 'uma hora',
        hh : '%d horas',
        d : 'um dia',
        dd : '%d dias',
        M : 'um mês',
        MM : '%d meses',
        y : 'um ano',
        yy : '%d anos'
    },
    ordinalParse: /\d{1,2}º/,
    ordinal : '%dº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return pt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ro.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Romanian [ro]
//! author : Vlad Gurdiga : https://github.com/gurdiga
//! author : Valentin Agachi : https://github.com/avaly

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function relativeTimeWithPlural(number, withoutSuffix, key) {
    var format = {
            'mm': 'minute',
            'hh': 'ore',
            'dd': 'zile',
            'MM': 'luni',
            'yy': 'ani'
        },
        separator = ' ';
    if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
        separator = ' de ';
    }
    return number + separator + format[key];
}

var ro = moment.defineLocale('ro', {
    months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
    monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
    weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
    weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd, D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay: '[azi la] LT',
        nextDay: '[mâine la] LT',
        nextWeek: 'dddd [la] LT',
        lastDay: '[ieri la] LT',
        lastWeek: '[fosta] dddd [la] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'peste %s',
        past : '%s în urmă',
        s : 'câteva secunde',
        m : 'un minut',
        mm : relativeTimeWithPlural,
        h : 'o oră',
        hh : relativeTimeWithPlural,
        d : 'o zi',
        dd : relativeTimeWithPlural,
        M : 'o lună',
        MM : relativeTimeWithPlural,
        y : 'un an',
        yy : relativeTimeWithPlural
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return ro;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ru.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Russian [ru]
//! author : Viktorminator : https://github.com/Viktorminator
//! Author : Menelion Elensúle : https://github.com/Oire
//! author : Коренберг Марк : https://github.com/socketpair

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function plural(word, num) {
    var forms = word.split('_');
    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
}
function relativeTimeWithPlural(number, withoutSuffix, key) {
    var format = {
        'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
        'hh': 'час_часа_часов',
        'dd': 'день_дня_дней',
        'MM': 'месяц_месяца_месяцев',
        'yy': 'год_года_лет'
    };
    if (key === 'm') {
        return withoutSuffix ? 'минута' : 'минуту';
    }
    else {
        return number + ' ' + plural(format[key], +number);
    }
}
var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

// http://new.gramota.ru/spravka/rules/139-prop : § 103
// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
var ru = moment.defineLocale('ru', {
    months : {
        format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
        standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
    },
    monthsShort : {
        // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
        format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
        standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
    },
    weekdays : {
        standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
        format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
        isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
    },
    weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
    weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
    monthsParse : monthsParse,
    longMonthsParse : monthsParse,
    shortMonthsParse : monthsParse,

    // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
    monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

    // копия предыдущего
    monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

    // полные названия с падежами
    monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

    // Выражение, которое соотвествует только сокращённым формам
    monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY г.',
        LLL : 'D MMMM YYYY г., HH:mm',
        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
    },
    calendar : {
        sameDay: '[Сегодня в] LT',
        nextDay: '[Завтра в] LT',
        lastDay: '[Вчера в] LT',
        nextWeek: function (now) {
            if (now.week() !== this.week()) {
                switch (this.day()) {
                    case 0:
                        return '[В следующее] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[В следующий] dddd [в] LT';
                    case 3:
                    case 5:
                    case 6:
                        return '[В следующую] dddd [в] LT';
                }
            } else {
                if (this.day() === 2) {
                    return '[Во] dddd [в] LT';
                } else {
                    return '[В] dddd [в] LT';
                }
            }
        },
        lastWeek: function (now) {
            if (now.week() !== this.week()) {
                switch (this.day()) {
                    case 0:
                        return '[В прошлое] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[В прошлый] dddd [в] LT';
                    case 3:
                    case 5:
                    case 6:
                        return '[В прошлую] dddd [в] LT';
                }
            } else {
                if (this.day() === 2) {
                    return '[Во] dddd [в] LT';
                } else {
                    return '[В] dddd [в] LT';
                }
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'через %s',
        past : '%s назад',
        s : 'несколько секунд',
        m : relativeTimeWithPlural,
        mm : relativeTimeWithPlural,
        h : 'час',
        hh : relativeTimeWithPlural,
        d : 'день',
        dd : relativeTimeWithPlural,
        M : 'месяц',
        MM : relativeTimeWithPlural,
        y : 'год',
        yy : relativeTimeWithPlural
    },
    meridiemParse: /ночи|утра|дня|вечера/i,
    isPM : function (input) {
        return /^(дня|вечера)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ночи';
        } else if (hour < 12) {
            return 'утра';
        } else if (hour < 17) {
            return 'дня';
        } else {
            return 'вечера';
        }
    },
    ordinalParse: /\d{1,2}-(й|го|я)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
                return number + '-й';
            case 'D':
                return number + '-го';
            case 'w':
            case 'W':
                return number + '-я';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return ru;

})));


/***/ }),

/***/ "./node_modules/moment/locale/se.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Northern Sami [se]
//! authors : Bård Rolstad Henriksen : https://github.com/karamell

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';



var se = moment.defineLocale('se', {
    months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
    monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
    weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
    weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
    weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'MMMM D. [b.] YYYY',
        LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
        LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
    },
    calendar : {
        sameDay: '[otne ti] LT',
        nextDay: '[ihttin ti] LT',
        nextWeek: 'dddd [ti] LT',
        lastDay: '[ikte ti] LT',
        lastWeek: '[ovddit] dddd [ti] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s geažes',
        past : 'maŋit %s',
        s : 'moadde sekunddat',
        m : 'okta minuhta',
        mm : '%d minuhtat',
        h : 'okta diimmu',
        hh : '%d diimmut',
        d : 'okta beaivi',
        dd : '%d beaivvit',
        M : 'okta mánnu',
        MM : '%d mánut',
        y : 'okta jahki',
        yy : '%d jagit'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return se;

})));


/***/ }),

/***/ "./node_modules/moment/locale/si.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sinhalese [si]
//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


/*jshint -W100*/
var si = moment.defineLocale('si', {
    months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
    monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
    weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
    weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
    weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'a h:mm',
        LTS : 'a h:mm:ss',
        L : 'YYYY/MM/DD',
        LL : 'YYYY MMMM D',
        LLL : 'YYYY MMMM D, a h:mm',
        LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
    },
    calendar : {
        sameDay : '[අද] LT[ට]',
        nextDay : '[හෙට] LT[ට]',
        nextWeek : 'dddd LT[ට]',
        lastDay : '[ඊයේ] LT[ට]',
        lastWeek : '[පසුගිය] dddd LT[ට]',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%sකින්',
        past : '%sකට පෙර',
        s : 'තත්පර කිහිපය',
        m : 'මිනිත්තුව',
        mm : 'මිනිත්තු %d',
        h : 'පැය',
        hh : 'පැය %d',
        d : 'දිනය',
        dd : 'දින %d',
        M : 'මාසය',
        MM : 'මාස %d',
        y : 'වසර',
        yy : 'වසර %d'
    },
    ordinalParse: /\d{1,2} වැනි/,
    ordinal : function (number) {
        return number + ' වැනි';
    },
    meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
    isPM : function (input) {
        return input === 'ප.ව.' || input === 'පස් වරු';
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'ප.ව.' : 'පස් වරු';
        } else {
            return isLower ? 'පෙ.ව.' : 'පෙර වරු';
        }
    }
});

return si;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovak [sk]
//! author : Martin Minka : https://github.com/k2s
//! based on work of petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');
var monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
function plural(n) {
    return (n > 1) && (n < 5);
}
function translate(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minúty' : 'minút');
            } else {
                return result + 'minútami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodín');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dni' : 'dní');
            } else {
                return result + 'dňami';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'mesiace' : 'mesiacov');
            } else {
                return result + 'mesiacmi';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'rokov');
            } else {
                return result + 'rokmi';
            }
            break;
    }
}

var sk = moment.defineLocale('sk', {
    months : months,
    monthsShort : monthsShort,
    weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
    weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
    weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
    longDateFormat : {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay: '[dnes o] LT',
        nextDay: '[zajtra o] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[v nedeľu o] LT';
                case 1:
                case 2:
                    return '[v] dddd [o] LT';
                case 3:
                    return '[v stredu o] LT';
                case 4:
                    return '[vo štvrtok o] LT';
                case 5:
                    return '[v piatok o] LT';
                case 6:
                    return '[v sobotu o] LT';
            }
        },
        lastDay: '[včera o] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[minulú nedeľu o] LT';
                case 1:
                case 2:
                    return '[minulý] dddd [o] LT';
                case 3:
                    return '[minulú stredu o] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [o] LT';
                case 6:
                    return '[minulú sobotu o] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'za %s',
        past : 'pred %s',
        s : translate,
        m : translate,
        mm : translate,
        h : translate,
        hh : translate,
        d : translate,
        dd : translate,
        M : translate,
        MM : translate,
        y : translate,
        yy : translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return sk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovenian [sl]
//! author : Robert Sedovšek : https://github.com/sedovsek

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
        case 'm':
            return withoutSuffix ? 'ena minuta' : 'eno minuto';
        case 'mm':
            if (number === 1) {
                result += withoutSuffix ? 'minuta' : 'minuto';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
            } else {
                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'ena ura' : 'eno uro';
        case 'hh':
            if (number === 1) {
                result += withoutSuffix ? 'ura' : 'uro';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'uri' : 'urama';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'ure' : 'urami';
            } else {
                result += withoutSuffix || isFuture ? 'ur' : 'urami';
            }
            return result;
        case 'd':
            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
        case 'dd':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
            } else {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
            }
            return result;
        case 'M':
            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
        case 'MM':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
            } else {
                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
            }
            return result;
        case 'y':
            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
        case 'yy':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'leto' : 'letom';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'leta' : 'leti';
            } else {
                result += withoutSuffix || isFuture ? 'let' : 'leti';
            }
            return result;
    }
}

var sl = moment.defineLocale('sl', {
    months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
    weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
    weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[danes ob] LT',
        nextDay  : '[jutri ob] LT',

        nextWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[v] [nedeljo] [ob] LT';
                case 3:
                    return '[v] [sredo] [ob] LT';
                case 6:
                    return '[v] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[v] dddd [ob] LT';
            }
        },
        lastDay  : '[včeraj ob] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[prejšnjo] [nedeljo] [ob] LT';
                case 3:
                    return '[prejšnjo] [sredo] [ob] LT';
                case 6:
                    return '[prejšnjo] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prejšnji] dddd [ob] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'čez %s',
        past   : 'pred %s',
        s      : processRelativeTime,
        m      : processRelativeTime,
        mm     : processRelativeTime,
        h      : processRelativeTime,
        hh     : processRelativeTime,
        d      : processRelativeTime,
        dd     : processRelativeTime,
        M      : processRelativeTime,
        MM     : processRelativeTime,
        y      : processRelativeTime,
        yy     : processRelativeTime
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return sl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sq.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Albanian [sq]
//! author : Flakërim Ismani : https://github.com/flakerimi
//! author : Menelion Elensúle : https://github.com/Oire
//! author : Oerd Cukalla : https://github.com/oerd

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var sq = moment.defineLocale('sq', {
    months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
    monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
    weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
    weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
    weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
    weekdaysParseExact : true,
    meridiemParse: /PD|MD/,
    isPM: function (input) {
        return input.charAt(0) === 'M';
    },
    meridiem : function (hours, minutes, isLower) {
        return hours < 12 ? 'PD' : 'MD';
    },
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Sot në] LT',
        nextDay : '[Nesër në] LT',
        nextWeek : 'dddd [në] LT',
        lastDay : '[Dje në] LT',
        lastWeek : 'dddd [e kaluar në] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'në %s',
        past : '%s më parë',
        s : 'disa sekonda',
        m : 'një minutë',
        mm : '%d minuta',
        h : 'një orë',
        hh : '%d orë',
        d : 'një ditë',
        dd : '%d ditë',
        M : 'një muaj',
        MM : '%d muaj',
        y : 'një vit',
        yy : '%d vite'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return sq;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sr-cyrl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian Cyrillic [sr-cyrl]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var translator = {
    words: { //Different grammatical cases
        m: ['један минут', 'једне минуте'],
        mm: ['минут', 'минуте', 'минута'],
        h: ['један сат', 'једног сата'],
        hh: ['сат', 'сата', 'сати'],
        dd: ['дан', 'дана', 'дана'],
        MM: ['месец', 'месеца', 'месеци'],
        yy: ['година', 'године', 'година']
    },
    correctGrammaticalCase: function (number, wordKey) {
        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
    },
    translate: function (number, withoutSuffix, key) {
        var wordKey = translator.words[key];
        if (key.length === 1) {
            return withoutSuffix ? wordKey[0] : wordKey[1];
        } else {
            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
        }
    }
};

var srCyrl = moment.defineLocale('sr-cyrl', {
    months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
    monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
    monthsParseExact: true,
    weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
    weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
    weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm'
    },
    calendar: {
        sameDay: '[данас у] LT',
        nextDay: '[сутра у] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[у] [недељу] [у] LT';
                case 3:
                    return '[у] [среду] [у] LT';
                case 6:
                    return '[у] [суботу] [у] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[у] dddd [у] LT';
            }
        },
        lastDay  : '[јуче у] LT',
        lastWeek : function () {
            var lastWeekDays = [
                '[прошле] [недеље] [у] LT',
                '[прошлог] [понедељка] [у] LT',
                '[прошлог] [уторка] [у] LT',
                '[прошле] [среде] [у] LT',
                '[прошлог] [четвртка] [у] LT',
                '[прошлог] [петка] [у] LT',
                '[прошле] [суботе] [у] LT'
            ];
            return lastWeekDays[this.day()];
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'за %s',
        past   : 'пре %s',
        s      : 'неколико секунди',
        m      : translator.translate,
        mm     : translator.translate,
        h      : translator.translate,
        hh     : translator.translate,
        d      : 'дан',
        dd     : translator.translate,
        M      : 'месец',
        MM     : translator.translate,
        y      : 'годину',
        yy     : translator.translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return srCyrl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian [sr]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var translator = {
    words: { //Different grammatical cases
        m: ['jedan minut', 'jedne minute'],
        mm: ['minut', 'minute', 'minuta'],
        h: ['jedan sat', 'jednog sata'],
        hh: ['sat', 'sata', 'sati'],
        dd: ['dan', 'dana', 'dana'],
        MM: ['mesec', 'meseca', 'meseci'],
        yy: ['godina', 'godine', 'godina']
    },
    correctGrammaticalCase: function (number, wordKey) {
        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
    },
    translate: function (number, withoutSuffix, key) {
        var wordKey = translator.words[key];
        if (key.length === 1) {
            return withoutSuffix ? wordKey[0] : wordKey[1];
        } else {
            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
        }
    }
};

var sr = moment.defineLocale('sr', {
    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
    weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm'
    },
    calendar: {
        sameDay: '[danas u] LT',
        nextDay: '[sutra u] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedelju] [u] LT';
                case 3:
                    return '[u] [sredu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[juče u] LT',
        lastWeek : function () {
            var lastWeekDays = [
                '[prošle] [nedelje] [u] LT',
                '[prošlog] [ponedeljka] [u] LT',
                '[prošlog] [utorka] [u] LT',
                '[prošle] [srede] [u] LT',
                '[prošlog] [četvrtka] [u] LT',
                '[prošlog] [petka] [u] LT',
                '[prošle] [subote] [u] LT'
            ];
            return lastWeekDays[this.day()];
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'pre %s',
        s      : 'nekoliko sekundi',
        m      : translator.translate,
        mm     : translator.translate,
        h      : translator.translate,
        hh     : translator.translate,
        d      : 'dan',
        dd     : translator.translate,
        M      : 'mesec',
        MM     : translator.translate,
        y      : 'godinu',
        yy     : translator.translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return sr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ss.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : siSwati [ss]
//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';



var ss = moment.defineLocale('ss', {
    months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
    monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
    weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
    weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
    weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Namuhla nga] LT',
        nextDay : '[Kusasa nga] LT',
        nextWeek : 'dddd [nga] LT',
        lastDay : '[Itolo nga] LT',
        lastWeek : 'dddd [leliphelile] [nga] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'nga %s',
        past : 'wenteka nga %s',
        s : 'emizuzwana lomcane',
        m : 'umzuzu',
        mm : '%d emizuzu',
        h : 'lihora',
        hh : '%d emahora',
        d : 'lilanga',
        dd : '%d emalanga',
        M : 'inyanga',
        MM : '%d tinyanga',
        y : 'umnyaka',
        yy : '%d iminyaka'
    },
    meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'ekuseni';
        } else if (hours < 15) {
            return 'emini';
        } else if (hours < 19) {
            return 'entsambama';
        } else {
            return 'ebusuku';
        }
    },
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'ekuseni') {
            return hour;
        } else if (meridiem === 'emini') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
            if (hour === 0) {
                return 0;
            }
            return hour + 12;
        }
    },
    ordinalParse: /\d{1,2}/,
    ordinal : '%d',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return ss;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sv.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swedish [sv]
//! author : Jens Alm : https://github.com/ulmus

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var sv = moment.defineLocale('sv', {
    months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
    weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
    weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
    weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [kl.] HH:mm',
        LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
        lll : 'D MMM YYYY HH:mm',
        llll : 'ddd D MMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Idag] LT',
        nextDay: '[Imorgon] LT',
        lastDay: '[Igår] LT',
        nextWeek: '[På] dddd LT',
        lastWeek: '[I] dddd[s] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : 'för %s sedan',
        s : 'några sekunder',
        m : 'en minut',
        mm : '%d minuter',
        h : 'en timme',
        hh : '%d timmar',
        d : 'en dag',
        dd : '%d dagar',
        M : 'en månad',
        MM : '%d månader',
        y : 'ett år',
        yy : '%d år'
    },
    ordinalParse: /\d{1,2}(e|a)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'e' :
            (b === 1) ? 'a' :
            (b === 2) ? 'a' :
            (b === 3) ? 'e' : 'e';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return sv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sw.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swahili [sw]
//! author : Fahad Kassim : https://github.com/fadsel

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var sw = moment.defineLocale('sw', {
    months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
    weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
    weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
    weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[leo saa] LT',
        nextDay : '[kesho saa] LT',
        nextWeek : '[wiki ijayo] dddd [saat] LT',
        lastDay : '[jana] LT',
        lastWeek : '[wiki iliyopita] dddd [saat] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s baadaye',
        past : 'tokea %s',
        s : 'hivi punde',
        m : 'dakika moja',
        mm : 'dakika %d',
        h : 'saa limoja',
        hh : 'masaa %d',
        d : 'siku moja',
        dd : 'masiku %d',
        M : 'mwezi mmoja',
        MM : 'miezi %d',
        y : 'mwaka mmoja',
        yy : 'miaka %d'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return sw;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ta.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tamil [ta]
//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var symbolMap = {
    '1': '௧',
    '2': '௨',
    '3': '௩',
    '4': '௪',
    '5': '௫',
    '6': '௬',
    '7': '௭',
    '8': '௮',
    '9': '௯',
    '0': '௦'
};
var numberMap = {
    '௧': '1',
    '௨': '2',
    '௩': '3',
    '௪': '4',
    '௫': '5',
    '௬': '6',
    '௭': '7',
    '௮': '8',
    '௯': '9',
    '௦': '0'
};

var ta = moment.defineLocale('ta', {
    months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
    monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
    weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
    weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
    weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, HH:mm',
        LLLL : 'dddd, D MMMM YYYY, HH:mm'
    },
    calendar : {
        sameDay : '[இன்று] LT',
        nextDay : '[நாளை] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[நேற்று] LT',
        lastWeek : '[கடந்த வாரம்] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s இல்',
        past : '%s முன்',
        s : 'ஒரு சில விநாடிகள்',
        m : 'ஒரு நிமிடம்',
        mm : '%d நிமிடங்கள்',
        h : 'ஒரு மணி நேரம்',
        hh : '%d மணி நேரம்',
        d : 'ஒரு நாள்',
        dd : '%d நாட்கள்',
        M : 'ஒரு மாதம்',
        MM : '%d மாதங்கள்',
        y : 'ஒரு வருடம்',
        yy : '%d ஆண்டுகள்'
    },
    ordinalParse: /\d{1,2}வது/,
    ordinal : function (number) {
        return number + 'வது';
    },
    preparse: function (string) {
        return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
            return numberMap[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        });
    },
    // refer http://ta.wikipedia.org/s/1er1
    meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
    meridiem : function (hour, minute, isLower) {
        if (hour < 2) {
            return ' யாமம்';
        } else if (hour < 6) {
            return ' வைகறை';  // வைகறை
        } else if (hour < 10) {
            return ' காலை'; // காலை
        } else if (hour < 14) {
            return ' நண்பகல்'; // நண்பகல்
        } else if (hour < 18) {
            return ' எற்பாடு'; // எற்பாடு
        } else if (hour < 22) {
            return ' மாலை'; // மாலை
        } else {
            return ' யாமம்';
        }
    },
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'யாமம்') {
            return hour < 2 ? hour : hour + 12;
        } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
            return hour;
        } else if (meridiem === 'நண்பகல்') {
            return hour >= 10 ? hour : hour + 12;
        } else {
            return hour + 12;
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return ta;

})));


/***/ }),

/***/ "./node_modules/moment/locale/te.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Telugu [te]
//! author : Krishna Chaitanya Thota : https://github.com/kcthota

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var te = moment.defineLocale('te', {
    months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
    monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
    monthsParseExact : true,
    weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
    weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
    weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
    longDateFormat : {
        LT : 'A h:mm',
        LTS : 'A h:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm',
        LLLL : 'dddd, D MMMM YYYY, A h:mm'
    },
    calendar : {
        sameDay : '[నేడు] LT',
        nextDay : '[రేపు] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[నిన్న] LT',
        lastWeek : '[గత] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s లో',
        past : '%s క్రితం',
        s : 'కొన్ని క్షణాలు',
        m : 'ఒక నిమిషం',
        mm : '%d నిమిషాలు',
        h : 'ఒక గంట',
        hh : '%d గంటలు',
        d : 'ఒక రోజు',
        dd : '%d రోజులు',
        M : 'ఒక నెల',
        MM : '%d నెలలు',
        y : 'ఒక సంవత్సరం',
        yy : '%d సంవత్సరాలు'
    },
    ordinalParse : /\d{1,2}వ/,
    ordinal : '%dవ',
    meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'రాత్రి') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'ఉదయం') {
            return hour;
        } else if (meridiem === 'మధ్యాహ్నం') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'సాయంత్రం') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'రాత్రి';
        } else if (hour < 10) {
            return 'ఉదయం';
        } else if (hour < 17) {
            return 'మధ్యాహ్నం';
        } else if (hour < 20) {
            return 'సాయంత్రం';
        } else {
            return 'రాత్రి';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

return te;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tet.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tetun Dili (East Timor) [tet]
//! author : Joshua Brooks : https://github.com/joshbrooks
//! author : Onorio De J. Afonso : https://github.com/marobo

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var tet = moment.defineLocale('tet', {
    months : 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez'.split('_'),
    weekdays : 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu'.split('_'),
    weekdaysShort : 'Dom_Seg_Ters_Kua_Kint_Sext_Sab'.split('_'),
    weekdaysMin : 'Do_Seg_Te_Ku_Ki_Sex_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Ohin iha] LT',
        nextDay: '[Aban iha] LT',
        nextWeek: 'dddd [iha] LT',
        lastDay: '[Horiseik iha] LT',
        lastWeek: 'dddd [semana kotuk] [iha] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'iha %s',
        past : '%s liuba',
        s : 'minutu balun',
        m : 'minutu ida',
        mm : 'minutus %d',
        h : 'horas ida',
        hh : 'horas %d',
        d : 'loron ida',
        dd : 'loron %d',
        M : 'fulan ida',
        MM : 'fulan %d',
        y : 'tinan ida',
        yy : 'tinan %d'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return tet;

})));


/***/ }),

/***/ "./node_modules/moment/locale/th.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Thai [th]
//! author : Kridsada Thanabulpong : https://github.com/sirn

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var th = moment.defineLocale('th', {
    months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
    monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
    monthsParseExact: true,
    weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
    weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
    weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'YYYY/MM/DD',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY เวลา H:mm',
        LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
    },
    meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
    isPM: function (input) {
        return input === 'หลังเที่ยง';
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ก่อนเที่ยง';
        } else {
            return 'หลังเที่ยง';
        }
    },
    calendar : {
        sameDay : '[วันนี้ เวลา] LT',
        nextDay : '[พรุ่งนี้ เวลา] LT',
        nextWeek : 'dddd[หน้า เวลา] LT',
        lastDay : '[เมื่อวานนี้ เวลา] LT',
        lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'อีก %s',
        past : '%sที่แล้ว',
        s : 'ไม่กี่วินาที',
        m : '1 นาที',
        mm : '%d นาที',
        h : '1 ชั่วโมง',
        hh : '%d ชั่วโมง',
        d : '1 วัน',
        dd : '%d วัน',
        M : '1 เดือน',
        MM : '%d เดือน',
        y : '1 ปี',
        yy : '%d ปี'
    }
});

return th;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tl-ph.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tagalog (Philippines) [tl-ph]
//! author : Dan Hagman : https://github.com/hagmandan

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var tlPh = moment.defineLocale('tl-ph', {
    months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
    monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
    weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
    weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
    weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'MM/D/YYYY',
        LL : 'MMMM D, YYYY',
        LLL : 'MMMM D, YYYY HH:mm',
        LLLL : 'dddd, MMMM DD, YYYY HH:mm'
    },
    calendar : {
        sameDay: 'LT [ngayong araw]',
        nextDay: '[Bukas ng] LT',
        nextWeek: 'LT [sa susunod na] dddd',
        lastDay: 'LT [kahapon]',
        lastWeek: 'LT [noong nakaraang] dddd',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'sa loob ng %s',
        past : '%s ang nakalipas',
        s : 'ilang segundo',
        m : 'isang minuto',
        mm : '%d minuto',
        h : 'isang oras',
        hh : '%d oras',
        d : 'isang araw',
        dd : '%d araw',
        M : 'isang buwan',
        MM : '%d buwan',
        y : 'isang taon',
        yy : '%d taon'
    },
    ordinalParse: /\d{1,2}/,
    ordinal : function (number) {
        return number;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return tlPh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tlh.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Klingon [tlh]
//! author : Dominika Kruk : https://github.com/amaranthrose

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

function translateFuture(output) {
    var time = output;
    time = (output.indexOf('jaj') !== -1) ?
    time.slice(0, -3) + 'leS' :
    (output.indexOf('jar') !== -1) ?
    time.slice(0, -3) + 'waQ' :
    (output.indexOf('DIS') !== -1) ?
    time.slice(0, -3) + 'nem' :
    time + ' pIq';
    return time;
}

function translatePast(output) {
    var time = output;
    time = (output.indexOf('jaj') !== -1) ?
    time.slice(0, -3) + 'Hu’' :
    (output.indexOf('jar') !== -1) ?
    time.slice(0, -3) + 'wen' :
    (output.indexOf('DIS') !== -1) ?
    time.slice(0, -3) + 'ben' :
    time + ' ret';
    return time;
}

function translate(number, withoutSuffix, string, isFuture) {
    var numberNoun = numberAsNoun(number);
    switch (string) {
        case 'mm':
            return numberNoun + ' tup';
        case 'hh':
            return numberNoun + ' rep';
        case 'dd':
            return numberNoun + ' jaj';
        case 'MM':
            return numberNoun + ' jar';
        case 'yy':
            return numberNoun + ' DIS';
    }
}

function numberAsNoun(number) {
    var hundred = Math.floor((number % 1000) / 100),
    ten = Math.floor((number % 100) / 10),
    one = number % 10,
    word = '';
    if (hundred > 0) {
        word += numbersNouns[hundred] + 'vatlh';
    }
    if (ten > 0) {
        word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
    }
    if (one > 0) {
        word += ((word !== '') ? ' ' : '') + numbersNouns[one];
    }
    return (word === '') ? 'pagh' : word;
}

var tlh = moment.defineLocale('tlh', {
    months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
    monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
    monthsParseExact : true,
    weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[DaHjaj] LT',
        nextDay: '[wa’leS] LT',
        nextWeek: 'LLL',
        lastDay: '[wa’Hu’] LT',
        lastWeek: 'LLL',
        sameElse: 'L'
    },
    relativeTime : {
        future : translateFuture,
        past : translatePast,
        s : 'puS lup',
        m : 'wa’ tup',
        mm : translate,
        h : 'wa’ rep',
        hh : translate,
        d : 'wa’ jaj',
        dd : translate,
        M : 'wa’ jar',
        MM : translate,
        y : 'wa’ DIS',
        yy : translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return tlh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tr.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkish [tr]
//! authors : Erhan Gundogan : https://github.com/erhangundogan,
//!           Burak Yiğit Kaya: https://github.com/BYK

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var suffixes = {
    1: '\'inci',
    5: '\'inci',
    8: '\'inci',
    70: '\'inci',
    80: '\'inci',
    2: '\'nci',
    7: '\'nci',
    20: '\'nci',
    50: '\'nci',
    3: '\'üncü',
    4: '\'üncü',
    100: '\'üncü',
    6: '\'ncı',
    9: '\'uncu',
    10: '\'uncu',
    30: '\'uncu',
    60: '\'ıncı',
    90: '\'ıncı'
};

var tr = moment.defineLocale('tr', {
    months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
    monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
    weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
    weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
    weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[bugün saat] LT',
        nextDay : '[yarın saat] LT',
        nextWeek : '[haftaya] dddd [saat] LT',
        lastDay : '[dün] LT',
        lastWeek : '[geçen hafta] dddd [saat] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s sonra',
        past : '%s önce',
        s : 'birkaç saniye',
        m : 'bir dakika',
        mm : '%d dakika',
        h : 'bir saat',
        hh : '%d saat',
        d : 'bir gün',
        dd : '%d gün',
        M : 'bir ay',
        MM : '%d ay',
        y : 'bir yıl',
        yy : '%d yıl'
    },
    ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
    ordinal : function (number) {
        if (number === 0) {  // special case for zero
            return number + '\'ıncı';
        }
        var a = number % 10,
            b = number % 100 - a,
            c = number >= 100 ? 100 : null;
        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return tr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzl.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Talossan [tzl]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v
//! author : Iustì Canun

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
// This is currently too difficult (maybe even impossible) to add.
var tzl = moment.defineLocale('tzl', {
    months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
    weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
    weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
    weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM [dallas] YYYY',
        LLL : 'D. MMMM [dallas] YYYY HH.mm',
        LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
    },
    meridiemParse: /d\'o|d\'a/i,
    isPM : function (input) {
        return 'd\'o' === input.toLowerCase();
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'd\'o' : 'D\'O';
        } else {
            return isLower ? 'd\'a' : 'D\'A';
        }
    },
    calendar : {
        sameDay : '[oxhi à] LT',
        nextDay : '[demà à] LT',
        nextWeek : 'dddd [à] LT',
        lastDay : '[ieiri à] LT',
        lastWeek : '[sür el] dddd [lasteu à] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'osprei %s',
        past : 'ja%s',
        s : processRelativeTime,
        m : processRelativeTime,
        mm : processRelativeTime,
        h : processRelativeTime,
        hh : processRelativeTime,
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        's': ['viensas secunds', '\'iensas secunds'],
        'm': ['\'n míut', '\'iens míut'],
        'mm': [number + ' míuts', '' + number + ' míuts'],
        'h': ['\'n þora', '\'iensa þora'],
        'hh': [number + ' þoras', '' + number + ' þoras'],
        'd': ['\'n ziua', '\'iensa ziua'],
        'dd': [number + ' ziuas', '' + number + ' ziuas'],
        'M': ['\'n mes', '\'iens mes'],
        'MM': [number + ' mesen', '' + number + ' mesen'],
        'y': ['\'n ar', '\'iens ar'],
        'yy': [number + ' ars', '' + number + ' ars']
    };
    return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
}

return tzl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzm-latn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight Latin [tzm-latn]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var tzmLatn = moment.defineLocale('tzm-latn', {
    months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
    monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
    weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
    weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
    weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[asdkh g] LT',
        nextDay: '[aska g] LT',
        nextWeek: 'dddd [g] LT',
        lastDay: '[assant g] LT',
        lastWeek: 'dddd [g] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'dadkh s yan %s',
        past : 'yan %s',
        s : 'imik',
        m : 'minuḍ',
        mm : '%d minuḍ',
        h : 'saɛa',
        hh : '%d tassaɛin',
        d : 'ass',
        dd : '%d ossan',
        M : 'ayowr',
        MM : '%d iyyirn',
        y : 'asgas',
        yy : '%d isgasn'
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return tzmLatn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzm.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight [tzm]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var tzm = moment.defineLocale('tzm', {
    months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
    monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
    weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
    weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
    weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS: 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
        nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
        nextWeek: 'dddd [ⴴ] LT',
        lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
        lastWeek: 'dddd [ⴴ] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
        past : 'ⵢⴰⵏ %s',
        s : 'ⵉⵎⵉⴽ',
        m : 'ⵎⵉⵏⵓⴺ',
        mm : '%d ⵎⵉⵏⵓⴺ',
        h : 'ⵙⴰⵄⴰ',
        hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
        d : 'ⴰⵙⵙ',
        dd : '%d oⵙⵙⴰⵏ',
        M : 'ⴰⵢoⵓⵔ',
        MM : '%d ⵉⵢⵢⵉⵔⵏ',
        y : 'ⴰⵙⴳⴰⵙ',
        yy : '%d ⵉⵙⴳⴰⵙⵏ'
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

return tzm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Ukrainian [uk]
//! author : zemlanin : https://github.com/zemlanin
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


function plural(word, num) {
    var forms = word.split('_');
    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
}
function relativeTimeWithPlural(number, withoutSuffix, key) {
    var format = {
        'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
        'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
        'dd': 'день_дні_днів',
        'MM': 'місяць_місяці_місяців',
        'yy': 'рік_роки_років'
    };
    if (key === 'm') {
        return withoutSuffix ? 'хвилина' : 'хвилину';
    }
    else if (key === 'h') {
        return withoutSuffix ? 'година' : 'годину';
    }
    else {
        return number + ' ' + plural(format[key], +number);
    }
}
function weekdaysCaseReplace(m, format) {
    var weekdays = {
        'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
        'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
        'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
    },
    nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
        'accusative' :
        ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
            'genitive' :
            'nominative');
    return weekdays[nounCase][m.day()];
}
function processHoursFunction(str) {
    return function () {
        return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
    };
}

var uk = moment.defineLocale('uk', {
    months : {
        'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
        'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
    },
    monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
    weekdays : weekdaysCaseReplace,
    weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY р.',
        LLL : 'D MMMM YYYY р., HH:mm',
        LLLL : 'dddd, D MMMM YYYY р., HH:mm'
    },
    calendar : {
        sameDay: processHoursFunction('[Сьогодні '),
        nextDay: processHoursFunction('[Завтра '),
        lastDay: processHoursFunction('[Вчора '),
        nextWeek: processHoursFunction('[У] dddd ['),
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return processHoursFunction('[Минулої] dddd [').call(this);
                case 1:
                case 2:
                case 4:
                    return processHoursFunction('[Минулого] dddd [').call(this);
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'за %s',
        past : '%s тому',
        s : 'декілька секунд',
        m : relativeTimeWithPlural,
        mm : relativeTimeWithPlural,
        h : 'годину',
        hh : relativeTimeWithPlural,
        d : 'день',
        dd : relativeTimeWithPlural,
        M : 'місяць',
        MM : relativeTimeWithPlural,
        y : 'рік',
        yy : relativeTimeWithPlural
    },
    // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
    meridiemParse: /ночі|ранку|дня|вечора/,
    isPM: function (input) {
        return /^(дня|вечора)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'ночі';
        } else if (hour < 12) {
            return 'ранку';
        } else if (hour < 17) {
            return 'дня';
        } else {
            return 'вечора';
        }
    },
    ordinalParse: /\d{1,2}-(й|го)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return number + '-й';
            case 'D':
                return number + '-го';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

return uk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uz.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek [uz]
//! author : Sardor Muminov : https://github.com/muminoff

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var uz = moment.defineLocale('uz', {
    months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
    monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
    weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
    weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
    weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'D MMMM YYYY, dddd HH:mm'
    },
    calendar : {
        sameDay : '[Бугун соат] LT [да]',
        nextDay : '[Эртага] LT [да]',
        nextWeek : 'dddd [куни соат] LT [да]',
        lastDay : '[Кеча соат] LT [да]',
        lastWeek : '[Утган] dddd [куни соат] LT [да]',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'Якин %s ичида',
        past : 'Бир неча %s олдин',
        s : 'фурсат',
        m : 'бир дакика',
        mm : '%d дакика',
        h : 'бир соат',
        hh : '%d соат',
        d : 'бир кун',
        dd : '%d кун',
        M : 'бир ой',
        MM : '%d ой',
        y : 'бир йил',
        yy : '%d йил'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 4th is the first week of the year.
    }
});

return uz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/vi.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Vietnamese [vi]
//! author : Bang Nguyen : https://github.com/bangnk

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var vi = moment.defineLocale('vi', {
    months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
    monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
    monthsParseExact : true,
    weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
    weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
    weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
    weekdaysParseExact : true,
    meridiemParse: /sa|ch/i,
    isPM : function (input) {
        return /^ch$/i.test(input);
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 12) {
            return isLower ? 'sa' : 'SA';
        } else {
            return isLower ? 'ch' : 'CH';
        }
    },
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM [năm] YYYY',
        LLL : 'D MMMM [năm] YYYY HH:mm',
        LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
        l : 'DD/M/YYYY',
        ll : 'D MMM YYYY',
        lll : 'D MMM YYYY HH:mm',
        llll : 'ddd, D MMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Hôm nay lúc] LT',
        nextDay: '[Ngày mai lúc] LT',
        nextWeek: 'dddd [tuần tới lúc] LT',
        lastDay: '[Hôm qua lúc] LT',
        lastWeek: 'dddd [tuần rồi lúc] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s tới',
        past : '%s trước',
        s : 'vài giây',
        m : 'một phút',
        mm : '%d phút',
        h : 'một giờ',
        hh : '%d giờ',
        d : 'một ngày',
        dd : '%d ngày',
        M : 'một tháng',
        MM : '%d tháng',
        y : 'một năm',
        yy : '%d năm'
    },
    ordinalParse: /\d{1,2}/,
    ordinal : function (number) {
        return number;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return vi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/x-pseudo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Pseudo [x-pseudo]
//! author : Andrew Hood : https://github.com/andrewhood125

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var xPseudo = moment.defineLocale('x-pseudo', {
    months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
    monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
    monthsParseExact : true,
    weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
    weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
    weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[T~ódá~ý át] LT',
        nextDay : '[T~ómó~rró~w át] LT',
        nextWeek : 'dddd [át] LT',
        lastDay : '[Ý~ést~érdá~ý át] LT',
        lastWeek : '[L~ást] dddd [át] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'í~ñ %s',
        past : '%s á~gó',
        s : 'á ~féw ~sécó~ñds',
        m : 'á ~míñ~úté',
        mm : '%d m~íñú~tés',
        h : 'á~ñ hó~úr',
        hh : '%d h~óúrs',
        d : 'á ~dáý',
        dd : '%d d~áýs',
        M : 'á ~móñ~th',
        MM : '%d m~óñt~hs',
        y : 'á ~ýéár',
        yy : '%d ý~éárs'
    },
    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return xPseudo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/yo.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Yoruba Nigeria [yo]
//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var yo = moment.defineLocale('yo', {
    months : 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
    monthsShort : 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
    weekdays : 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
    weekdaysShort : 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
    weekdaysMin : 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Ònì ni] LT',
        nextDay : '[Ọ̀la ni] LT',
        nextWeek : 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
        lastDay : '[Àna ni] LT',
        lastWeek : 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ní %s',
        past : '%s kọjá',
        s : 'ìsẹjú aayá die',
        m : 'ìsẹjú kan',
        mm : 'ìsẹjú %d',
        h : 'wákati kan',
        hh : 'wákati %d',
        d : 'ọjọ́ kan',
        dd : 'ọjọ́ %d',
        M : 'osù kan',
        MM : 'osù %d',
        y : 'ọdún kan',
        yy : 'ọdún %d'
    },
    ordinalParse : /ọjọ́\s\d{1,2}/,
    ordinal : 'ọjọ́ %d',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4 // The week that contains Jan 4th is the first week of the year.
    }
});

return yo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-cn.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (China) [zh-cn]
//! author : suupic : https://github.com/suupic
//! author : Zeno Zeng : https://github.com/zenozeng

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var zhCn = moment.defineLocale('zh-cn', {
    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
    weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
    longDateFormat : {
        LT : 'Ah点mm分',
        LTS : 'Ah点m分s秒',
        L : 'YYYY-MM-DD',
        LL : 'YYYY年MMMD日',
        LLL : 'YYYY年MMMD日Ah点mm分',
        LLLL : 'YYYY年MMMD日ddddAh点mm分',
        l : 'YYYY-MM-DD',
        ll : 'YYYY年MMMD日',
        lll : 'YYYY年MMMD日Ah点mm分',
        llll : 'YYYY年MMMD日ddddAh点mm分'
    },
    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === '凌晨' || meridiem === '早上' ||
                meridiem === '上午') {
            return hour;
        } else if (meridiem === '下午' || meridiem === '晚上') {
            return hour + 12;
        } else {
            // '中午'
            return hour >= 11 ? hour : hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return '凌晨';
        } else if (hm < 900) {
            return '早上';
        } else if (hm < 1130) {
            return '上午';
        } else if (hm < 1230) {
            return '中午';
        } else if (hm < 1800) {
            return '下午';
        } else {
            return '晚上';
        }
    },
    calendar : {
        sameDay : function () {
            return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
        },
        nextDay : function () {
            return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
        },
        lastDay : function () {
            return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
        },
        nextWeek : function () {
            var startOfWeek, prefix;
            startOfWeek = moment().startOf('week');
            prefix = this.diff(startOfWeek, 'days') >= 7 ? '[下]' : '[本]';
            return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
        },
        lastWeek : function () {
            var startOfWeek, prefix;
            startOfWeek = moment().startOf('week');
            prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
            return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
        },
        sameElse : 'LL'
    },
    ordinalParse: /\d{1,2}(日|月|周)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '日';
            case 'M':
                return number + '月';
            case 'w':
            case 'W':
                return number + '周';
            default:
                return number;
        }
    },
    relativeTime : {
        future : '%s内',
        past : '%s前',
        s : '几秒',
        m : '1 分钟',
        mm : '%d 分钟',
        h : '1 小时',
        hh : '%d 小时',
        d : '1 天',
        dd : '%d 天',
        M : '1 个月',
        MM : '%d 个月',
        y : '1 年',
        yy : '%d 年'
    },
    week : {
        // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return zhCn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-hk.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Hong Kong) [zh-hk]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Konstantin : https://github.com/skfd

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var zhHk = moment.defineLocale('zh-hk', {
    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
    longDateFormat : {
        LT : 'Ah點mm分',
        LTS : 'Ah點m分s秒',
        L : 'YYYY年MMMD日',
        LL : 'YYYY年MMMD日',
        LLL : 'YYYY年MMMD日Ah點mm分',
        LLLL : 'YYYY年MMMD日ddddAh點mm分',
        l : 'YYYY年MMMD日',
        ll : 'YYYY年MMMD日',
        lll : 'YYYY年MMMD日Ah點mm分',
        llll : 'YYYY年MMMD日ddddAh點mm分'
    },
    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
            return hour;
        } else if (meridiem === '中午') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === '下午' || meridiem === '晚上') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return '凌晨';
        } else if (hm < 900) {
            return '早上';
        } else if (hm < 1130) {
            return '上午';
        } else if (hm < 1230) {
            return '中午';
        } else if (hm < 1800) {
            return '下午';
        } else {
            return '晚上';
        }
    },
    calendar : {
        sameDay : '[今天]LT',
        nextDay : '[明天]LT',
        nextWeek : '[下]ddddLT',
        lastDay : '[昨天]LT',
        lastWeek : '[上]ddddLT',
        sameElse : 'L'
    },
    ordinalParse: /\d{1,2}(日|月|週)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd' :
            case 'D' :
            case 'DDD' :
                return number + '日';
            case 'M' :
                return number + '月';
            case 'w' :
            case 'W' :
                return number + '週';
            default :
                return number;
        }
    },
    relativeTime : {
        future : '%s內',
        past : '%s前',
        s : '幾秒',
        m : '1 分鐘',
        mm : '%d 分鐘',
        h : '1 小時',
        hh : '%d 小時',
        d : '1 天',
        dd : '%d 天',
        M : '1 個月',
        MM : '%d 個月',
        y : '1 年',
        yy : '%d 年'
    }
});

return zhHk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-tw.js":
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Taiwan) [zh-tw]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris

;(function (global, factory) {
    true ? factory(__webpack_require__("./node_modules/moment/moment.js")) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var zhTw = moment.defineLocale('zh-tw', {
    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
    longDateFormat : {
        LT : 'Ah點mm分',
        LTS : 'Ah點m分s秒',
        L : 'YYYY年MMMD日',
        LL : 'YYYY年MMMD日',
        LLL : 'YYYY年MMMD日Ah點mm分',
        LLLL : 'YYYY年MMMD日ddddAh點mm分',
        l : 'YYYY年MMMD日',
        ll : 'YYYY年MMMD日',
        lll : 'YYYY年MMMD日Ah點mm分',
        llll : 'YYYY年MMMD日ddddAh點mm分'
    },
    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
            return hour;
        } else if (meridiem === '中午') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === '下午' || meridiem === '晚上') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return '凌晨';
        } else if (hm < 900) {
            return '早上';
        } else if (hm < 1130) {
            return '上午';
        } else if (hm < 1230) {
            return '中午';
        } else if (hm < 1800) {
            return '下午';
        } else {
            return '晚上';
        }
    },
    calendar : {
        sameDay : '[今天]LT',
        nextDay : '[明天]LT',
        nextWeek : '[下]ddddLT',
        lastDay : '[昨天]LT',
        lastWeek : '[上]ddddLT',
        sameElse : 'L'
    },
    ordinalParse: /\d{1,2}(日|月|週)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd' :
            case 'D' :
            case 'DDD' :
                return number + '日';
            case 'M' :
                return number + '月';
            case 'w' :
            case 'W' :
                return number + '週';
            default :
                return number;
        }
    },
    relativeTime : {
        future : '%s內',
        past : '%s前',
        s : '幾秒',
        m : '1 分鐘',
        mm : '%d 分鐘',
        h : '1 小時',
        hh : '%d 小時',
        d : '1 天',
        dd : '%d 天',
        M : '1 個月',
        MM : '%d 個月',
        y : '1 年',
        yy : '%d 年'
    }
});

return zhTw;

})));


/***/ }),

/***/ "./node_modules/moment/moment.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
//! version : 2.17.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
     true ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

var hookCallback;

function hooks () {
    return hookCallback.apply(null, arguments);
}

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) {
    hookCallback = callback;
}

function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}

function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
}

function isObjectEmpty(obj) {
    var k;
    for (k in obj) {
        // even if its not own property I'd still call it non-empty
        return false;
    }
    return true;
}

function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}

function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}

function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
    }
    return res;
}

function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}

function extend(a, b) {
    for (var i in b) {
        if (hasOwnProp(b, i)) {
            a[i] = b[i];
        }
    }

    if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
    }

    return a;
}

function createUTC (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
}

function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null
    };
}

function getParsingFlags(m) {
    if (m._pf == null) {
        m._pf = defaultParsingFlags();
    }
    return m._pf;
}

var some;
if (Array.prototype.some) {
    some = Array.prototype.some;
} else {
    some = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
                return true;
            }
        }

        return false;
    };
}

var some$1 = some;

function isValid(m) {
    if (m._isValid == null) {
        var flags = getParsingFlags(m);
        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
            return i != null;
        });
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) {
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        }

        if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
        }
        else {
            return isNowValid;
        }
    }
    return m._isValid;
}

function createInvalid (flags) {
    var m = createUTC(NaN);
    if (flags != null) {
        extend(getParsingFlags(m), flags);
    }
    else {
        getParsingFlags(m).userInvalidated = true;
    }

    return m;
}

function isUndefined(input) {
    return input === void 0;
}

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
        to._i = from._i;
    }
    if (!isUndefined(from._f)) {
        to._f = from._f;
    }
    if (!isUndefined(from._l)) {
        to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
        to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
        to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
        to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
        for (i in momentProperties) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
                to[prop] = val;
            }
        }
    }

    return to;
}

var updateInProgress = false;

// Moment prototype object
function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
        this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    }
}

function isMoment (obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
}

function absFloor (number) {
    if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
    } else {
        return Math.floor(number);
    }
}

function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
    }

    return value;
}

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
        }
    }
    return diffs + lengthDiff;
}

function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
        console.warn('Deprecation warning: ' + msg);
    }
}

function deprecate(msg, fn) {
    var firstTime = true;

    return extend(function () {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
                arg = '';
                if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                } else {
                    arg = arguments[i];
                }
                args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        }
        return fn.apply(this, arguments);
    }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
    }
}

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}

function set (config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
            this[i] = prop;
        } else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _ordinalParseLenient.
    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
}

function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig), prop;
    for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            } else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
        }
    }
    return res;
}

function Locale(config) {
    if (config != null) {
        this.set(config);
    }
}

var keys;

if (Object.keys) {
    keys = Object.keys;
} else {
    keys = function (obj) {
        var i, res = [];
        for (i in obj) {
            if (hasOwnProp(obj, i)) {
                res.push(i);
            }
        }
        return res;
    };
}

var keys$1 = keys;

var defaultCalendar = {
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
};

function calendar (key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
}

var defaultLongDateFormat = {
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
};

function longDateFormat (key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
        return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
    });

    return this._longDateFormat[key];
}

var defaultInvalidDate = 'Invalid date';

function invalidDate () {
    return this._invalidDate;
}

var defaultOrdinal = '%d';
var defaultOrdinalParse = /\d{1,2}/;

function ordinal (number) {
    return this._ordinal.replace('%d', number);
}

var defaultRelativeTime = {
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
};

function relativeTime (number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
}

function pastFuture (diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
}

var aliases = {};

function addUnitAlias (unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}

function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
}

function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
            }
        }
    }

    return normalizedInput;
}

var priorities = {};

function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
}

function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
        units.push({unit: u, priority: priorities[u]});
    }
    units.sort(function (a, b) {
        return a.priority - b.priority;
    });
    return units;
}

function makeGetSet (unit, keepTime) {
    return function (value) {
        if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        } else {
            return get(this, unit);
        }
    };
}

function get (mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}

function set$1 (mom, unit, value) {
    if (mom.isValid()) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
}

// MOMENTS

function stringGet (units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
        return this[units]();
    }
    return this;
}


function stringSet (units, value) {
    if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units](value);
        }
    }
    return this;
}

function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

var formatFunctions = {};

var formatTokenFunctions = {};

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function addFormatToken (token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
        func = function () {
            return this[callback]();
        };
    }
    if (token) {
        formatTokenFunctions[token] = func;
    }
    if (padded) {
        formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
    }
    if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
}

function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
}

function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
        } else {
            array[i] = removeFormattingTokens(array[i]);
        }
    }

    return function (mom) {
        var output = '', i;
        for (i = 0; i < length; i++) {
            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
        }
        return output;
    };
}

// format date using native date object
function formatMoment(m, format) {
    if (!m.isValid()) {
        return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
}

function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    }

    return format;
}

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d{3}/;         //     000 - 999
var match4         = /\d{4}/;         //    0000 - 9999
var match6         = /[+-]?\d{6}/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d{1,3}/;       //       0 - 999
var match1to4      = /\d{1,4}/;       //       0 - 9999
var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


var regexes = {};

function addRegexToken (token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}

function getParseRegexForToken (token, config) {
    if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
}

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}

function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

var tokens = {};

function addParseToken (token, callback) {
    var i, func = callback;
    if (typeof token === 'string') {
        token = [token];
    }
    if (isNumber(callback)) {
        func = function (input, array) {
            array[callback] = toInt(input);
        };
    }
    for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
    }
}

function addWeekParseToken (token, callback) {
    addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
    });
}

function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
    }
}

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

var indexOf;

if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
} else {
    indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
                return i;
            }
        }
        return -1;
    };
}

var indexOf$1 = indexOf;

function daysInMonth(year, month) {
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
});
addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) {
    if (!m) {
        return this._months;
    }
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
}

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) {
    if (!m) {
        return this._monthsShort;
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeMonthsParse (monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

function setMonth (mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
}

function getSetMonth (value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

function getDaysInMonth () {
    return daysInMonth(this.year(), this.month());
}

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRegex;
        } else {
            return this._monthsShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    }
}

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRegex;
        } else {
            return this._monthsRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    }
}

function computeMonthsParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () {
    return isLeapYear(this.year());
}

function createDate (y, m, d, h, M, s, ms) {
    //can't just apply() to create a date:
    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
    var date = new Date(y, m, d, h, M, s, ms);

    //the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y);
    }
    return date;
}

function createUTCDate (y) {
    var date = new Date(Date.UTC.apply(null, arguments));

    //the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
    }
    return date;
}

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
}

//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    } else {
        resYear = year;
        resDayOfYear = dayOfYear;
    }

    return {
        year: resYear,
        dayOfYear: resDayOfYear
    };
}

function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    } else {
        resYear = mom.year();
        resWeek = week;
    }

    return {
        week: resWeek,
        year: resYear
    };
}

function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
});

// HELPERS

// LOCALES

function localeWeek (mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
}

var defaultLocaleWeek = {
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
};

function localeFirstDayOfWeek () {
    return this._week.dow;
}

function localeFirstDayOfYear () {
    return this._week.doy;
}

// MOMENTS

function getSetWeek (input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
}

function getSetISOWeek (input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
}

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
});
addRegexToken('ddd',   function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
});
addRegexToken('dddd',   function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) {
    if (!m) {
        return this._weekdays;
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
}

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}

function handleStrictParse$1(weekdayName, format, strict) {
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeWeekdaysParse (weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

function getSetDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

function getSetLocaleDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

function getSetISODayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRegex;
        } else {
            return this._weekdaysRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    }
}

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRegex;
        } else {
            return this._weekdaysShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
}

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRegex;
        } else {
            return this._weekdaysMinRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
}


function computeWeekdaysParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}

// FORMATTING

function hFormat() {
    return this.hours() % 12 || 12;
}

function kFormat() {
    return this.hours() || 24;
}

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});

addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
});

addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

function meridiem (token, lowercase) {
    addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) {
    return locale._meridiemParse;
}

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
});
addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
});
addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
});

// LOCALES

function localeIsPM (input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    } else {
        return isLower ? 'am' : 'AM';
    }
}


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

// months
// week
// weekdays
// meridiem
var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    ordinalParse: defaultOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
};

// internal storage for locale config files
var locales = {};
var localeFamilies = {};
var globalLocale;

function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
}

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) {
    var i = 0, j, next, locale, split;

    while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
                return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                //the next array item is better than a shallower substring of this one
                break;
            }
            j--;
        }
        i++;
    }
    return null;
}

function loadLocale(name) {
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
        try {
            oldLocale = globalLocale._abbr;
            __webpack_require__("./node_modules/moment/locale recursive ^\\.\\/.*$")("./" + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale);
        } catch (e) { }
    }
    return locales[name];
}

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) {
    var data;
    if (key) {
        if (isUndefined(values)) {
            data = getLocale(key);
        }
        else {
            data = defineLocale(key, values);
        }

        if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        }
    }

    return globalLocale._abbr;
}

function defineLocale (name, config) {
    if (config !== null) {
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
            } else {
                if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                    name: name,
                    config: config
                });
                return null;
            }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
                defineLocale(x.name, x.config);
            });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    } else {
        // useful for testing
        delete locales[name];
        return null;
    }
}

function updateLocale(name, config) {
    if (config != null) {
        var locale, parentConfig = baseConfig;
        // MERGE
        if (locales[name] != null) {
            parentConfig = locales[name]._config;
        }
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
                delete locales[name];
            }
        }
    }
    return locales[name];
}

// returns locale data
function getLocale (key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
    }

    if (!key) {
        return globalLocale;
    }

    if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
            return locale;
        }
        key = [key];
    }

    return chooseLocale(key);
}

function listLocales() {
    return keys$1(locales);
}

function checkOverflow (m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
        }

        getParsingFlags(m).overflow = overflow;
    }

    return m;
}

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) {
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) {
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
        }
        if (dateFormat == null) {
            config._isValid = false;
            return;
        }
        if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (timeFormat == null) {
                config._isValid = false;
                return;
            }
        }
        if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
        }
        if (match[4]) {
            if (tzRegex.exec(match[4])) {
                tzFormat = 'Z';
            } else {
                config._isValid = false;
                return;
            }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    } else {
        config._isValid = false;
    }
}

// date from iso format or fallback
function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
    }

    configFromISO(config);
    if (config._isValid === false) {
        delete config._isValid;
        hooks.createFromInputFallback(config);
    }
}

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    }
);

// Pick the first defined of two or three arguments.
function defaults(a, b, c) {
    if (a != null) {
        return a;
    }
    if (b != null) {
        return b;
    }
    return c;
}

function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) {
    var i, date, input = [], currentDate, yearToUse;

    if (config._d) {
        return;
    }

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
    }

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse)) {
            getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
        config._a[HOUR] = 24;
    }
}

function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
        }
    } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
            }
        } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
            }
        } else {
            // default to begining of week
            weekday = dow;
        }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
    } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
}

// constant that refers to the ISO standard
hooks.ISO_8601 = function () {};

// date from string and format string
function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
    }

    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
            if (parsedInput) {
                getParsingFlags(config).empty = false;
            }
            else {
                getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
        }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
}


function meridiemFixWrap (locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
        // nothing to do
        return hour;
    }
    if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
            hour += 12;
        }
        if (!isPm && hour === 12) {
            hour = 0;
        }
        return hour;
    } else {
        // this is not supposed to happen
        return hour;
    }
}

// date from string and array of format strings
function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) {
            continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        }
    }

    extend(config, bestMoment || tempConfig);
}

function configFromObject(config) {
    if (config._d) {
        return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
    });

    configFromArray(config);
}

function createFromConfig (config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }

    return res;
}

function prepareConfig (config) {
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
        return createInvalid({nullInput: true});
    }

    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
        return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
        config._d = input;
    } else if (isArray(format)) {
        configFromStringAndArray(config);
    } else if (format) {
        configFromStringAndFormat(config);
    }  else {
        configFromInput(config);
    }

    if (!isValid(config)) {
        config._d = null;
    }

    return config;
}

function configFromInput(config) {
    var input = config._i;
    if (input === undefined) {
        config._d = new Date(hooks.now());
    } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
        configFromString(config);
    } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        configFromArray(config);
    } else if (typeof(input) === 'object') {
        configFromObject(config);
    } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
    } else {
        hooks.createFromInputFallback(config);
    }
}

function createLocalOrUTC (input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
}

function createLocal (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
}

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
    }
    if (!moments.length) {
        return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
        }
    }
    return res;
}

// TODO: Use [].sort instead?
function min () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
}

function max () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
}

var now = function () {
    return Date.now ? Date.now() : +(new Date());
};

function Duration (duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
}

function isDuration (obj) {
    return obj instanceof Duration;
}

function absRound (number) {
    if (number < 0) {
        return Math.round(-1 * number) * -1;
    } else {
        return Math.round(number);
    }
}

// FORMATTING

function offset (token, separator) {
    addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
}

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
});

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
        return null;
    }

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
}

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    } else {
        return createLocal(input).local();
    }
}

function getDateOffset (m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () {};

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
                return this;
            }
        } else if (Math.abs(input) < 16) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

function getSetZone (input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

function setOffsetToUTC (keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

function setOffsetToLocal (keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

function setOffsetToParsedOffset () {
    if (this._tzm != null) {
        this.utcOffset(this._tzm);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

function hasAlignedHourOffset (input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

function isDaylightSavingTime () {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

function isDaylightSavingTimeShifted () {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

function isLocal () {
    return this.isValid() ? !this._isUTC : false;
}

function isUtcOffset () {
    return this.isValid() ? this._isUTC : false;
}

function isUtc () {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}

// ASP.NET json date format regex
var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

function createDuration (input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
        duration = {
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        };
    } else if (isNumber(input)) {
        duration = {};
        if (key) {
            duration[key] = input;
        } else {
            duration.milliseconds = input;
        }
    } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
    } else if (!!(match = isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        };
    } else if (duration == null) {// checks for null or undefined
        duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
    }

    return ret;
}

createDuration.fn = Duration.prototype;

function parseIso (inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
}

function positiveMomentsDifference(base, other) {
    var res = {milliseconds: 0, months: 0};

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
}

function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
        return {milliseconds: 0, months: 0};
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
    } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    }

    return res;
}

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}

function addSubtract (mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
        // No op
        return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (updateOffset) {
        hooks.updateOffset(mom, days || months);
    }
}

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar$1 (time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
}

function clone () {
    return new Moment(this);
}

function isAfter (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
    } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
}

function isBefore (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
    } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
}

function isBetween (from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
}

function isSame (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
    } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
}

function isSameOrAfter (input, units) {
    return this.isSame(input, units) || this.isAfter(input,units);
}

function isSameOrBefore (input, units) {
    return this.isSame(input, units) || this.isBefore(input,units);
}

function diff (input, units, asFloat) {
    var that,
        zoneDelta,
        delta, output;

    if (!this.isValid()) {
        return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
        return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
            output = output / 3;
        } else if (units === 'year') {
            output = output / 12;
        }
    } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
    }
    return asFloat ? output : absFloor(output);
}

function monthDiff (a, b) {
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    }

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}

function toISOString () {
    var m = this.clone().utc();
    if (0 < m.year() && m.year() <= 9999) {
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            return this.toDate().toISOString();
        } else {
            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    } else {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }
}

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () {
    if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
}

function format (inputString) {
    if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
}

function from (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function fromNow (withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
}

function to (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function toNow (withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
}

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) {
    var newLocaleData;

    if (key === undefined) {
        return this._locale._abbr;
    } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
            this._locale = newLocaleData;
        }
        return this;
    }
}

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    }
);

function localeData () {
    return this._locale;
}

function startOf (units) {
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    }

    // weeks are a special case
    if (units === 'week') {
        this.weekday(0);
    }
    if (units === 'isoWeek') {
        this.isoWeekday(1);
    }

    // quarters are also special
    if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
}

function endOf (units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
        return this;
    }

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') {
        units = 'day';
    }

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
}

function valueOf () {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
}

function unix () {
    return Math.floor(this.valueOf() / 1000);
}

function toDate () {
    return new Date(this.valueOf());
}

function toArray () {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}

function toObject () {
    var m = this;
    return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    };
}

function toJSON () {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
}

function isValid$1 () {
    return isValid(this);
}

function parsingFlags () {
    return extend({}, getParsingFlags(this));
}

function invalidAt () {
    return getParsingFlags(this).overflow;
}

function creationData() {
    return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    };
}

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});

addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});

function addWeekYearFormatToken (token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
}

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
});

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
});

// MOMENTS

function getSetWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
}

function getSetISOWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
}

function getISOWeeksInYear () {
    return weeksInYear(this.year(), 1, 4);
}

function getWeeksInYear () {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}

function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return weekOfYear(this, dow, doy).year;
    } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}

function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
});

// MOMENTS

function getSetQuarter (input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) {
    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
});

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0], 10);
});

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
});

// HELPERS

// MOMENTS

function getSetDayOfYear (input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
}

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
});

addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
});

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
});
addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
});
addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
});
addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
});
addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
});
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
});


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
}

function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
}

for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
}
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () {
    return this._isUTC ? 'UTC' : '';
}

function getZoneName () {
    return this._isUTC ? 'Coordinated Universal Time' : '';
}

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$1;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;

// Year
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;

// Week Year
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;

// Quarter
proto.quarter = proto.quarters = getSetQuarter;

// Month
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;

// Week
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;

// Day
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;

// Hour
proto.hour = proto.hours = getSetHour;

// Minute
proto.minute = proto.minutes = getSetMinute;

// Second
proto.second = proto.seconds = getSetSecond;

// Millisecond
proto.millisecond = proto.milliseconds = getSetMillisecond;

// Offset
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;

// Timezone
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;

// Deprecations
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) {
    return createLocal(input * 1000);
}

function createInZone () {
    return createLocal.apply(null, arguments).parseZone();
}

function preParsePostFormat (string) {
    return string;
}

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

// Month
proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;

// Week
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

// Day of Week
proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

// Hours
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
}

function listMonthsImpl (format, index, field) {
    if (isNumber(format)) {
        index = format;
        format = undefined;
    }

    format = format || '';

    if (index != null) {
        return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
    }
    return out;
}

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    } else {
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
}

function listMonths (format, index) {
    return listMonthsImpl(format, index, 'months');
}

function listMonthsShort (format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
}

function listWeekdays (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
}

function listWeekdaysShort (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
}

function listWeekdaysMin (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
}

getSetGlobalLocale('en', {
    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

// Side effect imports
hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () {
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
}

function addSubtract$1 (duration, input, value, direction) {
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
}

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) {
    return addSubtract$1(this, input, value, 1);
}

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) {
    return addSubtract$1(this, input, value, -1);
}

function absCeil (number) {
    if (number < 0) {
        return Math.floor(number);
    } else {
        return Math.ceil(number);
    }
}

function bubble () {
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
}

function daysToMonths (days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}

function monthsToDays (months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}

function as (units) {
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        }
    }
}

// TODO: Use this.as('ms')?
function valueOf$1 () {
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
}

function makeAs (alias) {
    return function () {
        return this.as(alias);
    };
}

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function get$2 (units) {
    units = normalizeUnits(units);
    return this[units + 's']();
}

function makeGetter(name) {
    return function () {
        return this._data[name];
    };
}

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () {
    return absFloor(this.days() / 7);
}

var round = Math.round;
var thresholds = {
    s: 45,  // seconds to minute
    m: 45,  // minutes to hour
    h: 22,  // hours to day
    d: 26,  // days to month
    M: 11   // months to year
};

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}

function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds < thresholds.s && ['s', seconds]  ||
            minutes <= 1           && ['m']           ||
            minutes < thresholds.m && ['mm', minutes] ||
            hours   <= 1           && ['h']           ||
            hours   < thresholds.h && ['hh', hours]   ||
            days    <= 1           && ['d']           ||
            days    < thresholds.d && ['dd', days]    ||
            months  <= 1           && ['M']           ||
            months  < thresholds.M && ['MM', months]  ||
            years   <= 1           && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
}

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) {
    if (roundingFunction === undefined) {
        return round;
    }
    if (typeof(roundingFunction) === 'function') {
        round = roundingFunction;
        return true;
    }
    return false;
}

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) {
    if (thresholds[threshold] === undefined) {
        return false;
    }
    if (limit === undefined) {
        return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    return true;
}

function humanize (withSuffix) {
    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
        output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
}

var abs$1 = Math.abs;

function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds;
    var total = this.asSeconds();

    if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    }

    return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
}

var proto$2 = Duration.prototype;

proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

// Deprecations
proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
});
addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
});

// Side effect imports


hooks.version = '2.17.1';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/ng2-charts/charts/charts.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
/* tslint:disable-next-line */
var BaseChartDirective = (function () {
    function BaseChartDirective(element) {
        this.labels = [];
        this.options = {};
        this.chartClick = new core_1.EventEmitter();
        this.chartHover = new core_1.EventEmitter();
        this.initFlag = false;
        this.element = element;
    }
    BaseChartDirective.prototype.ngOnInit = function () {
        this.ctx = this.element.nativeElement.getContext('2d');
        this.cvs = this.element.nativeElement;
        this.initFlag = true;
        if (this.data || this.datasets) {
            this.refresh();
        }
    };
    BaseChartDirective.prototype.ngOnChanges = function (changes) {
        if (this.initFlag) {
            // Check if the changes are in the data or datasets
            if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {
                if (changes['data']) {
                    this.updateChartData(changes['data'].currentValue);
                }
                else {
                    this.updateChartData(changes['datasets'].currentValue);
                }
                this.chart.update();
            }
            else {
                // otherwise rebuild the chart
                this.refresh();
            }
        }
    };
    BaseChartDirective.prototype.ngOnDestroy = function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = void 0;
        }
    };
    BaseChartDirective.prototype.getChartBuilder = function (ctx /*, data:Array<any>, options:any*/) {
        var _this = this;
        var datasets = this.getDatasets();
        var options = Object.assign({}, this.options);
        if (this.legend === false) {
            options.legend = { display: false };
        }
        // hock for onHover and onClick events
        options.hover = options.hover || {};
        if (!options.hover.onHover) {
            options.hover.onHover = function (active) {
                if (active && !active.length) {
                    return;
                }
                _this.chartHover.emit({ active: active });
            };
        }
        if (!options.onClick) {
            options.onClick = function (event, active) {
                _this.chartClick.emit({ event: event, active: active });
            };
        }
        var opts = {
            type: this.chartType,
            data: {
                labels: this.labels,
                datasets: datasets
            },
            options: options
        };
        if (typeof Chart === 'undefined') {
            throw new Error('ng2-charts configuration issue: Embedding Chart.js lib is mandatory');
        }
        return new Chart(ctx, opts);
    };
    BaseChartDirective.prototype.updateChartData = function (newDataValues) {
        if (Array.isArray(newDataValues[0].data)) {
            this.chart.data.datasets.forEach(function (dataset, i) {
                dataset.data = newDataValues[i].data;
                if (newDataValues[i].label) {
                    dataset.label = newDataValues[i].label;
                }
            });
        }
        else {
            this.chart.data.datasets[0].data = newDataValues;
        }
    };
    BaseChartDirective.prototype.getDatasets = function () {
        var _this = this;
        var datasets = void 0;
        // in case if datasets is not provided, but data is present
        if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {
            if (Array.isArray(this.data[0])) {
                datasets = this.data.map(function (data, index) {
                    return { data: data, label: _this.labels[index] || "Label " + index };
                });
            }
            else {
                datasets = [{ data: this.data, label: "Label 0" }];
            }
        }
        if (this.datasets && this.datasets.length ||
            (datasets && datasets.length)) {
            datasets = (this.datasets || datasets)
                .map(function (elm, index) {
                var newElm = Object.assign({}, elm);
                if (_this.colors && _this.colors.length) {
                    Object.assign(newElm, _this.colors[index]);
                }
                else {
                    Object.assign(newElm, getColors(_this.chartType, index, newElm.data.length));
                }
                return newElm;
            });
        }
        if (!datasets) {
            throw new Error("ng-charts configuration error,\n      data or datasets field are required to render char " + this.chartType);
        }
        return datasets;
    };
    BaseChartDirective.prototype.refresh = function () {
        // if (this.options && this.options.responsive) {
        //   setTimeout(() => this.refresh(), 50);
        // }
        // todo: remove this line, it is producing flickering
        this.ngOnDestroy();
        this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);
    };
    BaseChartDirective.defaultColors = [
        [255, 99, 132],
        [54, 162, 235],
        [255, 206, 86],
        [231, 233, 237],
        [75, 192, 192],
        [151, 187, 205],
        [220, 220, 220],
        [247, 70, 74],
        [70, 191, 189],
        [253, 180, 92],
        [148, 159, 177],
        [77, 83, 96]
    ];
    BaseChartDirective.decorators = [
        { type: core_1.Directive, args: [{ selector: 'canvas[baseChart]', exportAs: 'base-chart' },] },
    ];
    /** @nocollapse */
    BaseChartDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
    ]; };
    BaseChartDirective.propDecorators = {
        'data': [{ type: core_1.Input },],
        'datasets': [{ type: core_1.Input },],
        'labels': [{ type: core_1.Input },],
        'options': [{ type: core_1.Input },],
        'chartType': [{ type: core_1.Input },],
        'colors': [{ type: core_1.Input },],
        'legend': [{ type: core_1.Input },],
        'chartClick': [{ type: core_1.Output },],
        'chartHover': [{ type: core_1.Output },],
    };
    return BaseChartDirective;
}());
exports.BaseChartDirective = BaseChartDirective;
function rgba(colour, alpha) {
    return 'rgba(' + colour.concat(alpha).join(',') + ')';
}
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
function formatLineColor(colors) {
    return {
        backgroundColor: rgba(colors, 0.4),
        borderColor: rgba(colors, 1),
        pointBackgroundColor: rgba(colors, 1),
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: rgba(colors, 0.8)
    };
}
function formatBarColor(colors) {
    return {
        backgroundColor: rgba(colors, 0.6),
        borderColor: rgba(colors, 1),
        hoverBackgroundColor: rgba(colors, 0.8),
        hoverBorderColor: rgba(colors, 1)
    };
}
function formatPieColors(colors) {
    return {
        backgroundColor: colors.map(function (color) { return rgba(color, 0.6); }),
        borderColor: colors.map(function () { return '#fff'; }),
        pointBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),
        pointBorderColor: colors.map(function () { return '#fff'; }),
        pointHoverBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),
        pointHoverBorderColor: colors.map(function (color) { return rgba(color, 1); })
    };
}
function formatPolarAreaColors(colors) {
    return {
        backgroundColor: colors.map(function (color) { return rgba(color, 0.6); }),
        borderColor: colors.map(function (color) { return rgba(color, 1); }),
        hoverBackgroundColor: colors.map(function (color) { return rgba(color, 0.8); }),
        hoverBorderColor: colors.map(function (color) { return rgba(color, 1); })
    };
}
function getRandomColor() {
    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];
}
/**
 * Generate colors for line|bar charts
 * @param index
 * @returns {number[]|Color}
 */
function generateColor(index) {
    return BaseChartDirective.defaultColors[index] || getRandomColor();
}
/**
 * Generate colors for pie|doughnut charts
 * @param count
 * @returns {Colors}
 */
function generateColors(count) {
    var colorsArr = new Array(count);
    for (var i = 0; i < count; i++) {
        colorsArr[i] = BaseChartDirective.defaultColors[i] || getRandomColor();
    }
    return colorsArr;
}
/**
 * Generate colors by chart type
 * @param chartType
 * @param index
 * @param count
 * @returns {Color}
 */
function getColors(chartType, index, count) {
    if (chartType === 'pie' || chartType === 'doughnut') {
        return formatPieColors(generateColors(count));
    }
    if (chartType === 'polarArea') {
        return formatPolarAreaColors(generateColors(count));
    }
    if (chartType === 'line' || chartType === 'radar') {
        return formatLineColor(generateColor(index));
    }
    if (chartType === 'bar' || chartType === 'horizontalBar') {
        return formatBarColor(generateColor(index));
    }
    return generateColor(index);
}
var ChartsModule = (function () {
    function ChartsModule() {
    }
    ChartsModule.decorators = [
        { type: core_1.NgModule, args: [{
                    declarations: [
                        BaseChartDirective
                    ],
                    exports: [
                        BaseChartDirective
                    ],
                    imports: []
                },] },
    ];
    /** @nocollapse */
    ChartsModule.ctorParameters = function () { return []; };
    return ChartsModule;
}());
exports.ChartsModule = ChartsModule;


/***/ }),

/***/ "./node_modules/ng2-charts/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__("./node_modules/ng2-charts/charts/charts.js"));


/***/ }),

/***/ "./node_modules/ng2-charts/ng2-charts.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__("./node_modules/ng2-charts/index.js"));


/***/ }),

/***/ "./node_modules/rxjs/AsyncSubject.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
/**
 * @class AsyncSubject<T>
 */
var AsyncSubject = (function (_super) {
    __extends(AsyncSubject, _super);
    function AsyncSubject() {
        _super.apply(this, arguments);
        this.value = null;
        this.hasNext = false;
        this.hasCompleted = false;
    }
    AsyncSubject.prototype._subscribe = function (subscriber) {
        if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        return _super.prototype._subscribe.call(this, subscriber);
    };
    AsyncSubject.prototype.next = function (value) {
        if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
        }
    };
    AsyncSubject.prototype.complete = function () {
        this.hasCompleted = true;
        if (this.hasNext) {
            _super.prototype.next.call(this, this.value);
        }
        _super.prototype.complete.call(this);
    };
    return AsyncSubject;
}(Subject_1.Subject));
exports.AsyncSubject = AsyncSubject;
//# sourceMappingURL=AsyncSubject.js.map

/***/ }),

/***/ "./node_modules/rxjs/ReplaySubject.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var queue_1 = __webpack_require__("./node_modules/rxjs/scheduler/queue.js");
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
var observeOn_1 = __webpack_require__("./node_modules/rxjs/operator/observeOn.js");
var ObjectUnsubscribedError_1 = __webpack_require__("./node_modules/rxjs/util/ObjectUnsubscribedError.js");
var SubjectSubscription_1 = __webpack_require__("./node_modules/rxjs/SubjectSubscription.js");
/**
 * @class ReplaySubject<T>
 */
var ReplaySubject = (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
        _super.call(this);
        this.scheduler = scheduler;
        this._events = [];
        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        this._windowTime = windowTime < 1 ? 1 : windowTime;
    }
    ReplaySubject.prototype.next = function (value) {
        var now = this._getNow();
        this._events.push(new ReplayEvent(now, value));
        this._trimBufferThenGetEvents();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        var _events = this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var subscription;
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscription = Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscription = Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
        }
        var len = _events.length;
        for (var i = 0; i < len && !subscriber.closed; i++) {
            subscriber.next(_events[i].value);
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject.prototype._getNow = function () {
        return (this.scheduler || queue_1.queue).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        // Trim events that fall out of the time window.
        // Start at the front of the list. Break early once
        // we encounter an event that falls within the window.
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject;
}(Subject_1.Subject));
exports.ReplaySubject = ReplaySubject;
var ReplayEvent = (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());
//# sourceMappingURL=ReplaySubject.js.map

/***/ }),

/***/ "./node_modules/rxjs/Rx.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* tslint:disable:no-unused-variable */
// Subject imported before Observable to bypass circular dependency issue since
// Subject extends Observable and Observable references Subject in it's
// definition
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
exports.Subject = Subject_1.Subject;
exports.AnonymousSubject = Subject_1.AnonymousSubject;
/* tslint:enable:no-unused-variable */
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
exports.Observable = Observable_1.Observable;
// statics
/* tslint:disable:no-use-before-declare */
__webpack_require__("./node_modules/rxjs/add/observable/bindCallback.js");
__webpack_require__("./node_modules/rxjs/add/observable/bindNodeCallback.js");
__webpack_require__("./node_modules/rxjs/add/observable/combineLatest.js");
__webpack_require__("./node_modules/rxjs/add/observable/concat.js");
__webpack_require__("./node_modules/rxjs/add/observable/defer.js");
__webpack_require__("./node_modules/rxjs/add/observable/empty.js");
__webpack_require__("./node_modules/rxjs/add/observable/forkJoin.js");
__webpack_require__("./node_modules/rxjs/add/observable/from.js");
__webpack_require__("./node_modules/rxjs/add/observable/fromEvent.js");
__webpack_require__("./node_modules/rxjs/add/observable/fromEventPattern.js");
__webpack_require__("./node_modules/rxjs/add/observable/fromPromise.js");
__webpack_require__("./node_modules/rxjs/add/observable/generate.js");
__webpack_require__("./node_modules/rxjs/add/observable/if.js");
__webpack_require__("./node_modules/rxjs/add/observable/interval.js");
__webpack_require__("./node_modules/rxjs/add/observable/merge.js");
__webpack_require__("./node_modules/rxjs/add/observable/race.js");
__webpack_require__("./node_modules/rxjs/add/observable/never.js");
__webpack_require__("./node_modules/rxjs/add/observable/of.js");
__webpack_require__("./node_modules/rxjs/add/observable/onErrorResumeNext.js");
__webpack_require__("./node_modules/rxjs/add/observable/pairs.js");
__webpack_require__("./node_modules/rxjs/add/observable/range.js");
__webpack_require__("./node_modules/rxjs/add/observable/using.js");
__webpack_require__("./node_modules/rxjs/add/observable/throw.js");
__webpack_require__("./node_modules/rxjs/add/observable/timer.js");
__webpack_require__("./node_modules/rxjs/add/observable/zip.js");
//dom
__webpack_require__("./node_modules/rxjs/add/observable/dom/ajax.js");
__webpack_require__("./node_modules/rxjs/add/observable/dom/webSocket.js");
//operators
__webpack_require__("./node_modules/rxjs/add/operator/buffer.js");
__webpack_require__("./node_modules/rxjs/add/operator/bufferCount.js");
__webpack_require__("./node_modules/rxjs/add/operator/bufferTime.js");
__webpack_require__("./node_modules/rxjs/add/operator/bufferToggle.js");
__webpack_require__("./node_modules/rxjs/add/operator/bufferWhen.js");
__webpack_require__("./node_modules/rxjs/add/operator/catch.js");
__webpack_require__("./node_modules/rxjs/add/operator/combineAll.js");
__webpack_require__("./node_modules/rxjs/add/operator/combineLatest.js");
__webpack_require__("./node_modules/rxjs/add/operator/concat.js");
__webpack_require__("./node_modules/rxjs/add/operator/concatAll.js");
__webpack_require__("./node_modules/rxjs/add/operator/concatMap.js");
__webpack_require__("./node_modules/rxjs/add/operator/concatMapTo.js");
__webpack_require__("./node_modules/rxjs/add/operator/count.js");
__webpack_require__("./node_modules/rxjs/add/operator/dematerialize.js");
__webpack_require__("./node_modules/rxjs/add/operator/debounce.js");
__webpack_require__("./node_modules/rxjs/add/operator/debounceTime.js");
__webpack_require__("./node_modules/rxjs/add/operator/defaultIfEmpty.js");
__webpack_require__("./node_modules/rxjs/add/operator/delay.js");
__webpack_require__("./node_modules/rxjs/add/operator/delayWhen.js");
__webpack_require__("./node_modules/rxjs/add/operator/distinct.js");
__webpack_require__("./node_modules/rxjs/add/operator/distinctUntilChanged.js");
__webpack_require__("./node_modules/rxjs/add/operator/distinctUntilKeyChanged.js");
__webpack_require__("./node_modules/rxjs/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/add/operator/exhaust.js");
__webpack_require__("./node_modules/rxjs/add/operator/exhaustMap.js");
__webpack_require__("./node_modules/rxjs/add/operator/expand.js");
__webpack_require__("./node_modules/rxjs/add/operator/elementAt.js");
__webpack_require__("./node_modules/rxjs/add/operator/filter.js");
__webpack_require__("./node_modules/rxjs/add/operator/finally.js");
__webpack_require__("./node_modules/rxjs/add/operator/find.js");
__webpack_require__("./node_modules/rxjs/add/operator/findIndex.js");
__webpack_require__("./node_modules/rxjs/add/operator/first.js");
__webpack_require__("./node_modules/rxjs/add/operator/groupBy.js");
__webpack_require__("./node_modules/rxjs/add/operator/ignoreElements.js");
__webpack_require__("./node_modules/rxjs/add/operator/isEmpty.js");
__webpack_require__("./node_modules/rxjs/add/operator/audit.js");
__webpack_require__("./node_modules/rxjs/add/operator/auditTime.js");
__webpack_require__("./node_modules/rxjs/add/operator/last.js");
__webpack_require__("./node_modules/rxjs/add/operator/let.js");
__webpack_require__("./node_modules/rxjs/add/operator/every.js");
__webpack_require__("./node_modules/rxjs/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/add/operator/mapTo.js");
__webpack_require__("./node_modules/rxjs/add/operator/materialize.js");
__webpack_require__("./node_modules/rxjs/add/operator/max.js");
__webpack_require__("./node_modules/rxjs/add/operator/merge.js");
__webpack_require__("./node_modules/rxjs/add/operator/mergeAll.js");
__webpack_require__("./node_modules/rxjs/add/operator/mergeMap.js");
__webpack_require__("./node_modules/rxjs/add/operator/mergeMapTo.js");
__webpack_require__("./node_modules/rxjs/add/operator/mergeScan.js");
__webpack_require__("./node_modules/rxjs/add/operator/min.js");
__webpack_require__("./node_modules/rxjs/add/operator/multicast.js");
__webpack_require__("./node_modules/rxjs/add/operator/observeOn.js");
__webpack_require__("./node_modules/rxjs/add/operator/onErrorResumeNext.js");
__webpack_require__("./node_modules/rxjs/add/operator/pairwise.js");
__webpack_require__("./node_modules/rxjs/add/operator/partition.js");
__webpack_require__("./node_modules/rxjs/add/operator/pluck.js");
__webpack_require__("./node_modules/rxjs/add/operator/publish.js");
__webpack_require__("./node_modules/rxjs/add/operator/publishBehavior.js");
__webpack_require__("./node_modules/rxjs/add/operator/publishReplay.js");
__webpack_require__("./node_modules/rxjs/add/operator/publishLast.js");
__webpack_require__("./node_modules/rxjs/add/operator/race.js");
__webpack_require__("./node_modules/rxjs/add/operator/reduce.js");
__webpack_require__("./node_modules/rxjs/add/operator/repeat.js");
__webpack_require__("./node_modules/rxjs/add/operator/repeatWhen.js");
__webpack_require__("./node_modules/rxjs/add/operator/retry.js");
__webpack_require__("./node_modules/rxjs/add/operator/retryWhen.js");
__webpack_require__("./node_modules/rxjs/add/operator/sample.js");
__webpack_require__("./node_modules/rxjs/add/operator/sampleTime.js");
__webpack_require__("./node_modules/rxjs/add/operator/scan.js");
__webpack_require__("./node_modules/rxjs/add/operator/sequenceEqual.js");
__webpack_require__("./node_modules/rxjs/add/operator/share.js");
__webpack_require__("./node_modules/rxjs/add/operator/single.js");
__webpack_require__("./node_modules/rxjs/add/operator/skip.js");
__webpack_require__("./node_modules/rxjs/add/operator/skipUntil.js");
__webpack_require__("./node_modules/rxjs/add/operator/skipWhile.js");
__webpack_require__("./node_modules/rxjs/add/operator/startWith.js");
__webpack_require__("./node_modules/rxjs/add/operator/subscribeOn.js");
__webpack_require__("./node_modules/rxjs/add/operator/switch.js");
__webpack_require__("./node_modules/rxjs/add/operator/switchMap.js");
__webpack_require__("./node_modules/rxjs/add/operator/switchMapTo.js");
__webpack_require__("./node_modules/rxjs/add/operator/take.js");
__webpack_require__("./node_modules/rxjs/add/operator/takeLast.js");
__webpack_require__("./node_modules/rxjs/add/operator/takeUntil.js");
__webpack_require__("./node_modules/rxjs/add/operator/takeWhile.js");
__webpack_require__("./node_modules/rxjs/add/operator/throttle.js");
__webpack_require__("./node_modules/rxjs/add/operator/throttleTime.js");
__webpack_require__("./node_modules/rxjs/add/operator/timeInterval.js");
__webpack_require__("./node_modules/rxjs/add/operator/timeout.js");
__webpack_require__("./node_modules/rxjs/add/operator/timeoutWith.js");
__webpack_require__("./node_modules/rxjs/add/operator/timestamp.js");
__webpack_require__("./node_modules/rxjs/add/operator/toArray.js");
__webpack_require__("./node_modules/rxjs/add/operator/toPromise.js");
__webpack_require__("./node_modules/rxjs/add/operator/window.js");
__webpack_require__("./node_modules/rxjs/add/operator/windowCount.js");
__webpack_require__("./node_modules/rxjs/add/operator/windowTime.js");
__webpack_require__("./node_modules/rxjs/add/operator/windowToggle.js");
__webpack_require__("./node_modules/rxjs/add/operator/windowWhen.js");
__webpack_require__("./node_modules/rxjs/add/operator/withLatestFrom.js");
__webpack_require__("./node_modules/rxjs/add/operator/zip.js");
__webpack_require__("./node_modules/rxjs/add/operator/zipAll.js");
/* tslint:disable:no-unused-variable */
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
exports.Subscription = Subscription_1.Subscription;
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
exports.Subscriber = Subscriber_1.Subscriber;
var AsyncSubject_1 = __webpack_require__("./node_modules/rxjs/AsyncSubject.js");
exports.AsyncSubject = AsyncSubject_1.AsyncSubject;
var ReplaySubject_1 = __webpack_require__("./node_modules/rxjs/ReplaySubject.js");
exports.ReplaySubject = ReplaySubject_1.ReplaySubject;
var BehaviorSubject_1 = __webpack_require__("./node_modules/rxjs/BehaviorSubject.js");
exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;
var ConnectableObservable_1 = __webpack_require__("./node_modules/rxjs/observable/ConnectableObservable.js");
exports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;
var Notification_1 = __webpack_require__("./node_modules/rxjs/Notification.js");
exports.Notification = Notification_1.Notification;
var EmptyError_1 = __webpack_require__("./node_modules/rxjs/util/EmptyError.js");
exports.EmptyError = EmptyError_1.EmptyError;
var ArgumentOutOfRangeError_1 = __webpack_require__("./node_modules/rxjs/util/ArgumentOutOfRangeError.js");
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
var ObjectUnsubscribedError_1 = __webpack_require__("./node_modules/rxjs/util/ObjectUnsubscribedError.js");
exports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;
var TimeoutError_1 = __webpack_require__("./node_modules/rxjs/util/TimeoutError.js");
exports.TimeoutError = TimeoutError_1.TimeoutError;
var UnsubscriptionError_1 = __webpack_require__("./node_modules/rxjs/util/UnsubscriptionError.js");
exports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;
var timeInterval_1 = __webpack_require__("./node_modules/rxjs/operator/timeInterval.js");
exports.TimeInterval = timeInterval_1.TimeInterval;
var timestamp_1 = __webpack_require__("./node_modules/rxjs/operator/timestamp.js");
exports.Timestamp = timestamp_1.Timestamp;
var TestScheduler_1 = __webpack_require__("./node_modules/rxjs/testing/TestScheduler.js");
exports.TestScheduler = TestScheduler_1.TestScheduler;
var VirtualTimeScheduler_1 = __webpack_require__("./node_modules/rxjs/scheduler/VirtualTimeScheduler.js");
exports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;
var AjaxObservable_1 = __webpack_require__("./node_modules/rxjs/observable/dom/AjaxObservable.js");
exports.AjaxResponse = AjaxObservable_1.AjaxResponse;
exports.AjaxError = AjaxObservable_1.AjaxError;
exports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;
var asap_1 = __webpack_require__("./node_modules/rxjs/scheduler/asap.js");
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
var queue_1 = __webpack_require__("./node_modules/rxjs/scheduler/queue.js");
var animationFrame_1 = __webpack_require__("./node_modules/rxjs/scheduler/animationFrame.js");
var rxSubscriber_1 = __webpack_require__("./node_modules/rxjs/symbol/rxSubscriber.js");
var iterator_1 = __webpack_require__("./node_modules/rxjs/symbol/iterator.js");
var observable_1 = __webpack_require__("./node_modules/rxjs/symbol/observable.js");
/* tslint:enable:no-unused-variable */
/**
 * @typedef {Object} Rx.Scheduler
 * @property {Scheduler} queue Schedules on a queue in the current event frame
 * (trampoline scheduler). Use this for iteration operations.
 * @property {Scheduler} asap Schedules on the micro task queue, which uses the
 * fastest transport mechanism available, either Node.js' `process.nextTick()`
 * or Web Worker MessageChannel or setTimeout or others. Use this for
 * asynchronous conversions.
 * @property {Scheduler} async Schedules work with `setInterval`. Use this for
 * time-based operations.
 * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.
 * Use this for synchronizing with the platform's painting
 */
var Scheduler = {
    asap: asap_1.asap,
    queue: queue_1.queue,
    animationFrame: animationFrame_1.animationFrame,
    async: async_1.async
};
exports.Scheduler = Scheduler;
/**
 * @typedef {Object} Rx.Symbol
 * @property {Symbol|string} rxSubscriber A symbol to use as a property name to
 * retrieve an "Rx safe" Observer from an object. "Rx safety" can be defined as
 * an object that has all of the traits of an Rx Subscriber, including the
 * ability to add and remove subscriptions to the subscription chain and
 * guarantees involving event triggering (can't "next" after unsubscription,
 * etc).
 * @property {Symbol|string} observable A symbol to use as a property name to
 * retrieve an Observable as defined by the [ECMAScript "Observable" spec](https://github.com/zenparsing/es-observable).
 * @property {Symbol|string} iterator The ES6 symbol to use as a property name
 * to retrieve an iterator from an object.
 */
var Symbol = {
    rxSubscriber: rxSubscriber_1.$$rxSubscriber,
    observable: observable_1.$$observable,
    iterator: iterator_1.$$iterator
};
exports.Symbol = Symbol;
//# sourceMappingURL=Rx.js.map

/***/ }),

/***/ "./node_modules/rxjs/Scheduler.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * An execution context and a data structure to order tasks and schedule their
 * execution. Provides a notion of (potentially virtual) time, through the
 * `now()` getter method.
 *
 * Each unit of work in a Scheduler is called an {@link Action}.
 *
 * ```ts
 * class Scheduler {
 *   now(): number;
 *   schedule(work, delay?, state?): Subscription;
 * }
 * ```
 *
 * @class Scheduler
 */
var Scheduler = (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler.now; }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    /**
     * Schedules a function, `work`, for execution. May happen at some point in
     * the future, according to the `delay` parameter, if specified. May be passed
     * some context object, `state`, which will be passed to the `work` function.
     *
     * The given arguments will be processed an stored as an Action object in a
     * queue of actions.
     *
     * @param {function(state: ?T): ?Subscription} work A function representing a
     * task, or some unit of work to be executed by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler itself.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @return {Subscription} A subscription in order to be able to unsubscribe
     * the scheduled work.
     */
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
    return Scheduler;
}());
exports.Scheduler = Scheduler;
//# sourceMappingURL=Scheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/bindCallback.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var bindCallback_1 = __webpack_require__("./node_modules/rxjs/observable/bindCallback.js");
Observable_1.Observable.bindCallback = bindCallback_1.bindCallback;
//# sourceMappingURL=bindCallback.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/bindNodeCallback.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var bindNodeCallback_1 = __webpack_require__("./node_modules/rxjs/observable/bindNodeCallback.js");
Observable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;
//# sourceMappingURL=bindNodeCallback.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/combineLatest.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var combineLatest_1 = __webpack_require__("./node_modules/rxjs/observable/combineLatest.js");
Observable_1.Observable.combineLatest = combineLatest_1.combineLatest;
//# sourceMappingURL=combineLatest.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/concat.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var concat_1 = __webpack_require__("./node_modules/rxjs/observable/concat.js");
Observable_1.Observable.concat = concat_1.concat;
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/defer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var defer_1 = __webpack_require__("./node_modules/rxjs/observable/defer.js");
Observable_1.Observable.defer = defer_1.defer;
//# sourceMappingURL=defer.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/dom/ajax.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var ajax_1 = __webpack_require__("./node_modules/rxjs/observable/dom/ajax.js");
Observable_1.Observable.ajax = ajax_1.ajax;
//# sourceMappingURL=ajax.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/dom/webSocket.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var webSocket_1 = __webpack_require__("./node_modules/rxjs/observable/dom/webSocket.js");
Observable_1.Observable.webSocket = webSocket_1.webSocket;
//# sourceMappingURL=webSocket.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/empty.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var empty_1 = __webpack_require__("./node_modules/rxjs/observable/empty.js");
Observable_1.Observable.empty = empty_1.empty;
//# sourceMappingURL=empty.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/forkJoin.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var forkJoin_1 = __webpack_require__("./node_modules/rxjs/observable/forkJoin.js");
Observable_1.Observable.forkJoin = forkJoin_1.forkJoin;
//# sourceMappingURL=forkJoin.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/from.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var from_1 = __webpack_require__("./node_modules/rxjs/observable/from.js");
Observable_1.Observable.from = from_1.from;
//# sourceMappingURL=from.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/fromEvent.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var fromEvent_1 = __webpack_require__("./node_modules/rxjs/observable/fromEvent.js");
Observable_1.Observable.fromEvent = fromEvent_1.fromEvent;
//# sourceMappingURL=fromEvent.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/fromEventPattern.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var fromEventPattern_1 = __webpack_require__("./node_modules/rxjs/observable/fromEventPattern.js");
Observable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;
//# sourceMappingURL=fromEventPattern.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/fromPromise.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var fromPromise_1 = __webpack_require__("./node_modules/rxjs/observable/fromPromise.js");
Observable_1.Observable.fromPromise = fromPromise_1.fromPromise;
//# sourceMappingURL=fromPromise.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/generate.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var GenerateObservable_1 = __webpack_require__("./node_modules/rxjs/observable/GenerateObservable.js");
Observable_1.Observable.generate = GenerateObservable_1.GenerateObservable.create;
//# sourceMappingURL=generate.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/if.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var if_1 = __webpack_require__("./node_modules/rxjs/observable/if.js");
Observable_1.Observable.if = if_1._if;
//# sourceMappingURL=if.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/interval.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var interval_1 = __webpack_require__("./node_modules/rxjs/observable/interval.js");
Observable_1.Observable.interval = interval_1.interval;
//# sourceMappingURL=interval.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/merge.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var merge_1 = __webpack_require__("./node_modules/rxjs/observable/merge.js");
Observable_1.Observable.merge = merge_1.merge;
//# sourceMappingURL=merge.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/never.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var never_1 = __webpack_require__("./node_modules/rxjs/observable/never.js");
Observable_1.Observable.never = never_1.never;
//# sourceMappingURL=never.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/of.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var of_1 = __webpack_require__("./node_modules/rxjs/observable/of.js");
Observable_1.Observable.of = of_1.of;
//# sourceMappingURL=of.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/onErrorResumeNext.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var onErrorResumeNext_1 = __webpack_require__("./node_modules/rxjs/operator/onErrorResumeNext.js");
Observable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;
//# sourceMappingURL=onErrorResumeNext.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/pairs.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var pairs_1 = __webpack_require__("./node_modules/rxjs/observable/pairs.js");
Observable_1.Observable.pairs = pairs_1.pairs;
//# sourceMappingURL=pairs.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/race.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var race_1 = __webpack_require__("./node_modules/rxjs/operator/race.js");
Observable_1.Observable.race = race_1.raceStatic;
//# sourceMappingURL=race.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/range.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var range_1 = __webpack_require__("./node_modules/rxjs/observable/range.js");
Observable_1.Observable.range = range_1.range;
//# sourceMappingURL=range.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/throw.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var throw_1 = __webpack_require__("./node_modules/rxjs/observable/throw.js");
Observable_1.Observable.throw = throw_1._throw;
//# sourceMappingURL=throw.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/timer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var timer_1 = __webpack_require__("./node_modules/rxjs/observable/timer.js");
Observable_1.Observable.timer = timer_1.timer;
//# sourceMappingURL=timer.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/using.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var using_1 = __webpack_require__("./node_modules/rxjs/observable/using.js");
Observable_1.Observable.using = using_1.using;
//# sourceMappingURL=using.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/observable/zip.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var zip_1 = __webpack_require__("./node_modules/rxjs/observable/zip.js");
Observable_1.Observable.zip = zip_1.zip;
//# sourceMappingURL=zip.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/audit.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var audit_1 = __webpack_require__("./node_modules/rxjs/operator/audit.js");
Observable_1.Observable.prototype.audit = audit_1.audit;
//# sourceMappingURL=audit.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/auditTime.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var auditTime_1 = __webpack_require__("./node_modules/rxjs/operator/auditTime.js");
Observable_1.Observable.prototype.auditTime = auditTime_1.auditTime;
//# sourceMappingURL=auditTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/buffer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var buffer_1 = __webpack_require__("./node_modules/rxjs/operator/buffer.js");
Observable_1.Observable.prototype.buffer = buffer_1.buffer;
//# sourceMappingURL=buffer.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/bufferCount.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var bufferCount_1 = __webpack_require__("./node_modules/rxjs/operator/bufferCount.js");
Observable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;
//# sourceMappingURL=bufferCount.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/bufferTime.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var bufferTime_1 = __webpack_require__("./node_modules/rxjs/operator/bufferTime.js");
Observable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;
//# sourceMappingURL=bufferTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/bufferToggle.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var bufferToggle_1 = __webpack_require__("./node_modules/rxjs/operator/bufferToggle.js");
Observable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;
//# sourceMappingURL=bufferToggle.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/bufferWhen.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var bufferWhen_1 = __webpack_require__("./node_modules/rxjs/operator/bufferWhen.js");
Observable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;
//# sourceMappingURL=bufferWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/catch.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var catch_1 = __webpack_require__("./node_modules/rxjs/operator/catch.js");
Observable_1.Observable.prototype.catch = catch_1._catch;
Observable_1.Observable.prototype._catch = catch_1._catch;
//# sourceMappingURL=catch.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/combineAll.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var combineAll_1 = __webpack_require__("./node_modules/rxjs/operator/combineAll.js");
Observable_1.Observable.prototype.combineAll = combineAll_1.combineAll;
//# sourceMappingURL=combineAll.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/combineLatest.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var combineLatest_1 = __webpack_require__("./node_modules/rxjs/operator/combineLatest.js");
Observable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;
//# sourceMappingURL=combineLatest.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/concat.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var concat_1 = __webpack_require__("./node_modules/rxjs/operator/concat.js");
Observable_1.Observable.prototype.concat = concat_1.concat;
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/concatAll.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var concatAll_1 = __webpack_require__("./node_modules/rxjs/operator/concatAll.js");
Observable_1.Observable.prototype.concatAll = concatAll_1.concatAll;
//# sourceMappingURL=concatAll.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/concatMap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var concatMap_1 = __webpack_require__("./node_modules/rxjs/operator/concatMap.js");
Observable_1.Observable.prototype.concatMap = concatMap_1.concatMap;
//# sourceMappingURL=concatMap.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/concatMapTo.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var concatMapTo_1 = __webpack_require__("./node_modules/rxjs/operator/concatMapTo.js");
Observable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;
//# sourceMappingURL=concatMapTo.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/count.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var count_1 = __webpack_require__("./node_modules/rxjs/operator/count.js");
Observable_1.Observable.prototype.count = count_1.count;
//# sourceMappingURL=count.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/debounce.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var debounce_1 = __webpack_require__("./node_modules/rxjs/operator/debounce.js");
Observable_1.Observable.prototype.debounce = debounce_1.debounce;
//# sourceMappingURL=debounce.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/debounceTime.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var debounceTime_1 = __webpack_require__("./node_modules/rxjs/operator/debounceTime.js");
Observable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;
//# sourceMappingURL=debounceTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/defaultIfEmpty.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var defaultIfEmpty_1 = __webpack_require__("./node_modules/rxjs/operator/defaultIfEmpty.js");
Observable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
//# sourceMappingURL=defaultIfEmpty.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/delay.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var delay_1 = __webpack_require__("./node_modules/rxjs/operator/delay.js");
Observable_1.Observable.prototype.delay = delay_1.delay;
//# sourceMappingURL=delay.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/delayWhen.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var delayWhen_1 = __webpack_require__("./node_modules/rxjs/operator/delayWhen.js");
Observable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;
//# sourceMappingURL=delayWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/dematerialize.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var dematerialize_1 = __webpack_require__("./node_modules/rxjs/operator/dematerialize.js");
Observable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;
//# sourceMappingURL=dematerialize.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/distinct.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var distinct_1 = __webpack_require__("./node_modules/rxjs/operator/distinct.js");
Observable_1.Observable.prototype.distinct = distinct_1.distinct;
//# sourceMappingURL=distinct.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/distinctUntilChanged.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var distinctUntilChanged_1 = __webpack_require__("./node_modules/rxjs/operator/distinctUntilChanged.js");
Observable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
//# sourceMappingURL=distinctUntilChanged.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/distinctUntilKeyChanged.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var distinctUntilKeyChanged_1 = __webpack_require__("./node_modules/rxjs/operator/distinctUntilKeyChanged.js");
Observable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;
//# sourceMappingURL=distinctUntilKeyChanged.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/do.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var do_1 = __webpack_require__("./node_modules/rxjs/operator/do.js");
Observable_1.Observable.prototype.do = do_1._do;
Observable_1.Observable.prototype._do = do_1._do;
//# sourceMappingURL=do.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/elementAt.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var elementAt_1 = __webpack_require__("./node_modules/rxjs/operator/elementAt.js");
Observable_1.Observable.prototype.elementAt = elementAt_1.elementAt;
//# sourceMappingURL=elementAt.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/every.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var every_1 = __webpack_require__("./node_modules/rxjs/operator/every.js");
Observable_1.Observable.prototype.every = every_1.every;
//# sourceMappingURL=every.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/exhaust.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var exhaust_1 = __webpack_require__("./node_modules/rxjs/operator/exhaust.js");
Observable_1.Observable.prototype.exhaust = exhaust_1.exhaust;
//# sourceMappingURL=exhaust.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/exhaustMap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var exhaustMap_1 = __webpack_require__("./node_modules/rxjs/operator/exhaustMap.js");
Observable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;
//# sourceMappingURL=exhaustMap.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/expand.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var expand_1 = __webpack_require__("./node_modules/rxjs/operator/expand.js");
Observable_1.Observable.prototype.expand = expand_1.expand;
//# sourceMappingURL=expand.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/filter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var filter_1 = __webpack_require__("./node_modules/rxjs/operator/filter.js");
Observable_1.Observable.prototype.filter = filter_1.filter;
//# sourceMappingURL=filter.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/finally.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var finally_1 = __webpack_require__("./node_modules/rxjs/operator/finally.js");
Observable_1.Observable.prototype.finally = finally_1._finally;
Observable_1.Observable.prototype._finally = finally_1._finally;
//# sourceMappingURL=finally.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/find.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var find_1 = __webpack_require__("./node_modules/rxjs/operator/find.js");
Observable_1.Observable.prototype.find = find_1.find;
//# sourceMappingURL=find.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/findIndex.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var findIndex_1 = __webpack_require__("./node_modules/rxjs/operator/findIndex.js");
Observable_1.Observable.prototype.findIndex = findIndex_1.findIndex;
//# sourceMappingURL=findIndex.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/first.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var first_1 = __webpack_require__("./node_modules/rxjs/operator/first.js");
Observable_1.Observable.prototype.first = first_1.first;
//# sourceMappingURL=first.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/groupBy.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var groupBy_1 = __webpack_require__("./node_modules/rxjs/operator/groupBy.js");
Observable_1.Observable.prototype.groupBy = groupBy_1.groupBy;
//# sourceMappingURL=groupBy.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/ignoreElements.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var ignoreElements_1 = __webpack_require__("./node_modules/rxjs/operator/ignoreElements.js");
Observable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;
//# sourceMappingURL=ignoreElements.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/isEmpty.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var isEmpty_1 = __webpack_require__("./node_modules/rxjs/operator/isEmpty.js");
Observable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;
//# sourceMappingURL=isEmpty.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/last.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var last_1 = __webpack_require__("./node_modules/rxjs/operator/last.js");
Observable_1.Observable.prototype.last = last_1.last;
//# sourceMappingURL=last.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/let.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var let_1 = __webpack_require__("./node_modules/rxjs/operator/let.js");
Observable_1.Observable.prototype.let = let_1.letProto;
Observable_1.Observable.prototype.letBind = let_1.letProto;
//# sourceMappingURL=let.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/mapTo.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var mapTo_1 = __webpack_require__("./node_modules/rxjs/operator/mapTo.js");
Observable_1.Observable.prototype.mapTo = mapTo_1.mapTo;
//# sourceMappingURL=mapTo.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/materialize.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var materialize_1 = __webpack_require__("./node_modules/rxjs/operator/materialize.js");
Observable_1.Observable.prototype.materialize = materialize_1.materialize;
//# sourceMappingURL=materialize.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/max.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var max_1 = __webpack_require__("./node_modules/rxjs/operator/max.js");
Observable_1.Observable.prototype.max = max_1.max;
//# sourceMappingURL=max.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/merge.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var merge_1 = __webpack_require__("./node_modules/rxjs/operator/merge.js");
Observable_1.Observable.prototype.merge = merge_1.merge;
//# sourceMappingURL=merge.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/mergeAll.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var mergeAll_1 = __webpack_require__("./node_modules/rxjs/operator/mergeAll.js");
Observable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;
//# sourceMappingURL=mergeAll.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/mergeMapTo.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var mergeMapTo_1 = __webpack_require__("./node_modules/rxjs/operator/mergeMapTo.js");
Observable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;
Observable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;
//# sourceMappingURL=mergeMapTo.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/mergeScan.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var mergeScan_1 = __webpack_require__("./node_modules/rxjs/operator/mergeScan.js");
Observable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;
//# sourceMappingURL=mergeScan.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/min.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var min_1 = __webpack_require__("./node_modules/rxjs/operator/min.js");
Observable_1.Observable.prototype.min = min_1.min;
//# sourceMappingURL=min.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/multicast.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var multicast_1 = __webpack_require__("./node_modules/rxjs/operator/multicast.js");
Observable_1.Observable.prototype.multicast = multicast_1.multicast;
//# sourceMappingURL=multicast.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/observeOn.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var observeOn_1 = __webpack_require__("./node_modules/rxjs/operator/observeOn.js");
Observable_1.Observable.prototype.observeOn = observeOn_1.observeOn;
//# sourceMappingURL=observeOn.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/onErrorResumeNext.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var onErrorResumeNext_1 = __webpack_require__("./node_modules/rxjs/operator/onErrorResumeNext.js");
Observable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
//# sourceMappingURL=onErrorResumeNext.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/pairwise.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var pairwise_1 = __webpack_require__("./node_modules/rxjs/operator/pairwise.js");
Observable_1.Observable.prototype.pairwise = pairwise_1.pairwise;
//# sourceMappingURL=pairwise.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/partition.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var partition_1 = __webpack_require__("./node_modules/rxjs/operator/partition.js");
Observable_1.Observable.prototype.partition = partition_1.partition;
//# sourceMappingURL=partition.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/pluck.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var pluck_1 = __webpack_require__("./node_modules/rxjs/operator/pluck.js");
Observable_1.Observable.prototype.pluck = pluck_1.pluck;
//# sourceMappingURL=pluck.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/publish.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var publish_1 = __webpack_require__("./node_modules/rxjs/operator/publish.js");
Observable_1.Observable.prototype.publish = publish_1.publish;
//# sourceMappingURL=publish.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/publishBehavior.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var publishBehavior_1 = __webpack_require__("./node_modules/rxjs/operator/publishBehavior.js");
Observable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;
//# sourceMappingURL=publishBehavior.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/publishLast.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var publishLast_1 = __webpack_require__("./node_modules/rxjs/operator/publishLast.js");
Observable_1.Observable.prototype.publishLast = publishLast_1.publishLast;
//# sourceMappingURL=publishLast.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/publishReplay.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var publishReplay_1 = __webpack_require__("./node_modules/rxjs/operator/publishReplay.js");
Observable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;
//# sourceMappingURL=publishReplay.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/race.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var race_1 = __webpack_require__("./node_modules/rxjs/operator/race.js");
Observable_1.Observable.prototype.race = race_1.race;
//# sourceMappingURL=race.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/reduce.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var reduce_1 = __webpack_require__("./node_modules/rxjs/operator/reduce.js");
Observable_1.Observable.prototype.reduce = reduce_1.reduce;
//# sourceMappingURL=reduce.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/repeat.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var repeat_1 = __webpack_require__("./node_modules/rxjs/operator/repeat.js");
Observable_1.Observable.prototype.repeat = repeat_1.repeat;
//# sourceMappingURL=repeat.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/repeatWhen.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var repeatWhen_1 = __webpack_require__("./node_modules/rxjs/operator/repeatWhen.js");
Observable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;
//# sourceMappingURL=repeatWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/retry.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var retry_1 = __webpack_require__("./node_modules/rxjs/operator/retry.js");
Observable_1.Observable.prototype.retry = retry_1.retry;
//# sourceMappingURL=retry.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/retryWhen.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var retryWhen_1 = __webpack_require__("./node_modules/rxjs/operator/retryWhen.js");
Observable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;
//# sourceMappingURL=retryWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/sample.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var sample_1 = __webpack_require__("./node_modules/rxjs/operator/sample.js");
Observable_1.Observable.prototype.sample = sample_1.sample;
//# sourceMappingURL=sample.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/sampleTime.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var sampleTime_1 = __webpack_require__("./node_modules/rxjs/operator/sampleTime.js");
Observable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;
//# sourceMappingURL=sampleTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/scan.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var scan_1 = __webpack_require__("./node_modules/rxjs/operator/scan.js");
Observable_1.Observable.prototype.scan = scan_1.scan;
//# sourceMappingURL=scan.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/sequenceEqual.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var sequenceEqual_1 = __webpack_require__("./node_modules/rxjs/operator/sequenceEqual.js");
Observable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;
//# sourceMappingURL=sequenceEqual.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/share.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var share_1 = __webpack_require__("./node_modules/rxjs/operator/share.js");
Observable_1.Observable.prototype.share = share_1.share;
//# sourceMappingURL=share.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/single.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var single_1 = __webpack_require__("./node_modules/rxjs/operator/single.js");
Observable_1.Observable.prototype.single = single_1.single;
//# sourceMappingURL=single.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/skip.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var skip_1 = __webpack_require__("./node_modules/rxjs/operator/skip.js");
Observable_1.Observable.prototype.skip = skip_1.skip;
//# sourceMappingURL=skip.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/skipUntil.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var skipUntil_1 = __webpack_require__("./node_modules/rxjs/operator/skipUntil.js");
Observable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;
//# sourceMappingURL=skipUntil.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/skipWhile.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var skipWhile_1 = __webpack_require__("./node_modules/rxjs/operator/skipWhile.js");
Observable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;
//# sourceMappingURL=skipWhile.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/startWith.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var startWith_1 = __webpack_require__("./node_modules/rxjs/operator/startWith.js");
Observable_1.Observable.prototype.startWith = startWith_1.startWith;
//# sourceMappingURL=startWith.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/subscribeOn.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var subscribeOn_1 = __webpack_require__("./node_modules/rxjs/operator/subscribeOn.js");
Observable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;
//# sourceMappingURL=subscribeOn.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/switch.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var switch_1 = __webpack_require__("./node_modules/rxjs/operator/switch.js");
Observable_1.Observable.prototype.switch = switch_1._switch;
Observable_1.Observable.prototype._switch = switch_1._switch;
//# sourceMappingURL=switch.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/switchMap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var switchMap_1 = __webpack_require__("./node_modules/rxjs/operator/switchMap.js");
Observable_1.Observable.prototype.switchMap = switchMap_1.switchMap;
//# sourceMappingURL=switchMap.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/switchMapTo.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var switchMapTo_1 = __webpack_require__("./node_modules/rxjs/operator/switchMapTo.js");
Observable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;
//# sourceMappingURL=switchMapTo.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/take.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var take_1 = __webpack_require__("./node_modules/rxjs/operator/take.js");
Observable_1.Observable.prototype.take = take_1.take;
//# sourceMappingURL=take.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/takeLast.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var takeLast_1 = __webpack_require__("./node_modules/rxjs/operator/takeLast.js");
Observable_1.Observable.prototype.takeLast = takeLast_1.takeLast;
//# sourceMappingURL=takeLast.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/takeUntil.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var takeUntil_1 = __webpack_require__("./node_modules/rxjs/operator/takeUntil.js");
Observable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;
//# sourceMappingURL=takeUntil.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/takeWhile.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var takeWhile_1 = __webpack_require__("./node_modules/rxjs/operator/takeWhile.js");
Observable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;
//# sourceMappingURL=takeWhile.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/throttle.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var throttle_1 = __webpack_require__("./node_modules/rxjs/operator/throttle.js");
Observable_1.Observable.prototype.throttle = throttle_1.throttle;
//# sourceMappingURL=throttle.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/throttleTime.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var throttleTime_1 = __webpack_require__("./node_modules/rxjs/operator/throttleTime.js");
Observable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;
//# sourceMappingURL=throttleTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/timeInterval.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var timeInterval_1 = __webpack_require__("./node_modules/rxjs/operator/timeInterval.js");
Observable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;
//# sourceMappingURL=timeInterval.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/timeout.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var timeout_1 = __webpack_require__("./node_modules/rxjs/operator/timeout.js");
Observable_1.Observable.prototype.timeout = timeout_1.timeout;
//# sourceMappingURL=timeout.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/timeoutWith.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var timeoutWith_1 = __webpack_require__("./node_modules/rxjs/operator/timeoutWith.js");
Observable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;
//# sourceMappingURL=timeoutWith.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/timestamp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var timestamp_1 = __webpack_require__("./node_modules/rxjs/operator/timestamp.js");
Observable_1.Observable.prototype.timestamp = timestamp_1.timestamp;
//# sourceMappingURL=timestamp.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/toArray.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var toArray_1 = __webpack_require__("./node_modules/rxjs/operator/toArray.js");
Observable_1.Observable.prototype.toArray = toArray_1.toArray;
//# sourceMappingURL=toArray.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/toPromise.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var toPromise_1 = __webpack_require__("./node_modules/rxjs/operator/toPromise.js");
Observable_1.Observable.prototype.toPromise = toPromise_1.toPromise;
//# sourceMappingURL=toPromise.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/window.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var window_1 = __webpack_require__("./node_modules/rxjs/operator/window.js");
Observable_1.Observable.prototype.window = window_1.window;
//# sourceMappingURL=window.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/windowCount.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var windowCount_1 = __webpack_require__("./node_modules/rxjs/operator/windowCount.js");
Observable_1.Observable.prototype.windowCount = windowCount_1.windowCount;
//# sourceMappingURL=windowCount.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/windowTime.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var windowTime_1 = __webpack_require__("./node_modules/rxjs/operator/windowTime.js");
Observable_1.Observable.prototype.windowTime = windowTime_1.windowTime;
//# sourceMappingURL=windowTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/windowToggle.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var windowToggle_1 = __webpack_require__("./node_modules/rxjs/operator/windowToggle.js");
Observable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;
//# sourceMappingURL=windowToggle.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/windowWhen.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var windowWhen_1 = __webpack_require__("./node_modules/rxjs/operator/windowWhen.js");
Observable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;
//# sourceMappingURL=windowWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/withLatestFrom.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var withLatestFrom_1 = __webpack_require__("./node_modules/rxjs/operator/withLatestFrom.js");
Observable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;
//# sourceMappingURL=withLatestFrom.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/zip.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var zip_1 = __webpack_require__("./node_modules/rxjs/operator/zip.js");
Observable_1.Observable.prototype.zip = zip_1.zipProto;
//# sourceMappingURL=zip.js.map

/***/ }),

/***/ "./node_modules/rxjs/add/operator/zipAll.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var zipAll_1 = __webpack_require__("./node_modules/rxjs/operator/zipAll.js");
Observable_1.Observable.prototype.zipAll = zipAll_1.zipAll;
//# sourceMappingURL=zipAll.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/BoundCallbackObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
var AsyncSubject_1 = __webpack_require__("./node_modules/rxjs/AsyncSubject.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var BoundCallbackObservable = (function (_super) {
    __extends(BoundCallbackObservable, _super);
    function BoundCallbackObservable(callbackFunc, selector, args, scheduler) {
        _super.call(this);
        this.callbackFunc = callbackFunc;
        this.selector = selector;
        this.args = args;
        this.scheduler = scheduler;
    }
    /* tslint:enable:max-line-length */
    /**
     * Converts a callback API to a function that returns an Observable.
     *
     * <span class="informal">Give it a function `f` of type `f(x, callback)` and
     * it will return a function `g` that when called as `g(x)` will output an
     * Observable.</span>
     *
     * `bindCallback` is not an operator because its input and output are not
     * Observables. The input is a function `func` with some parameters, but the
     * last parameter must be a callback function that `func` calls when it is
     * done. The output of `bindCallback` is a function that takes the same
     * parameters as `func`, except the last one (the callback). When the output
     * function is called with arguments, it will return an Observable where the
     * results will be delivered to.
     *
     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>
     * // Suppose we have jQuery.getJSON('/my/url', callback)
     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);
     * var result = getJSONAsObservable('/my/url');
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     * @see {@link bindNodeCallback}
     * @see {@link from}
     * @see {@link fromPromise}
     *
     * @param {function} func Function with a callback as the last parameter.
     * @param {function} [selector] A function which takes the arguments from the
     * callback and maps those a value to emit on the output Observable.
     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
     * callbacks.
     * @return {function(...params: *): Observable} A function which returns the
     * Observable that delivers the same values the callback would deliver.
     * @static true
     * @name bindCallback
     * @owner Observable
     */
    BoundCallbackObservable.create = function (func, selector, scheduler) {
        if (selector === void 0) { selector = undefined; }
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return new BoundCallbackObservable(func, selector, args, scheduler);
        };
    };
    BoundCallbackObservable.prototype._subscribe = function (subscriber) {
        var callbackFunc = this.callbackFunc;
        var args = this.args;
        var scheduler = this.scheduler;
        var subject = this.subject;
        if (!scheduler) {
            if (!subject) {
                subject = this.subject = new AsyncSubject_1.AsyncSubject();
                var handler = function handlerFn() {
                    var innerArgs = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        innerArgs[_i - 0] = arguments[_i];
                    }
                    var source = handlerFn.source;
                    var selector = source.selector, subject = source.subject;
                    if (selector) {
                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
                        if (result_1 === errorObject_1.errorObject) {
                            subject.error(errorObject_1.errorObject.e);
                        }
                        else {
                            subject.next(result_1);
                            subject.complete();
                        }
                    }
                    else {
                        subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    }
                };
                // use named function instance to avoid closure.
                handler.source = this;
                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
                if (result === errorObject_1.errorObject) {
                    subject.error(errorObject_1.errorObject.e);
                }
            }
            return subject.subscribe(subscriber);
        }
        else {
            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber });
        }
    };
    BoundCallbackObservable.dispatch = function (state) {
        var self = this;
        var source = state.source, subscriber = state.subscriber;
        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;
        var subject = source.subject;
        if (!subject) {
            subject = source.subject = new AsyncSubject_1.AsyncSubject();
            var handler = function handlerFn() {
                var innerArgs = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    innerArgs[_i - 0] = arguments[_i];
                }
                var source = handlerFn.source;
                var selector = source.selector, subject = source.subject;
                if (selector) {
                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
                    if (result_2 === errorObject_1.errorObject) {
                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));
                    }
                    else {
                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));
                    }
                }
                else {
                    var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;
                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
                }
            };
            // use named function to pass values in without closure
            handler.source = source;
            var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
            if (result === errorObject_1.errorObject) {
                subject.error(errorObject_1.errorObject.e);
            }
        }
        self.add(subject.subscribe(subscriber));
    };
    return BoundCallbackObservable;
}(Observable_1.Observable));
exports.BoundCallbackObservable = BoundCallbackObservable;
function dispatchNext(arg) {
    var value = arg.value, subject = arg.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(arg) {
    var err = arg.err, subject = arg.subject;
    subject.error(err);
}
//# sourceMappingURL=BoundCallbackObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/BoundNodeCallbackObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
var AsyncSubject_1 = __webpack_require__("./node_modules/rxjs/AsyncSubject.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var BoundNodeCallbackObservable = (function (_super) {
    __extends(BoundNodeCallbackObservable, _super);
    function BoundNodeCallbackObservable(callbackFunc, selector, args, scheduler) {
        _super.call(this);
        this.callbackFunc = callbackFunc;
        this.selector = selector;
        this.args = args;
        this.scheduler = scheduler;
    }
    /* tslint:enable:max-line-length */
    /**
     * Converts a Node.js-style callback API to a function that returns an
     * Observable.
     *
     * <span class="informal">It's just like {@link bindCallback}, but the
     * callback is expected to be of type `callback(error, result)`.</span>
     *
     * `bindNodeCallback` is not an operator because its input and output are not
     * Observables. The input is a function `func` with some parameters, but the
     * last parameter must be a callback function that `func` calls when it is
     * done. The callback function is expected to follow Node.js conventions,
     * where the first argument to the callback is an error, while remaining
     * arguments are the callback result. The output of `bindNodeCallback` is a
     * function that takes the same parameters as `func`, except the last one (the
     * callback). When the output function is called with arguments, it will
     * return an Observable where the results will be delivered to.
     *
     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>
     * import * as fs from 'fs';
     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);
     * var result = readFileAsObservable('./roadNames.txt', 'utf8');
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     * @see {@link bindCallback}
     * @see {@link from}
     * @see {@link fromPromise}
     *
     * @param {function} func Function with a callback as the last parameter.
     * @param {function} [selector] A function which takes the arguments from the
     * callback and maps those a value to emit on the output Observable.
     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
     * callbacks.
     * @return {function(...params: *): Observable} A function which returns the
     * Observable that delivers the same values the Node.js callback would
     * deliver.
     * @static true
     * @name bindNodeCallback
     * @owner Observable
     */
    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {
        if (selector === void 0) { selector = undefined; }
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return new BoundNodeCallbackObservable(func, selector, args, scheduler);
        };
    };
    BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {
        var callbackFunc = this.callbackFunc;
        var args = this.args;
        var scheduler = this.scheduler;
        var subject = this.subject;
        if (!scheduler) {
            if (!subject) {
                subject = this.subject = new AsyncSubject_1.AsyncSubject();
                var handler = function handlerFn() {
                    var innerArgs = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        innerArgs[_i - 0] = arguments[_i];
                    }
                    var source = handlerFn.source;
                    var selector = source.selector, subject = source.subject;
                    var err = innerArgs.shift();
                    if (err) {
                        subject.error(err);
                    }
                    else if (selector) {
                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
                        if (result_1 === errorObject_1.errorObject) {
                            subject.error(errorObject_1.errorObject.e);
                        }
                        else {
                            subject.next(result_1);
                            subject.complete();
                        }
                    }
                    else {
                        subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    }
                };
                // use named function instance to avoid closure.
                handler.source = this;
                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
                if (result === errorObject_1.errorObject) {
                    subject.error(errorObject_1.errorObject.e);
                }
            }
            return subject.subscribe(subscriber);
        }
        else {
            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber });
        }
    };
    return BoundNodeCallbackObservable;
}(Observable_1.Observable));
exports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;
function dispatch(state) {
    var self = this;
    var source = state.source, subscriber = state.subscriber;
    // XXX: cast to `any` to access to the private field in `source`.
    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;
    var subject = source.subject;
    if (!subject) {
        subject = source.subject = new AsyncSubject_1.AsyncSubject();
        var handler = function handlerFn() {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i - 0] = arguments[_i];
            }
            var source = handlerFn.source;
            var selector = source.selector, subject = source.subject;
            var err = innerArgs.shift();
            if (err) {
                subject.error(err);
            }
            else if (selector) {
                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
                if (result_2 === errorObject_1.errorObject) {
                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));
                }
                else {
                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));
                }
            }
            else {
                var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;
                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
            }
        };
        // use named function to pass values in without closure
        handler.source = source;
        var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
        if (result === errorObject_1.errorObject) {
            subject.error(errorObject_1.errorObject.e);
        }
    }
    self.add(subject.subscribe(subscriber));
}
function dispatchNext(arg) {
    var value = arg.value, subject = arg.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(arg) {
    var err = arg.err, subject = arg.subject;
    subject.error(err);
}
//# sourceMappingURL=BoundNodeCallbackObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/ConnectableObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
/**
 * @class ConnectableObservable<T>
 */
var ConnectableObservable = (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        _super.call(this);
        this.source = source;
        this.subjectFactory = subjectFactory;
        this._refCount = 0;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            connection = this._connection = new Subscription_1.Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription_1.Subscription.EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return this.lift(new RefCountOperator(this));
    };
    return ConnectableObservable;
}(Observable_1.Observable));
exports.ConnectableObservable = ConnectableObservable;
exports.connectableObservableDescriptor = {
    operator: { value: null },
    _refCount: { value: 0, writable: true },
    _subscribe: { value: ConnectableObservable.prototype._subscribe },
    getSubject: { value: ConnectableObservable.prototype.getSubject },
    connect: { value: ConnectableObservable.prototype.connect },
    refCount: { value: ConnectableObservable.prototype.refCount }
};
var ConnectableSubscriber = (function (_super) {
    __extends(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber));
var RefCountOperator = (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=ConnectableObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/DeferObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var DeferObservable = (function (_super) {
    __extends(DeferObservable, _super);
    function DeferObservable(observableFactory) {
        _super.call(this);
        this.observableFactory = observableFactory;
    }
    /**
     * Creates an Observable that, on subscribe, calls an Observable factory to
     * make an Observable for each new Observer.
     *
     * <span class="informal">Creates the Observable lazily, that is, only when it
     * is subscribed.
     * </span>
     *
     * <img src="./img/defer.png" width="100%">
     *
     * `defer` allows you to create the Observable only when the Observer
     * subscribes, and create a fresh Observable for each Observer. It waits until
     * an Observer subscribes to it, and then it generates an Observable,
     * typically with an Observable factory function. It does this afresh for each
     * subscriber, so although each subscriber may think it is subscribing to the
     * same Observable, in fact each subscriber gets its own individual
     * Observable.
     *
     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>
     * var clicksOrInterval = Rx.Observable.defer(function () {
     *   if (Math.random() > 0.5) {
     *     return Rx.Observable.fromEvent(document, 'click');
     *   } else {
     *     return Rx.Observable.interval(1000);
     *   }
     * });
     * clicksOrInterval.subscribe(x => console.log(x));
     *
     * // Results in the following behavior:
     * // If the result of Math.random() is greater than 0.5 it will listen
     * // for clicks anywhere on the "document"; when document is clicked it
     * // will log a MouseEvent object to the console. If the result is less
     * // than 0.5 it will emit ascending numbers, one every second(1000ms).
     *
     * @see {@link create}
     *
     * @param {function(): Observable|Promise} observableFactory The Observable
     * factory function to invoke for each Observer that subscribes to the output
     * Observable. May also return a Promise, which will be converted on the fly
     * to an Observable.
     * @return {Observable} An Observable whose Observers' subscriptions trigger
     * an invocation of the given Observable factory function.
     * @static true
     * @name defer
     * @owner Observable
     */
    DeferObservable.create = function (observableFactory) {
        return new DeferObservable(observableFactory);
    };
    DeferObservable.prototype._subscribe = function (subscriber) {
        return new DeferSubscriber(subscriber, this.observableFactory);
    };
    return DeferObservable;
}(Observable_1.Observable));
exports.DeferObservable = DeferObservable;
var DeferSubscriber = (function (_super) {
    __extends(DeferSubscriber, _super);
    function DeferSubscriber(destination, factory) {
        _super.call(this, destination);
        this.factory = factory;
        this.tryDefer();
    }
    DeferSubscriber.prototype.tryDefer = function () {
        try {
            this._callFactory();
        }
        catch (err) {
            this._error(err);
        }
    };
    DeferSubscriber.prototype._callFactory = function () {
        var result = this.factory();
        if (result) {
            this.add(subscribeToResult_1.subscribeToResult(this, result));
        }
    };
    return DeferSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=DeferObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/ErrorObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ErrorObservable = (function (_super) {
    __extends(ErrorObservable, _super);
    function ErrorObservable(error, scheduler) {
        _super.call(this);
        this.error = error;
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable that emits no items to the Observer and immediately
     * emits an error notification.
     *
     * <span class="informal">Just emits 'error', and nothing else.
     * </span>
     *
     * <img src="./img/throw.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the error notification. It can be used for composing with other
     * Observables, such as in a {@link mergeMap}.
     *
     * @example <caption>Emit the number 7, then emit an error.</caption>
     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>
     * var interval = Rx.Observable.interval(1000);
     * var result = interval.mergeMap(x =>
     *   x === 13 ?
     *     Rx.Observable.throw('Thirteens are bad') :
     *     Rx.Observable.of('a', 'b', 'c')
     * );
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     * @see {@link create}
     * @see {@link empty}
     * @see {@link never}
     * @see {@link of}
     *
     * @param {any} error The particular Error to pass to the error notification.
     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
     * the emission of the error notification.
     * @return {Observable} An error Observable: emits only the error notification
     * using the given error argument.
     * @static true
     * @name throw
     * @owner Observable
     */
    ErrorObservable.create = function (error, scheduler) {
        return new ErrorObservable(error, scheduler);
    };
    ErrorObservable.dispatch = function (arg) {
        var error = arg.error, subscriber = arg.subscriber;
        subscriber.error(error);
    };
    ErrorObservable.prototype._subscribe = function (subscriber) {
        var error = this.error;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ErrorObservable.dispatch, 0, {
                error: error, subscriber: subscriber
            });
        }
        else {
            subscriber.error(error);
        }
    };
    return ErrorObservable;
}(Observable_1.Observable));
exports.ErrorObservable = ErrorObservable;
//# sourceMappingURL=ErrorObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/ForkJoinObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var EmptyObservable_1 = __webpack_require__("./node_modules/rxjs/observable/EmptyObservable.js");
var isArray_1 = __webpack_require__("./node_modules/rxjs/util/isArray.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ForkJoinObservable = (function (_super) {
    __extends(ForkJoinObservable, _super);
    function ForkJoinObservable(sources, resultSelector) {
        _super.call(this);
        this.sources = sources;
        this.resultSelector = resultSelector;
    }
    /* tslint:enable:max-line-length */
    /**
     * @param sources
     * @return {any}
     * @static true
     * @name forkJoin
     * @owner Observable
     */
    ForkJoinObservable.create = function () {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i - 0] = arguments[_i];
        }
        if (sources === null || arguments.length === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        var resultSelector = null;
        if (typeof sources[sources.length - 1] === 'function') {
            resultSelector = sources.pop();
        }
        // if the first and only other argument besides the resultSelector is an array
        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`
        if (sources.length === 1 && isArray_1.isArray(sources[0])) {
            sources = sources[0];
        }
        if (sources.length === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        return new ForkJoinObservable(sources, resultSelector);
    };
    ForkJoinObservable.prototype._subscribe = function (subscriber) {
        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
    };
    return ForkJoinObservable;
}(Observable_1.Observable));
exports.ForkJoinObservable = ForkJoinObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ForkJoinSubscriber = (function (_super) {
    __extends(ForkJoinSubscriber, _super);
    function ForkJoinSubscriber(destination, sources, resultSelector) {
        _super.call(this, destination);
        this.sources = sources;
        this.resultSelector = resultSelector;
        this.completed = 0;
        this.haveValues = 0;
        var len = sources.length;
        this.total = len;
        this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            var source = sources[i];
            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
            if (innerSubscription) {
                innerSubscription.outerIndex = i;
                this.add(innerSubscription);
            }
        }
    }
    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        if (!innerSub._hasValue) {
            innerSub._hasValue = true;
            this.haveValues++;
        }
    };
    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
        var destination = this.destination;
        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;
        var len = values.length;
        if (!innerSub._hasValue) {
            destination.complete();
            return;
        }
        this.completed++;
        if (this.completed !== len) {
            return;
        }
        if (haveValues === len) {
            var value = resultSelector ? resultSelector.apply(this, values) : values;
            destination.next(value);
        }
        destination.complete();
    };
    return ForkJoinSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=ForkJoinObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/FromEventObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var isFunction_1 = __webpack_require__("./node_modules/rxjs/util/isFunction.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
var toString = Object.prototype.toString;
function isNodeStyleEventEmmitter(sourceObj) {
    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isNodeList(sourceObj) {
    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';
}
function isHTMLCollection(sourceObj) {
    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';
}
function isEventTarget(sourceObj) {
    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var FromEventObservable = (function (_super) {
    __extends(FromEventObservable, _super);
    function FromEventObservable(sourceObj, eventName, selector, options) {
        _super.call(this);
        this.sourceObj = sourceObj;
        this.eventName = eventName;
        this.selector = selector;
        this.options = options;
    }
    /* tslint:enable:max-line-length */
    /**
     * Creates an Observable that emits events of a specific type coming from the
     * given event target.
     *
     * <span class="informal">Creates an Observable from DOM events, or Node
     * EventEmitter events or others.</span>
     *
     * <img src="./img/fromEvent.png" width="100%">
     *
     * Creates an Observable by attaching an event listener to an "event target",
     * which may be an object with `addEventListener` and `removeEventListener`,
     * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the
     * DOM, or an HTMLCollection from the DOM. The event handler is attached when
     * the output Observable is subscribed, and removed when the Subscription is
     * unsubscribed.
     *
     * @example <caption>Emits clicks happening on the DOM document</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * clicks.subscribe(x => console.log(x));
     *
     * // Results in:
     * // MouseEvent object logged to console everytime a click
     * // occurs on the document.
     *
     * @see {@link from}
     * @see {@link fromEventPattern}
     *
     * @param {EventTargetLike} target The DOMElement, event target, Node.js
     * EventEmitter, NodeList or HTMLCollection to attach the event handler to.
     * @param {string} eventName The event name of interest, being emitted by the
     * `target`.
     * @param {EventListenerOptions} [options] Options to pass through to addEventListener
     * @param {SelectorMethodSignature<T>} [selector] An optional function to
     * post-process results. It takes the arguments from the event handler and
     * should return a single value.
     * @return {Observable<T>}
     * @static true
     * @name fromEvent
     * @owner Observable
     */
    FromEventObservable.create = function (target, eventName, options, selector) {
        if (isFunction_1.isFunction(options)) {
            selector = options;
            options = undefined;
        }
        return new FromEventObservable(target, eventName, selector, options);
    };
    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {
        var unsubscribe;
        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {
            for (var i = 0, len = sourceObj.length; i < len; i++) {
                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
            }
        }
        else if (isEventTarget(sourceObj)) {
            var source_1 = sourceObj;
            sourceObj.addEventListener(eventName, handler, options);
            unsubscribe = function () { return source_1.removeEventListener(eventName, handler); };
        }
        else if (isJQueryStyleEventEmitter(sourceObj)) {
            var source_2 = sourceObj;
            sourceObj.on(eventName, handler);
            unsubscribe = function () { return source_2.off(eventName, handler); };
        }
        else if (isNodeStyleEventEmmitter(sourceObj)) {
            var source_3 = sourceObj;
            sourceObj.addListener(eventName, handler);
            unsubscribe = function () { return source_3.removeListener(eventName, handler); };
        }
        else {
            throw new TypeError('Invalid event target');
        }
        subscriber.add(new Subscription_1.Subscription(unsubscribe));
    };
    FromEventObservable.prototype._subscribe = function (subscriber) {
        var sourceObj = this.sourceObj;
        var eventName = this.eventName;
        var options = this.options;
        var selector = this.selector;
        var handler = selector ? function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);
            if (result === errorObject_1.errorObject) {
                subscriber.error(errorObject_1.errorObject.e);
            }
            else {
                subscriber.next(result);
            }
        } : function (e) { return subscriber.next(e); };
        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);
    };
    return FromEventObservable;
}(Observable_1.Observable));
exports.FromEventObservable = FromEventObservable;
//# sourceMappingURL=FromEventObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/FromEventPatternObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var FromEventPatternObservable = (function (_super) {
    __extends(FromEventPatternObservable, _super);
    function FromEventPatternObservable(addHandler, removeHandler, selector) {
        _super.call(this);
        this.addHandler = addHandler;
        this.removeHandler = removeHandler;
        this.selector = selector;
    }
    /**
     * Creates an Observable from an API based on addHandler/removeHandler
     * functions.
     *
     * <span class="informal">Converts any addHandler/removeHandler API to an
     * Observable.</span>
     *
     * <img src="./img/fromEventPattern.png" width="100%">
     *
     * Creates an Observable by using the `addHandler` and `removeHandler`
     * functions to add and remove the handlers, with an optional selector
     * function to project the event arguments to a result. The `addHandler` is
     * called when the output Observable is subscribed, and `removeHandler` is
     * called when the Subscription is unsubscribed.
     *
     * @example <caption>Emits clicks happening on the DOM document</caption>
     * function addClickHandler(handler) {
     *   document.addEventListener('click', handler);
     * }
     *
     * function removeClickHandler(handler) {
     *   document.removeEventListener('click', handler);
     * }
     *
     * var clicks = Rx.Observable.fromEventPattern(
     *   addClickHandler,
     *   removeClickHandler
     * );
     * clicks.subscribe(x => console.log(x));
     *
     * @see {@link from}
     * @see {@link fromEvent}
     *
     * @param {function(handler: Function): any} addHandler A function that takes
     * a `handler` function as argument and attaches it somehow to the actual
     * source of events.
     * @param {function(handler: Function): void} removeHandler A function that
     * takes a `handler` function as argument and removes it in case it was
     * previously attached using `addHandler`.
     * @param {function(...args: any): T} [selector] An optional function to
     * post-process results. It takes the arguments from the event handler and
     * should return a single value.
     * @return {Observable<T>}
     * @static true
     * @name fromEventPattern
     * @owner Observable
     */
    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {
        return new FromEventPatternObservable(addHandler, removeHandler, selector);
    };
    FromEventPatternObservable.prototype._subscribe = function (subscriber) {
        var _this = this;
        var removeHandler = this.removeHandler;
        var handler = !!this.selector ? function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            _this._callSelector(subscriber, args);
        } : function (e) { subscriber.next(e); };
        this._callAddHandler(handler, subscriber);
        subscriber.add(new Subscription_1.Subscription(function () {
            //TODO: determine whether or not to forward to error handler
            removeHandler(handler);
        }));
    };
    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {
        try {
            var result = this.selector.apply(this, args);
            subscriber.next(result);
        }
        catch (e) {
            subscriber.error(e);
        }
    };
    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {
        try {
            this.addHandler(handler);
        }
        catch (e) {
            errorSubscriber.error(e);
        }
    };
    return FromEventPatternObservable;
}(Observable_1.Observable));
exports.FromEventPatternObservable = FromEventPatternObservable;
//# sourceMappingURL=FromEventPatternObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/GenerateObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var isScheduler_1 = __webpack_require__("./node_modules/rxjs/util/isScheduler.js");
var selfSelector = function (value) { return value; };
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var GenerateObservable = (function (_super) {
    __extends(GenerateObservable, _super);
    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {
        _super.call(this);
        this.initialState = initialState;
        this.condition = condition;
        this.iterate = iterate;
        this.resultSelector = resultSelector;
        this.scheduler = scheduler;
    }
    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
        if (arguments.length == 1) {
            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);
        }
        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {
            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);
        }
        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);
    };
    GenerateObservable.prototype._subscribe = function (subscriber) {
        var state = this.initialState;
        if (this.scheduler) {
            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {
                subscriber: subscriber,
                iterate: this.iterate,
                condition: this.condition,
                resultSelector: this.resultSelector,
                state: state });
        }
        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;
        do {
            if (condition) {
                var conditionResult = void 0;
                try {
                    conditionResult = condition(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (!conditionResult) {
                    subscriber.complete();
                    break;
                }
            }
            var value = void 0;
            try {
                value = resultSelector(state);
            }
            catch (err) {
                subscriber.error(err);
                return;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                break;
            }
            try {
                state = iterate(state);
            }
            catch (err) {
                subscriber.error(err);
                return;
            }
        } while (true);
    };
    GenerateObservable.dispatch = function (state) {
        var subscriber = state.subscriber, condition = state.condition;
        if (subscriber.closed) {
            return;
        }
        if (state.needIterate) {
            try {
                state.state = state.iterate(state.state);
            }
            catch (err) {
                subscriber.error(err);
                return;
            }
        }
        else {
            state.needIterate = true;
        }
        if (condition) {
            var conditionResult = void 0;
            try {
                conditionResult = condition(state.state);
            }
            catch (err) {
                subscriber.error(err);
                return;
            }
            if (!conditionResult) {
                subscriber.complete();
                return;
            }
            if (subscriber.closed) {
                return;
            }
        }
        var value;
        try {
            value = state.resultSelector(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return;
        }
        if (subscriber.closed) {
            return;
        }
        subscriber.next(value);
        if (subscriber.closed) {
            return;
        }
        return this.schedule(state);
    };
    return GenerateObservable;
}(Observable_1.Observable));
exports.GenerateObservable = GenerateObservable;
//# sourceMappingURL=GenerateObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/IfObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var IfObservable = (function (_super) {
    __extends(IfObservable, _super);
    function IfObservable(condition, thenSource, elseSource) {
        _super.call(this);
        this.condition = condition;
        this.thenSource = thenSource;
        this.elseSource = elseSource;
    }
    IfObservable.create = function (condition, thenSource, elseSource) {
        return new IfObservable(condition, thenSource, elseSource);
    };
    IfObservable.prototype._subscribe = function (subscriber) {
        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;
        return new IfSubscriber(subscriber, condition, thenSource, elseSource);
    };
    return IfObservable;
}(Observable_1.Observable));
exports.IfObservable = IfObservable;
var IfSubscriber = (function (_super) {
    __extends(IfSubscriber, _super);
    function IfSubscriber(destination, condition, thenSource, elseSource) {
        _super.call(this, destination);
        this.condition = condition;
        this.thenSource = thenSource;
        this.elseSource = elseSource;
        this.tryIf();
    }
    IfSubscriber.prototype.tryIf = function () {
        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;
        var result;
        try {
            result = condition();
            var source = result ? thenSource : elseSource;
            if (source) {
                this.add(subscribeToResult_1.subscribeToResult(this, source));
            }
            else {
                this._complete();
            }
        }
        catch (err) {
            this._error(err);
        }
    };
    return IfSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=IfObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/IntervalObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isNumeric_1 = __webpack_require__("./node_modules/rxjs/util/isNumeric.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var IntervalObservable = (function (_super) {
    __extends(IntervalObservable, _super);
    function IntervalObservable(period, scheduler) {
        if (period === void 0) { period = 0; }
        if (scheduler === void 0) { scheduler = async_1.async; }
        _super.call(this);
        this.period = period;
        this.scheduler = scheduler;
        if (!isNumeric_1.isNumeric(period) || period < 0) {
            this.period = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            this.scheduler = async_1.async;
        }
    }
    /**
     * Creates an Observable that emits sequential numbers every specified
     * interval of time, on a specified Scheduler.
     *
     * <span class="informal">Emits incremental numbers periodically in time.
     * </span>
     *
     * <img src="./img/interval.png" width="100%">
     *
     * `interval` returns an Observable that emits an infinite sequence of
     * ascending integers, with a constant interval of time of your choosing
     * between those emissions. The first emission is not sent immediately, but
     * only after the first period has passed. By default, this operator uses the
     * `async` Scheduler to provide a notion of time, but you may pass any
     * Scheduler to it.
     *
     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>
     * var numbers = Rx.Observable.interval(1000);
     * numbers.subscribe(x => console.log(x));
     *
     * @see {@link timer}
     * @see {@link delay}
     *
     * @param {number} [period=0] The interval size in milliseconds (by default)
     * or the time unit determined by the scheduler's clock.
     * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling
     * the emission of values, and providing a notion of "time".
     * @return {Observable} An Observable that emits a sequential number each time
     * interval.
     * @static true
     * @name interval
     * @owner Observable
     */
    IntervalObservable.create = function (period, scheduler) {
        if (period === void 0) { period = 0; }
        if (scheduler === void 0) { scheduler = async_1.async; }
        return new IntervalObservable(period, scheduler);
    };
    IntervalObservable.dispatch = function (state) {
        var index = state.index, subscriber = state.subscriber, period = state.period;
        subscriber.next(index);
        if (subscriber.closed) {
            return;
        }
        state.index += 1;
        this.schedule(state, period);
    };
    IntervalObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var period = this.period;
        var scheduler = this.scheduler;
        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {
            index: index, subscriber: subscriber, period: period
        }));
    };
    return IntervalObservable;
}(Observable_1.Observable));
exports.IntervalObservable = IntervalObservable;
//# sourceMappingURL=IntervalObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/NeverObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var noop_1 = __webpack_require__("./node_modules/rxjs/util/noop.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var NeverObservable = (function (_super) {
    __extends(NeverObservable, _super);
    function NeverObservable() {
        _super.call(this);
    }
    /**
     * Creates an Observable that emits no items to the Observer.
     *
     * <span class="informal">An Observable that never emits anything.</span>
     *
     * <img src="./img/never.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that emits
     * neither values nor errors nor the completion notification. It can be used
     * for testing purposes or for composing with other Observables. Please not
     * that by never emitting a complete notification, this Observable keeps the
     * subscription from being disposed automatically. Subscriptions need to be
     * manually disposed.
     *
     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>
     * function info() {
     *   console.log('Will not be called');
     * }
     * var result = Rx.Observable.never().startWith(7);
     * result.subscribe(x => console.log(x), info, info);
     *
     * @see {@link create}
     * @see {@link empty}
     * @see {@link of}
     * @see {@link throw}
     *
     * @return {Observable} A "never" Observable: never emits anything.
     * @static true
     * @name never
     * @owner Observable
     */
    NeverObservable.create = function () {
        return new NeverObservable();
    };
    NeverObservable.prototype._subscribe = function (subscriber) {
        noop_1.noop();
    };
    return NeverObservable;
}(Observable_1.Observable));
exports.NeverObservable = NeverObservable;
//# sourceMappingURL=NeverObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/PairsObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
function dispatch(state) {
    var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;
    if (index === length) {
        subscriber.complete();
        return;
    }
    var key = keys[index];
    subscriber.next([key, obj[key]]);
    state.index = index + 1;
    this.schedule(state);
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var PairsObservable = (function (_super) {
    __extends(PairsObservable, _super);
    function PairsObservable(obj, scheduler) {
        _super.call(this);
        this.obj = obj;
        this.scheduler = scheduler;
        this.keys = Object.keys(obj);
    }
    /**
     * Convert an object into an observable sequence of [key, value] pairs
     * using an optional Scheduler to enumerate the object.
     *
     * @example <caption>Converts a javascript object to an Observable</caption>
     * var obj = {
     *   foo: 42,
     *   bar: 56,
     *   baz: 78
     * };
     *
     * var source = Rx.Observable.pairs(obj);
     *
     * var subscription = source.subscribe(
     *   function (x) {
     *     console.log('Next: %s', x);
     *   },
     *   function (err) {
     *     console.log('Error: %s', err);
     *   },
     *   function () {
     *     console.log('Completed');
     *   });
     *
     * @param {Object} obj The object to inspect and turn into an
     * Observable sequence.
     * @param {Scheduler} [scheduler] An optional Scheduler to run the
     * enumeration of the input sequence on.
     * @returns {(Observable<Array<string | T>>)} An observable sequence of
     * [key, value] pairs from the object.
     */
    PairsObservable.create = function (obj, scheduler) {
        return new PairsObservable(obj, scheduler);
    };
    PairsObservable.prototype._subscribe = function (subscriber) {
        var _a = this, keys = _a.keys, scheduler = _a.scheduler;
        var length = keys.length;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber
            });
        }
        else {
            for (var idx = 0; idx < length; idx++) {
                var key = keys[idx];
                subscriber.next([key, this.obj[key]]);
            }
            subscriber.complete();
        }
    };
    return PairsObservable;
}(Observable_1.Observable));
exports.PairsObservable = PairsObservable;
//# sourceMappingURL=PairsObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/RangeObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var RangeObservable = (function (_super) {
    __extends(RangeObservable, _super);
    function RangeObservable(start, count, scheduler) {
        _super.call(this);
        this.start = start;
        this._count = count;
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable that emits a sequence of numbers within a specified
     * range.
     *
     * <span class="informal">Emits a sequence of numbers in a range.</span>
     *
     * <img src="./img/range.png" width="100%">
     *
     * `range` operator emits a range of sequential integers, in order, where you
     * select the `start` of the range and its `length`. By default, uses no
     * Scheduler and just delivers the notifications synchronously, but may use
     * an optional Scheduler to regulate those deliveries.
     *
     * @example <caption>Emits the numbers 1 to 10</caption>
     * var numbers = Rx.Observable.range(1, 10);
     * numbers.subscribe(x => console.log(x));
     *
     * @see {@link timer}
     * @see {@link interval}
     *
     * @param {number} [start=0] The value of the first integer in the sequence.
     * @param {number} [count=0] The number of sequential integers to generate.
     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
     * the emissions of the notifications.
     * @return {Observable} An Observable of numbers that emits a finite range of
     * sequential integers.
     * @static true
     * @name range
     * @owner Observable
     */
    RangeObservable.create = function (start, count, scheduler) {
        if (start === void 0) { start = 0; }
        if (count === void 0) { count = 0; }
        return new RangeObservable(start, count, scheduler);
    };
    RangeObservable.dispatch = function (state) {
        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
        if (index >= count) {
            subscriber.complete();
            return;
        }
        subscriber.next(start);
        if (subscriber.closed) {
            return;
        }
        state.index = index + 1;
        state.start = start + 1;
        this.schedule(state);
    };
    RangeObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var start = this.start;
        var count = this._count;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(RangeObservable.dispatch, 0, {
                index: index, count: count, start: start, subscriber: subscriber
            });
        }
        else {
            do {
                if (index++ >= count) {
                    subscriber.complete();
                    break;
                }
                subscriber.next(start++);
                if (subscriber.closed) {
                    break;
                }
            } while (true);
        }
    };
    return RangeObservable;
}(Observable_1.Observable));
exports.RangeObservable = RangeObservable;
//# sourceMappingURL=RangeObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/SubscribeOnObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var asap_1 = __webpack_require__("./node_modules/rxjs/scheduler/asap.js");
var isNumeric_1 = __webpack_require__("./node_modules/rxjs/util/isNumeric.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var SubscribeOnObservable = (function (_super) {
    __extends(SubscribeOnObservable, _super);
    function SubscribeOnObservable(source, delayTime, scheduler) {
        if (delayTime === void 0) { delayTime = 0; }
        if (scheduler === void 0) { scheduler = asap_1.asap; }
        _super.call(this);
        this.source = source;
        this.delayTime = delayTime;
        this.scheduler = scheduler;
        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {
            this.delayTime = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            this.scheduler = asap_1.asap;
        }
    }
    SubscribeOnObservable.create = function (source, delay, scheduler) {
        if (delay === void 0) { delay = 0; }
        if (scheduler === void 0) { scheduler = asap_1.asap; }
        return new SubscribeOnObservable(source, delay, scheduler);
    };
    SubscribeOnObservable.dispatch = function (arg) {
        var source = arg.source, subscriber = arg.subscriber;
        return this.add(source.subscribe(subscriber));
    };
    SubscribeOnObservable.prototype._subscribe = function (subscriber) {
        var delay = this.delayTime;
        var source = this.source;
        var scheduler = this.scheduler;
        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
            source: source, subscriber: subscriber
        });
    };
    return SubscribeOnObservable;
}(Observable_1.Observable));
exports.SubscribeOnObservable = SubscribeOnObservable;
//# sourceMappingURL=SubscribeOnObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/TimerObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isNumeric_1 = __webpack_require__("./node_modules/rxjs/util/isNumeric.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
var isScheduler_1 = __webpack_require__("./node_modules/rxjs/util/isScheduler.js");
var isDate_1 = __webpack_require__("./node_modules/rxjs/util/isDate.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var TimerObservable = (function (_super) {
    __extends(TimerObservable, _super);
    function TimerObservable(dueTime, period, scheduler) {
        if (dueTime === void 0) { dueTime = 0; }
        _super.call(this);
        this.period = -1;
        this.dueTime = 0;
        if (isNumeric_1.isNumeric(period)) {
            this.period = Number(period) < 1 && 1 || Number(period);
        }
        else if (isScheduler_1.isScheduler(period)) {
            scheduler = period;
        }
        if (!isScheduler_1.isScheduler(scheduler)) {
            scheduler = async_1.async;
        }
        this.scheduler = scheduler;
        this.dueTime = isDate_1.isDate(dueTime) ?
            (+dueTime - this.scheduler.now()) :
            dueTime;
    }
    /**
     * Creates an Observable that starts emitting after an `initialDelay` and
     * emits ever increasing numbers after each `period` of time thereafter.
     *
     * <span class="informal">Its like {@link interval}, but you can specify when
     * should the emissions start.</span>
     *
     * <img src="./img/timer.png" width="100%">
     *
     * `timer` returns an Observable that emits an infinite sequence of ascending
     * integers, with a constant interval of time, `period` of your choosing
     * between those emissions. The first emission happens after the specified
     * `initialDelay`. The initial delay may be a {@link Date}. By default, this
     * operator uses the `async` Scheduler to provide a notion of time, but you
     * may pass any Scheduler to it. If `period` is not specified, the output
     * Observable emits only one value, `0`. Otherwise, it emits an infinite
     * sequence.
     *
     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>
     * var numbers = Rx.Observable.timer(3000, 1000);
     * numbers.subscribe(x => console.log(x));
     *
     * @example <caption>Emits one number after five seconds</caption>
     * var numbers = Rx.Observable.timer(5000);
     * numbers.subscribe(x => console.log(x));
     *
     * @see {@link interval}
     * @see {@link delay}
     *
     * @param {number|Date} initialDelay The initial delay time to wait before
     * emitting the first value of `0`.
     * @param {number} [period] The period of time between emissions of the
     * subsequent numbers.
     * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling
     * the emission of values, and providing a notion of "time".
     * @return {Observable} An Observable that emits a `0` after the
     * `initialDelay` and ever increasing numbers after each `period` of time
     * thereafter.
     * @static true
     * @name timer
     * @owner Observable
     */
    TimerObservable.create = function (initialDelay, period, scheduler) {
        if (initialDelay === void 0) { initialDelay = 0; }
        return new TimerObservable(initialDelay, period, scheduler);
    };
    TimerObservable.dispatch = function (state) {
        var index = state.index, period = state.period, subscriber = state.subscriber;
        var action = this;
        subscriber.next(index);
        if (subscriber.closed) {
            return;
        }
        else if (period === -1) {
            return subscriber.complete();
        }
        state.index = index + 1;
        action.schedule(state, period);
    };
    TimerObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;
        return scheduler.schedule(TimerObservable.dispatch, dueTime, {
            index: index, period: period, subscriber: subscriber
        });
    };
    return TimerObservable;
}(Observable_1.Observable));
exports.TimerObservable = TimerObservable;
//# sourceMappingURL=TimerObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/UsingObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var UsingObservable = (function (_super) {
    __extends(UsingObservable, _super);
    function UsingObservable(resourceFactory, observableFactory) {
        _super.call(this);
        this.resourceFactory = resourceFactory;
        this.observableFactory = observableFactory;
    }
    UsingObservable.create = function (resourceFactory, observableFactory) {
        return new UsingObservable(resourceFactory, observableFactory);
    };
    UsingObservable.prototype._subscribe = function (subscriber) {
        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;
        var resource;
        try {
            resource = resourceFactory();
            return new UsingSubscriber(subscriber, resource, observableFactory);
        }
        catch (err) {
            subscriber.error(err);
        }
    };
    return UsingObservable;
}(Observable_1.Observable));
exports.UsingObservable = UsingObservable;
var UsingSubscriber = (function (_super) {
    __extends(UsingSubscriber, _super);
    function UsingSubscriber(destination, resource, observableFactory) {
        _super.call(this, destination);
        this.resource = resource;
        this.observableFactory = observableFactory;
        destination.add(resource);
        this.tryUse();
    }
    UsingSubscriber.prototype.tryUse = function () {
        try {
            var source = this.observableFactory.call(this, this.resource);
            if (source) {
                this.add(subscribeToResult_1.subscribeToResult(this, source));
            }
        }
        catch (err) {
            this._error(err);
        }
    };
    return UsingSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=UsingObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/bindCallback.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var BoundCallbackObservable_1 = __webpack_require__("./node_modules/rxjs/observable/BoundCallbackObservable.js");
exports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;
//# sourceMappingURL=bindCallback.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/bindNodeCallback.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var BoundNodeCallbackObservable_1 = __webpack_require__("./node_modules/rxjs/observable/BoundNodeCallbackObservable.js");
exports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;
//# sourceMappingURL=bindNodeCallback.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/combineLatest.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isScheduler_1 = __webpack_require__("./node_modules/rxjs/util/isScheduler.js");
var isArray_1 = __webpack_require__("./node_modules/rxjs/util/isArray.js");
var ArrayObservable_1 = __webpack_require__("./node_modules/rxjs/observable/ArrayObservable.js");
var combineLatest_1 = __webpack_require__("./node_modules/rxjs/operator/combineLatest.js");
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are
 * calculated from the latest values of each of its input Observables.
 *
 * <span class="informal">Whenever any input Observable emits a value, it
 * computes a formula using the latest values from all the inputs, then emits
 * the output of that formula.</span>
 *
 * <img src="./img/combineLatest.png" width="100%">
 *
 * `combineLatest` combines the values from all the Observables passed as
 * arguments. This is done by subscribing to each Observable, in order, and
 * collecting an array of each of the most recent values any time any of the
 * input Observables emits, then either taking that array and passing it as
 * arguments to an optional `project` function and emitting the return value of
 * that, or just emitting the array of recent values directly if there is no
 * `project` function.
 *
 * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>
 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
 * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));
 * bmi.subscribe(x => console.log('BMI is ' + x));
 *
 * // With output to console:
 * // BMI is 24.212293388429753
 * // BMI is 23.93948099205209
 * // BMI is 23.671253629592222
 *
 * @see {@link combineAll}
 * @see {@link merge}
 * @see {@link withLatestFrom}
 *
 * @param {Observable} observable1 An input Observable to combine with the
 * source Observable.
 * @param {Observable} observable2 An input Observable to combine with the
 * source Observable. More than one input Observables may be given as argument.
 * @param {function} [project] An optional function to project the values from
 * the combined latest values into a new value on the output Observable.
 * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to
 * each input Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @static true
 * @name combineLatest
 * @owner Observable
 */
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var project = null;
    var scheduler = null;
    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {
        scheduler = observables.pop();
    }
    if (typeof observables[observables.length - 1] === 'function') {
        project = observables.pop();
    }
    // if the first and only other argument besides the resultSelector is an array
    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
        observables = observables[0];
    }
    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));
}
exports.combineLatest = combineLatest;
//# sourceMappingURL=combineLatest.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/concat.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var concat_1 = __webpack_require__("./node_modules/rxjs/operator/concat.js");
exports.concat = concat_1.concatStatic;
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/defer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DeferObservable_1 = __webpack_require__("./node_modules/rxjs/observable/DeferObservable.js");
exports.defer = DeferObservable_1.DeferObservable.create;
//# sourceMappingURL=defer.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/dom/AjaxObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__("./node_modules/rxjs/util/root.js");
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var map_1 = __webpack_require__("./node_modules/rxjs/operator/map.js");
function getCORSRequest() {
    if (root_1.root.XMLHttpRequest) {
        var xhr = new root_1.root.XMLHttpRequest();
        if ('withCredentials' in xhr) {
            xhr.withCredentials = !!this.withCredentials;
        }
        return xhr;
    }
    else if (!!root_1.root.XDomainRequest) {
        return new root_1.root.XDomainRequest();
    }
    else {
        throw new Error('CORS is not supported by your browser');
    }
}
function getXMLHttpRequest() {
    if (root_1.root.XMLHttpRequest) {
        return new root_1.root.XMLHttpRequest();
    }
    else {
        var progId = void 0;
        try {
            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];
            for (var i = 0; i < 3; i++) {
                try {
                    progId = progIds[i];
                    if (new root_1.root.ActiveXObject(progId)) {
                        break;
                    }
                }
                catch (e) {
                }
            }
            return new root_1.root.ActiveXObject(progId);
        }
        catch (e) {
            throw new Error('XMLHttpRequest is not supported by your browser');
        }
    }
}
function ajaxGet(url, headers) {
    if (headers === void 0) { headers = null; }
    return new AjaxObservable({ method: 'GET', url: url, headers: headers });
}
exports.ajaxGet = ajaxGet;
;
function ajaxPost(url, body, headers) {
    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });
}
exports.ajaxPost = ajaxPost;
;
function ajaxDelete(url, headers) {
    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });
}
exports.ajaxDelete = ajaxDelete;
;
function ajaxPut(url, body, headers) {
    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });
}
exports.ajaxPut = ajaxPut;
;
function ajaxGetJSON(url, headers) {
    return new AjaxObservable({ method: 'GET', url: url, responseType: 'json', headers: headers })
        .lift(new map_1.MapOperator(function (x, index) { return x.response; }, null));
}
exports.ajaxGetJSON = ajaxGetJSON;
;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var AjaxObservable = (function (_super) {
    __extends(AjaxObservable, _super);
    function AjaxObservable(urlOrRequest) {
        _super.call(this);
        var request = {
            async: true,
            createXHR: function () {
                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();
            },
            crossDomain: false,
            withCredentials: false,
            headers: {},
            method: 'GET',
            responseType: 'json',
            timeout: 0
        };
        if (typeof urlOrRequest === 'string') {
            request.url = urlOrRequest;
        }
        else {
            for (var prop in urlOrRequest) {
                if (urlOrRequest.hasOwnProperty(prop)) {
                    request[prop] = urlOrRequest[prop];
                }
            }
        }
        this.request = request;
    }
    AjaxObservable.prototype._subscribe = function (subscriber) {
        return new AjaxSubscriber(subscriber, this.request);
    };
    /**
     * Creates an observable for an Ajax request with either a request object with
     * url, headers, etc or a string for a URL.
     *
     * @example
     * source = Rx.Observable.ajax('/products');
     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });
     *
     * @param {string|Object} request Can be one of the following:
     *   A string of the URL to make the Ajax call.
     *   An object with the following properties
     *   - url: URL of the request
     *   - body: The body of the request
     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE
     *   - async: Whether the request is async
     *   - headers: Optional headers
     *   - crossDomain: true if a cross domain request, else false
     *   - createXHR: a function to override if you need to use an alternate
     *   XMLHttpRequest implementation.
     *   - resultSelector: a function to use to alter the output value type of
     *   the Observable. Gets {@link AjaxResponse} as an argument.
     * @return {Observable} An observable sequence containing the XMLHttpRequest.
     * @static true
     * @name ajax
     * @owner Observable
    */
    AjaxObservable.create = (function () {
        var create = function (urlOrRequest) {
            return new AjaxObservable(urlOrRequest);
        };
        create.get = ajaxGet;
        create.post = ajaxPost;
        create.delete = ajaxDelete;
        create.put = ajaxPut;
        create.getJSON = ajaxGetJSON;
        return create;
    })();
    return AjaxObservable;
}(Observable_1.Observable));
exports.AjaxObservable = AjaxObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AjaxSubscriber = (function (_super) {
    __extends(AjaxSubscriber, _super);
    function AjaxSubscriber(destination, request) {
        _super.call(this, destination);
        this.request = request;
        this.done = false;
        var headers = request.headers = request.headers || {};
        // force CORS if requested
        if (!request.crossDomain && !headers['X-Requested-With']) {
            headers['X-Requested-With'] = 'XMLHttpRequest';
        }
        // ensure content type is set
        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {
            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
        }
        // properly serialize body
        request.body = this.serializeBody(request.body, request.headers['Content-Type']);
        this.send();
    }
    AjaxSubscriber.prototype.next = function (e) {
        this.done = true;
        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;
        var response = new AjaxResponse(e, xhr, request);
        destination.next(response);
    };
    AjaxSubscriber.prototype.send = function () {
        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;
        var createXHR = request.createXHR;
        var xhr = tryCatch_1.tryCatch(createXHR).call(request);
        if (xhr === errorObject_1.errorObject) {
            this.error(errorObject_1.errorObject.e);
        }
        else {
            this.xhr = xhr;
            // open XHR first
            var result = void 0;
            if (user) {
                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);
            }
            else {
                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);
            }
            if (result === errorObject_1.errorObject) {
                this.error(errorObject_1.errorObject.e);
                return null;
            }
            // timeout and responseType can be set once the XHR is open
            xhr.timeout = request.timeout;
            xhr.responseType = request.responseType;
            // set headers
            this.setHeaders(xhr, headers);
            // now set up the events
            this.setupEvents(xhr, request);
            // finally send the request
            result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);
            if (result === errorObject_1.errorObject) {
                this.error(errorObject_1.errorObject.e);
                return null;
            }
        }
        return xhr;
    };
    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {
        if (!body || typeof body === 'string') {
            return body;
        }
        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {
            return body;
        }
        if (contentType) {
            var splitIndex = contentType.indexOf(';');
            if (splitIndex !== -1) {
                contentType = contentType.substring(0, splitIndex);
            }
        }
        switch (contentType) {
            case 'application/x-www-form-urlencoded':
                return Object.keys(body).map(function (key) { return (encodeURI(key) + "=" + encodeURI(body[key])); }).join('&');
            case 'application/json':
                return JSON.stringify(body);
            default:
                return body;
        }
    };
    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {
        for (var key in headers) {
            if (headers.hasOwnProperty(key)) {
                xhr.setRequestHeader(key, headers[key]);
            }
        }
    };
    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {
        var progressSubscriber = request.progressSubscriber;
        function xhrTimeout(e) {
            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
            if (progressSubscriber) {
                progressSubscriber.error(e);
            }
            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.
        }
        ;
        xhr.ontimeout = xhrTimeout;
        xhrTimeout.request = request;
        xhrTimeout.subscriber = this;
        xhrTimeout.progressSubscriber = progressSubscriber;
        if (xhr.upload && 'withCredentials' in xhr && root_1.root.XDomainRequest) {
            if (progressSubscriber) {
                var xhrProgress_1;
                xhrProgress_1 = function (e) {
                    var progressSubscriber = xhrProgress_1.progressSubscriber;
                    progressSubscriber.next(e);
                };
                xhr.onprogress = xhrProgress_1;
                xhrProgress_1.progressSubscriber = progressSubscriber;
            }
            var xhrError_1;
            xhrError_1 = function (e) {
                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;
                if (progressSubscriber) {
                    progressSubscriber.error(e);
                }
                subscriber.error(new AjaxError('ajax error', this, request));
            };
            xhr.onerror = xhrError_1;
            xhrError_1.request = request;
            xhrError_1.subscriber = this;
            xhrError_1.progressSubscriber = progressSubscriber;
        }
        function xhrReadyStateChange(e) {
            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
            if (this.readyState === 4) {
                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                var status_1 = this.status === 1223 ? 204 : this.status;
                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);
                // fix status code when it is 0 (0 status is undocumented).
                // Occurs when accessing file resources or on Android 4.1 stock browser
                // while retrieving files from application cache.
                if (status_1 === 0) {
                    status_1 = response ? 200 : 0;
                }
                if (200 <= status_1 && status_1 < 300) {
                    if (progressSubscriber) {
                        progressSubscriber.complete();
                    }
                    subscriber.next(e);
                    subscriber.complete();
                }
                else {
                    if (progressSubscriber) {
                        progressSubscriber.error(e);
                    }
                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));
                }
            }
        }
        ;
        xhr.onreadystatechange = xhrReadyStateChange;
        xhrReadyStateChange.subscriber = this;
        xhrReadyStateChange.progressSubscriber = progressSubscriber;
        xhrReadyStateChange.request = request;
    };
    AjaxSubscriber.prototype.unsubscribe = function () {
        var _a = this, done = _a.done, xhr = _a.xhr;
        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {
            xhr.abort();
        }
        _super.prototype.unsubscribe.call(this);
    };
    return AjaxSubscriber;
}(Subscriber_1.Subscriber));
exports.AjaxSubscriber = AjaxSubscriber;
/**
 * A normalized AJAX response.
 *
 * @see {@link ajax}
 *
 * @class AjaxResponse
 */
var AjaxResponse = (function () {
    function AjaxResponse(originalEvent, xhr, request) {
        this.originalEvent = originalEvent;
        this.xhr = xhr;
        this.request = request;
        this.status = xhr.status;
        this.responseType = xhr.responseType || request.responseType;
        switch (this.responseType) {
            case 'json':
                if ('response' in xhr) {
                    //IE does not support json as responseType, parse it internally
                    this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');
                }
                else {
                    this.response = JSON.parse(xhr.responseText || 'null');
                }
                break;
            case 'xml':
                this.response = xhr.responseXML;
                break;
            case 'text':
            default:
                this.response = ('response' in xhr) ? xhr.response : xhr.responseText;
                break;
        }
    }
    return AjaxResponse;
}());
exports.AjaxResponse = AjaxResponse;
/**
 * A normalized AJAX error.
 *
 * @see {@link ajax}
 *
 * @class AjaxError
 */
var AjaxError = (function (_super) {
    __extends(AjaxError, _super);
    function AjaxError(message, xhr, request) {
        _super.call(this, message);
        this.message = message;
        this.xhr = xhr;
        this.request = request;
        this.status = xhr.status;
    }
    return AjaxError;
}(Error));
exports.AjaxError = AjaxError;
/**
 * @see {@link ajax}
 *
 * @class AjaxTimeoutError
 */
var AjaxTimeoutError = (function (_super) {
    __extends(AjaxTimeoutError, _super);
    function AjaxTimeoutError(xhr, request) {
        _super.call(this, 'ajax timeout', xhr, request);
    }
    return AjaxTimeoutError;
}(AjaxError));
exports.AjaxTimeoutError = AjaxTimeoutError;
//# sourceMappingURL=AjaxObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/dom/WebSocketSubject.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
var root_1 = __webpack_require__("./node_modules/rxjs/util/root.js");
var ReplaySubject_1 = __webpack_require__("./node_modules/rxjs/ReplaySubject.js");
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
var assign_1 = __webpack_require__("./node_modules/rxjs/util/assign.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var WebSocketSubject = (function (_super) {
    __extends(WebSocketSubject, _super);
    function WebSocketSubject(urlConfigOrSource, destination) {
        if (urlConfigOrSource instanceof Observable_1.Observable) {
            _super.call(this, destination, urlConfigOrSource);
        }
        else {
            _super.call(this);
            this.WebSocketCtor = root_1.root.WebSocket;
            this._output = new Subject_1.Subject();
            if (typeof urlConfigOrSource === 'string') {
                this.url = urlConfigOrSource;
            }
            else {
                // WARNING: config object could override important members here.
                assign_1.assign(this, urlConfigOrSource);
            }
            if (!this.WebSocketCtor) {
                throw new Error('no WebSocket constructor can be found');
            }
            this.destination = new ReplaySubject_1.ReplaySubject();
        }
    }
    WebSocketSubject.prototype.resultSelector = function (e) {
        return JSON.parse(e.data);
    };
    /**
     * @param urlConfigOrSource
     * @return {WebSocketSubject}
     * @static true
     * @name webSocket
     * @owner Observable
     */
    WebSocketSubject.create = function (urlConfigOrSource) {
        return new WebSocketSubject(urlConfigOrSource);
    };
    WebSocketSubject.prototype.lift = function (operator) {
        var sock = new WebSocketSubject(this, this.destination);
        sock.operator = operator;
        return sock;
    };
    WebSocketSubject.prototype._resetState = function () {
        this.socket = null;
        if (!this.source) {
            this.destination = new ReplaySubject_1.ReplaySubject();
        }
        this._output = new Subject_1.Subject();
    };
    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures
    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {
        var self = this;
        return new Observable_1.Observable(function (observer) {
            var result = tryCatch_1.tryCatch(subMsg)();
            if (result === errorObject_1.errorObject) {
                observer.error(errorObject_1.errorObject.e);
            }
            else {
                self.next(result);
            }
            var subscription = self.subscribe(function (x) {
                var result = tryCatch_1.tryCatch(messageFilter)(x);
                if (result === errorObject_1.errorObject) {
                    observer.error(errorObject_1.errorObject.e);
                }
                else if (result) {
                    observer.next(x);
                }
            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });
            return function () {
                var result = tryCatch_1.tryCatch(unsubMsg)();
                if (result === errorObject_1.errorObject) {
                    observer.error(errorObject_1.errorObject.e);
                }
                else {
                    self.next(result);
                }
                subscription.unsubscribe();
            };
        });
    };
    WebSocketSubject.prototype._connectSocket = function () {
        var _this = this;
        var WebSocketCtor = this.WebSocketCtor;
        var observer = this._output;
        var socket = null;
        try {
            socket = this.protocol ?
                new WebSocketCtor(this.url, this.protocol) :
                new WebSocketCtor(this.url);
            this.socket = socket;
        }
        catch (e) {
            observer.error(e);
            return;
        }
        var subscription = new Subscription_1.Subscription(function () {
            _this.socket = null;
            if (socket && socket.readyState === 1) {
                socket.close();
            }
        });
        socket.onopen = function (e) {
            var openObserver = _this.openObserver;
            if (openObserver) {
                openObserver.next(e);
            }
            var queue = _this.destination;
            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {
                var closingObserver = _this.closingObserver;
                if (closingObserver) {
                    closingObserver.next(undefined);
                }
                if (e && e.code) {
                    socket.close(e.code, e.reason);
                }
                else {
                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +
                        'and an optional reason: { code: number, reason: string }'));
                }
                _this._resetState();
            }, function () {
                var closingObserver = _this.closingObserver;
                if (closingObserver) {
                    closingObserver.next(undefined);
                }
                socket.close();
                _this._resetState();
            });
            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {
                subscription.add(queue.subscribe(_this.destination));
            }
        };
        socket.onerror = function (e) {
            _this._resetState();
            observer.error(e);
        };
        socket.onclose = function (e) {
            _this._resetState();
            var closeObserver = _this.closeObserver;
            if (closeObserver) {
                closeObserver.next(e);
            }
            if (e.wasClean) {
                observer.complete();
            }
            else {
                observer.error(e);
            }
        };
        socket.onmessage = function (e) {
            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);
            if (result === errorObject_1.errorObject) {
                observer.error(errorObject_1.errorObject.e);
            }
            else {
                observer.next(result);
            }
        };
    };
    WebSocketSubject.prototype._subscribe = function (subscriber) {
        var _this = this;
        var source = this.source;
        if (source) {
            return source.subscribe(subscriber);
        }
        if (!this.socket) {
            this._connectSocket();
        }
        var subscription = new Subscription_1.Subscription();
        subscription.add(this._output.subscribe(subscriber));
        subscription.add(function () {
            var socket = _this.socket;
            if (_this._output.observers.length === 0) {
                if (socket && socket.readyState === 1) {
                    socket.close();
                }
                _this._resetState();
            }
        });
        return subscription;
    };
    WebSocketSubject.prototype.unsubscribe = function () {
        var _a = this, source = _a.source, socket = _a.socket;
        if (socket && socket.readyState === 1) {
            socket.close();
            this._resetState();
        }
        _super.prototype.unsubscribe.call(this);
        if (!source) {
            this.destination = new ReplaySubject_1.ReplaySubject();
        }
    };
    return WebSocketSubject;
}(Subject_1.AnonymousSubject));
exports.WebSocketSubject = WebSocketSubject;
//# sourceMappingURL=WebSocketSubject.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/dom/ajax.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var AjaxObservable_1 = __webpack_require__("./node_modules/rxjs/observable/dom/AjaxObservable.js");
exports.ajax = AjaxObservable_1.AjaxObservable.create;
//# sourceMappingURL=ajax.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/dom/webSocket.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var WebSocketSubject_1 = __webpack_require__("./node_modules/rxjs/observable/dom/WebSocketSubject.js");
exports.webSocket = WebSocketSubject_1.WebSocketSubject.create;
//# sourceMappingURL=webSocket.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/empty.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var EmptyObservable_1 = __webpack_require__("./node_modules/rxjs/observable/EmptyObservable.js");
exports.empty = EmptyObservable_1.EmptyObservable.create;
//# sourceMappingURL=empty.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/forkJoin.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ForkJoinObservable_1 = __webpack_require__("./node_modules/rxjs/observable/ForkJoinObservable.js");
exports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;
//# sourceMappingURL=forkJoin.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/fromEvent.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FromEventObservable_1 = __webpack_require__("./node_modules/rxjs/observable/FromEventObservable.js");
exports.fromEvent = FromEventObservable_1.FromEventObservable.create;
//# sourceMappingURL=fromEvent.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/fromEventPattern.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FromEventPatternObservable_1 = __webpack_require__("./node_modules/rxjs/observable/FromEventPatternObservable.js");
exports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;
//# sourceMappingURL=fromEventPattern.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/if.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var IfObservable_1 = __webpack_require__("./node_modules/rxjs/observable/IfObservable.js");
exports._if = IfObservable_1.IfObservable.create;
//# sourceMappingURL=if.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/interval.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var IntervalObservable_1 = __webpack_require__("./node_modules/rxjs/observable/IntervalObservable.js");
exports.interval = IntervalObservable_1.IntervalObservable.create;
//# sourceMappingURL=interval.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/merge.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var merge_1 = __webpack_require__("./node_modules/rxjs/operator/merge.js");
exports.merge = merge_1.mergeStatic;
//# sourceMappingURL=merge.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/never.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var NeverObservable_1 = __webpack_require__("./node_modules/rxjs/observable/NeverObservable.js");
exports.never = NeverObservable_1.NeverObservable.create;
//# sourceMappingURL=never.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/pairs.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var PairsObservable_1 = __webpack_require__("./node_modules/rxjs/observable/PairsObservable.js");
exports.pairs = PairsObservable_1.PairsObservable.create;
//# sourceMappingURL=pairs.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/range.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var RangeObservable_1 = __webpack_require__("./node_modules/rxjs/observable/RangeObservable.js");
exports.range = RangeObservable_1.RangeObservable.create;
//# sourceMappingURL=range.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/throw.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ErrorObservable_1 = __webpack_require__("./node_modules/rxjs/observable/ErrorObservable.js");
exports._throw = ErrorObservable_1.ErrorObservable.create;
//# sourceMappingURL=throw.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/timer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var TimerObservable_1 = __webpack_require__("./node_modules/rxjs/observable/TimerObservable.js");
exports.timer = TimerObservable_1.TimerObservable.create;
//# sourceMappingURL=timer.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/using.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var UsingObservable_1 = __webpack_require__("./node_modules/rxjs/observable/UsingObservable.js");
exports.using = UsingObservable_1.UsingObservable.create;
//# sourceMappingURL=using.js.map

/***/ }),

/***/ "./node_modules/rxjs/observable/zip.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var zip_1 = __webpack_require__("./node_modules/rxjs/operator/zip.js");
exports.zip = zip_1.zipStatic;
//# sourceMappingURL=zip.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/audit.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Ignores source values for a duration determined by another Observable, then
 * emits the most recent value from the source Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link auditTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/audit.png" width="100%">
 *
 * `audit` is similar to `throttle`, but emits the last value from the silenced
 * time window, instead of the first value. `audit` emits the most recent value
 * from the source Observable on the output Observable as soon as its internal
 * timer becomes disabled, and ignores source values while the timer is enabled.
 * Initially, the timer is disabled. As soon as the first source value arrives,
 * the timer is enabled by calling the `durationSelector` function with the
 * source value, which returns the "duration" Observable. When the duration
 * Observable emits a value or completes, the timer is disabled, then the most
 * recent source value is emitted on the output Observable, and this process
 * repeats for the next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.audit(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttle}
 *
 * @param {function(value: T): Observable|Promise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration, returned as an Observable or a Promise.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method audit
 * @owner Observable
 */
function audit(durationSelector) {
    return this.lift(new AuditOperator(durationSelector));
}
exports.audit = audit;
var AuditOperator = (function () {
    function AuditOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    AuditOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
    };
    return AuditOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AuditSubscriber = (function (_super) {
    __extends(AuditSubscriber, _super);
    function AuditSubscriber(destination, durationSelector) {
        _super.call(this, destination);
        this.durationSelector = durationSelector;
        this.hasValue = false;
    }
    AuditSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
        if (!this.throttled) {
            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);
            if (duration === errorObject_1.errorObject) {
                this.destination.error(errorObject_1.errorObject.e);
            }
            else {
                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
            }
        }
    };
    AuditSubscriber.prototype.clearThrottle = function () {
        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
        if (throttled) {
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
        }
        if (hasValue) {
            this.value = null;
            this.hasValue = false;
            this.destination.next(value);
        }
    };
    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
        this.clearThrottle();
    };
    AuditSubscriber.prototype.notifyComplete = function () {
        this.clearThrottle();
    };
    return AuditSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=audit.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/auditTime.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/**
 * Ignores source values for `duration` milliseconds, then emits the most recent
 * value from the source Observable, then repeats this process.
 *
 * <span class="informal">When it sees a source values, it ignores that plus
 * the next ones for `duration` milliseconds, and then it emits the most recent
 * value from the source.</span>
 *
 * <img src="./img/auditTime.png" width="100%">
 *
 * `auditTime` is similar to `throttleTime`, but emits the last value from the
 * silenced time window, instead of the first value. `auditTime` emits the most
 * recent value from the source Observable on the output Observable as soon as
 * its internal timer becomes disabled, and ignores source values while the
 * timer is enabled. Initially, the timer is disabled. As soon as the first
 * source value arrives, the timer is enabled. After `duration` milliseconds (or
 * the time unit determined internally by the optional `scheduler`) has passed,
 * the timer is disabled, then the most recent source value is emitted on the
 * output Observable, and this process repeats for the next source value.
 * Optionally takes a {@link Scheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.auditTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} duration Time to wait before emitting the most recent source
 * value, measured in milliseconds or the time unit determined internally
 * by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for
 * managing the timers that handle the rate-limiting behavior.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method auditTime
 * @owner Observable
 */
function auditTime(duration, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return this.lift(new AuditTimeOperator(duration, scheduler));
}
exports.auditTime = auditTime;
var AuditTimeOperator = (function () {
    function AuditTimeOperator(duration, scheduler) {
        this.duration = duration;
        this.scheduler = scheduler;
    }
    AuditTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));
    };
    return AuditTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AuditTimeSubscriber = (function (_super) {
    __extends(AuditTimeSubscriber, _super);
    function AuditTimeSubscriber(destination, duration, scheduler) {
        _super.call(this, destination);
        this.duration = duration;
        this.scheduler = scheduler;
        this.hasValue = false;
    }
    AuditTimeSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
        if (!this.throttled) {
            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));
        }
    };
    AuditTimeSubscriber.prototype.clearThrottle = function () {
        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
        if (throttled) {
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
        }
        if (hasValue) {
            this.value = null;
            this.hasValue = false;
            this.destination.next(value);
        }
    };
    return AuditTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNext(subscriber) {
    subscriber.clearThrottle();
}
//# sourceMappingURL=auditTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/buffer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Buffers the source Observable values until `closingNotifier` emits.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when another Observable emits.</span>
 *
 * <img src="./img/buffer.png" width="100%">
 *
 * Buffers the incoming Observable values until the given `closingNotifier`
 * Observable emits a value, at which point it emits the buffer on the output
 * Observable and starts a new buffer internally, awaiting the next time
 * `closingNotifier` emits.
 *
 * @example <caption>On every click, emit array of most recent interval events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var buffered = interval.buffer(clicks);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link window}
 *
 * @param {Observable<any>} closingNotifier An Observable that signals the
 * buffer to be emitted on the output Observable.
 * @return {Observable<T[]>} An Observable of buffers, which are arrays of
 * values.
 * @method buffer
 * @owner Observable
 */
function buffer(closingNotifier) {
    return this.lift(new BufferOperator(closingNotifier));
}
exports.buffer = buffer;
var BufferOperator = (function () {
    function BufferOperator(closingNotifier) {
        this.closingNotifier = closingNotifier;
    }
    BufferOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
    };
    return BufferOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferSubscriber = (function (_super) {
    __extends(BufferSubscriber, _super);
    function BufferSubscriber(destination, closingNotifier) {
        _super.call(this, destination);
        this.buffer = [];
        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
    }
    BufferSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var buffer = this.buffer;
        this.buffer = [];
        this.destination.next(buffer);
    };
    return BufferSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=buffer.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/bufferCount.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/**
 * Buffers the source Observable values until the size hits the maximum
 * `bufferSize` given.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when its size reaches `bufferSize`.</span>
 *
 * <img src="./img/bufferCount.png" width="100%">
 *
 * Buffers a number of values from the source Observable by `bufferSize` then
 * emits the buffer and clears it, and starts a new buffer each
 * `startBufferEvery` values. If `startBufferEvery` is not provided or is
 * `null`, then new buffers are started immediately at the start of the source
 * and when each buffer closes and is emitted.
 *
 * @example <caption>Emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>On every click, emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2, 1);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link pairwise}
 * @see {@link windowCount}
 *
 * @param {number} bufferSize The maximum size of the buffer emitted.
 * @param {number} [startBufferEvery] Interval at which to start a new buffer.
 * For example if `startBufferEvery` is `2`, then a new buffer will be started
 * on every other value from the source. A new buffer is started at the
 * beginning of the source by default.
 * @return {Observable<T[]>} An Observable of arrays of buffered values.
 * @method bufferCount
 * @owner Observable
 */
function bufferCount(bufferSize, startBufferEvery) {
    if (startBufferEvery === void 0) { startBufferEvery = null; }
    return this.lift(new BufferCountOperator(bufferSize, startBufferEvery));
}
exports.bufferCount = bufferCount;
var BufferCountOperator = (function () {
    function BufferCountOperator(bufferSize, startBufferEvery) {
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
    }
    BufferCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));
    };
    return BufferCountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferCountSubscriber = (function (_super) {
    __extends(BufferCountSubscriber, _super);
    function BufferCountSubscriber(destination, bufferSize, startBufferEvery) {
        _super.call(this, destination);
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
        this.buffers = [];
        this.count = 0;
    }
    BufferCountSubscriber.prototype._next = function (value) {
        var count = this.count++;
        var _a = this, destination = _a.destination, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers;
        var startOn = (startBufferEvery == null) ? bufferSize : startBufferEvery;
        if (count % startOn === 0) {
            buffers.push([]);
        }
        for (var i = buffers.length; i--;) {
            var buffer = buffers[i];
            buffer.push(value);
            if (buffer.length === bufferSize) {
                buffers.splice(i, 1);
                destination.next(buffer);
            }
        }
    };
    BufferCountSubscriber.prototype._complete = function () {
        var destination = this.destination;
        var buffers = this.buffers;
        while (buffers.length > 0) {
            var buffer = buffers.shift();
            if (buffer.length > 0) {
                destination.next(buffer);
            }
        }
        _super.prototype._complete.call(this);
    };
    return BufferCountSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=bufferCount.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/bufferTime.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var isScheduler_1 = __webpack_require__("./node_modules/rxjs/util/isScheduler.js");
/* tslint:disable:max-line-length */
/**
 * Buffers the source Observable values for a specific time period.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * those arrays periodically in time.</span>
 *
 * <img src="./img/bufferTime.png" width="100%">
 *
 * Buffers values from the source for a specific time duration `bufferTimeSpan`.
 * Unless the optional argument `bufferCreationInterval` is given, it emits and
 * resets the buffer every `bufferTimeSpan` milliseconds. If
 * `bufferCreationInterval` is given, this operator opens the buffer every
 * `bufferCreationInterval` milliseconds and closes (emits and resets) the
 * buffer every `bufferTimeSpan` milliseconds. When the optional argument
 * `maxBufferSize` is specified, the buffer will be closed either after
 * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.
 *
 * @example <caption>Every second, emit an array of the recent click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(1000);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(2000, 5000);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link windowTime}
 *
 * @param {number} bufferTimeSpan The amount of time to fill each buffer array.
 * @param {number} [bufferCreationInterval] The interval at which to start new
 * buffers.
 * @param {number} [maxBufferSize] The maximum buffer size.
 * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the
 * intervals that determine buffer boundaries.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferTime
 * @owner Observable
 */
function bufferTime(bufferTimeSpan) {
    var length = arguments.length;
    var scheduler = async_1.async;
    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {
        scheduler = arguments[arguments.length - 1];
        length--;
    }
    var bufferCreationInterval = null;
    if (length >= 2) {
        bufferCreationInterval = arguments[1];
    }
    var maxBufferSize = Number.POSITIVE_INFINITY;
    if (length >= 3) {
        maxBufferSize = arguments[2];
    }
    return this.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
}
exports.bufferTime = bufferTime;
var BufferTimeOperator = (function () {
    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        this.bufferTimeSpan = bufferTimeSpan;
        this.bufferCreationInterval = bufferCreationInterval;
        this.maxBufferSize = maxBufferSize;
        this.scheduler = scheduler;
    }
    BufferTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
    };
    return BufferTimeOperator;
}());
var Context = (function () {
    function Context() {
        this.buffer = [];
    }
    return Context;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferTimeSubscriber = (function (_super) {
    __extends(BufferTimeSubscriber, _super);
    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        _super.call(this, destination);
        this.bufferTimeSpan = bufferTimeSpan;
        this.bufferCreationInterval = bufferCreationInterval;
        this.maxBufferSize = maxBufferSize;
        this.scheduler = scheduler;
        this.contexts = [];
        var context = this.openContext();
        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
        if (this.timespanOnly) {
            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
        else {
            var closeState = { subscriber: this, context: context };
            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };
            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
        }
    }
    BufferTimeSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        var filledBufferContext;
        for (var i = 0; i < len; i++) {
            var context = contexts[i];
            var buffer = context.buffer;
            buffer.push(value);
            if (buffer.length == this.maxBufferSize) {
                filledBufferContext = context;
            }
        }
        if (filledBufferContext) {
            this.onBufferFull(filledBufferContext);
        }
    };
    BufferTimeSubscriber.prototype._error = function (err) {
        this.contexts.length = 0;
        _super.prototype._error.call(this, err);
    };
    BufferTimeSubscriber.prototype._complete = function () {
        var _a = this, contexts = _a.contexts, destination = _a.destination;
        while (contexts.length > 0) {
            var context = contexts.shift();
            destination.next(context.buffer);
        }
        _super.prototype._complete.call(this);
    };
    BufferTimeSubscriber.prototype._unsubscribe = function () {
        this.contexts = null;
    };
    BufferTimeSubscriber.prototype.onBufferFull = function (context) {
        this.closeContext(context);
        var closeAction = context.closeAction;
        closeAction.unsubscribe();
        this.remove(closeAction);
        if (!this.closed && this.timespanOnly) {
            context = this.openContext();
            var bufferTimeSpan = this.bufferTimeSpan;
            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
    };
    BufferTimeSubscriber.prototype.openContext = function () {
        var context = new Context();
        this.contexts.push(context);
        return context;
    };
    BufferTimeSubscriber.prototype.closeContext = function (context) {
        this.destination.next(context.buffer);
        var contexts = this.contexts;
        var spliceIndex = contexts ? contexts.indexOf(context) : -1;
        if (spliceIndex >= 0) {
            contexts.splice(contexts.indexOf(context), 1);
        }
    };
    return BufferTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchBufferTimeSpanOnly(state) {
    var subscriber = state.subscriber;
    var prevContext = state.context;
    if (prevContext) {
        subscriber.closeContext(prevContext);
    }
    if (!subscriber.closed) {
        state.context = subscriber.openContext();
        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
    }
}
function dispatchBufferCreation(state) {
    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
    var context = subscriber.openContext();
    var action = this;
    if (!subscriber.closed) {
        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
        action.schedule(state, bufferCreationInterval);
    }
}
function dispatchBufferClose(arg) {
    var subscriber = arg.subscriber, context = arg.context;
    subscriber.closeContext(context);
}
//# sourceMappingURL=bufferTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/bufferToggle.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
/**
 * Buffers the source Observable values starting from an emission from
 * `openings` and ending when the output of `closingSelector` emits.
 *
 * <span class="informal">Collects values from the past as an array. Starts
 * collecting only when `opening` emits, and calls the `closingSelector`
 * function to get an Observable that tells when to close the buffer.</span>
 *
 * <img src="./img/bufferToggle.png" width="100%">
 *
 * Buffers values from the source by opening the buffer via signals from an
 * Observable provided to `openings`, and closing and sending the buffers when
 * a Subscribable or Promise returned by the `closingSelector` function emits.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var buffered = clicks.bufferToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferWhen}
 * @see {@link windowToggle}
 *
 * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new
 * buffers.
 * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns a Subscribable or Promise,
 * which, when it emits, signals that the associated buffer should be emitted
 * and cleared.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferToggle
 * @owner Observable
 */
function bufferToggle(openings, closingSelector) {
    return this.lift(new BufferToggleOperator(openings, closingSelector));
}
exports.bufferToggle = bufferToggle;
var BufferToggleOperator = (function () {
    function BufferToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    BufferToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return BufferToggleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferToggleSubscriber = (function (_super) {
    __extends(BufferToggleSubscriber, _super);
    function BufferToggleSubscriber(destination, openings, closingSelector) {
        _super.call(this, destination);
        this.openings = openings;
        this.closingSelector = closingSelector;
        this.contexts = [];
        this.add(subscribeToResult_1.subscribeToResult(this, openings));
    }
    BufferToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        for (var i = 0; i < len; i++) {
            contexts[i].buffer.push(value);
        }
    };
    BufferToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context = contexts.shift();
            context.subscription.unsubscribe();
            context.buffer = null;
            context.subscription = null;
        }
        this.contexts = null;
        _super.prototype._error.call(this, err);
    };
    BufferToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context = contexts.shift();
            this.destination.next(context.buffer);
            context.subscription.unsubscribe();
            context.buffer = null;
            context.subscription = null;
        }
        this.contexts = null;
        _super.prototype._complete.call(this);
    };
    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
    };
    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
        this.closeBuffer(innerSub.context);
    };
    BufferToggleSubscriber.prototype.openBuffer = function (value) {
        try {
            var closingSelector = this.closingSelector;
            var closingNotifier = closingSelector.call(this, value);
            if (closingNotifier) {
                this.trySubscribe(closingNotifier);
            }
        }
        catch (err) {
            this._error(err);
        }
    };
    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
        var contexts = this.contexts;
        if (contexts && context) {
            var buffer = context.buffer, subscription = context.subscription;
            this.destination.next(buffer);
            contexts.splice(contexts.indexOf(context), 1);
            this.remove(subscription);
            subscription.unsubscribe();
        }
    };
    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
        var contexts = this.contexts;
        var buffer = [];
        var subscription = new Subscription_1.Subscription();
        var context = { buffer: buffer, subscription: subscription };
        contexts.push(context);
        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
        if (!innerSubscription || innerSubscription.closed) {
            this.closeBuffer(context);
        }
        else {
            innerSubscription.context = context;
            this.add(innerSubscription);
            subscription.add(innerSubscription);
        }
    };
    return BufferToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=bufferToggle.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/bufferWhen.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Buffers the source Observable values, using a factory function of closing
 * Observables to determine when to close, emit, and reset the buffer.
 *
 * <span class="informal">Collects values from the past as an array. When it
 * starts collecting values, it calls a function that returns an Observable that
 * tells when to close the buffer and restart collecting.</span>
 *
 * <img src="./img/bufferWhen.png" width="100%">
 *
 * Opens a buffer immediately, then closes the buffer when the observable
 * returned by calling `closingSelector` function emits a value. When it closes
 * the buffer, it immediately opens a new buffer and repeats the process.
 *
 * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferWhen(() =>
 *   Rx.Observable.interval(1000 + Math.random() * 4000)
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link windowWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals buffer closure.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferWhen
 * @owner Observable
 */
function bufferWhen(closingSelector) {
    return this.lift(new BufferWhenOperator(closingSelector));
}
exports.bufferWhen = bufferWhen;
var BufferWhenOperator = (function () {
    function BufferWhenOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    BufferWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
    };
    return BufferWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferWhenSubscriber = (function (_super) {
    __extends(BufferWhenSubscriber, _super);
    function BufferWhenSubscriber(destination, closingSelector) {
        _super.call(this, destination);
        this.closingSelector = closingSelector;
        this.subscribing = false;
        this.openBuffer();
    }
    BufferWhenSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferWhenSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    BufferWhenSubscriber.prototype._unsubscribe = function () {
        this.buffer = null;
        this.subscribing = false;
    };
    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openBuffer();
    };
    BufferWhenSubscriber.prototype.notifyComplete = function () {
        if (this.subscribing) {
            this.complete();
        }
        else {
            this.openBuffer();
        }
    };
    BufferWhenSubscriber.prototype.openBuffer = function () {
        var closingSubscription = this.closingSubscription;
        if (closingSubscription) {
            this.remove(closingSubscription);
            closingSubscription.unsubscribe();
        }
        var buffer = this.buffer;
        if (this.buffer) {
            this.destination.next(buffer);
        }
        this.buffer = [];
        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
        if (closingNotifier === errorObject_1.errorObject) {
            this.error(errorObject_1.errorObject.e);
        }
        else {
            closingSubscription = new Subscription_1.Subscription();
            this.closingSubscription = closingSubscription;
            this.add(closingSubscription);
            this.subscribing = true;
            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
            this.subscribing = false;
        }
    };
    return BufferWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=bufferWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/combineAll.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var combineLatest_1 = __webpack_require__("./node_modules/rxjs/operator/combineLatest.js");
/**
 * Converts a higher-order Observable into a first-order Observable by waiting
 * for the outer Observable to complete, then applying {@link combineLatest}.
 *
 * <span class="informal">Flattens an Observable-of-Observables by applying
 * {@link combineLatest} when the Observable-of-Observables completes.</span>
 *
 * <img src="./img/combineAll.png" width="100%">
 *
 * Takes an Observable of Observables, and collects all Observables from it.
 * Once the outer Observable completes, it subscribes to all collected
 * Observables and combines their values using the {@link combineLatest}
 * strategy, such that:
 * - Every time an inner Observable emits, the output Observable emits.
 * - When the returned observable emits, it emits all of the latest values by:
 *   - If a `project` function is provided, it is called with each recent value
 *     from each inner Observable in whatever order they arrived, and the result
 *     of the `project` function is what is emitted by the output Observable.
 *   - If there is no `project` function, an array of all of the most recent
 *     values is emitted by the output Observable.
 *
 * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev =>
 *   Rx.Observable.interval(Math.random()*2000).take(3)
 * ).take(2);
 * var result = higherOrder.combineAll();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineLatest}
 * @see {@link mergeAll}
 *
 * @param {function} [project] An optional function to map the most recent
 * values from each inner Observable into a new result. Takes each of the most
 * recent values from each collected inner Observable as arguments, in order.
 * @return {Observable} An Observable of projected results or arrays of recent
 * values.
 * @method combineAll
 * @owner Observable
 */
function combineAll(project) {
    return this.lift(new combineLatest_1.CombineLatestOperator(project));
}
exports.combineAll = combineAll;
//# sourceMappingURL=combineAll.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/combineLatest.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ArrayObservable_1 = __webpack_require__("./node_modules/rxjs/observable/ArrayObservable.js");
var isArray_1 = __webpack_require__("./node_modules/rxjs/util/isArray.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
var none = {};
/* tslint:disable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are
 * calculated from the latest values of each of its input Observables.
 *
 * <span class="informal">Whenever any input Observable emits a value, it
 * computes a formula using the latest values from all the inputs, then emits
 * the output of that formula.</span>
 *
 * <img src="./img/combineLatest.png" width="100%">
 *
 * `combineLatest` combines the values from this Observable with values from
 * Observables passed as arguments. This is done by subscribing to each
 * Observable, in order, and collecting an array of each of the most recent
 * values any time any of the input Observables emits, then either taking that
 * array and passing it as arguments to an optional `project` function and
 * emitting the return value of that, or just emitting the array of recent
 * values directly if there is no `project` function.
 *
 * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>
 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
 * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));
 * bmi.subscribe(x => console.log('BMI is ' + x));
 *
 * // With output to console:
 * // BMI is 24.212293388429753
 * // BMI is 23.93948099205209
 * // BMI is 23.671253629592222
 *
 * @see {@link combineAll}
 * @see {@link merge}
 * @see {@link withLatestFrom}
 *
 * @param {Observable} other An input Observable to combine with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {function} [project] An optional function to project the values from
 * the combined latest values into a new value on the output Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @method combineLatest
 * @owner Observable
 */
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var project = null;
    if (typeof observables[observables.length - 1] === 'function') {
        project = observables.pop();
    }
    // if the first and only other argument besides the resultSelector is an array
    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
        observables = observables[0];
    }
    observables.unshift(this);
    return this.lift.call(new ArrayObservable_1.ArrayObservable(observables), new CombineLatestOperator(project));
}
exports.combineLatest = combineLatest;
var CombineLatestOperator = (function () {
    function CombineLatestOperator(project) {
        this.project = project;
    }
    CombineLatestOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));
    };
    return CombineLatestOperator;
}());
exports.CombineLatestOperator = CombineLatestOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CombineLatestSubscriber = (function (_super) {
    __extends(CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, project) {
        _super.call(this, destination);
        this.project = project;
        this.active = 0;
        this.values = [];
        this.observables = [];
    }
    CombineLatestSubscriber.prototype._next = function (observable) {
        this.values.push(none);
        this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
            }
        }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    };
    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var values = this.values;
        var oldVal = values[outerIndex];
        var toRespond = !this.toRespond
            ? 0
            : oldVal === none ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.project) {
                this._tryProject(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    };
    CombineLatestSubscriber.prototype._tryProject = function (values) {
        var result;
        try {
            result = this.project.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return CombineLatestSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.CombineLatestSubscriber = CombineLatestSubscriber;
//# sourceMappingURL=combineLatest.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/concat.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isScheduler_1 = __webpack_require__("./node_modules/rxjs/util/isScheduler.js");
var ArrayObservable_1 = __webpack_require__("./node_modules/rxjs/observable/ArrayObservable.js");
var mergeAll_1 = __webpack_require__("./node_modules/rxjs/operator/mergeAll.js");
/* tslint:disable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from every
 * given input Observable after the current Observable.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * Joins this Observable with multiple other Observables by subscribing to them
 * one at a time, starting with the source, and merging their results into the
 * output Observable. Will wait for each Observable to complete before moving
 * on to the next.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = timer.concat(sequence);
 * result.subscribe(x => console.log(x));
 *
 * // results in:
 * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 * @example <caption>Concatenate 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = timer1.concat(timer2, timer3);
 * result.subscribe(x => console.log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {Observable} other An input Observable to concatenate after the source
 * Observable. More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @method concat
 * @owner Observable
 */
function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return this.lift.call(concatStatic.apply(void 0, [this].concat(observables)));
}
exports.concat = concat;
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from every
 * given input Observable after the current Observable.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * Joins multiple Observables together by subscribing to them one at a time and
 * merging their results into the output Observable. Will wait for each
 * Observable to complete before moving on to the next.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = Rx.Observable.concat(timer, sequence);
 * result.subscribe(x => console.log(x));
 *
 * // results in:
 * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 * @example <caption>Concatenate 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = Rx.Observable.concat(timer1, timer2, timer3);
 * result.subscribe(x => console.log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {Observable} input1 An input Observable to concatenate with others.
 * @param {Observable} input2 An input Observable to concatenate with others.
 * More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @static true
 * @name concat
 * @owner Observable
 */
function concatStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var scheduler = null;
    var args = observables;
    if (isScheduler_1.isScheduler(args[observables.length - 1])) {
        scheduler = args.pop();
    }
    if (scheduler === null && observables.length === 1) {
        return observables[0];
    }
    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));
}
exports.concatStatic = concatStatic;
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/concatMapTo.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var mergeMapTo_1 = __webpack_require__("./node_modules/rxjs/operator/mergeMapTo.js");
/* tslint:disable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in a serialized fashion on the output Observable.
 *
 * <span class="informal">It's like {@link concatMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/concatMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. Each new `innerObservable`
 * instance emitted on the output Observable is concatenated with the previous
 * `innerObservable` instance.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter
 * set to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link mergeMapTo}
 * @see {@link switchMapTo}
 *
 * @param {Observable} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An observable of values merged together by joining the
 * passed observable with itself, one after the other, for each value emitted
 * from the source.
 * @method concatMapTo
 * @owner Observable
 */
function concatMapTo(innerObservable, resultSelector) {
    return this.lift(new mergeMapTo_1.MergeMapToOperator(innerObservable, resultSelector, 1));
}
exports.concatMapTo = concatMapTo;
//# sourceMappingURL=concatMapTo.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/count.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/**
 * Counts the number of emissions on the source and emits that number when the
 * source completes.
 *
 * <span class="informal">Tells how many values were emitted, when the source
 * completes.</span>
 *
 * <img src="./img/count.png" width="100%">
 *
 * `count` transforms an Observable that emits values into an Observable that
 * emits a single value that represents the number of values emitted by the
 * source Observable. If the source Observable terminates with an error, `count`
 * will pass this error notification along without emitting an value first. If
 * the source Observable does not terminate at all, `count` will neither emit
 * a value nor terminate. This operator takes an optional `predicate` function
 * as argument, in which case the output emission will represent the number of
 * source values that matched `true` with the `predicate`.
 *
 * @example <caption>Counts how many seconds have passed before the first click happened</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var secondsBeforeClick = seconds.takeUntil(clicks);
 * var result = secondsBeforeClick.count();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>
 * var numbers = Rx.Observable.range(1, 7);
 * var result = numbers.count(i => i % 2 === 1);
 * result.subscribe(x => console.log(x));
 *
 * // Results in:
 * // 4
 *
 * @see {@link max}
 * @see {@link min}
 * @see {@link reduce}
 *
 * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A
 * boolean function to select what values are to be counted. It is provided with
 * arguments of:
 * - `value`: the value from the source Observable.
 * - `index`: the (zero-based) "index" of the value from the source Observable.
 * - `source`: the source Observable instance itself.
 * @return {Observable} An Observable of one number that represents the count as
 * described above.
 * @method count
 * @owner Observable
 */
function count(predicate) {
    return this.lift(new CountOperator(predicate, this));
}
exports.count = count;
var CountOperator = (function () {
    function CountOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    CountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
    };
    return CountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CountSubscriber = (function (_super) {
    __extends(CountSubscriber, _super);
    function CountSubscriber(destination, predicate, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.source = source;
        this.count = 0;
        this.index = 0;
    }
    CountSubscriber.prototype._next = function (value) {
        if (this.predicate) {
            this._tryPredicate(value);
        }
        else {
            this.count++;
        }
    };
    CountSubscriber.prototype._tryPredicate = function (value) {
        var result;
        try {
            result = this.predicate(value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.count++;
        }
    };
    CountSubscriber.prototype._complete = function () {
        this.destination.next(this.count);
        this.destination.complete();
    };
    return CountSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=count.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/debounce.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Emits a value from the source Observable only after a particular time span
 * determined by another Observable has passed without another source emission.
 *
 * <span class="informal">It's like {@link debounceTime}, but the time span of
 * emission silence is determined by a second Observable.</span>
 *
 * <img src="./img/debounce.png" width="100%">
 *
 * `debounce` delays values emitted by the source Observable, but drops previous
 * pending delayed emissions if a new value arrives on the source Observable.
 * This operator keeps track of the most recent value from the source
 * Observable, and spawns a duration Observable by calling the
 * `durationSelector` function. The value is emitted only when the duration
 * Observable emits a value or completes, and if no other value was emitted on
 * the source Observable since the duration Observable was spawned. If a new
 * value appears before the duration Observable emits, the previous value will
 * be dropped and will not be emitted on the output Observable.
 *
 * Like {@link debounceTime}, this is a rate-limiting operator, and also a
 * delay-like operator since output emissions do not necessarily occur at the
 * same time as they did on the source Observable.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounce(() => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 * @see {@link throttle}
 *
 * @param {function(value: T): Observable|Promise} durationSelector A function
 * that receives a value from the source Observable, for computing the timeout
 * duration for each source value, returned as an Observable or a Promise.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified duration Observable returned by
 * `durationSelector`, and may drop some values if they occur too frequently.
 * @method debounce
 * @owner Observable
 */
function debounce(durationSelector) {
    return this.lift(new DebounceOperator(durationSelector));
}
exports.debounce = debounce;
var DebounceOperator = (function () {
    function DebounceOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    DebounceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
    };
    return DebounceOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceSubscriber = (function (_super) {
    __extends(DebounceSubscriber, _super);
    function DebounceSubscriber(destination, durationSelector) {
        _super.call(this, destination);
        this.durationSelector = durationSelector;
        this.hasValue = false;
        this.durationSubscription = null;
    }
    DebounceSubscriber.prototype._next = function (value) {
        try {
            var result = this.durationSelector.call(this, value);
            if (result) {
                this._tryNext(value, result);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DebounceSubscriber.prototype._complete = function () {
        this.emitValue();
        this.destination.complete();
    };
    DebounceSubscriber.prototype._tryNext = function (value, duration) {
        var subscription = this.durationSubscription;
        this.value = value;
        this.hasValue = true;
        if (subscription) {
            subscription.unsubscribe();
            this.remove(subscription);
        }
        subscription = subscribeToResult_1.subscribeToResult(this, duration);
        if (!subscription.closed) {
            this.add(this.durationSubscription = subscription);
        }
    };
    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    DebounceSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    DebounceSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            var value = this.value;
            var subscription = this.durationSubscription;
            if (subscription) {
                this.durationSubscription = null;
                subscription.unsubscribe();
                this.remove(subscription);
            }
            this.value = null;
            this.hasValue = false;
            _super.prototype._next.call(this, value);
        }
    };
    return DebounceSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=debounce.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/debounceTime.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
/**
 * Emits a value from the source Observable only after a particular time span
 * has passed without another source emission.
 *
 * <span class="informal">It's like {@link delay}, but passes only the most
 * recent value from each burst of emissions.</span>
 *
 * <img src="./img/debounceTime.png" width="100%">
 *
 * `debounceTime` delays values emitted by the source Observable, but drops
 * previous pending delayed emissions if a new value arrives on the source
 * Observable. This operator keeps track of the most recent value from the
 * source Observable, and emits that only when `dueTime` enough time has passed
 * without any other value appearing on the source Observable. If a new value
 * appears before `dueTime` silence occurs, the previous value will be dropped
 * and will not be emitted on the output Observable.
 *
 * This is a rate-limiting operator, because it is impossible for more than one
 * value to be emitted in any time window of duration `dueTime`, but it is also
 * a delay-like operator since output emissions do not occur at the same time as
 * they did on the source Observable. Optionally takes a {@link Scheduler} for
 * managing timers.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounceTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} dueTime The timeout duration in milliseconds (or the time
 * unit determined internally by the optional `scheduler`) for the window of
 * time required to wait for emission silence before emitting the most recent
 * source value.
 * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for
 * managing the timers that handle the timeout for each value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified `dueTime`, and may drop some values if they occur
 * too frequently.
 * @method debounceTime
 * @owner Observable
 */
function debounceTime(dueTime, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return this.lift(new DebounceTimeOperator(dueTime, scheduler));
}
exports.debounceTime = debounceTime;
var DebounceTimeOperator = (function () {
    function DebounceTimeOperator(dueTime, scheduler) {
        this.dueTime = dueTime;
        this.scheduler = scheduler;
    }
    DebounceTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
    };
    return DebounceTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceTimeSubscriber = (function (_super) {
    __extends(DebounceTimeSubscriber, _super);
    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
        _super.call(this, destination);
        this.dueTime = dueTime;
        this.scheduler = scheduler;
        this.debouncedSubscription = null;
        this.lastValue = null;
        this.hasValue = false;
    }
    DebounceTimeSubscriber.prototype._next = function (value) {
        this.clearDebounce();
        this.lastValue = value;
        this.hasValue = true;
        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
    };
    DebounceTimeSubscriber.prototype._complete = function () {
        this.debouncedNext();
        this.destination.complete();
    };
    DebounceTimeSubscriber.prototype.debouncedNext = function () {
        this.clearDebounce();
        if (this.hasValue) {
            this.destination.next(this.lastValue);
            this.lastValue = null;
            this.hasValue = false;
        }
    };
    DebounceTimeSubscriber.prototype.clearDebounce = function () {
        var debouncedSubscription = this.debouncedSubscription;
        if (debouncedSubscription !== null) {
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
        }
    };
    return DebounceTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNext(subscriber) {
    subscriber.debouncedNext();
}
//# sourceMappingURL=debounceTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/defaultIfEmpty.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/* tslint:disable:max-line-length */
/**
 * Emits a given value if the source Observable completes without emitting any
 * `next` value, otherwise mirrors the source Observable.
 *
 * <span class="informal">If the source Observable turns out to be empty, then
 * this operator will emit a default value.</span>
 *
 * <img src="./img/defaultIfEmpty.png" width="100%">
 *
 * `defaultIfEmpty` emits the values emitted by the source Observable or a
 * specified default value if the source Observable is empty (completes without
 * having emitted any `next` value).
 *
 * @example <caption>If no clicks happen in 5 seconds, then emit "no clicks"</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));
 * var result = clicksBeforeFive.defaultIfEmpty('no clicks');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link empty}
 * @see {@link last}
 *
 * @param {any} [defaultValue=null] The default value used if the source
 * Observable is empty.
 * @return {Observable} An Observable that emits either the specified
 * `defaultValue` if the source Observable emits no items, or the values emitted
 * by the source Observable.
 * @method defaultIfEmpty
 * @owner Observable
 */
function defaultIfEmpty(defaultValue) {
    if (defaultValue === void 0) { defaultValue = null; }
    return this.lift(new DefaultIfEmptyOperator(defaultValue));
}
exports.defaultIfEmpty = defaultIfEmpty;
var DefaultIfEmptyOperator = (function () {
    function DefaultIfEmptyOperator(defaultValue) {
        this.defaultValue = defaultValue;
    }
    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
    };
    return DefaultIfEmptyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DefaultIfEmptySubscriber = (function (_super) {
    __extends(DefaultIfEmptySubscriber, _super);
    function DefaultIfEmptySubscriber(destination, defaultValue) {
        _super.call(this, destination);
        this.defaultValue = defaultValue;
        this.isEmpty = true;
    }
    DefaultIfEmptySubscriber.prototype._next = function (value) {
        this.isEmpty = false;
        this.destination.next(value);
    };
    DefaultIfEmptySubscriber.prototype._complete = function () {
        if (this.isEmpty) {
            this.destination.next(this.defaultValue);
        }
        this.destination.complete();
    };
    return DefaultIfEmptySubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=defaultIfEmpty.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/delay.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
var isDate_1 = __webpack_require__("./node_modules/rxjs/util/isDate.js");
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var Notification_1 = __webpack_require__("./node_modules/rxjs/Notification.js");
/**
 * Delays the emission of items from the source Observable by a given timeout or
 * until a given Date.
 *
 * <span class="informal">Time shifts each item by some specified amount of
 * milliseconds.</span>
 *
 * <img src="./img/delay.png" width="100%">
 *
 * If the delay argument is a Number, this operator time shifts the source
 * Observable by that amount of time expressed in milliseconds. The relative
 * time intervals between the values are preserved.
 *
 * If the delay argument is a Date, this operator time shifts the start of the
 * Observable execution until the given date occurs.
 *
 * @example <caption>Delay each click by one second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @example <caption>Delay all clicks until a future date happens</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var date = new Date('March 15, 2050 12:00:00'); // in the future
 * var delayedClicks = clicks.delay(date); // click emitted only after that date
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 *
 * @param {number|Date} delay The delay duration in milliseconds (a `number`) or
 * a `Date` until which the emission of the source items is delayed.
 * @param {Scheduler} [scheduler=async] The Scheduler to use for
 * managing the timers that handle the time-shift for each item.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified timeout or Date.
 * @method delay
 * @owner Observable
 */
function delay(delay, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    var absoluteDelay = isDate_1.isDate(delay);
    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
    return this.lift(new DelayOperator(delayFor, scheduler));
}
exports.delay = delay;
var DelayOperator = (function () {
    function DelayOperator(delay, scheduler) {
        this.delay = delay;
        this.scheduler = scheduler;
    }
    DelayOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
    };
    return DelayOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelaySubscriber = (function (_super) {
    __extends(DelaySubscriber, _super);
    function DelaySubscriber(destination, delay, scheduler) {
        _super.call(this, destination);
        this.delay = delay;
        this.scheduler = scheduler;
        this.queue = [];
        this.active = false;
        this.errored = false;
    }
    DelaySubscriber.dispatch = function (state) {
        var source = state.source;
        var queue = source.queue;
        var scheduler = state.scheduler;
        var destination = state.destination;
        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
            queue.shift().notification.observe(destination);
        }
        if (queue.length > 0) {
            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
            this.schedule(state, delay_1);
        }
        else {
            source.active = false;
        }
    };
    DelaySubscriber.prototype._schedule = function (scheduler) {
        this.active = true;
        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
            source: this, destination: this.destination, scheduler: scheduler
        }));
    };
    DelaySubscriber.prototype.scheduleNotification = function (notification) {
        if (this.errored === true) {
            return;
        }
        var scheduler = this.scheduler;
        var message = new DelayMessage(scheduler.now() + this.delay, notification);
        this.queue.push(message);
        if (this.active === false) {
            this._schedule(scheduler);
        }
    };
    DelaySubscriber.prototype._next = function (value) {
        this.scheduleNotification(Notification_1.Notification.createNext(value));
    };
    DelaySubscriber.prototype._error = function (err) {
        this.errored = true;
        this.queue = [];
        this.destination.error(err);
    };
    DelaySubscriber.prototype._complete = function () {
        this.scheduleNotification(Notification_1.Notification.createComplete());
    };
    return DelaySubscriber;
}(Subscriber_1.Subscriber));
var DelayMessage = (function () {
    function DelayMessage(time, notification) {
        this.time = time;
        this.notification = notification;
    }
    return DelayMessage;
}());
//# sourceMappingURL=delay.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/delayWhen.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Delays the emission of items from the source Observable by a given time span
 * determined by the emissions of another Observable.
 *
 * <span class="informal">It's like {@link delay}, but the time span of the
 * delay duration is determined by a second Observable.</span>
 *
 * <img src="./img/delayWhen.png" width="100%">
 *
 * `delayWhen` time shifts each emitted value from the source Observable by a
 * time span determined by another Observable. When the source emits a value,
 * the `delayDurationSelector` function is called with the source value as
 * argument, and should return an Observable, called the "duration" Observable.
 * The source value is emitted on the output Observable only when the duration
 * Observable emits a value or completes.
 *
 * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which
 * is an Observable. When `subscriptionDelay` emits its first value or
 * completes, the source Observable is subscribed to and starts behaving like
 * described in the previous paragraph. If `subscriptionDelay` is not provided,
 * `delayWhen` will subscribe to the source Observable as soon as the output
 * Observable is subscribed.
 *
 * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delayWhen(event =>
 *   Rx.Observable.interval(Math.random() * 5000)
 * );
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @see {@link debounce}
 * @see {@link delay}
 *
 * @param {function(value: T): Observable} delayDurationSelector A function that
 * returns an Observable for each value emitted by the source Observable, which
 * is then used to delay the emission of that item on the output Observable
 * until the Observable returned from this function emits a value.
 * @param {Observable} subscriptionDelay An Observable that triggers the
 * subscription to the source Observable once it emits any value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by an amount of time specified by the Observable returned by
 * `delayDurationSelector`.
 * @method delayWhen
 * @owner Observable
 */
function delayWhen(delayDurationSelector, subscriptionDelay) {
    if (subscriptionDelay) {
        return new SubscriptionDelayObservable(this, subscriptionDelay)
            .lift(new DelayWhenOperator(delayDurationSelector));
    }
    return this.lift(new DelayWhenOperator(delayDurationSelector));
}
exports.delayWhen = delayWhen;
var DelayWhenOperator = (function () {
    function DelayWhenOperator(delayDurationSelector) {
        this.delayDurationSelector = delayDurationSelector;
    }
    DelayWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
    };
    return DelayWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelayWhenSubscriber = (function (_super) {
    __extends(DelayWhenSubscriber, _super);
    function DelayWhenSubscriber(destination, delayDurationSelector) {
        _super.call(this, destination);
        this.delayDurationSelector = delayDurationSelector;
        this.completed = false;
        this.delayNotifierSubscriptions = [];
        this.values = [];
    }
    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(outerValue);
        this.removeSubscription(innerSub);
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        var value = this.removeSubscription(innerSub);
        if (value) {
            this.destination.next(value);
        }
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype._next = function (value) {
        try {
            var delayNotifier = this.delayDurationSelector(value);
            if (delayNotifier) {
                this.tryDelay(delayNotifier, value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DelayWhenSubscriber.prototype._complete = function () {
        this.completed = true;
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
        subscription.unsubscribe();
        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
        var value = null;
        if (subscriptionIdx !== -1) {
            value = this.values[subscriptionIdx];
            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
            this.values.splice(subscriptionIdx, 1);
        }
        return value;
    };
    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);
        this.add(notifierSubscription);
        this.delayNotifierSubscriptions.push(notifierSubscription);
        this.values.push(value);
    };
    DelayWhenSubscriber.prototype.tryComplete = function () {
        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
            this.destination.complete();
        }
    };
    return DelayWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelayObservable = (function (_super) {
    __extends(SubscriptionDelayObservable, _super);
    function SubscriptionDelayObservable(source, subscriptionDelay) {
        _super.call(this);
        this.source = source;
        this.subscriptionDelay = subscriptionDelay;
    }
    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
    };
    return SubscriptionDelayObservable;
}(Observable_1.Observable));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelaySubscriber = (function (_super) {
    __extends(SubscriptionDelaySubscriber, _super);
    function SubscriptionDelaySubscriber(parent, source) {
        _super.call(this);
        this.parent = parent;
        this.source = source;
        this.sourceSubscribed = false;
    }
    SubscriptionDelaySubscriber.prototype._next = function (unused) {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype._error = function (err) {
        this.unsubscribe();
        this.parent.error(err);
    };
    SubscriptionDelaySubscriber.prototype._complete = function () {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
        if (!this.sourceSubscribed) {
            this.sourceSubscribed = true;
            this.unsubscribe();
            this.source.subscribe(this.parent);
        }
    };
    return SubscriptionDelaySubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=delayWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/dematerialize.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/**
 * Converts an Observable of {@link Notification} objects into the emissions
 * that they represent.
 *
 * <span class="informal">Unwraps {@link Notification} objects as actual `next`,
 * `error` and `complete` emissions. The opposite of {@link materialize}.</span>
 *
 * <img src="./img/dematerialize.png" width="100%">
 *
 * `dematerialize` is assumed to operate an Observable that only emits
 * {@link Notification} objects as `next` emissions, and does not emit any
 * `error`. Such Observable is the output of a `materialize` operation. Those
 * notifications are then unwrapped using the metadata they contain, and emitted
 * as `next`, `error`, and `complete` on the output Observable.
 *
 * Use this operator in conjunction with {@link materialize}.
 *
 * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>
 * var notifA = new Rx.Notification('N', 'A');
 * var notifB = new Rx.Notification('N', 'B');
 * var notifE = new Rx.Notification('E', void 0,
 *   new TypeError('x.toUpperCase is not a function')
 * );
 * var materialized = Rx.Observable.of(notifA, notifB, notifE);
 * var upperCase = materialized.dematerialize();
 * upperCase.subscribe(x => console.log(x), e => console.error(e));
 *
 * // Results in:
 * // A
 * // B
 * // TypeError: x.toUpperCase is not a function
 *
 * @see {@link Notification}
 * @see {@link materialize}
 *
 * @return {Observable} An Observable that emits items and notifications
 * embedded in Notification objects emitted by the source Observable.
 * @method dematerialize
 * @owner Observable
 */
function dematerialize() {
    return this.lift(new DeMaterializeOperator());
}
exports.dematerialize = dematerialize;
var DeMaterializeOperator = (function () {
    function DeMaterializeOperator() {
    }
    DeMaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DeMaterializeSubscriber(subscriber));
    };
    return DeMaterializeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DeMaterializeSubscriber = (function (_super) {
    __extends(DeMaterializeSubscriber, _super);
    function DeMaterializeSubscriber(destination) {
        _super.call(this, destination);
    }
    DeMaterializeSubscriber.prototype._next = function (value) {
        value.observe(this.destination);
    };
    return DeMaterializeSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=dematerialize.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/distinct.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
var Set_1 = __webpack_require__("./node_modules/rxjs/util/Set.js");
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
 * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will
 * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the
 * source observable directly with an equality check against previous values.
 * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.
 * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the
 * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`
 * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so
 * that the internal `Set` can be "flushed", basically clearing it of values.
 * @param {function} [keySelector] optional function to select which value you want to check as distinct.
 * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.
 * @return {Observable} an Observable that emits items from the source Observable with distinct values.
 * @method distinct
 * @owner Observable
 */
function distinct(keySelector, flushes) {
    return this.lift(new DistinctOperator(keySelector, flushes));
}
exports.distinct = distinct;
var DistinctOperator = (function () {
    function DistinctOperator(keySelector, flushes) {
        this.keySelector = keySelector;
        this.flushes = flushes;
    }
    DistinctOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
    };
    return DistinctOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctSubscriber = (function (_super) {
    __extends(DistinctSubscriber, _super);
    function DistinctSubscriber(destination, keySelector, flushes) {
        _super.call(this, destination);
        this.keySelector = keySelector;
        this.values = new Set_1.Set();
        if (flushes) {
            this.add(subscribeToResult_1.subscribeToResult(this, flushes));
        }
    }
    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values.clear();
    };
    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DistinctSubscriber.prototype._next = function (value) {
        if (this.keySelector) {
            this._useKeySelector(value);
        }
        else {
            this._finalizeNext(value, value);
        }
    };
    DistinctSubscriber.prototype._useKeySelector = function (value) {
        var key;
        var destination = this.destination;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this._finalizeNext(key, value);
    };
    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
        var values = this.values;
        if (!values.has(key)) {
            values.add(key);
            this.destination.next(value);
        }
    };
    return DistinctSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.DistinctSubscriber = DistinctSubscriber;
//# sourceMappingURL=distinct.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/distinctUntilChanged.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
/* tslint:disable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 * If a comparator function is not provided, an equality check is used by default.
 * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} an Observable that emits items from the source Observable with distinct values.
 * @method distinctUntilChanged
 * @owner Observable
 */
function distinctUntilChanged(compare, keySelector) {
    return this.lift(new DistinctUntilChangedOperator(compare, keySelector));
}
exports.distinctUntilChanged = distinctUntilChanged;
var DistinctUntilChangedOperator = (function () {
    function DistinctUntilChangedOperator(compare, keySelector) {
        this.compare = compare;
        this.keySelector = keySelector;
    }
    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    };
    return DistinctUntilChangedOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctUntilChangedSubscriber = (function (_super) {
    __extends(DistinctUntilChangedSubscriber, _super);
    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
        _super.call(this, destination);
        this.keySelector = keySelector;
        this.hasKey = false;
        if (typeof compare === 'function') {
            this.compare = compare;
        }
    }
    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
        return x === y;
    };
    DistinctUntilChangedSubscriber.prototype._next = function (value) {
        var keySelector = this.keySelector;
        var key = value;
        if (keySelector) {
            key = tryCatch_1.tryCatch(this.keySelector)(value);
            if (key === errorObject_1.errorObject) {
                return this.destination.error(errorObject_1.errorObject.e);
            }
        }
        var result = false;
        if (this.hasKey) {
            result = tryCatch_1.tryCatch(this.compare)(this.key, key);
            if (result === errorObject_1.errorObject) {
                return this.destination.error(errorObject_1.errorObject.e);
            }
        }
        else {
            this.hasKey = true;
        }
        if (Boolean(result) === false) {
            this.key = key;
            this.destination.next(value);
        }
    };
    return DistinctUntilChangedSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=distinctUntilChanged.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/distinctUntilKeyChanged.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var distinctUntilChanged_1 = __webpack_require__("./node_modules/rxjs/operator/distinctUntilChanged.js");
/* tslint:disable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,
 * using a property accessed by using the key provided to check if the two items are distinct.
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 * If a comparator function is not provided, an equality check is used by default.
 * @param {string} key string key for object property lookup on each item.
 * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.
 * @method distinctUntilKeyChanged
 * @owner Observable
 */
function distinctUntilKeyChanged(key, compare) {
    return distinctUntilChanged_1.distinctUntilChanged.call(this, function (x, y) {
        if (compare) {
            return compare(x[key], y[key]);
        }
        return x[key] === y[key];
    });
}
exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
//# sourceMappingURL=distinctUntilKeyChanged.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/do.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/* tslint:disable:max-line-length */
/**
 * Perform a side effect for every emission on the source Observable, but return
 * an Observable that is identical to the source.
 *
 * <span class="informal">Intercepts each emission on the source and runs a
 * function, but returns an output which is identical to the source.</span>
 *
 * <img src="./img/do.png" width="100%">
 *
 * Returns a mirrored Observable of the source Observable, but modified so that
 * the provided Observer is called to perform a side effect for every value,
 * error, and completion emitted by the source. Any errors that are thrown in
 * the aforementioned Observer or handlers are safely sent down the error path
 * of the output Observable.
 *
 * This operator is useful for debugging your Observables for the correct values
 * or performing other side effects.
 *
 * Note: this is different to a `subscribe` on the Observable. If the Observable
 * returned by `do` is not subscribed, the side effects specified by the
 * Observer will never happen. `do` therefore simply spies on existing
 * execution, it does not trigger an execution to happen like `subscribe` does.
 *
 * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks
 *   .do(ev => console.log(ev))
 *   .map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link map}
 * @see {@link subscribe}
 *
 * @param {Observer|function} [nextOrObserver] A normal Observer object or a
 * callback for `next`.
 * @param {function} [error] Callback for errors in the source.
 * @param {function} [complete] Callback for the completion of the source.
 * @return {Observable} An Observable identical to the source, but runs the
 * specified Observer or callback(s) for each item.
 * @method do
 * @name do
 * @owner Observable
 */
function _do(nextOrObserver, error, complete) {
    return this.lift(new DoOperator(nextOrObserver, error, complete));
}
exports._do = _do;
var DoOperator = (function () {
    function DoOperator(nextOrObserver, error, complete) {
        this.nextOrObserver = nextOrObserver;
        this.error = error;
        this.complete = complete;
    }
    DoOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
    };
    return DoOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DoSubscriber = (function (_super) {
    __extends(DoSubscriber, _super);
    function DoSubscriber(destination, nextOrObserver, error, complete) {
        _super.call(this, destination);
        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
        safeSubscriber.syncErrorThrowable = true;
        this.add(safeSubscriber);
        this.safeSubscriber = safeSubscriber;
    }
    DoSubscriber.prototype._next = function (value) {
        var safeSubscriber = this.safeSubscriber;
        safeSubscriber.next(value);
        if (safeSubscriber.syncErrorThrown) {
            this.destination.error(safeSubscriber.syncErrorValue);
        }
        else {
            this.destination.next(value);
        }
    };
    DoSubscriber.prototype._error = function (err) {
        var safeSubscriber = this.safeSubscriber;
        safeSubscriber.error(err);
        if (safeSubscriber.syncErrorThrown) {
            this.destination.error(safeSubscriber.syncErrorValue);
        }
        else {
            this.destination.error(err);
        }
    };
    DoSubscriber.prototype._complete = function () {
        var safeSubscriber = this.safeSubscriber;
        safeSubscriber.complete();
        if (safeSubscriber.syncErrorThrown) {
            this.destination.error(safeSubscriber.syncErrorValue);
        }
        else {
            this.destination.complete();
        }
    };
    return DoSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=do.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/elementAt.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var ArgumentOutOfRangeError_1 = __webpack_require__("./node_modules/rxjs/util/ArgumentOutOfRangeError.js");
/**
 * Emits the single value at the specified `index` in a sequence of emissions
 * from the source Observable.
 *
 * <span class="informal">Emits only the i-th value, then completes.</span>
 *
 * <img src="./img/elementAt.png" width="100%">
 *
 * `elementAt` returns an Observable that emits the item at the specified
 * `index` in the source Observable, or a default value if that `index` is out
 * of range and the `default` argument is provided. If the `default` argument is
 * not given and the `index` is out of range, the output Observable will emit an
 * `ArgumentOutOfRangeError` error.
 *
 * @example <caption>Emit only the third click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.elementAt(2);
 * result.subscribe(x => console.log(x));
 *
 * // Results in:
 * // click 1 = nothing
 * // click 2 = nothing
 * // click 3 = MouseEvent object logged to console
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link skip}
 * @see {@link single}
 * @see {@link take}
 *
 * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the
 * Observable has completed before emitting the i-th `next` notification.
 *
 * @param {number} index Is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {T} [defaultValue] The default value returned for missing indices.
 * @return {Observable} An Observable that emits a single item, if it is found.
 * Otherwise, will emit the default value if given. If not, then emits an error.
 * @method elementAt
 * @owner Observable
 */
function elementAt(index, defaultValue) {
    return this.lift(new ElementAtOperator(index, defaultValue));
}
exports.elementAt = elementAt;
var ElementAtOperator = (function () {
    function ElementAtOperator(index, defaultValue) {
        this.index = index;
        this.defaultValue = defaultValue;
        if (index < 0) {
            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
        }
    }
    ElementAtOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));
    };
    return ElementAtOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ElementAtSubscriber = (function (_super) {
    __extends(ElementAtSubscriber, _super);
    function ElementAtSubscriber(destination, index, defaultValue) {
        _super.call(this, destination);
        this.index = index;
        this.defaultValue = defaultValue;
    }
    ElementAtSubscriber.prototype._next = function (x) {
        if (this.index-- === 0) {
            this.destination.next(x);
            this.destination.complete();
        }
    };
    ElementAtSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.index >= 0) {
            if (typeof this.defaultValue !== 'undefined') {
                destination.next(this.defaultValue);
            }
            else {
                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);
            }
        }
        destination.complete();
    };
    return ElementAtSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=elementAt.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/exhaust.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Converts a higher-order Observable into a first-order Observable by dropping
 * inner Observables while the previous inner Observable has not yet completed.
 *
 * <span class="informal">Flattens an Observable-of-Observables by dropping the
 * next inner Observables while the current inner is still executing.</span>
 *
 * <img src="./img/exhaust.png" width="100%">
 *
 * `exhaust` subscribes to an Observable that emits Observables, also known as a
 * higher-order Observable. Each time it observes one of these emitted inner
 * Observables, the output Observable begins emitting the items emitted by that
 * inner Observable. So far, it behaves like {@link mergeAll}. However,
 * `exhaust` ignores every new inner Observable if the previous Observable has
 * not yet completed. Once that one completes, it will accept and flatten the
 * next inner Observable and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var result = higherOrder.exhaust();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link switch}
 * @see {@link mergeAll}
 * @see {@link exhaustMap}
 * @see {@link zipAll}
 *
 * @return {Observable} Returns an Observable that takes a source of Observables
 * and propagates the first observable exclusively until it completes before
 * subscribing to the next.
 * @method exhaust
 * @owner Observable
 */
function exhaust() {
    return this.lift(new SwitchFirstOperator());
}
exports.exhaust = exhaust;
var SwitchFirstOperator = (function () {
    function SwitchFirstOperator() {
    }
    SwitchFirstOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchFirstSubscriber(subscriber));
    };
    return SwitchFirstOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchFirstSubscriber = (function (_super) {
    __extends(SwitchFirstSubscriber, _super);
    function SwitchFirstSubscriber(destination) {
        _super.call(this, destination);
        this.hasCompleted = false;
        this.hasSubscription = false;
    }
    SwitchFirstSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.hasSubscription = true;
            this.add(subscribeToResult_1.subscribeToResult(this, value));
        }
    };
    SwitchFirstSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return SwitchFirstSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=exhaust.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/exhaustMap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/* tslint:disable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable only if the previous projected Observable has completed.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link exhaust}.</span>
 *
 * <img src="./img/exhaustMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. When it projects a source value to
 * an Observable, the output Observable begins emitting the items emitted by
 * that projected Observable. However, `exhaustMap` ignores every new projected
 * Observable if the previous projected Observable has not yet completed. Once
 * that one completes, it will accept and flatten the next projected Observable
 * and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaust}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): Observable} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable containing projected Observables
 * of each item of the source, ignoring projected Observables that start before
 * their preceding Observable has completed.
 * @method exhaustMap
 * @owner Observable
 */
function exhaustMap(project, resultSelector) {
    return this.lift(new SwitchFirstMapOperator(project, resultSelector));
}
exports.exhaustMap = exhaustMap;
var SwitchFirstMapOperator = (function () {
    function SwitchFirstMapOperator(project, resultSelector) {
        this.project = project;
        this.resultSelector = resultSelector;
    }
    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));
    };
    return SwitchFirstMapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchFirstMapSubscriber = (function (_super) {
    __extends(SwitchFirstMapSubscriber, _super);
    function SwitchFirstMapSubscriber(destination, project, resultSelector) {
        _super.call(this, destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.hasSubscription = false;
        this.hasCompleted = false;
        this.index = 0;
    }
    SwitchFirstMapSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.tryNext(value);
        }
    };
    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {
        var index = this.index++;
        var destination = this.destination;
        try {
            var result = this.project(value, index);
            this.hasSubscription = true;
            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
        }
        catch (err) {
            destination.error(err);
        }
    };
    SwitchFirstMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        if (resultSelector) {
            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            destination.next(innerValue);
        }
    };
    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        try {
            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            destination.next(result);
        }
        catch (err) {
            destination.error(err);
        }
    };
    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return SwitchFirstMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=exhaustMap.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/expand.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/* tslint:disable:max-line-length */
/**
 * Recursively projects each source value to an Observable which is merged in
 * the output Observable.
 *
 * <span class="informal">It's similar to {@link mergeMap}, but applies the
 * projection function to every source value as well as every output value.
 * It's recursive.</span>
 *
 * <img src="./img/expand.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger. *Expand* will re-emit on the output
 * Observable every source value. Then, each output value is given to the
 * `project` function which returns an inner Observable to be merged on the
 * output Observable. Those output values resulting from the projection are also
 * given to the `project` function to produce new output values. This is how
 * *expand* behaves recursively.
 *
 * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var powersOfTwo = clicks
 *   .mapTo(1)
 *   .expand(x => Rx.Observable.of(2 * x).delay(1000))
 *   .take(10);
 * powersOfTwo.subscribe(x => console.log(x));
 *
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 *
 * @param {function(value: T, index: number) => Observable} project A function
 * that, when applied to an item emitted by the source or the output Observable,
 * returns an Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to
 * each projected inner Observable.
 * @return {Observable} An Observable that emits the source values and also
 * result of applying the projection function to each value emitted on the
 * output Observable and and merging the results of the Observables obtained
 * from this transformation.
 * @method expand
 * @owner Observable
 */
function expand(project, concurrent, scheduler) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    if (scheduler === void 0) { scheduler = undefined; }
    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
    return this.lift(new ExpandOperator(project, concurrent, scheduler));
}
exports.expand = expand;
var ExpandOperator = (function () {
    function ExpandOperator(project, concurrent, scheduler) {
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
    }
    ExpandOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
    };
    return ExpandOperator;
}());
exports.ExpandOperator = ExpandOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ExpandSubscriber = (function (_super) {
    __extends(ExpandSubscriber, _super);
    function ExpandSubscriber(destination, project, concurrent, scheduler) {
        _super.call(this, destination);
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
        this.index = 0;
        this.active = 0;
        this.hasCompleted = false;
        if (concurrent < Number.POSITIVE_INFINITY) {
            this.buffer = [];
        }
    }
    ExpandSubscriber.dispatch = function (arg) {
        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
        subscriber.subscribeToProjection(result, value, index);
    };
    ExpandSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (destination.closed) {
            this._complete();
            return;
        }
        var index = this.index++;
        if (this.active < this.concurrent) {
            destination.next(value);
            var result = tryCatch_1.tryCatch(this.project)(value, index);
            if (result === errorObject_1.errorObject) {
                destination.error(errorObject_1.errorObject.e);
            }
            else if (!this.scheduler) {
                this.subscribeToProjection(result, value, index);
            }
            else {
                var state = { subscriber: this, result: result, value: value, index: index };
                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
        this.active++;
        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
    };
    ExpandSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this._next(innerValue);
    };
    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer && buffer.length > 0) {
            this._next(buffer.shift());
        }
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    return ExpandSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.ExpandSubscriber = ExpandSubscriber;
//# sourceMappingURL=expand.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/finally.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
/**
 * Returns an Observable that mirrors the source Observable, but will call a specified function when
 * the source terminates on complete or error.
 * @param {function} callback function to be called when source terminates.
 * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.
 * @method finally
 * @owner Observable
 */
function _finally(callback) {
    return this.lift(new FinallyOperator(callback));
}
exports._finally = _finally;
var FinallyOperator = (function () {
    function FinallyOperator(callback) {
        this.callback = callback;
    }
    FinallyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
    };
    return FinallyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FinallySubscriber = (function (_super) {
    __extends(FinallySubscriber, _super);
    function FinallySubscriber(destination, callback) {
        _super.call(this, destination);
        this.add(new Subscription_1.Subscription(callback));
    }
    return FinallySubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=finally.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/find.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/* tslint:disable:max-line-length */
/**
 * Emits only the first value emitted by the source Observable that meets some
 * condition.
 *
 * <span class="informal">Finds the first value that passes some test and emits
 * that.</span>
 *
 * <img src="./img/find.png" width="100%">
 *
 * `find` searches for the first item in the source Observable that matches the
 * specified condition embodied by the `predicate`, and returns the first
 * occurrence in the source. Unlike {@link first}, the `predicate` is required
 * in `find`, and does not emit an error if a valid value is not found.
 *
 * @example <caption>Find and emit the first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.find(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link first}
 * @see {@link findIndex}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable<T>} An Observable of the first item that matches the
 * condition.
 * @method find
 * @owner Observable
 */
function find(predicate, thisArg) {
    if (typeof predicate !== 'function') {
        throw new TypeError('predicate is not a function');
    }
    return this.lift(new FindValueOperator(predicate, this, false, thisArg));
}
exports.find = find;
var FindValueOperator = (function () {
    function FindValueOperator(predicate, source, yieldIndex, thisArg) {
        this.predicate = predicate;
        this.source = source;
        this.yieldIndex = yieldIndex;
        this.thisArg = thisArg;
    }
    FindValueOperator.prototype.call = function (observer, source) {
        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
    };
    return FindValueOperator;
}());
exports.FindValueOperator = FindValueOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FindValueSubscriber = (function (_super) {
    __extends(FindValueSubscriber, _super);
    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.source = source;
        this.yieldIndex = yieldIndex;
        this.thisArg = thisArg;
        this.index = 0;
    }
    FindValueSubscriber.prototype.notifyComplete = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    FindValueSubscriber.prototype._next = function (value) {
        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
        var index = this.index++;
        try {
            var result = predicate.call(thisArg || this, value, index, this.source);
            if (result) {
                this.notifyComplete(this.yieldIndex ? index : value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    FindValueSubscriber.prototype._complete = function () {
        this.notifyComplete(this.yieldIndex ? -1 : undefined);
    };
    return FindValueSubscriber;
}(Subscriber_1.Subscriber));
exports.FindValueSubscriber = FindValueSubscriber;
//# sourceMappingURL=find.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/findIndex.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var find_1 = __webpack_require__("./node_modules/rxjs/operator/find.js");
/**
 * Emits only the index of the first value emitted by the source Observable that
 * meets some condition.
 *
 * <span class="informal">It's like {@link find}, but emits the index of the
 * found value, not the value itself.</span>
 *
 * <img src="./img/findIndex.png" width="100%">
 *
 * `findIndex` searches for the first item in the source Observable that matches
 * the specified condition embodied by the `predicate`, and returns the
 * (zero-based) index of the first occurrence in the source. Unlike
 * {@link first}, the `predicate` is required in `findIndex`, and does not emit
 * an error if a valid value is not found.
 *
 * @example <caption>Emit the index of first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link first}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of the index of the first item that
 * matches the condition.
 * @method find
 * @owner Observable
 */
function findIndex(predicate, thisArg) {
    return this.lift(new find_1.FindValueOperator(predicate, this, true, thisArg));
}
exports.findIndex = findIndex;
//# sourceMappingURL=findIndex.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/groupBy.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var Map_1 = __webpack_require__("./node_modules/rxjs/util/Map.js");
var FastMap_1 = __webpack_require__("./node_modules/rxjs/util/FastMap.js");
/* tslint:disable:max-line-length */
/**
 * Groups the items emitted by an Observable according to a specified criterion,
 * and emits these grouped items as `GroupedObservables`, one
 * {@link GroupedObservable} per group.
 *
 * <img src="./img/groupBy.png" width="100%">
 *
 * @param {function(value: T): K} keySelector a function that extracts the key
 * for each item.
 * @param {function(value: T): R} [elementSelector] a function that extracts the
 * return element for each item.
 * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]
 * a function that returns an Observable to determine how long each group should
 * exist.
 * @return {Observable<GroupedObservable<K,R>>} an Observable that emits
 * GroupedObservables, each of which corresponds to a unique key value and each
 * of which emits those items from the source Observable that share that key
 * value.
 * @method groupBy
 * @owner Observable
 */
function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
    return this.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
}
exports.groupBy = groupBy;
var GroupByOperator = (function () {
    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    }
    GroupByOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    };
    return GroupByOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupBySubscriber = (function (_super) {
    __extends(GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        _super.call(this, destination);
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
        this.groups = null;
        this.attemptedToUnsubscribe = false;
        this.count = 0;
    }
    GroupBySubscriber.prototype._next = function (value) {
        var key;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            this.error(err);
            return;
        }
        this._group(value, key);
    };
    GroupBySubscriber.prototype._group = function (value, key) {
        var groups = this.groups;
        if (!groups) {
            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();
        }
        var group = groups.get(key);
        var element;
        if (this.elementSelector) {
            try {
                element = this.elementSelector(value);
            }
            catch (err) {
                this.error(err);
            }
        }
        else {
            element = value;
        }
        if (!group) {
            group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
                var duration = void 0;
                try {
                    duration = this.durationSelector(new GroupedObservable(key, group));
                }
                catch (err) {
                    this.error(err);
                    return;
                }
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            }
        }
        if (!group.closed) {
            group.next(element);
        }
    };
    GroupBySubscriber.prototype._error = function (err) {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.error(err);
            });
            groups.clear();
        }
        this.destination.error(err);
    };
    GroupBySubscriber.prototype._complete = function () {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.complete();
            });
            groups.clear();
        }
        this.destination.complete();
    };
    GroupBySubscriber.prototype.removeGroup = function (key) {
        this.groups.delete(key);
    };
    GroupBySubscriber.prototype.unsubscribe = function () {
        if (!this.closed && !this.attemptedToUnsubscribe) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
                _super.prototype.unsubscribe.call(this);
            }
        }
    };
    return GroupBySubscriber;
}(Subscriber_1.Subscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupDurationSubscriber = (function (_super) {
    __extends(GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) {
        _super.call(this);
        this.key = key;
        this.group = group;
        this.parent = parent;
    }
    GroupDurationSubscriber.prototype._next = function (value) {
        this._complete();
    };
    GroupDurationSubscriber.prototype._error = function (err) {
        var group = this.group;
        if (!group.closed) {
            group.error(err);
        }
        this.parent.removeGroup(this.key);
    };
    GroupDurationSubscriber.prototype._complete = function () {
        var group = this.group;
        if (!group.closed) {
            group.complete();
        }
        this.parent.removeGroup(this.key);
    };
    return GroupDurationSubscriber;
}(Subscriber_1.Subscriber));
/**
 * An Observable representing values belonging to the same group represented by
 * a common key. The values emitted by a GroupedObservable come from the source
 * Observable. The common key is available as the field `key` on a
 * GroupedObservable instance.
 *
 * @class GroupedObservable<K, T>
 */
var GroupedObservable = (function (_super) {
    __extends(GroupedObservable, _super);
    function GroupedObservable(key, groupSubject, refCountSubscription) {
        _super.call(this);
        this.key = key;
        this.groupSubject = groupSubject;
        this.refCountSubscription = refCountSubscription;
    }
    GroupedObservable.prototype._subscribe = function (subscriber) {
        var subscription = new Subscription_1.Subscription();
        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
        if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        }
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    };
    return GroupedObservable;
}(Observable_1.Observable));
exports.GroupedObservable = GroupedObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerRefCountSubscription = (function (_super) {
    __extends(InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) {
        _super.call(this);
        this.parent = parent;
        parent.count++;
    }
    InnerRefCountSubscription.prototype.unsubscribe = function () {
        var parent = this.parent;
        if (!parent.closed && !this.closed) {
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
            }
        }
    };
    return InnerRefCountSubscription;
}(Subscription_1.Subscription));
//# sourceMappingURL=groupBy.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/ignoreElements.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var noop_1 = __webpack_require__("./node_modules/rxjs/util/noop.js");
/**
 * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.
 *
 * <img src="./img/ignoreElements.png" width="100%">
 *
 * @return {Observable} an empty Observable that only calls `complete`
 * or `error`, based on which one is called by the source Observable.
 * @method ignoreElements
 * @owner Observable
 */
function ignoreElements() {
    return this.lift(new IgnoreElementsOperator());
}
exports.ignoreElements = ignoreElements;
;
var IgnoreElementsOperator = (function () {
    function IgnoreElementsOperator() {
    }
    IgnoreElementsOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new IgnoreElementsSubscriber(subscriber));
    };
    return IgnoreElementsOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IgnoreElementsSubscriber = (function (_super) {
    __extends(IgnoreElementsSubscriber, _super);
    function IgnoreElementsSubscriber() {
        _super.apply(this, arguments);
    }
    IgnoreElementsSubscriber.prototype._next = function (unused) {
        noop_1.noop();
    };
    return IgnoreElementsSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=ignoreElements.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/isEmpty.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/**
 * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.
 *
 * <img src="./img/isEmpty.png" width="100%">
 *
 * @return {Observable} an Observable that emits a Boolean.
 * @method isEmpty
 * @owner Observable
 */
function isEmpty() {
    return this.lift(new IsEmptyOperator());
}
exports.isEmpty = isEmpty;
var IsEmptyOperator = (function () {
    function IsEmptyOperator() {
    }
    IsEmptyOperator.prototype.call = function (observer, source) {
        return source.subscribe(new IsEmptySubscriber(observer));
    };
    return IsEmptyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IsEmptySubscriber = (function (_super) {
    __extends(IsEmptySubscriber, _super);
    function IsEmptySubscriber(destination) {
        _super.call(this, destination);
    }
    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
        var destination = this.destination;
        destination.next(isEmpty);
        destination.complete();
    };
    IsEmptySubscriber.prototype._next = function (value) {
        this.notifyComplete(false);
    };
    IsEmptySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return IsEmptySubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=isEmpty.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/let.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @param func
 * @return {Observable<R>}
 * @method let
 * @owner Observable
 */
function letProto(func) {
    return func(this);
}
exports.letProto = letProto;
//# sourceMappingURL=let.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/mapTo.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/**
 * Emits the given constant value on the output Observable every time the source
 * Observable emits a value.
 *
 * <span class="informal">Like {@link map}, but it maps every source value to
 * the same output value every time.</span>
 *
 * <img src="./img/mapTo.png" width="100%">
 *
 * Takes a constant `value` as argument, and emits that whenever the source
 * Observable emits a value. In other words, ignores the actual source value,
 * and simply uses the emission moment to know when to emit the given `value`.
 *
 * @example <caption>Map every every click to the string 'Hi'</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var greetings = clicks.mapTo('Hi');
 * greetings.subscribe(x => console.log(x));
 *
 * @see {@link map}
 *
 * @param {any} value The value to map each source value to.
 * @return {Observable} An Observable that emits the given `value` every time
 * the source Observable emits something.
 * @method mapTo
 * @owner Observable
 */
function mapTo(value) {
    return this.lift(new MapToOperator(value));
}
exports.mapTo = mapTo;
var MapToOperator = (function () {
    function MapToOperator(value) {
        this.value = value;
    }
    MapToOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapToSubscriber(subscriber, this.value));
    };
    return MapToOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapToSubscriber = (function (_super) {
    __extends(MapToSubscriber, _super);
    function MapToSubscriber(destination, value) {
        _super.call(this, destination);
        this.value = value;
    }
    MapToSubscriber.prototype._next = function (x) {
        this.destination.next(this.value);
    };
    return MapToSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=mapTo.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/materialize.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var Notification_1 = __webpack_require__("./node_modules/rxjs/Notification.js");
/**
 * Represents all of the notifications from the source Observable as `next`
 * emissions marked with their original types within {@link Notification}
 * objects.
 *
 * <span class="informal">Wraps `next`, `error` and `complete` emissions in
 * {@link Notification} objects, emitted as `next` on the output Observable.
 * </span>
 *
 * <img src="./img/materialize.png" width="100%">
 *
 * `materialize` returns an Observable that emits a `next` notification for each
 * `next`, `error`, or `complete` emission of the source Observable. When the
 * source Observable emits `complete`, the output Observable will emit `next` as
 * a Notification of type "complete", and then it will emit `complete` as well.
 * When the source Observable emits `error`, the output will emit `next` as a
 * Notification of type "error", and then `complete`.
 *
 * This operator is useful for producing metadata of the source Observable, to
 * be consumed as `next` emissions. Use it in conjunction with
 * {@link dematerialize}.
 *
 * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>
 * var letters = Rx.Observable.of('a', 'b', 13, 'd');
 * var upperCase = letters.map(x => x.toUpperCase());
 * var materialized = upperCase.materialize();
 * materialized.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - Notification {kind: "N", value: "A", error: undefined, hasValue: true}
 * // - Notification {kind: "N", value: "B", error: undefined, hasValue: true}
 * // - Notification {kind: "E", value: undefined, error: TypeError:
 * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x
 * //   [as project] (http://1…, hasValue: false}
 *
 * @see {@link Notification}
 * @see {@link dematerialize}
 *
 * @return {Observable<Notification<T>>} An Observable that emits
 * {@link Notification} objects that wrap the original emissions from the source
 * Observable with metadata.
 * @method materialize
 * @owner Observable
 */
function materialize() {
    return this.lift(new MaterializeOperator());
}
exports.materialize = materialize;
var MaterializeOperator = (function () {
    function MaterializeOperator() {
    }
    MaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MaterializeSubscriber(subscriber));
    };
    return MaterializeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MaterializeSubscriber = (function (_super) {
    __extends(MaterializeSubscriber, _super);
    function MaterializeSubscriber(destination) {
        _super.call(this, destination);
    }
    MaterializeSubscriber.prototype._next = function (value) {
        this.destination.next(Notification_1.Notification.createNext(value));
    };
    MaterializeSubscriber.prototype._error = function (err) {
        var destination = this.destination;
        destination.next(Notification_1.Notification.createError(err));
        destination.complete();
    };
    MaterializeSubscriber.prototype._complete = function () {
        var destination = this.destination;
        destination.next(Notification_1.Notification.createComplete());
        destination.complete();
    };
    return MaterializeSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=materialize.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/max.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var reduce_1 = __webpack_require__("./node_modules/rxjs/operator/reduce.js");
/**
 * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),
 * and when source Observable completes it emits a single item: the item with the largest number.
 *
 * <img src="./img/max.png" width="100%">
 *
 * @param {Function} optional comparer function that it will use instead of its default to compare the value of two
 * items.
 * @return {Observable} an Observable that emits item with the largest number.
 * @method max
 * @owner Observable
 */
function max(comparer) {
    var max = (typeof comparer === 'function')
        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }
        : function (x, y) { return x > y ? x : y; };
    return this.lift(new reduce_1.ReduceOperator(max));
}
exports.max = max;
//# sourceMappingURL=max.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/merge.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayObservable_1 = __webpack_require__("./node_modules/rxjs/observable/ArrayObservable.js");
var mergeAll_1 = __webpack_require__("./node_modules/rxjs/operator/mergeAll.js");
var isScheduler_1 = __webpack_require__("./node_modules/rxjs/util/isScheduler.js");
/* tslint:disable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (either the source or an
 * Observable given as argument), and simply forwards (without doing any
 * transformation) all the values from all the input Observables to the output
 * Observable. The output Observable only completes once all input Observables
 * have completed. Any error delivered by an input Observable will be immediately
 * emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = clicks.merge(timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = timer1.merge(timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {Observable} other An input Observable to merge with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The Scheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} an Observable that emits items that are the result of
 * every input Observable.
 * @method merge
 * @owner Observable
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return this.lift.call(mergeStatic.apply(void 0, [this].concat(observables)));
}
exports.merge = merge;
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (as arguments), and simply
 * forwards (without doing any transformation) all the values from all the input
 * Observables to the output Observable. The output Observable only completes
 * once all input Observables have completed. Any error delivered by an input
 * Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // timer will emit ascending values, one every second(1000ms) to console
 * // clicks logs MouseEvents to console everytime the "document" is clicked
 * // Since the two streams are merged you see these happening
 * // as they occur.
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - First timer1 and timer2 will run concurrently
 * // - timer1 will emit a value every 1000ms for 10 iterations
 * // - timer2 will emit a value every 2000ms for 6 iterations
 * // - after timer1 hits it's max iteration, timer2 will
 * //   continue, and timer3 will start to run concurrently with timer2
 * // - when timer2 hits it's max iteration it terminates, and
 * //   timer3 will continue to emit a value every 500ms until it is complete
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {...Observable} observables Input Observables to merge together.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The Scheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} an Observable that emits items that are the result of
 * every input Observable.
 * @static true
 * @name merge
 * @owner Observable
 */
function mergeStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (isScheduler_1.isScheduler(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1) {
        return observables[0];
    }
    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
}
exports.mergeStatic = mergeStatic;
//# sourceMappingURL=merge.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/mergeMapTo.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/* tslint:disable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in the output Observable.
 *
 * <span class="informal">It's like {@link mergeMap}, but maps each value always
 * to the same inner Observable.</span>
 *
 * <img src="./img/mergeMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then merges those resulting Observables into one
 * single Observable, which is the output Observable.
 *
 * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 * @see {@link switchMapTo}
 *
 * @param {Observable} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable` (and optionally transformed through `resultSelector`) every
 * time a value is emitted on the source Observable.
 * @method mergeMapTo
 * @owner Observable
 */
function mergeMapTo(innerObservable, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
        resultSelector = null;
    }
    return this.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent));
}
exports.mergeMapTo = mergeMapTo;
// TODO: Figure out correct signature here: an Operator<Observable<T>, R>
//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>
var MergeMapToOperator = (function () {
    function MergeMapToOperator(ish, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        this.ish = ish;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
    }
    MergeMapToOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));
    };
    return MergeMapToOperator;
}());
exports.MergeMapToOperator = MergeMapToOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapToSubscriber = (function (_super) {
    __extends(MergeMapToSubscriber, _super);
    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        _super.call(this, destination);
        this.ish = ish;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    MergeMapToSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            var resultSelector = this.resultSelector;
            var index = this.index++;
            var ish = this.ish;
            var destination = this.destination;
            this.active++;
            this._innerSub(ish, destination, resultSelector, value, index);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeMapToSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        if (resultSelector) {
            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            destination.next(innerValue);
        }
    };
    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        var result;
        try {
            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        destination.next(result);
    };
    MergeMapToSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapToSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.MergeMapToSubscriber = MergeMapToSubscriber;
//# sourceMappingURL=mergeMapTo.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/mergeScan.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
/**
 * @param project
 * @param seed
 * @param concurrent
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method mergeScan
 * @owner Observable
 */
function mergeScan(project, seed, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return this.lift(new MergeScanOperator(project, seed, concurrent));
}
exports.mergeScan = mergeScan;
var MergeScanOperator = (function () {
    function MergeScanOperator(project, seed, concurrent) {
        this.project = project;
        this.seed = seed;
        this.concurrent = concurrent;
    }
    MergeScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MergeScanSubscriber(subscriber, this.project, this.seed, this.concurrent));
    };
    return MergeScanOperator;
}());
exports.MergeScanOperator = MergeScanOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeScanSubscriber = (function (_super) {
    __extends(MergeScanSubscriber, _super);
    function MergeScanSubscriber(destination, project, acc, concurrent) {
        _super.call(this, destination);
        this.project = project;
        this.acc = acc;
        this.concurrent = concurrent;
        this.hasValue = false;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    MergeScanSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            var index = this.index++;
            var ish = tryCatch_1.tryCatch(this.project)(this.acc, value);
            var destination = this.destination;
            if (ish === errorObject_1.errorObject) {
                destination.error(errorObject_1.errorObject.e);
            }
            else {
                this.active++;
                this._innerSub(ish, value, index);
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeScanSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var destination = this.destination;
        this.acc = innerValue;
        this.hasValue = true;
        destination.next(innerValue);
    };
    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    return MergeScanSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.MergeScanSubscriber = MergeScanSubscriber;
//# sourceMappingURL=mergeScan.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/min.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var reduce_1 = __webpack_require__("./node_modules/rxjs/operator/reduce.js");
/**
 * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),
 * and when source Observable completes it emits a single item: the item with the smallest number.
 *
 * <img src="./img/min.png" width="100%">
 *
 * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.
 * @return {Observable<R>} an Observable that emits item with the smallest number.
 * @method min
 * @owner Observable
 */
function min(comparer) {
    var min = (typeof comparer === 'function')
        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }
        : function (x, y) { return x < y ? x : y; };
    return this.lift(new reduce_1.ReduceOperator(min));
}
exports.min = min;
//# sourceMappingURL=min.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/multicast.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ConnectableObservable_1 = __webpack_require__("./node_modules/rxjs/observable/ConnectableObservable.js");
/* tslint:disable:max-line-length */
/**
 * Returns an Observable that emits the results of invoking a specified selector on items
 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
 *
 * <img src="./img/multicast.png" width="100%">
 *
 * @param {Function|Subject} Factory function to create an intermediate subject through
 * which the source sequence's elements will be multicast to the selector function
 * or Subject to push source elements into.
 * @param {Function} Optional selector function that can use the multicasted source stream
 * as many times as needed, without causing multiple subscriptions to the source stream.
 * Subscribers to the given source will receive all notifications of the source from the
 * time of the subscription forward.
 * @return {Observable} an Observable that emits the results of invoking the selector
 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
 * the underlying stream.
 * @method multicast
 * @owner Observable
 */
function multicast(subjectOrSubjectFactory, selector) {
    var subjectFactory;
    if (typeof subjectOrSubjectFactory === 'function') {
        subjectFactory = subjectOrSubjectFactory;
    }
    else {
        subjectFactory = function subjectFactory() {
            return subjectOrSubjectFactory;
        };
    }
    if (typeof selector === 'function') {
        return this.lift(new MulticastOperator(subjectFactory, selector));
    }
    var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
    connectable.source = this;
    connectable.subjectFactory = subjectFactory;
    return connectable;
}
exports.multicast = multicast;
var MulticastOperator = (function () {
    function MulticastOperator(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    MulticastOperator.prototype.call = function (subscriber, source) {
        var selector = this.selector;
        var subject = this.subjectFactory();
        var subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    };
    return MulticastOperator;
}());
exports.MulticastOperator = MulticastOperator;
//# sourceMappingURL=multicast.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/onErrorResumeNext.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var FromObservable_1 = __webpack_require__("./node_modules/rxjs/observable/FromObservable.js");
var isArray_1 = __webpack_require__("./node_modules/rxjs/util/isArray.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/* tslint:disable:max-line-length */
function onErrorResumeNext() {
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nextSources[_i - 0] = arguments[_i];
    }
    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
        nextSources = nextSources[0];
    }
    return this.lift(new OnErrorResumeNextOperator(nextSources));
}
exports.onErrorResumeNext = onErrorResumeNext;
/* tslint:enable:max-line-length */
function onErrorResumeNextStatic() {
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nextSources[_i - 0] = arguments[_i];
    }
    var source = null;
    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
        nextSources = nextSources[0];
    }
    source = nextSources.shift();
    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));
}
exports.onErrorResumeNextStatic = onErrorResumeNextStatic;
var OnErrorResumeNextOperator = (function () {
    function OnErrorResumeNextOperator(nextSources) {
        this.nextSources = nextSources;
    }
    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
    };
    return OnErrorResumeNextOperator;
}());
var OnErrorResumeNextSubscriber = (function (_super) {
    __extends(OnErrorResumeNextSubscriber, _super);
    function OnErrorResumeNextSubscriber(destination, nextSources) {
        _super.call(this, destination);
        this.destination = destination;
        this.nextSources = nextSources;
    }
    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._error = function (err) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._complete = function () {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
        var next = this.nextSources.shift();
        if (next) {
            this.add(subscribeToResult_1.subscribeToResult(this, next));
        }
        else {
            this.destination.complete();
        }
    };
    return OnErrorResumeNextSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=onErrorResumeNext.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/pairwise.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/**
 * Groups pairs of consecutive emissions together and emits them as an array of
 * two values.
 *
 * <span class="informal">Puts the current value and previous value together as
 * an array, and emits that.</span>
 *
 * <img src="./img/pairwise.png" width="100%">
 *
 * The Nth emission from the source Observable will cause the output Observable
 * to emit an array [(N-1)th, Nth] of the previous and the current value, as a
 * pair. For this reason, `pairwise` emits on the second and subsequent
 * emissions from the source Observable, but not on the first emission, because
 * there is no previous value in that case.
 *
 * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var pairs = clicks.pairwise();
 * var distance = pairs.map(pair => {
 *   var x0 = pair[0].clientX;
 *   var y0 = pair[0].clientY;
 *   var x1 = pair[1].clientX;
 *   var y1 = pair[1].clientY;
 *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));
 * });
 * distance.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 *
 * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of
 * consecutive values from the source Observable.
 * @method pairwise
 * @owner Observable
 */
function pairwise() {
    return this.lift(new PairwiseOperator());
}
exports.pairwise = pairwise;
var PairwiseOperator = (function () {
    function PairwiseOperator() {
    }
    PairwiseOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new PairwiseSubscriber(subscriber));
    };
    return PairwiseOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var PairwiseSubscriber = (function (_super) {
    __extends(PairwiseSubscriber, _super);
    function PairwiseSubscriber(destination) {
        _super.call(this, destination);
        this.hasPrev = false;
    }
    PairwiseSubscriber.prototype._next = function (value) {
        if (this.hasPrev) {
            this.destination.next([this.prev, value]);
        }
        else {
            this.hasPrev = true;
        }
        this.prev = value;
    };
    return PairwiseSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=pairwise.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/partition.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var not_1 = __webpack_require__("./node_modules/rxjs/util/not.js");
var filter_1 = __webpack_require__("./node_modules/rxjs/operator/filter.js");
/**
 * Splits the source Observable into two, one with values that satisfy a
 * predicate, and another with values that don't satisfy the predicate.
 *
 * <span class="informal">It's like {@link filter}, but returns two Observables:
 * one like the output of {@link filter}, and the other with values that did not
 * pass the condition.</span>
 *
 * <img src="./img/partition.png" width="100%">
 *
 * `partition` outputs an array with two Observables that partition the values
 * from the source Observable through the given `predicate` function. The first
 * Observable in that array emits source values for which the predicate argument
 * returns true. The second Observable emits source values for which the
 * predicate returns false. The first behaves like {@link filter} and the second
 * behaves like {@link filter} with the predicate negated.
 *
 * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');
 * var clicksOnDivs = parts[0];
 * var clicksElsewhere = parts[1];
 * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));
 * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));
 *
 * @see {@link filter}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted on the first Observable in the returned array, if
 * `false` the value is emitted on the second Observable in the array. The
 * `index` parameter is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {[Observable<T>, Observable<T>]} An array with two Observables: one
 * with values that passed the predicate, and another with values that did not
 * pass the predicate.
 * @method partition
 * @owner Observable
 */
function partition(predicate, thisArg) {
    return [
        filter_1.filter.call(this, predicate, thisArg),
        filter_1.filter.call(this, not_1.not(predicate, thisArg))
    ];
}
exports.partition = partition;
//# sourceMappingURL=partition.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/pluck.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var map_1 = __webpack_require__("./node_modules/rxjs/operator/map.js");
/**
 * Maps each source value (an object) to its specified nested property.
 *
 * <span class="informal">Like {@link map}, but meant only for picking one of
 * the nested properties of every emitted object.</span>
 *
 * <img src="./img/pluck.png" width="100%">
 *
 * Given a list of strings describing a path to an object property, retrieves
 * the value of a specified nested property from all values in the source
 * Observable. If a property can't be resolved, it will return `undefined` for
 * that value.
 *
 * @example <caption>Map every every click to the tagName of the clicked target element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var tagNames = clicks.pluck('target', 'tagName');
 * tagNames.subscribe(x => console.log(x));
 *
 * @see {@link map}
 *
 * @param {...string} properties The nested properties to pluck from each source
 * value (an object).
 * @return {Observable} Returns a new Observable of property values from the
 * source values.
 * @method pluck
 * @owner Observable
 */
function pluck() {
    var properties = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        properties[_i - 0] = arguments[_i];
    }
    var length = properties.length;
    if (length === 0) {
        throw new Error('list of properties cannot be empty.');
    }
    return map_1.map.call(this, plucker(properties, length));
}
exports.pluck = pluck;
function plucker(props, length) {
    var mapper = function (x) {
        var currentProp = x;
        for (var i = 0; i < length; i++) {
            var p = currentProp[props[i]];
            if (typeof p !== 'undefined') {
                currentProp = p;
            }
            else {
                return undefined;
            }
        }
        return currentProp;
    };
    return mapper;
}
//# sourceMappingURL=pluck.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/publish.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var multicast_1 = __webpack_require__("./node_modules/rxjs/operator/multicast.js");
/* tslint:disable:max-line-length */
/**
 * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called
 * before it begins emitting items to those Observers that have subscribed to it.
 *
 * <img src="./img/publish.png" width="100%">
 *
 * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,
 * without causing multiple subscriptions to the source sequence.
 * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
 * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.
 * @method publish
 * @owner Observable
 */
function publish(selector) {
    return selector ? multicast_1.multicast.call(this, function () { return new Subject_1.Subject(); }, selector) :
        multicast_1.multicast.call(this, new Subject_1.Subject());
}
exports.publish = publish;
//# sourceMappingURL=publish.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/publishBehavior.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var BehaviorSubject_1 = __webpack_require__("./node_modules/rxjs/BehaviorSubject.js");
var multicast_1 = __webpack_require__("./node_modules/rxjs/operator/multicast.js");
/**
 * @param value
 * @return {ConnectableObservable<T>}
 * @method publishBehavior
 * @owner Observable
 */
function publishBehavior(value) {
    return multicast_1.multicast.call(this, new BehaviorSubject_1.BehaviorSubject(value));
}
exports.publishBehavior = publishBehavior;
//# sourceMappingURL=publishBehavior.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/publishLast.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var AsyncSubject_1 = __webpack_require__("./node_modules/rxjs/AsyncSubject.js");
var multicast_1 = __webpack_require__("./node_modules/rxjs/operator/multicast.js");
/**
 * @return {ConnectableObservable<T>}
 * @method publishLast
 * @owner Observable
 */
function publishLast() {
    return multicast_1.multicast.call(this, new AsyncSubject_1.AsyncSubject());
}
exports.publishLast = publishLast;
//# sourceMappingURL=publishLast.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/publishReplay.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ReplaySubject_1 = __webpack_require__("./node_modules/rxjs/ReplaySubject.js");
var multicast_1 = __webpack_require__("./node_modules/rxjs/operator/multicast.js");
/**
 * @param bufferSize
 * @param windowTime
 * @param scheduler
 * @return {ConnectableObservable<T>}
 * @method publishReplay
 * @owner Observable
 */
function publishReplay(bufferSize, windowTime, scheduler) {
    if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
    if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
    return multicast_1.multicast.call(this, new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler));
}
exports.publishReplay = publishReplay;
//# sourceMappingURL=publishReplay.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/race.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isArray_1 = __webpack_require__("./node_modules/rxjs/util/isArray.js");
var ArrayObservable_1 = __webpack_require__("./node_modules/rxjs/observable/ArrayObservable.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/* tslint:disable:max-line-length */
/**
 * Returns an Observable that mirrors the first source Observable to emit an item
 * from the combination of this Observable and supplied Observables
 * @param {...Observables} ...observables sources used to race for which Observable emits first.
 * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.
 * @method race
 * @owner Observable
 */
function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    // if the only argument is an array, it was most likely called with
    // `pair([obs1, obs2, ...])`
    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
        observables = observables[0];
    }
    return this.lift.call(raceStatic.apply(void 0, [this].concat(observables)));
}
exports.race = race;
function raceStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    // if the only argument is an array, it was most likely called with
    // `pair([obs1, obs2, ...])`
    if (observables.length === 1) {
        if (isArray_1.isArray(observables[0])) {
            observables = observables[0];
        }
        else {
            return observables[0];
        }
    }
    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());
}
exports.raceStatic = raceStatic;
var RaceOperator = (function () {
    function RaceOperator() {
    }
    RaceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RaceSubscriber(subscriber));
    };
    return RaceOperator;
}());
exports.RaceOperator = RaceOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RaceSubscriber = (function (_super) {
    __extends(RaceSubscriber, _super);
    function RaceSubscriber(destination) {
        _super.call(this, destination);
        this.hasFirst = false;
        this.observables = [];
        this.subscriptions = [];
    }
    RaceSubscriber.prototype._next = function (observable) {
        this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    };
    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    };
    return RaceSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.RaceSubscriber = RaceSubscriber;
//# sourceMappingURL=race.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/repeat.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var EmptyObservable_1 = __webpack_require__("./node_modules/rxjs/observable/EmptyObservable.js");
/**
 * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,
 * on a particular Scheduler.
 *
 * <img src="./img/repeat.png" width="100%">
 *
 * @param {Scheduler} [scheduler] the Scheduler to emit the items on.
 * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield
 * an empty Observable.
 * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most
 * count times.
 * @method repeat
 * @owner Observable
 */
function repeat(count) {
    if (count === void 0) { count = -1; }
    if (count === 0) {
        return new EmptyObservable_1.EmptyObservable();
    }
    else if (count < 0) {
        return this.lift(new RepeatOperator(-1, this));
    }
    else {
        return this.lift(new RepeatOperator(count - 1, this));
    }
}
exports.repeat = repeat;
var RepeatOperator = (function () {
    function RepeatOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RepeatOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
    };
    return RepeatOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatSubscriber = (function (_super) {
    __extends(RepeatSubscriber, _super);
    function RepeatSubscriber(destination, count, source) {
        _super.call(this, destination);
        this.count = count;
        this.source = source;
    }
    RepeatSubscriber.prototype.complete = function () {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.complete.call(this);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            this.unsubscribe();
            this.isStopped = false;
            this.closed = false;
            source.subscribe(this);
        }
    };
    return RepeatSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=repeat.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/repeatWhen.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.
 * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from
 * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`
 * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular
 * Scheduler.
 *
 * <img src="./img/repeatWhen.png" width="100%">
 *
 * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,
 * aborting the retry.
 * @param {scheduler} the Scheduler on which to subscribe to the source Observable.
 * @return {Observable} the source Observable modified with retry logic.
 * @method repeatWhen
 * @owner Observable
 */
function repeatWhen(notifier) {
    return this.lift(new RepeatWhenOperator(notifier, this));
}
exports.repeatWhen = repeatWhen;
var RepeatWhenOperator = (function () {
    function RepeatWhenOperator(notifier, source) {
        this.notifier = notifier;
        this.source = source;
    }
    RepeatWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, this.source));
    };
    return RepeatWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatWhenSubscriber = (function (_super) {
    __extends(RepeatWhenSubscriber, _super);
    function RepeatWhenSubscriber(destination, notifier, source) {
        _super.call(this, destination);
        this.notifier = notifier;
        this.source = source;
    }
    RepeatWhenSubscriber.prototype.complete = function () {
        if (!this.isStopped) {
            var notifications = this.notifications;
            var retries = this.retries;
            var retriesSubscription = this.retriesSubscription;
            if (!retries) {
                notifications = new Subject_1.Subject();
                retries = tryCatch_1.tryCatch(this.notifier)(notifications);
                if (retries === errorObject_1.errorObject) {
                    return _super.prototype.complete.call(this);
                }
                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
            }
            else {
                this.notifications = null;
                this.retriesSubscription = null;
            }
            this.unsubscribe();
            this.closed = false;
            this.notifications = notifications;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            notifications.next();
        }
    };
    RepeatWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
        if (notifications) {
            notifications.unsubscribe();
            this.notifications = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
        this.notifications = null;
        this.retries = null;
        this.retriesSubscription = null;
        this.unsubscribe();
        this.isStopped = false;
        this.closed = false;
        this.notifications = notifications;
        this.retries = retries;
        this.retriesSubscription = retriesSubscription;
        this.source.subscribe(this);
    };
    return RepeatWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=repeatWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/retry.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/**
 * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the
 * predicate returns true for that specific exception and retry count.
 * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of
 * count resubscriptions (given as a number parameter) rather than propagating the `error` call.
 *
 * <img src="./img/retry.png" width="100%">
 *
 * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted
 * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second
 * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications
 * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].
 * @param {number} number of retry attempts before failing.
 * @return {Observable} the source Observable modified with the retry logic.
 * @method retry
 * @owner Observable
 */
function retry(count) {
    if (count === void 0) { count = -1; }
    return this.lift(new RetryOperator(count, this));
}
exports.retry = retry;
var RetryOperator = (function () {
    function RetryOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RetryOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
    };
    return RetryOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetrySubscriber = (function (_super) {
    __extends(RetrySubscriber, _super);
    function RetrySubscriber(destination, count, source) {
        _super.call(this, destination);
        this.count = count;
        this.source = source;
    }
    RetrySubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.error.call(this, err);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            this.unsubscribe();
            this.isStopped = false;
            this.closed = false;
            source.subscribe(this);
        }
    };
    return RetrySubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=retry.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/retryWhen.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Returns an Observable that emits the same values as the source observable with the exception of an `error`.
 * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from
 * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`
 * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular
 * Scheduler.
 *
 * <img src="./img/retryWhen.png" width="100%">
 *
 * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,
 * aborting the retry.
 * @param {scheduler} the Scheduler on which to subscribe to the source Observable.
 * @return {Observable} the source Observable modified with retry logic.
 * @method retryWhen
 * @owner Observable
 */
function retryWhen(notifier) {
    return this.lift(new RetryWhenOperator(notifier, this));
}
exports.retryWhen = retryWhen;
var RetryWhenOperator = (function () {
    function RetryWhenOperator(notifier, source) {
        this.notifier = notifier;
        this.source = source;
    }
    RetryWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
    };
    return RetryWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetryWhenSubscriber = (function (_super) {
    __extends(RetryWhenSubscriber, _super);
    function RetryWhenSubscriber(destination, notifier, source) {
        _super.call(this, destination);
        this.notifier = notifier;
        this.source = source;
    }
    RetryWhenSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var errors = this.errors;
            var retries = this.retries;
            var retriesSubscription = this.retriesSubscription;
            if (!retries) {
                errors = new Subject_1.Subject();
                retries = tryCatch_1.tryCatch(this.notifier)(errors);
                if (retries === errorObject_1.errorObject) {
                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);
                }
                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
            }
            else {
                this.errors = null;
                this.retriesSubscription = null;
            }
            this.unsubscribe();
            this.closed = false;
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            errors.next(err);
        }
    };
    RetryWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
        if (errors) {
            errors.unsubscribe();
            this.errors = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
        this.errors = null;
        this.retries = null;
        this.retriesSubscription = null;
        this.unsubscribe();
        this.isStopped = false;
        this.closed = false;
        this.errors = errors;
        this.retries = retries;
        this.retriesSubscription = retriesSubscription;
        this.source.subscribe(this);
    };
    return RetryWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=retryWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/sample.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Emits the most recently emitted value from the source Observable whenever
 * another Observable, the `notifier`, emits.
 *
 * <span class="informal">It's like {@link sampleTime}, but samples whenever
 * the `notifier` Observable emits something.</span>
 *
 * <img src="./img/sample.png" width="100%">
 *
 * Whenever the `notifier` Observable emits a value or completes, `sample`
 * looks at the source Observable and emits whichever value it has most recently
 * emitted since the previous sampling, unless the source has not emitted
 * anything since the previous sampling. The `notifier` is subscribed to as soon
 * as the output Observable is subscribed.
 *
 * @example <caption>On every click, sample the most recent "seconds" timer</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = seconds.sample(clicks);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {Observable<any>} notifier The Observable to use for sampling the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable whenever the notifier Observable
 * emits value or completes.
 * @method sample
 * @owner Observable
 */
function sample(notifier) {
    return this.lift(new SampleOperator(notifier));
}
exports.sample = sample;
var SampleOperator = (function () {
    function SampleOperator(notifier) {
        this.notifier = notifier;
    }
    SampleOperator.prototype.call = function (subscriber, source) {
        var sampleSubscriber = new SampleSubscriber(subscriber);
        var subscription = source.subscribe(sampleSubscriber);
        subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));
        return subscription;
    };
    return SampleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleSubscriber = (function (_super) {
    __extends(SampleSubscriber, _super);
    function SampleSubscriber() {
        _super.apply(this, arguments);
        this.hasValue = false;
    }
    SampleSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
    };
    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    SampleSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    SampleSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.value);
        }
    };
    return SampleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=sample.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/sampleTime.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
/**
 * Emits the most recently emitted value from the source Observable within
 * periodic time intervals.
 *
 * <span class="informal">Samples the source Observable at periodic time
 * intervals, emitting what it samples.</span>
 *
 * <img src="./img/sampleTime.png" width="100%">
 *
 * `sampleTime` periodically looks at the source Observable and emits whichever
 * value it has most recently emitted since the previous sampling, unless the
 * source has not emitted anything since the previous sampling. The sampling
 * happens periodically in time every `period` milliseconds (or the time unit
 * defined by the optional `scheduler` argument). The sampling starts as soon as
 * the output Observable is subscribed.
 *
 * @example <caption>Every second, emit the most recent click at most once</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.sampleTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {number} period The sampling period expressed in milliseconds or the
 * time unit determined internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for
 * managing the timers that handle the sampling.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable at the specified time interval.
 * @method sampleTime
 * @owner Observable
 */
function sampleTime(period, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return this.lift(new SampleTimeOperator(period, scheduler));
}
exports.sampleTime = sampleTime;
var SampleTimeOperator = (function () {
    function SampleTimeOperator(period, scheduler) {
        this.period = period;
        this.scheduler = scheduler;
    }
    SampleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
    };
    return SampleTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleTimeSubscriber = (function (_super) {
    __extends(SampleTimeSubscriber, _super);
    function SampleTimeSubscriber(destination, period, scheduler) {
        _super.call(this, destination);
        this.period = period;
        this.scheduler = scheduler;
        this.hasValue = false;
        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));
    }
    SampleTimeSubscriber.prototype._next = function (value) {
        this.lastValue = value;
        this.hasValue = true;
    };
    SampleTimeSubscriber.prototype.notifyNext = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.lastValue);
        }
    };
    return SampleTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNotification(state) {
    var subscriber = state.subscriber, period = state.period;
    subscriber.notifyNext();
    this.schedule(state, period);
}
//# sourceMappingURL=sampleTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/scan.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/* tslint:disable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns each
 * intermediate result, with an optional seed value.
 *
 * <span class="informal">It's like {@link reduce}, but emits the current
 * accumulation whenever the source emits a value.</span>
 *
 * <img src="./img/scan.png" width="100%">
 *
 * Combines together all values emitted on the source, using an accumulator
 * function that knows how to join a new source value into the accumulation from
 * the past. Is similar to {@link reduce}, but emits the intermediate
 * accumulations.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var ones = clicks.mapTo(1);
 * var seed = 0;
 * var count = ones.scan((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link reduce}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator
 * The accumulator function called on each source value.
 * @param {T|R} [seed] The initial accumulation value.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method scan
 * @owner Observable
 */
function scan(accumulator, seed) {
    var hasSeed = false;
    // providing a seed of `undefined` *should* be valid and trigger
    // hasSeed! so don't use `seed !== undefined` checks!
    // For this reason, we have to check it here at the original call site
    // otherwise inside Operator/Subscriber we won't know if `undefined`
    // means they didn't provide anything or if they literally provided `undefined`
    if (arguments.length >= 2) {
        hasSeed = true;
    }
    return this.lift(new ScanOperator(accumulator, seed, hasSeed));
}
exports.scan = scan;
var ScanOperator = (function () {
    function ScanOperator(accumulator, seed, hasSeed) {
        if (hasSeed === void 0) { hasSeed = false; }
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    ScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    };
    return ScanOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ScanSubscriber = (function (_super) {
    __extends(ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
        _super.call(this, destination);
        this.accumulator = accumulator;
        this._seed = _seed;
        this.hasSeed = hasSeed;
        this.index = 0;
    }
    Object.defineProperty(ScanSubscriber.prototype, "seed", {
        get: function () {
            return this._seed;
        },
        set: function (value) {
            this.hasSeed = true;
            this._seed = value;
        },
        enumerable: true,
        configurable: true
    });
    ScanSubscriber.prototype._next = function (value) {
        if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
        }
        else {
            return this._tryNext(value);
        }
    };
    ScanSubscriber.prototype._tryNext = function (value) {
        var index = this.index++;
        var result;
        try {
            result = this.accumulator(this.seed, value, index);
        }
        catch (err) {
            this.destination.error(err);
        }
        this.seed = result;
        this.destination.next(result);
    };
    return ScanSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=scan.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/sequenceEqual.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
/**
 * Compares all values of two observables in sequence using an optional comparor function
 * and returns an observable of a single boolean value representing whether or not the two sequences
 * are equal.
 *
 * <span class="informal">Checks to see of all values emitted by both observables are equal, in order.</span>
 *
 * <img src="./img/sequenceEqual.png" width="100%">
 *
 * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either
 * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom
 * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the
 * observables completes, the operator will wait for the other observable to complete; If the other
 * observable emits before completing, the returned observable will emit `false` and complete. If one observable never
 * completes or emits after the other complets, the returned observable will never complete.
 *
 * @example <caption>figure out if the Konami code matches</caption>
 * var code = Rx.Observable.from([
 *  "ArrowUp",
 *  "ArrowUp",
 *  "ArrowDown",
 *  "ArrowDown",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "KeyB",
 *  "KeyA",
 *  "Enter" // no start key, clearly.
 * ]);
 *
 * var keys = Rx.Observable.fromEvent(document, 'keyup')
 *  .map(e => e.code);
 * var matches = keys.bufferCount(11, 1)
 *  .mergeMap(
 *    last11 =>
 *      Rx.Observable.from(last11)
 *        .sequenceEqual(code)
 *   );
 * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));
 *
 * @see {@link combineLatest}
 * @see {@link zip}
 * @see {@link withLatestFrom}
 *
 * @param {Observable} compareTo the observable sequence to compare the source sequence to.
 * @param {function} [comparor] An optional function to compare each value pair
 * @return {Observable} An Observable of a single boolean value representing whether or not
 * the values emitted by both observables were equal in sequence
 * @method sequenceEqual
 * @owner Observable
 */
function sequenceEqual(compareTo, comparor) {
    return this.lift(new SequenceEqualOperator(compareTo, comparor));
}
exports.sequenceEqual = sequenceEqual;
var SequenceEqualOperator = (function () {
    function SequenceEqualOperator(compareTo, comparor) {
        this.compareTo = compareTo;
        this.comparor = comparor;
    }
    SequenceEqualOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));
    };
    return SequenceEqualOperator;
}());
exports.SequenceEqualOperator = SequenceEqualOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SequenceEqualSubscriber = (function (_super) {
    __extends(SequenceEqualSubscriber, _super);
    function SequenceEqualSubscriber(destination, compareTo, comparor) {
        _super.call(this, destination);
        this.compareTo = compareTo;
        this.comparor = comparor;
        this._a = [];
        this._b = [];
        this._oneComplete = false;
        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));
    }
    SequenceEqualSubscriber.prototype._next = function (value) {
        if (this._oneComplete && this._b.length === 0) {
            this.emit(false);
        }
        else {
            this._a.push(value);
            this.checkValues();
        }
    };
    SequenceEqualSubscriber.prototype._complete = function () {
        if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
        }
        else {
            this._oneComplete = true;
        }
    };
    SequenceEqualSubscriber.prototype.checkValues = function () {
        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
        while (_a.length > 0 && _b.length > 0) {
            var a = _a.shift();
            var b = _b.shift();
            var areEqual = false;
            if (comparor) {
                areEqual = tryCatch_1.tryCatch(comparor)(a, b);
                if (areEqual === errorObject_1.errorObject) {
                    this.destination.error(errorObject_1.errorObject.e);
                }
            }
            else {
                areEqual = a === b;
            }
            if (!areEqual) {
                this.emit(false);
            }
        }
    };
    SequenceEqualSubscriber.prototype.emit = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    SequenceEqualSubscriber.prototype.nextB = function (value) {
        if (this._oneComplete && this._a.length === 0) {
            this.emit(false);
        }
        else {
            this._b.push(value);
            this.checkValues();
        }
    };
    return SequenceEqualSubscriber;
}(Subscriber_1.Subscriber));
exports.SequenceEqualSubscriber = SequenceEqualSubscriber;
var SequenceEqualCompareToSubscriber = (function (_super) {
    __extends(SequenceEqualCompareToSubscriber, _super);
    function SequenceEqualCompareToSubscriber(destination, parent) {
        _super.call(this, destination);
        this.parent = parent;
    }
    SequenceEqualCompareToSubscriber.prototype._next = function (value) {
        this.parent.nextB(value);
    };
    SequenceEqualCompareToSubscriber.prototype._error = function (err) {
        this.parent.error(err);
    };
    SequenceEqualCompareToSubscriber.prototype._complete = function () {
        this.parent._complete();
    };
    return SequenceEqualCompareToSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=sequenceEqual.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/share.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var multicast_1 = __webpack_require__("./node_modules/rxjs/operator/multicast.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
function shareSubjectFactory() {
    return new Subject_1.Subject();
}
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 * This is an alias for .publish().refCount().
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers
 * @method share
 * @owner Observable
 */
function share() {
    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
}
exports.share = share;
;
//# sourceMappingURL=share.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/single.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var EmptyError_1 = __webpack_require__("./node_modules/rxjs/util/EmptyError.js");
/**
 * Returns an Observable that emits the single item emitted by the source Observable that matches a specified
 * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no
 * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.
 *
 * <img src="./img/single.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {Function} a predicate function to evaluate items emitted by the source Observable.
 * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches
 * the predicate.
 .
 * @method single
 * @owner Observable
 */
function single(predicate) {
    return this.lift(new SingleOperator(predicate, this));
}
exports.single = single;
var SingleOperator = (function () {
    function SingleOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    SingleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
    };
    return SingleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SingleSubscriber = (function (_super) {
    __extends(SingleSubscriber, _super);
    function SingleSubscriber(destination, predicate, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.source = source;
        this.seenValue = false;
        this.index = 0;
    }
    SingleSubscriber.prototype.applySingleValue = function (value) {
        if (this.seenValue) {
            this.destination.error('Sequence contains more than one element');
        }
        else {
            this.seenValue = true;
            this.singleValue = value;
        }
    };
    SingleSubscriber.prototype._next = function (value) {
        var predicate = this.predicate;
        this.index++;
        if (predicate) {
            this.tryNext(value);
        }
        else {
            this.applySingleValue(value);
        }
    };
    SingleSubscriber.prototype.tryNext = function (value) {
        try {
            var result = this.predicate(value, this.index, this.source);
            if (result) {
                this.applySingleValue(value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    SingleSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.index > 0) {
            destination.next(this.seenValue ? this.singleValue : undefined);
            destination.complete();
        }
        else {
            destination.error(new EmptyError_1.EmptyError);
        }
    };
    return SingleSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=single.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/skip.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/**
 * Returns an Observable that skips `n` items emitted by an Observable.
 *
 * <img src="./img/skip.png" width="100%">
 *
 * @param {Number} the `n` of times, items emitted by source Observable should be skipped.
 * @return {Observable} an Observable that skips values emitted by the source Observable.
 *
 * @method skip
 * @owner Observable
 */
function skip(total) {
    return this.lift(new SkipOperator(total));
}
exports.skip = skip;
var SkipOperator = (function () {
    function SkipOperator(total) {
        this.total = total;
    }
    SkipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipSubscriber(subscriber, this.total));
    };
    return SkipOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipSubscriber = (function (_super) {
    __extends(SkipSubscriber, _super);
    function SkipSubscriber(destination, total) {
        _super.call(this, destination);
        this.total = total;
        this.count = 0;
    }
    SkipSubscriber.prototype._next = function (x) {
        if (++this.count > this.total) {
            this.destination.next(x);
        }
    };
    return SkipSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=skip.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/skipUntil.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.
 *
 * <img src="./img/skipUntil.png" width="100%">
 *
 * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to
 * be mirrored by the resulting Observable.
 * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits
 * an item, then emits the remaining items.
 * @method skipUntil
 * @owner Observable
 */
function skipUntil(notifier) {
    return this.lift(new SkipUntilOperator(notifier));
}
exports.skipUntil = skipUntil;
var SkipUntilOperator = (function () {
    function SkipUntilOperator(notifier) {
        this.notifier = notifier;
    }
    SkipUntilOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));
    };
    return SkipUntilOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipUntilSubscriber = (function (_super) {
    __extends(SkipUntilSubscriber, _super);
    function SkipUntilSubscriber(destination, notifier) {
        _super.call(this, destination);
        this.hasValue = false;
        this.isInnerStopped = false;
        this.add(subscribeToResult_1.subscribeToResult(this, notifier));
    }
    SkipUntilSubscriber.prototype._next = function (value) {
        if (this.hasValue) {
            _super.prototype._next.call(this, value);
        }
    };
    SkipUntilSubscriber.prototype._complete = function () {
        if (this.isInnerStopped) {
            _super.prototype._complete.call(this);
        }
        else {
            this.unsubscribe();
        }
    };
    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.hasValue = true;
    };
    SkipUntilSubscriber.prototype.notifyComplete = function () {
        this.isInnerStopped = true;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    return SkipUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=skipUntil.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/skipWhile.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/**
 * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds
 * true, but emits all further source items as soon as the condition becomes false.
 *
 * <img src="./img/skipWhile.png" width="100%">
 *
 * @param {Function} predicate - a function to test each item emitted from the source Observable.
 * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the
 * specified predicate becomes false.
 * @method skipWhile
 * @owner Observable
 */
function skipWhile(predicate) {
    return this.lift(new SkipWhileOperator(predicate));
}
exports.skipWhile = skipWhile;
var SkipWhileOperator = (function () {
    function SkipWhileOperator(predicate) {
        this.predicate = predicate;
    }
    SkipWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
    };
    return SkipWhileOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipWhileSubscriber = (function (_super) {
    __extends(SkipWhileSubscriber, _super);
    function SkipWhileSubscriber(destination, predicate) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.skipping = true;
        this.index = 0;
    }
    SkipWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (this.skipping) {
            this.tryCallPredicate(value);
        }
        if (!this.skipping) {
            destination.next(value);
        }
    };
    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
        try {
            var result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    return SkipWhileSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=skipWhile.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/startWith.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayObservable_1 = __webpack_require__("./node_modules/rxjs/observable/ArrayObservable.js");
var ScalarObservable_1 = __webpack_require__("./node_modules/rxjs/observable/ScalarObservable.js");
var EmptyObservable_1 = __webpack_require__("./node_modules/rxjs/observable/EmptyObservable.js");
var concat_1 = __webpack_require__("./node_modules/rxjs/operator/concat.js");
var isScheduler_1 = __webpack_require__("./node_modules/rxjs/util/isScheduler.js");
/* tslint:disable:max-line-length */
/**
 * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the
 * source Observable.
 *
 * <img src="./img/startWith.png" width="100%">
 *
 * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.
 * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */
function startWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i - 0] = arguments[_i];
    }
    var scheduler = array[array.length - 1];
    if (isScheduler_1.isScheduler(scheduler)) {
        array.pop();
    }
    else {
        scheduler = null;
    }
    var len = array.length;
    if (len === 1) {
        return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);
    }
    else if (len > 1) {
        return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);
    }
    else {
        return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);
    }
}
exports.startWith = startWith;
//# sourceMappingURL=startWith.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/subscribeOn.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var SubscribeOnObservable_1 = __webpack_require__("./node_modules/rxjs/observable/SubscribeOnObservable.js");
/**
 * Asynchronously subscribes Observers to this Observable on the specified Scheduler.
 *
 * <img src="./img/subscribeOn.png" width="100%">
 *
 * @param {Scheduler} the Scheduler to perform subscription actions on.
 * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler
 .
 * @method subscribeOn
 * @owner Observable
 */
function subscribeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return this.lift(new SubscribeOnOperator(scheduler, delay));
}
exports.subscribeOn = subscribeOn;
var SubscribeOnOperator = (function () {
    function SubscribeOnOperator(scheduler, delay) {
        this.scheduler = scheduler;
        this.delay = delay;
    }
    SubscribeOnOperator.prototype.call = function (subscriber, source) {
        return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
    };
    return SubscribeOnOperator;
}());
//# sourceMappingURL=subscribeOn.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/switch.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Converts a higher-order Observable into a first-order Observable by
 * subscribing to only the most recently emitted of those inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables by dropping the
 * previous inner Observable once a new one appears.</span>
 *
 * <img src="./img/switch.png" width="100%">
 *
 * `switch` subscribes to an Observable that emits Observables, also known as a
 * higher-order Observable. Each time it observes one of these emitted inner
 * Observables, the output Observable subscribes to the inner Observable and
 * begins emitting the items emitted by that. So far, it behaves
 * like {@link mergeAll}. However, when a new inner Observable is emitted,
 * `switch` unsubscribes from the earlier-emitted inner Observable and
 * subscribes to the new inner Observable and begins emitting items from it. It
 * continues to behave like this for subsequent inner Observables.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * // Each click event is mapped to an Observable that ticks every second
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var switched = higherOrder.switch();
 * // The outcome is that `switched` is essentially a timer that restarts
 * // on every click. The interval Observables from older clicks do not merge
 * // with the current interval Observable.
 * switched.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switchMap}
 * @see {@link switchMapTo}
 * @see {@link zipAll}
 *
 * @return {Observable<T>} An Observable that emits the items emitted by the
 * Observable most recently emitted by the source Observable.
 * @method switch
 * @name switch
 * @owner Observable
 */
function _switch() {
    return this.lift(new SwitchOperator());
}
exports._switch = _switch;
var SwitchOperator = (function () {
    function SwitchOperator() {
    }
    SwitchOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchSubscriber(subscriber));
    };
    return SwitchOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchSubscriber = (function (_super) {
    __extends(SwitchSubscriber, _super);
    function SwitchSubscriber(destination) {
        _super.call(this, destination);
        this.active = 0;
        this.hasCompleted = false;
    }
    SwitchSubscriber.prototype._next = function (value) {
        this.unsubscribeInner();
        this.active++;
        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, value));
    };
    SwitchSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0) {
            this.destination.complete();
        }
    };
    SwitchSubscriber.prototype.unsubscribeInner = function () {
        this.active = this.active > 0 ? this.active - 1 : 0;
        var innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
            this.remove(innerSubscription);
        }
    };
    SwitchSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    SwitchSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    SwitchSubscriber.prototype.notifyComplete = function () {
        this.unsubscribeInner();
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    return SwitchSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=switch.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/switchMap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/* tslint:disable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, emitting values only from the most recently projected Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link switch}.</span>
 *
 * <img src="./img/switchMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each time it observes one of these
 * inner Observables, the output Observable begins emitting the items emitted by
 * that inner Observable. When a new inner Observable is emitted, `switchMap`
 * stops emitting items from the earlier-emitted inner Observable and begins
 * emitting items from the new one. It continues to behave like this for
 * subsequent inner Observables.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switch}
 * @see {@link switchMapTo}
 *
 * @param {function(value: T, ?index: number): Observable} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking only the values from the most recently
 * projected inner Observable.
 * @method switchMap
 * @owner Observable
 */
function switchMap(project, resultSelector) {
    return this.lift(new SwitchMapOperator(project, resultSelector));
}
exports.switchMap = switchMap;
var SwitchMapOperator = (function () {
    function SwitchMapOperator(project, resultSelector) {
        this.project = project;
        this.resultSelector = resultSelector;
    }
    SwitchMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));
    };
    return SwitchMapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchMapSubscriber = (function (_super) {
    __extends(SwitchMapSubscriber, _super);
    function SwitchMapSubscriber(destination, project, resultSelector) {
        _super.call(this, destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.index = 0;
    }
    SwitchMapSubscriber.prototype._next = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (error) {
            this.destination.error(error);
            return;
        }
        this._innerSub(result, value, index);
    };
    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
        var innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
        }
        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
    };
    SwitchMapSubscriber.prototype._complete = function () {
        var innerSubscription = this.innerSubscription;
        if (!innerSubscription || innerSubscription.closed) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype._unsubscribe = function () {
        this.innerSubscription = null;
    };
    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.innerSubscription = null;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (this.resultSelector) {
            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            this.destination.next(innerValue);
        }
    };
    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
        var result;
        try {
            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return SwitchMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=switchMap.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/switchMapTo.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/* tslint:disable:max-line-length */
/**
 * Projects each source value to the same Observable which is flattened multiple
 * times with {@link switch} in the output Observable.
 *
 * <span class="informal">It's like {@link switchMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/switchMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. The output Observables
 * emits values only from the most recently emitted instance of
 * `innerObservable`.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link switch}
 * @see {@link switchMap}
 * @see {@link mergeMapTo}
 *
 * @param {Observable} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable` every time a value is emitted on the source Observable.
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable` (and optionally transformed through `resultSelector`) every
 * time a value is emitted on the source Observable, and taking only the values
 * from the most recently projected inner Observable.
 * @method switchMapTo
 * @owner Observable
 */
function switchMapTo(innerObservable, resultSelector) {
    return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));
}
exports.switchMapTo = switchMapTo;
var SwitchMapToOperator = (function () {
    function SwitchMapToOperator(observable, resultSelector) {
        this.observable = observable;
        this.resultSelector = resultSelector;
    }
    SwitchMapToOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));
    };
    return SwitchMapToOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchMapToSubscriber = (function (_super) {
    __extends(SwitchMapToSubscriber, _super);
    function SwitchMapToSubscriber(destination, inner, resultSelector) {
        _super.call(this, destination);
        this.inner = inner;
        this.resultSelector = resultSelector;
        this.index = 0;
    }
    SwitchMapToSubscriber.prototype._next = function (value) {
        var innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
        }
        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));
    };
    SwitchMapToSubscriber.prototype._complete = function () {
        var innerSubscription = this.innerSubscription;
        if (!innerSubscription || innerSubscription.closed) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapToSubscriber.prototype._unsubscribe = function () {
        this.innerSubscription = null;
    };
    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.innerSubscription = null;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        if (resultSelector) {
            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            destination.next(innerValue);
        }
    };
    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        var result;
        try {
            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        destination.next(result);
    };
    return SwitchMapToSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=switchMapTo.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/take.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var ArgumentOutOfRangeError_1 = __webpack_require__("./node_modules/rxjs/util/ArgumentOutOfRangeError.js");
var EmptyObservable_1 = __webpack_require__("./node_modules/rxjs/observable/EmptyObservable.js");
/**
 * Emits only the first `count` values emitted by the source Observable.
 *
 * <span class="informal">Takes the first `count` values from the source, then
 * completes.</span>
 *
 * <img src="./img/take.png" width="100%">
 *
 * `take` returns an Observable that emits only the first `count` values emitted
 * by the source Observable. If the source emits fewer than `count` values then
 * all of its values are emitted. After that, it completes, regardless if the
 * source completes.
 *
 * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>
 * var interval = Rx.Observable.interval(1000);
 * var five = interval.take(5);
 * five.subscribe(x => console.log(x));
 *
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of `next` values to emit.
 * @return {Observable<T>} An Observable that emits only the first `count`
 * values emitted by the source Observable, or all of the values from the source
 * if the source emits fewer than `count` values.
 * @method take
 * @owner Observable
 */
function take(count) {
    if (count === 0) {
        return new EmptyObservable_1.EmptyObservable();
    }
    else {
        return this.lift(new TakeOperator(count));
    }
}
exports.take = take;
var TakeOperator = (function () {
    function TakeOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
        }
    }
    TakeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeSubscriber(subscriber, this.total));
    };
    return TakeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeSubscriber = (function (_super) {
    __extends(TakeSubscriber, _super);
    function TakeSubscriber(destination, total) {
        _super.call(this, destination);
        this.total = total;
        this.count = 0;
    }
    TakeSubscriber.prototype._next = function (value) {
        var total = this.total;
        var count = ++this.count;
        if (count <= total) {
            this.destination.next(value);
            if (count === total) {
                this.destination.complete();
                this.unsubscribe();
            }
        }
    };
    return TakeSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=take.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/takeLast.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var ArgumentOutOfRangeError_1 = __webpack_require__("./node_modules/rxjs/util/ArgumentOutOfRangeError.js");
var EmptyObservable_1 = __webpack_require__("./node_modules/rxjs/observable/EmptyObservable.js");
/**
 * Emits only the last `count` values emitted by the source Observable.
 *
 * <span class="informal">Remembers the latest `count` values, then emits those
 * only when the source completes.</span>
 *
 * <img src="./img/takeLast.png" width="100%">
 *
 * `takeLast` returns an Observable that emits at most the last `count` values
 * emitted by the source Observable. If the source emits fewer than `count`
 * values then all of its values are emitted. This operator must wait until the
 * `complete` notification emission from the source in order to emit the `next`
 * values on the output Observable, because otherwise it is impossible to know
 * whether or not more values will be emitted on the source. For this reason,
 * all values are emitted synchronously, followed by the complete notification.
 *
 * @example <caption>Take the last 3 values of an Observable with many values</caption>
 * var many = Rx.Observable.range(1, 100);
 * var lastThree = many.takeLast(3);
 * lastThree.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of values to emit from the end of
 * the sequence of values emitted by the source Observable.
 * @return {Observable<T>} An Observable that emits at most the last count
 * values emitted by the source Observable.
 * @method takeLast
 * @owner Observable
 */
function takeLast(count) {
    if (count === 0) {
        return new EmptyObservable_1.EmptyObservable();
    }
    else {
        return this.lift(new TakeLastOperator(count));
    }
}
exports.takeLast = takeLast;
var TakeLastOperator = (function () {
    function TakeLastOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
        }
    }
    TakeLastOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
    };
    return TakeLastOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeLastSubscriber = (function (_super) {
    __extends(TakeLastSubscriber, _super);
    function TakeLastSubscriber(destination, total) {
        _super.call(this, destination);
        this.total = total;
        this.ring = new Array();
        this.count = 0;
    }
    TakeLastSubscriber.prototype._next = function (value) {
        var ring = this.ring;
        var total = this.total;
        var count = this.count++;
        if (ring.length < total) {
            ring.push(value);
        }
        else {
            var index = count % total;
            ring[index] = value;
        }
    };
    TakeLastSubscriber.prototype._complete = function () {
        var destination = this.destination;
        var count = this.count;
        if (count > 0) {
            var total = this.count >= this.total ? this.total : this.count;
            var ring = this.ring;
            for (var i = 0; i < total; i++) {
                var idx = (count++) % total;
                destination.next(ring[idx]);
            }
        }
        destination.complete();
    };
    return TakeLastSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=takeLast.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/takeUntil.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Emits the values emitted by the source Observable until a `notifier`
 * Observable emits a value.
 *
 * <span class="informal">Lets values pass until a second Observable,
 * `notifier`, emits something. Then, it completes.</span>
 *
 * <img src="./img/takeUntil.png" width="100%">
 *
 * `takeUntil` subscribes and begins mirroring the source Observable. It also
 * monitors a second Observable, `notifier` that you provide. If the `notifier`
 * emits a value or a complete notification, the output Observable stops
 * mirroring the source Observable and completes.
 *
 * @example <caption>Tick every second until the first click happens</caption>
 * var interval = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = interval.takeUntil(clicks);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @param {Observable} notifier The Observable whose first emitted value will
 * cause the output Observable of `takeUntil` to stop emitting values from the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable until such time as `notifier` emits its first value.
 * @method takeUntil
 * @owner Observable
 */
function takeUntil(notifier) {
    return this.lift(new TakeUntilOperator(notifier));
}
exports.takeUntil = takeUntil;
var TakeUntilOperator = (function () {
    function TakeUntilOperator(notifier) {
        this.notifier = notifier;
    }
    TakeUntilOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));
    };
    return TakeUntilOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeUntilSubscriber = (function (_super) {
    __extends(TakeUntilSubscriber, _super);
    function TakeUntilSubscriber(destination, notifier) {
        _super.call(this, destination);
        this.notifier = notifier;
        this.add(subscribeToResult_1.subscribeToResult(this, notifier));
    }
    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.complete();
    };
    TakeUntilSubscriber.prototype.notifyComplete = function () {
        // noop
    };
    return TakeUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=takeUntil.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/takeWhile.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/**
 * Emits values emitted by the source Observable so long as each value satisfies
 * the given `predicate`, and then completes as soon as this `predicate` is not
 * satisfied.
 *
 * <span class="informal">Takes values from the source only while they pass the
 * condition given. When the first value does not satisfy, it completes.</span>
 *
 * <img src="./img/takeWhile.png" width="100%">
 *
 * `takeWhile` subscribes and begins mirroring the source Observable. Each value
 * emitted on the source is given to the `predicate` function which returns a
 * boolean, representing a condition to be satisfied by the source values. The
 * output Observable emits the source values until such time as the `predicate`
 * returns false, at which point `takeWhile` stops mirroring the source
 * Observable and completes the output Observable.
 *
 * @example <caption>Emit click events only while the clientX property is greater than 200</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.takeWhile(ev => ev.clientX > 200);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates a value emitted by the source Observable and returns a boolean.
 * Also takes the (zero-based) index as the second argument.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable so long as each value satisfies the condition defined by the
 * `predicate`, then completes.
 * @method takeWhile
 * @owner Observable
 */
function takeWhile(predicate) {
    return this.lift(new TakeWhileOperator(predicate));
}
exports.takeWhile = takeWhile;
var TakeWhileOperator = (function () {
    function TakeWhileOperator(predicate) {
        this.predicate = predicate;
    }
    TakeWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));
    };
    return TakeWhileOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeWhileSubscriber = (function (_super) {
    __extends(TakeWhileSubscriber, _super);
    function TakeWhileSubscriber(destination, predicate) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.index = 0;
    }
    TakeWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        var result;
        try {
            result = this.predicate(value, this.index++);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this.nextOrComplete(value, result);
    };
    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
        var destination = this.destination;
        if (Boolean(predicateResult)) {
            destination.next(value);
        }
        else {
            destination.complete();
        }
    };
    return TakeWhileSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=takeWhile.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/throttle.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for a duration determined by another Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link throttleTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/throttle.png" width="100%">
 *
 * `throttle` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled by calling the `durationSelector` function with the source value,
 * which returns the "duration" Observable. When the duration Observable emits a
 * value or completes, the timer is disabled, and this process repeats for the
 * next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttle(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {function(value: T): Observable|Promise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration for each source value, returned as an Observable or a Promise.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttle
 * @owner Observable
 */
function throttle(durationSelector) {
    return this.lift(new ThrottleOperator(durationSelector));
}
exports.throttle = throttle;
var ThrottleOperator = (function () {
    function ThrottleOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    ThrottleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));
    };
    return ThrottleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ThrottleSubscriber = (function (_super) {
    __extends(ThrottleSubscriber, _super);
    function ThrottleSubscriber(destination, durationSelector) {
        _super.call(this, destination);
        this.destination = destination;
        this.durationSelector = durationSelector;
    }
    ThrottleSubscriber.prototype._next = function (value) {
        if (!this.throttled) {
            this.tryDurationSelector(value);
        }
    };
    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
        var duration = null;
        try {
            duration = this.durationSelector(value);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.emitAndThrottle(value, duration);
    };
    ThrottleSubscriber.prototype.emitAndThrottle = function (value, duration) {
        this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
        this.destination.next(value);
    };
    ThrottleSubscriber.prototype._unsubscribe = function () {
        var throttled = this.throttled;
        if (throttled) {
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
        }
    };
    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this._unsubscribe();
    };
    ThrottleSubscriber.prototype.notifyComplete = function () {
        this._unsubscribe();
    };
    return ThrottleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=throttle.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/throttleTime.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for `duration` milliseconds, then repeats this process.
 *
 * <span class="informal">Lets a value pass, then ignores source values for the
 * next `duration` milliseconds.</span>
 *
 * <img src="./img/throttleTime.png" width="100%">
 *
 * `throttleTime` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled. After `duration` milliseconds (or the time unit determined
 * internally by the optional `scheduler`) has passed, the timer is disabled,
 * and this process repeats for the next source value. Optionally takes a
 * {@link Scheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttleTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {number} duration Time to wait before emitting another value after
 * emitting the last value, measured in milliseconds or the time unit determined
 * internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for
 * managing the timers that handle the sampling.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttleTime
 * @owner Observable
 */
function throttleTime(duration, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return this.lift(new ThrottleTimeOperator(duration, scheduler));
}
exports.throttleTime = throttleTime;
var ThrottleTimeOperator = (function () {
    function ThrottleTimeOperator(duration, scheduler) {
        this.duration = duration;
        this.scheduler = scheduler;
    }
    ThrottleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));
    };
    return ThrottleTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ThrottleTimeSubscriber = (function (_super) {
    __extends(ThrottleTimeSubscriber, _super);
    function ThrottleTimeSubscriber(destination, duration, scheduler) {
        _super.call(this, destination);
        this.duration = duration;
        this.scheduler = scheduler;
    }
    ThrottleTimeSubscriber.prototype._next = function (value) {
        if (!this.throttled) {
            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));
            this.destination.next(value);
        }
    };
    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
        var throttled = this.throttled;
        if (throttled) {
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        }
    };
    return ThrottleTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNext(arg) {
    var subscriber = arg.subscriber;
    subscriber.clearThrottle();
}
//# sourceMappingURL=throttleTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/timeInterval.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
/**
 * @param scheduler
 * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}
 * @method timeInterval
 * @owner Observable
 */
function timeInterval(scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return this.lift(new TimeIntervalOperator(scheduler));
}
exports.timeInterval = timeInterval;
var TimeInterval = (function () {
    function TimeInterval(value, interval) {
        this.value = value;
        this.interval = interval;
    }
    return TimeInterval;
}());
exports.TimeInterval = TimeInterval;
;
var TimeIntervalOperator = (function () {
    function TimeIntervalOperator(scheduler) {
        this.scheduler = scheduler;
    }
    TimeIntervalOperator.prototype.call = function (observer, source) {
        return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));
    };
    return TimeIntervalOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeIntervalSubscriber = (function (_super) {
    __extends(TimeIntervalSubscriber, _super);
    function TimeIntervalSubscriber(destination, scheduler) {
        _super.call(this, destination);
        this.scheduler = scheduler;
        this.lastTime = 0;
        this.lastTime = scheduler.now();
    }
    TimeIntervalSubscriber.prototype._next = function (value) {
        var now = this.scheduler.now();
        var span = now - this.lastTime;
        this.lastTime = now;
        this.destination.next(new TimeInterval(value, span));
    };
    return TimeIntervalSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=timeInterval.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/timeout.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
var isDate_1 = __webpack_require__("./node_modules/rxjs/util/isDate.js");
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var TimeoutError_1 = __webpack_require__("./node_modules/rxjs/util/TimeoutError.js");
/**
 * @param {number} due
 * @param {Scheduler} [scheduler]
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method timeout
 * @owner Observable
 */
function timeout(due, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    var absoluteTimeout = isDate_1.isDate(due);
    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
    return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError()));
}
exports.timeout = timeout;
var TimeoutOperator = (function () {
    function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {
        this.waitFor = waitFor;
        this.absoluteTimeout = absoluteTimeout;
        this.scheduler = scheduler;
        this.errorInstance = errorInstance;
    }
    TimeoutOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));
    };
    return TimeoutOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeoutSubscriber = (function (_super) {
    __extends(TimeoutSubscriber, _super);
    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {
        _super.call(this, destination);
        this.absoluteTimeout = absoluteTimeout;
        this.waitFor = waitFor;
        this.scheduler = scheduler;
        this.errorInstance = errorInstance;
        this.index = 0;
        this._previousIndex = 0;
        this._hasCompleted = false;
        this.scheduleTimeout();
    }
    Object.defineProperty(TimeoutSubscriber.prototype, "previousIndex", {
        get: function () {
            return this._previousIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeoutSubscriber.prototype, "hasCompleted", {
        get: function () {
            return this._hasCompleted;
        },
        enumerable: true,
        configurable: true
    });
    TimeoutSubscriber.dispatchTimeout = function (state) {
        var source = state.subscriber;
        var currentIndex = state.index;
        if (!source.hasCompleted && source.previousIndex === currentIndex) {
            source.notifyTimeout();
        }
    };
    TimeoutSubscriber.prototype.scheduleTimeout = function () {
        var currentIndex = this.index;
        this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });
        this.index++;
        this._previousIndex = currentIndex;
    };
    TimeoutSubscriber.prototype._next = function (value) {
        this.destination.next(value);
        if (!this.absoluteTimeout) {
            this.scheduleTimeout();
        }
    };
    TimeoutSubscriber.prototype._error = function (err) {
        this.destination.error(err);
        this._hasCompleted = true;
    };
    TimeoutSubscriber.prototype._complete = function () {
        this.destination.complete();
        this._hasCompleted = true;
    };
    TimeoutSubscriber.prototype.notifyTimeout = function () {
        this.error(this.errorInstance);
    };
    return TimeoutSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=timeout.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/timeoutWith.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
var isDate_1 = __webpack_require__("./node_modules/rxjs/util/isDate.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/* tslint:disable:max-line-length */
/**
 * @param due
 * @param withObservable
 * @param scheduler
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method timeoutWith
 * @owner Observable
 */
function timeoutWith(due, withObservable, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    var absoluteTimeout = isDate_1.isDate(due);
    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
    return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
}
exports.timeoutWith = timeoutWith;
var TimeoutWithOperator = (function () {
    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
        this.waitFor = waitFor;
        this.absoluteTimeout = absoluteTimeout;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
    }
    TimeoutWithOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
    };
    return TimeoutWithOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeoutWithSubscriber = (function (_super) {
    __extends(TimeoutWithSubscriber, _super);
    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
        _super.call(this);
        this.destination = destination;
        this.absoluteTimeout = absoluteTimeout;
        this.waitFor = waitFor;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
        this.timeoutSubscription = undefined;
        this.index = 0;
        this._previousIndex = 0;
        this._hasCompleted = false;
        destination.add(this);
        this.scheduleTimeout();
    }
    Object.defineProperty(TimeoutWithSubscriber.prototype, "previousIndex", {
        get: function () {
            return this._previousIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeoutWithSubscriber.prototype, "hasCompleted", {
        get: function () {
            return this._hasCompleted;
        },
        enumerable: true,
        configurable: true
    });
    TimeoutWithSubscriber.dispatchTimeout = function (state) {
        var source = state.subscriber;
        var currentIndex = state.index;
        if (!source.hasCompleted && source.previousIndex === currentIndex) {
            source.handleTimeout();
        }
    };
    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
        var currentIndex = this.index;
        var timeoutState = { subscriber: this, index: currentIndex };
        this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);
        this.index++;
        this._previousIndex = currentIndex;
    };
    TimeoutWithSubscriber.prototype._next = function (value) {
        this.destination.next(value);
        if (!this.absoluteTimeout) {
            this.scheduleTimeout();
        }
    };
    TimeoutWithSubscriber.prototype._error = function (err) {
        this.destination.error(err);
        this._hasCompleted = true;
    };
    TimeoutWithSubscriber.prototype._complete = function () {
        this.destination.complete();
        this._hasCompleted = true;
    };
    TimeoutWithSubscriber.prototype.handleTimeout = function () {
        if (!this.closed) {
            var withObservable = this.withObservable;
            this.unsubscribe();
            this.destination.add(this.timeoutSubscription = subscribeToResult_1.subscribeToResult(this, withObservable));
        }
    };
    return TimeoutWithSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=timeoutWith.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/timestamp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
/**
 * @param scheduler
 * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}
 * @method timestamp
 * @owner Observable
 */
function timestamp(scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return this.lift(new TimestampOperator(scheduler));
}
exports.timestamp = timestamp;
var Timestamp = (function () {
    function Timestamp(value, timestamp) {
        this.value = value;
        this.timestamp = timestamp;
    }
    return Timestamp;
}());
exports.Timestamp = Timestamp;
;
var TimestampOperator = (function () {
    function TimestampOperator(scheduler) {
        this.scheduler = scheduler;
    }
    TimestampOperator.prototype.call = function (observer, source) {
        return source.subscribe(new TimestampSubscriber(observer, this.scheduler));
    };
    return TimestampOperator;
}());
var TimestampSubscriber = (function (_super) {
    __extends(TimestampSubscriber, _super);
    function TimestampSubscriber(destination, scheduler) {
        _super.call(this, destination);
        this.scheduler = scheduler;
    }
    TimestampSubscriber.prototype._next = function (value) {
        var now = this.scheduler.now();
        this.destination.next(new Timestamp(value, now));
    };
    return TimestampSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=timestamp.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/toArray.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/**
 * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}
 * @method toArray
 * @owner Observable
 */
function toArray() {
    return this.lift(new ToArrayOperator());
}
exports.toArray = toArray;
var ToArrayOperator = (function () {
    function ToArrayOperator() {
    }
    ToArrayOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ToArraySubscriber(subscriber));
    };
    return ToArrayOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ToArraySubscriber = (function (_super) {
    __extends(ToArraySubscriber, _super);
    function ToArraySubscriber(destination) {
        _super.call(this, destination);
        this.array = [];
    }
    ToArraySubscriber.prototype._next = function (x) {
        this.array.push(x);
    };
    ToArraySubscriber.prototype._complete = function () {
        this.destination.next(this.array);
        this.destination.complete();
    };
    return ToArraySubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=toArray.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/window.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Branch out the source Observable values as a nested Observable whenever
 * `windowBoundaries` emits.
 *
 * <span class="informal">It's like {@link buffer}, but emits a nested Observable
 * instead of an array.</span>
 *
 * <img src="./img/window.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping
 * windows. It emits the current window and opens a new one whenever the
 * Observable `windowBoundaries` emits an item. Because each window is an
 * Observable, the output is a higher-order Observable.
 *
 * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var result = clicks.window(interval)
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link buffer}
 *
 * @param {Observable<any>} windowBoundaries An Observable that completes the
 * previous window and starts a new window.
 * @return {Observable<Observable<T>>} An Observable of windows, which are
 * Observables emitting values of the source Observable.
 * @method window
 * @owner Observable
 */
function window(windowBoundaries) {
    return this.lift(new WindowOperator(windowBoundaries));
}
exports.window = window;
var WindowOperator = (function () {
    function WindowOperator(windowBoundaries) {
        this.windowBoundaries = windowBoundaries;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        var windowSubscriber = new WindowSubscriber(subscriber);
        var sourceSubscription = source.subscribe(windowSubscriber);
        if (!sourceSubscription.closed) {
            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));
        }
        return sourceSubscription;
    };
    return WindowOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber = (function (_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination) {
        _super.call(this, destination);
        this.window = new Subject_1.Subject();
        destination.next(this.window);
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow();
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this._complete();
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
    };
    WindowSubscriber.prototype._unsubscribe = function () {
        this.window = null;
    };
    WindowSubscriber.prototype.openWindow = function () {
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var destination = this.destination;
        var newWindow = this.window = new Subject_1.Subject();
        destination.next(newWindow);
    };
    return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=window.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/windowCount.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
/**
 * Branch out the source Observable values as a nested Observable with each
 * nested Observable emitting at most `windowSize` values.
 *
 * <span class="informal">It's like {@link bufferCount}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowCount.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows every `startWindowEvery`
 * items, each containing no more than `windowSize` items. When the source
 * Observable completes or encounters an error, the output Observable emits
 * the current window and propagates the notification from the source
 * Observable. If `startWindowEvery` is not provided, then new windows are
 * started immediately at the start of the source and when each window completes
 * with size `windowSize`.
 *
 * @example <caption>Ignore every 3rd click event, starting from the first one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(3)
 *   .map(win => win.skip(1)) // skip first of every 3 clicks
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Ignore every 3rd click event, starting from the third one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(2, 3)
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link bufferCount}
 *
 * @param {number} windowSize The maximum number of values emitted by each
 * window.
 * @param {number} [startWindowEvery] Interval at which to start a new window.
 * For example if `startWindowEvery` is `2`, then a new window will be started
 * on every other value from the source. A new window is started at the
 * beginning of the source by default.
 * @return {Observable<Observable<T>>} An Observable of windows, which in turn
 * are Observable of values.
 * @method windowCount
 * @owner Observable
 */
function windowCount(windowSize, startWindowEvery) {
    if (startWindowEvery === void 0) { startWindowEvery = 0; }
    return this.lift(new WindowCountOperator(windowSize, startWindowEvery));
}
exports.windowCount = windowCount;
var WindowCountOperator = (function () {
    function WindowCountOperator(windowSize, startWindowEvery) {
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
    }
    WindowCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
    };
    return WindowCountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowCountSubscriber = (function (_super) {
    __extends(WindowCountSubscriber, _super);
    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
        _super.call(this, destination);
        this.destination = destination;
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
        this.windows = [new Subject_1.Subject()];
        this.count = 0;
        destination.next(this.windows[0]);
    }
    WindowCountSubscriber.prototype._next = function (value) {
        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
        var destination = this.destination;
        var windowSize = this.windowSize;
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len && !this.closed; i++) {
            windows[i].next(value);
        }
        var c = this.count - windowSize + 1;
        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
            windows.shift().complete();
        }
        if (++this.count % startWindowEvery === 0 && !this.closed) {
            var window_1 = new Subject_1.Subject();
            windows.push(window_1);
            destination.next(window_1);
        }
    };
    WindowCountSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().error(err);
            }
        }
        this.destination.error(err);
    };
    WindowCountSubscriber.prototype._complete = function () {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().complete();
            }
        }
        this.destination.complete();
    };
    WindowCountSubscriber.prototype._unsubscribe = function () {
        this.count = 0;
        this.windows = null;
    };
    return WindowCountSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=windowCount.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/windowTime.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var async_1 = __webpack_require__("./node_modules/rxjs/scheduler/async.js");
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
/**
 * Branch out the source Observable values as a nested Observable periodically
 * in time.
 *
 * <span class="informal">It's like {@link bufferTime}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowTime.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable starts a new window periodically, as
 * determined by the `windowCreationInterval` argument. It emits each window
 * after a fixed timespan, specified by the `windowTimeSpan` argument. When the
 * source Observable completes or encounters an error, the output Observable
 * emits the current window and propagates the notification from the source
 * Observable. If `windowCreationInterval` is not provided, the output
 * Observable starts a new window when the previous window of duration
 * `windowTimeSpan` completes.
 *
 * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowTime(1000)
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowTime(1000, 5000)
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link bufferTime}
 *
 * @param {number} windowTimeSpan The amount of time to fill each window.
 * @param {number} [windowCreationInterval] The interval at which to start new
 * windows.
 * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the
 * intervals that determine window boundaries.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowTime
 * @owner Observable
 */
function windowTime(windowTimeSpan, windowCreationInterval, scheduler) {
    if (windowCreationInterval === void 0) { windowCreationInterval = null; }
    if (scheduler === void 0) { scheduler = async_1.async; }
    return this.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler));
}
exports.windowTime = windowTime;
var WindowTimeOperator = (function () {
    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler) {
        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.scheduler = scheduler;
    }
    WindowTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler));
    };
    return WindowTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowTimeSubscriber = (function (_super) {
    __extends(WindowTimeSubscriber, _super);
    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, scheduler) {
        _super.call(this, destination);
        this.destination = destination;
        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.scheduler = scheduler;
        this.windows = [];
        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
            var window_1 = this.openWindow();
            var closeState = { subscriber: this, window: window_1, context: null };
            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };
            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
        }
        else {
            var window_2 = this.openWindow();
            var timeSpanOnlyState = { subscriber: this, window: window_2, windowTimeSpan: windowTimeSpan };
            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
        }
    }
    WindowTimeSubscriber.prototype._next = function (value) {
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len; i++) {
            var window_3 = windows[i];
            if (!window_3.closed) {
                window_3.next(value);
            }
        }
    };
    WindowTimeSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        while (windows.length > 0) {
            windows.shift().error(err);
        }
        this.destination.error(err);
    };
    WindowTimeSubscriber.prototype._complete = function () {
        var windows = this.windows;
        while (windows.length > 0) {
            var window_4 = windows.shift();
            if (!window_4.closed) {
                window_4.complete();
            }
        }
        this.destination.complete();
    };
    WindowTimeSubscriber.prototype.openWindow = function () {
        var window = new Subject_1.Subject();
        this.windows.push(window);
        var destination = this.destination;
        destination.next(window);
        return window;
    };
    WindowTimeSubscriber.prototype.closeWindow = function (window) {
        window.complete();
        var windows = this.windows;
        windows.splice(windows.indexOf(window), 1);
    };
    return WindowTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchWindowTimeSpanOnly(state) {
    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
    if (window) {
        window.complete();
    }
    state.window = subscriber.openWindow();
    this.schedule(state, windowTimeSpan);
}
function dispatchWindowCreation(state) {
    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
    var window = subscriber.openWindow();
    var action = this;
    var context = { action: action, subscription: null };
    var timeSpanState = { subscriber: subscriber, window: window, context: context };
    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
    action.add(context.subscription);
    action.schedule(state, windowCreationInterval);
}
function dispatchWindowClose(arg) {
    var subscriber = arg.subscriber, window = arg.window, context = arg.context;
    if (context && context.action && context.subscription) {
        context.action.remove(context.subscription);
    }
    subscriber.closeWindow(window);
}
//# sourceMappingURL=windowTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/windowToggle.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Branch out the source Observable values as a nested Observable starting from
 * an emission from `openings` and ending when the output of `closingSelector`
 * emits.
 *
 * <span class="informal">It's like {@link bufferToggle}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowToggle.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows that contain those items
 * emitted by the source Observable between the time when the `openings`
 * Observable emits an item and when the Observable returned by
 * `closingSelector` emits an item.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var result = clicks.windowToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * ).mergeAll();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowWhen}
 * @see {@link bufferToggle}
 *
 * @param {Observable<O>} openings An observable of notifications to start new
 * windows.
 * @param {function(value: O): Observable} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns an Observable,
 * which, when it emits (either `next` or `complete`), signals that the
 * associated window should complete.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowToggle
 * @owner Observable
 */
function windowToggle(openings, closingSelector) {
    return this.lift(new WindowToggleOperator(openings, closingSelector));
}
exports.windowToggle = windowToggle;
var WindowToggleOperator = (function () {
    function WindowToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    WindowToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return WindowToggleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowToggleSubscriber = (function (_super) {
    __extends(WindowToggleSubscriber, _super);
    function WindowToggleSubscriber(destination, openings, closingSelector) {
        _super.call(this, destination);
        this.openings = openings;
        this.closingSelector = closingSelector;
        this.contexts = [];
        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));
    }
    WindowToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        if (contexts) {
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
                contexts[i].window.next(value);
            }
        }
    };
    WindowToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context = contexts[index];
                context.window.error(err);
                context.subscription.unsubscribe();
            }
        }
        _super.prototype._error.call(this, err);
    };
    WindowToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context = contexts[index];
                context.window.complete();
                context.subscription.unsubscribe();
            }
        }
        _super.prototype._complete.call(this);
    };
    WindowToggleSubscriber.prototype._unsubscribe = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context = contexts[index];
                context.window.unsubscribe();
                context.subscription.unsubscribe();
            }
        }
    };
    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (outerValue === this.openings) {
            var closingSelector = this.closingSelector;
            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);
            if (closingNotifier === errorObject_1.errorObject) {
                return this.error(errorObject_1.errorObject.e);
            }
            else {
                var window_1 = new Subject_1.Subject();
                var subscription = new Subscription_1.Subscription();
                var context = { window: window_1, subscription: subscription };
                this.contexts.push(context);
                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
                if (innerSubscription.closed) {
                    this.closeWindow(this.contexts.length - 1);
                }
                else {
                    innerSubscription.context = context;
                    subscription.add(innerSubscription);
                }
                this.destination.next(window_1);
            }
        }
        else {
            this.closeWindow(this.contexts.indexOf(outerValue));
        }
    };
    WindowToggleSubscriber.prototype.notifyError = function (err) {
        this.error(err);
    };
    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
        if (inner !== this.openSubscription) {
            this.closeWindow(this.contexts.indexOf(inner.context));
        }
    };
    WindowToggleSubscriber.prototype.closeWindow = function (index) {
        if (index === -1) {
            return;
        }
        var contexts = this.contexts;
        var context = contexts[index];
        var window = context.window, subscription = context.subscription;
        contexts.splice(index, 1);
        window.complete();
        subscription.unsubscribe();
    };
    return WindowToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=windowToggle.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/windowWhen.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var tryCatch_1 = __webpack_require__("./node_modules/rxjs/util/tryCatch.js");
var errorObject_1 = __webpack_require__("./node_modules/rxjs/util/errorObject.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/**
 * Branch out the source Observable values as a nested Observable using a
 * factory function of closing Observables to determine when to start a new
 * window.
 *
 * <span class="informal">It's like {@link bufferWhen}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowWhen.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping windows.
 * It emits the current window and opens a new one whenever the Observable
 * produced by the specified `closingSelector` function emits an item. The first
 * window is opened immediately when subscribing to the output Observable.
 *
 * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks
 *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link bufferWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals (on either `next` or
 * `complete`) when to close the previous window and start a new one.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowWhen
 * @owner Observable
 */
function windowWhen(closingSelector) {
    return this.lift(new WindowOperator(closingSelector));
}
exports.windowWhen = windowWhen;
var WindowOperator = (function () {
    function WindowOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
    };
    return WindowOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber = (function (_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination, closingSelector) {
        _super.call(this, destination);
        this.destination = destination;
        this.closingSelector = closingSelector;
        this.openWindow();
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
        if (this.closingNotification) {
            this.closingNotification.unsubscribe();
        }
    };
    WindowSubscriber.prototype.openWindow = function (innerSub) {
        if (innerSub === void 0) { innerSub = null; }
        if (innerSub) {
            this.remove(innerSub);
            innerSub.unsubscribe();
        }
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var window = this.window = new Subject_1.Subject();
        this.destination.next(window);
        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
        if (closingNotifier === errorObject_1.errorObject) {
            var err = errorObject_1.errorObject.e;
            this.destination.error(err);
            this.window.error(err);
        }
        else {
            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));
        }
    };
    return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=windowWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/withLatestFrom.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
/* tslint:disable:max-line-length */
/**
 * Combines the source Observable with other Observables to create an Observable
 * whose values are calculated from the latest values of each, only when the
 * source emits.
 *
 * <span class="informal">Whenever the source Observable emits a value, it
 * computes a formula using that value plus the latest values from other input
 * Observables, then emits the output of that formula.</span>
 *
 * <img src="./img/withLatestFrom.png" width="100%">
 *
 * `withLatestFrom` combines each value from the source Observable (the
 * instance) with the latest values from the other input Observables only when
 * the source emits a value, optionally using a `project` function to determine
 * the value to be emitted on the output Observable. All input Observables must
 * emit at least one value before the output Observable will emit a value.
 *
 * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var result = clicks.withLatestFrom(timer);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineLatest}
 *
 * @param {Observable} other An input Observable to combine with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {Function} [project] Projection function for combining values
 * together. Receives all values in order of the Observables passed, where the
 * first parameter is a value from the source Observable. (e.g.
 * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not
 * passed, arrays will be emitted on the output Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @method withLatestFrom
 * @owner Observable
 */
function withLatestFrom() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
    }
    var project;
    if (typeof args[args.length - 1] === 'function') {
        project = args.pop();
    }
    var observables = args;
    return this.lift(new WithLatestFromOperator(observables, project));
}
exports.withLatestFrom = withLatestFrom;
var WithLatestFromOperator = (function () {
    function WithLatestFromOperator(observables, project) {
        this.observables = observables;
        this.project = project;
    }
    WithLatestFromOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
    };
    return WithLatestFromOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WithLatestFromSubscriber = (function (_super) {
    __extends(WithLatestFromSubscriber, _super);
    function WithLatestFromSubscriber(destination, observables, project) {
        _super.call(this, destination);
        this.observables = observables;
        this.project = project;
        this.toRespond = [];
        var len = observables.length;
        this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            this.toRespond.push(i);
        }
        for (var i = 0; i < len; i++) {
            var observable = observables[i];
            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
        }
    }
    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        var toRespond = this.toRespond;
        if (toRespond.length > 0) {
            var found = toRespond.indexOf(outerIndex);
            if (found !== -1) {
                toRespond.splice(found, 1);
            }
        }
    };
    WithLatestFromSubscriber.prototype.notifyComplete = function () {
        // noop
    };
    WithLatestFromSubscriber.prototype._next = function (value) {
        if (this.toRespond.length === 0) {
            var args = [value].concat(this.values);
            if (this.project) {
                this._tryProject(args);
            }
            else {
                this.destination.next(args);
            }
        }
    };
    WithLatestFromSubscriber.prototype._tryProject = function (args) {
        var result;
        try {
            result = this.project.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return WithLatestFromSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=withLatestFrom.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/zip.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ArrayObservable_1 = __webpack_require__("./node_modules/rxjs/observable/ArrayObservable.js");
var isArray_1 = __webpack_require__("./node_modules/rxjs/util/isArray.js");
var Subscriber_1 = __webpack_require__("./node_modules/rxjs/Subscriber.js");
var OuterSubscriber_1 = __webpack_require__("./node_modules/rxjs/OuterSubscriber.js");
var subscribeToResult_1 = __webpack_require__("./node_modules/rxjs/util/subscribeToResult.js");
var iterator_1 = __webpack_require__("./node_modules/rxjs/symbol/iterator.js");
/* tslint:disable:max-line-length */
/**
 * @param observables
 * @return {Observable<R>}
 * @method zip
 * @owner Observable
 */
function zipProto() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return this.lift.call(zipStatic.apply(void 0, [this].concat(observables)));
}
exports.zipProto = zipProto;
/* tslint:enable:max-line-length */
/**
 * @param observables
 * @return {Observable<R>}
 * @static true
 * @name zip
 * @owner Observable
 */
function zipStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var project = observables[observables.length - 1];
    if (typeof project === 'function') {
        observables.pop();
    }
    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));
}
exports.zipStatic = zipStatic;
var ZipOperator = (function () {
    function ZipOperator(project) {
        this.project = project;
    }
    ZipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ZipSubscriber(subscriber, this.project));
    };
    return ZipOperator;
}());
exports.ZipOperator = ZipOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipSubscriber = (function (_super) {
    __extends(ZipSubscriber, _super);
    function ZipSubscriber(destination, project, values) {
        if (values === void 0) { values = Object.create(null); }
        _super.call(this, destination);
        this.iterators = [];
        this.active = 0;
        this.project = (typeof project === 'function') ? project : null;
        this.values = values;
    }
    ZipSubscriber.prototype._next = function (value) {
        var iterators = this.iterators;
        if (isArray_1.isArray(value)) {
            iterators.push(new StaticArrayIterator(value));
        }
        else if (typeof value[iterator_1.$$iterator] === 'function') {
            iterators.push(new StaticIterator(value[iterator_1.$$iterator]()));
        }
        else {
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        }
    };
    ZipSubscriber.prototype._complete = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        this.active = len;
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (iterator.stillUnsubscribed) {
                this.add(iterator.subscribe(iterator, i));
            }
            else {
                this.active--; // not an observable
            }
        }
    };
    ZipSubscriber.prototype.notifyInactive = function () {
        this.active--;
        if (this.active === 0) {
            this.destination.complete();
        }
    };
    ZipSubscriber.prototype.checkIterators = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        var destination = this.destination;
        // abort if not all of them have values
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
                return;
            }
        }
        var shouldComplete = false;
        var args = [];
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            var result = iterator.next();
            // check to see if it's completed now that you've gotten
            // the next value.
            if (iterator.hasCompleted()) {
                shouldComplete = true;
            }
            if (result.done) {
                destination.complete();
                return;
            }
            args.push(result.value);
        }
        if (this.project) {
            this._tryProject(args);
        }
        else {
            destination.next(args);
        }
        if (shouldComplete) {
            destination.complete();
        }
    };
    ZipSubscriber.prototype._tryProject = function (args) {
        var result;
        try {
            result = this.project.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return ZipSubscriber;
}(Subscriber_1.Subscriber));
exports.ZipSubscriber = ZipSubscriber;
var StaticIterator = (function () {
    function StaticIterator(iterator) {
        this.iterator = iterator;
        this.nextResult = iterator.next();
    }
    StaticIterator.prototype.hasValue = function () {
        return true;
    };
    StaticIterator.prototype.next = function () {
        var result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    };
    StaticIterator.prototype.hasCompleted = function () {
        var nextResult = this.nextResult;
        return nextResult && nextResult.done;
    };
    return StaticIterator;
}());
var StaticArrayIterator = (function () {
    function StaticArrayIterator(array) {
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    }
    StaticArrayIterator.prototype[iterator_1.$$iterator] = function () {
        return this;
    };
    StaticArrayIterator.prototype.next = function (value) {
        var i = this.index++;
        var array = this.array;
        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
    };
    StaticArrayIterator.prototype.hasValue = function () {
        return this.array.length > this.index;
    };
    StaticArrayIterator.prototype.hasCompleted = function () {
        return this.array.length === this.index;
    };
    return StaticArrayIterator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipBufferIterator = (function (_super) {
    __extends(ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable) {
        _super.call(this, destination);
        this.parent = parent;
        this.observable = observable;
        this.stillUnsubscribed = true;
        this.buffer = [];
        this.isComplete = false;
    }
    ZipBufferIterator.prototype[iterator_1.$$iterator] = function () {
        return this;
    };
    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
    //    this is legit because `next()` will never be called by a subscription in this case.
    ZipBufferIterator.prototype.next = function () {
        var buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
        }
        else {
            return { value: buffer.shift(), done: false };
        }
    };
    ZipBufferIterator.prototype.hasValue = function () {
        return this.buffer.length > 0;
    };
    ZipBufferIterator.prototype.hasCompleted = function () {
        return this.buffer.length === 0 && this.isComplete;
    };
    ZipBufferIterator.prototype.notifyComplete = function () {
        if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
        }
        else {
            this.destination.complete();
        }
    };
    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    };
    ZipBufferIterator.prototype.subscribe = function (value, index) {
        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);
    };
    return ZipBufferIterator;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=zip.js.map

/***/ }),

/***/ "./node_modules/rxjs/operator/zipAll.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var zip_1 = __webpack_require__("./node_modules/rxjs/operator/zip.js");
/**
 * @param project
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method zipAll
 * @owner Observable
 */
function zipAll(project) {
    return this.lift(new zip_1.ZipOperator(project));
}
exports.zipAll = zipAll;
//# sourceMappingURL=zipAll.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/Action.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
/**
 * A unit of work to be executed in a {@link Scheduler}. An action is typically
 * created from within a Scheduler and an RxJS user does not need to concern
 * themselves about creating and manipulating an Action.
 *
 * ```ts
 * class Action<T> extends Subscription {
 *   new (scheduler: Scheduler, work: (state?: T) => void);
 *   schedule(state?: T, delay: number = 0): Subscription;
 * }
 * ```
 *
 * @class Action<T>
 */
var Action = (function (_super) {
    __extends(Action, _super);
    function Action(scheduler, work) {
        _super.call(this);
    }
    /**
     * Schedules this action on its parent Scheduler for execution. May be passed
     * some context object, `state`. May happen at some point in the future,
     * according to the `delay` parameter, if specified.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler.
     * @return {void}
     */
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        return this;
    };
    return Action;
}(Subscription_1.Subscription));
exports.Action = Action;
//# sourceMappingURL=Action.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/AnimationFrameAction.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = __webpack_require__("./node_modules/rxjs/scheduler/AsyncAction.js");
var AnimationFrame_1 = __webpack_require__("./node_modules/rxjs/util/AnimationFrame.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AnimationFrameAction = (function (_super) {
    __extends(AnimationFrameAction, _super);
    function AnimationFrameAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
    }
    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If an animation frame has already been requested, don't request another
        // one. If an animation frame hasn't been requested yet, request one. Return
        // the current animation frame request id.
        return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));
    };
    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested animation frame and
        // set the scheduled flag to undefined so the next AnimationFrameAction will
        // request its own.
        if (scheduler.actions.length === 0) {
            AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AnimationFrameAction;
}(AsyncAction_1.AsyncAction));
exports.AnimationFrameAction = AnimationFrameAction;
//# sourceMappingURL=AnimationFrameAction.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/AnimationFrameScheduler.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = __webpack_require__("./node_modules/rxjs/scheduler/AsyncScheduler.js");
var AnimationFrameScheduler = (function (_super) {
    __extends(AnimationFrameScheduler, _super);
    function AnimationFrameScheduler() {
        _super.apply(this, arguments);
    }
    AnimationFrameScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AnimationFrameScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.AnimationFrameScheduler = AnimationFrameScheduler;
//# sourceMappingURL=AnimationFrameScheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/AsapAction.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Immediate_1 = __webpack_require__("./node_modules/rxjs/util/Immediate.js");
var AsyncAction_1 = __webpack_require__("./node_modules/rxjs/scheduler/AsyncAction.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsapAction = (function (_super) {
    __extends(AsapAction, _super);
    function AsapAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If a microtask has already been scheduled, don't schedule another
        // one. If a microtask hasn't been scheduled yet, schedule one now. Return
        // the current scheduled microtask id.
        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested microtask and
        // set the scheduled flag to undefined so the next AsapAction will schedule
        // its own.
        if (scheduler.actions.length === 0) {
            Immediate_1.Immediate.clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AsapAction;
}(AsyncAction_1.AsyncAction));
exports.AsapAction = AsapAction;
//# sourceMappingURL=AsapAction.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/AsapScheduler.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = __webpack_require__("./node_modules/rxjs/scheduler/AsyncScheduler.js");
var AsapScheduler = (function (_super) {
    __extends(AsapScheduler, _super);
    function AsapScheduler() {
        _super.apply(this, arguments);
    }
    AsapScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.AsapScheduler = AsapScheduler;
//# sourceMappingURL=AsapScheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/AsyncAction.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__("./node_modules/rxjs/util/root.js");
var Action_1 = __webpack_require__("./node_modules/rxjs/scheduler/Action.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsyncAction = (function (_super) {
    __extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
        this.pending = false;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (this.closed) {
            return this;
        }
        // Always replace the current state with the new state.
        this.state = state;
        // Set the pending flag indicating that this action has been scheduled, or
        // has recursively rescheduled itself.
        this.pending = true;
        var id = this.id;
        var scheduler = this.scheduler;
        //
        // Important implementation note:
        //
        // Actions only execute once by default, unless rescheduled from within the
        // scheduled callback. This allows us to implement single and repeat
        // actions via the same code path, without adding API surface area, as well
        // as mimic traditional recursion but across asynchronous boundaries.
        //
        // However, JS runtimes and timers distinguish between intervals achieved by
        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
        // serial `setTimeout` calls can be individually delayed, which delays
        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
        // guarantee the interval callback will be invoked more precisely to the
        // interval period, regardless of load.
        //
        // Therefore, we use `setInterval` to schedule single and repeat actions.
        // If the action reschedules itself with the same delay, the interval is not
        // canceled. If the action doesn't reschedule, or reschedules with a
        // different delay, the interval will be canceled after scheduled callback
        // execution.
        //
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.delay = delay;
        // If this action has already an async Id, don't request a new one.
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If this action is rescheduled with the same delay time, don't clear the interval id.
        if (delay !== null && this.delay === delay) {
            return id;
        }
        // Otherwise, if the action's delay time is different from the current delay,
        // clear the interval id
        return root_1.root.clearInterval(id) && undefined || undefined;
    };
    /**
     * Immediately executes this action and the `work` it contains.
     * @return {any}
     */
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            // Dequeue if the action didn't reschedule itself. Don't call
            // unsubscribe(), because the action could reschedule later.
            // For example:
            // ```
            // scheduler.schedule(function doWork(counter) {
            //   /* ... I'm a busy worker bee ... */
            //   var originalAction = this;
            //   /* wait 100ms before rescheduling the action */
            //   setTimeout(function () {
            //     originalAction.schedule(counter + 1);
            //   }, 100);
            // }, 1000);
            // ```
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.delay = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
    };
    return AsyncAction;
}(Action_1.Action));
exports.AsyncAction = AsyncAction;
//# sourceMappingURL=AsyncAction.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/AsyncScheduler.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Scheduler_1 = __webpack_require__("./node_modules/rxjs/Scheduler.js");
var AsyncScheduler = (function (_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler() {
        _super.apply(this, arguments);
        this.actions = [];
        /**
         * A flag to indicate whether the Scheduler is currently executing a batch of
         * queued actions.
         * @type {boolean}
         */
        this.active = false;
        /**
         * An internal ID used to track the latest asynchronous task such as those
         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
         * others.
         * @type {any}
         */
        this.scheduled = undefined;
    }
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift()); // exhaust the scheduler queue
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler_1.Scheduler));
exports.AsyncScheduler = AsyncScheduler;
//# sourceMappingURL=AsyncScheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/QueueAction.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = __webpack_require__("./node_modules/rxjs/scheduler/AsyncAction.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var QueueAction = (function (_super) {
    __extends(QueueAction, _super);
    function QueueAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Otherwise flush the scheduler starting with this action.
        return scheduler.flush(this);
    };
    return QueueAction;
}(AsyncAction_1.AsyncAction));
exports.QueueAction = QueueAction;
//# sourceMappingURL=QueueAction.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/QueueScheduler.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = __webpack_require__("./node_modules/rxjs/scheduler/AsyncScheduler.js");
var QueueScheduler = (function (_super) {
    __extends(QueueScheduler, _super);
    function QueueScheduler() {
        _super.apply(this, arguments);
    }
    return QueueScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.QueueScheduler = QueueScheduler;
//# sourceMappingURL=QueueScheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/VirtualTimeScheduler.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = __webpack_require__("./node_modules/rxjs/scheduler/AsyncAction.js");
var AsyncScheduler_1 = __webpack_require__("./node_modules/rxjs/scheduler/AsyncScheduler.js");
var VirtualTimeScheduler = (function (_super) {
    __extends(VirtualTimeScheduler, _super);
    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
        var _this = this;
        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }
        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }
        _super.call(this, SchedulerAction, function () { return _this.frame; });
        this.maxFrames = maxFrames;
        this.frame = 0;
        this.index = -1;
    }
    /**
     * Prompt the Scheduler to execute all of its queued actions, therefore
     * clearing its queue.
     * @return {void}
     */
    VirtualTimeScheduler.prototype.flush = function () {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error, action;
        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        }
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    VirtualTimeScheduler.frameTimeFactor = 10;
    return VirtualTimeScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.VirtualTimeScheduler = VirtualTimeScheduler;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var VirtualAction = (function (_super) {
    __extends(VirtualAction, _super);
    function VirtualAction(scheduler, work, index) {
        if (index === void 0) { index = scheduler.index += 1; }
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
        this.index = index;
        this.index = scheduler.index = index;
    }
    VirtualAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        return !this.id ?
            _super.prototype.schedule.call(this, state, delay) : this.add(new VirtualAction(this.scheduler, this.work)).schedule(state, delay);
    };
    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction.sortActions);
        return true;
    };
    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        return undefined;
    };
    VirtualAction.sortActions = function (a, b) {
        if (a.delay === b.delay) {
            if (a.index === b.index) {
                return 0;
            }
            else if (a.index > b.index) {
                return 1;
            }
            else {
                return -1;
            }
        }
        else if (a.delay > b.delay) {
            return 1;
        }
        else {
            return -1;
        }
    };
    return VirtualAction;
}(AsyncAction_1.AsyncAction));
exports.VirtualAction = VirtualAction;
//# sourceMappingURL=VirtualTimeScheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/animationFrame.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var AnimationFrameAction_1 = __webpack_require__("./node_modules/rxjs/scheduler/AnimationFrameAction.js");
var AnimationFrameScheduler_1 = __webpack_require__("./node_modules/rxjs/scheduler/AnimationFrameScheduler.js");
exports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);
//# sourceMappingURL=animationFrame.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/asap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var AsapAction_1 = __webpack_require__("./node_modules/rxjs/scheduler/AsapAction.js");
var AsapScheduler_1 = __webpack_require__("./node_modules/rxjs/scheduler/AsapScheduler.js");
exports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);
//# sourceMappingURL=asap.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/async.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var AsyncAction_1 = __webpack_require__("./node_modules/rxjs/scheduler/AsyncAction.js");
var AsyncScheduler_1 = __webpack_require__("./node_modules/rxjs/scheduler/AsyncScheduler.js");
exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
//# sourceMappingURL=async.js.map

/***/ }),

/***/ "./node_modules/rxjs/scheduler/queue.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var QueueAction_1 = __webpack_require__("./node_modules/rxjs/scheduler/QueueAction.js");
var QueueScheduler_1 = __webpack_require__("./node_modules/rxjs/scheduler/QueueScheduler.js");
exports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
//# sourceMappingURL=queue.js.map

/***/ }),

/***/ "./node_modules/rxjs/testing/ColdObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
var SubscriptionLoggable_1 = __webpack_require__("./node_modules/rxjs/testing/SubscriptionLoggable.js");
var applyMixins_1 = __webpack_require__("./node_modules/rxjs/util/applyMixins.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ColdObservable = (function (_super) {
    __extends(ColdObservable, _super);
    function ColdObservable(messages, scheduler) {
        _super.call(this, function (subscriber) {
            var observable = this;
            var index = observable.logSubscribedFrame();
            subscriber.add(new Subscription_1.Subscription(function () {
                observable.logUnsubscribedFrame(index);
            }));
            observable.scheduleMessages(subscriber);
            return subscriber;
        });
        this.messages = messages;
        this.subscriptions = [];
        this.scheduler = scheduler;
    }
    ColdObservable.prototype.scheduleMessages = function (subscriber) {
        var messagesLength = this.messages.length;
        for (var i = 0; i < messagesLength; i++) {
            var message = this.messages[i];
            subscriber.add(this.scheduler.schedule(function (_a) {
                var message = _a.message, subscriber = _a.subscriber;
                message.notification.observe(subscriber);
            }, message.frame, { message: message, subscriber: subscriber }));
        }
    };
    return ColdObservable;
}(Observable_1.Observable));
exports.ColdObservable = ColdObservable;
applyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);
//# sourceMappingURL=ColdObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/testing/HotObservable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var Subscription_1 = __webpack_require__("./node_modules/rxjs/Subscription.js");
var SubscriptionLoggable_1 = __webpack_require__("./node_modules/rxjs/testing/SubscriptionLoggable.js");
var applyMixins_1 = __webpack_require__("./node_modules/rxjs/util/applyMixins.js");
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var HotObservable = (function (_super) {
    __extends(HotObservable, _super);
    function HotObservable(messages, scheduler) {
        _super.call(this);
        this.messages = messages;
        this.subscriptions = [];
        this.scheduler = scheduler;
    }
    HotObservable.prototype._subscribe = function (subscriber) {
        var subject = this;
        var index = subject.logSubscribedFrame();
        subscriber.add(new Subscription_1.Subscription(function () {
            subject.logUnsubscribedFrame(index);
        }));
        return _super.prototype._subscribe.call(this, subscriber);
    };
    HotObservable.prototype.setup = function () {
        var subject = this;
        var messagesLength = subject.messages.length;
        /* tslint:disable:no-var-keyword */
        for (var i = 0; i < messagesLength; i++) {
            (function () {
                var message = subject.messages[i];
                /* tslint:enable */
                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);
            })();
        }
    };
    return HotObservable;
}(Subject_1.Subject));
exports.HotObservable = HotObservable;
applyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);
//# sourceMappingURL=HotObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/testing/SubscriptionLog.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var SubscriptionLog = (function () {
    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {
        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }
        this.subscribedFrame = subscribedFrame;
        this.unsubscribedFrame = unsubscribedFrame;
    }
    return SubscriptionLog;
}());
exports.SubscriptionLog = SubscriptionLog;
//# sourceMappingURL=SubscriptionLog.js.map

/***/ }),

/***/ "./node_modules/rxjs/testing/SubscriptionLoggable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var SubscriptionLog_1 = __webpack_require__("./node_modules/rxjs/testing/SubscriptionLog.js");
var SubscriptionLoggable = (function () {
    function SubscriptionLoggable() {
        this.subscriptions = [];
    }
    SubscriptionLoggable.prototype.logSubscribedFrame = function () {
        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));
        return this.subscriptions.length - 1;
    };
    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {
        var subscriptionLogs = this.subscriptions;
        var oldSubscriptionLog = subscriptionLogs[index];
        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());
    };
    return SubscriptionLoggable;
}());
exports.SubscriptionLoggable = SubscriptionLoggable;
//# sourceMappingURL=SubscriptionLoggable.js.map

/***/ }),

/***/ "./node_modules/rxjs/testing/TestScheduler.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var Notification_1 = __webpack_require__("./node_modules/rxjs/Notification.js");
var ColdObservable_1 = __webpack_require__("./node_modules/rxjs/testing/ColdObservable.js");
var HotObservable_1 = __webpack_require__("./node_modules/rxjs/testing/HotObservable.js");
var SubscriptionLog_1 = __webpack_require__("./node_modules/rxjs/testing/SubscriptionLog.js");
var VirtualTimeScheduler_1 = __webpack_require__("./node_modules/rxjs/scheduler/VirtualTimeScheduler.js");
var defaultMaxFrame = 750;
var TestScheduler = (function (_super) {
    __extends(TestScheduler, _super);
    function TestScheduler(assertDeepEqual) {
        _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);
        this.assertDeepEqual = assertDeepEqual;
        this.hotObservables = [];
        this.coldObservables = [];
        this.flushTests = [];
    }
    TestScheduler.prototype.createTime = function (marbles) {
        var indexOf = marbles.indexOf('|');
        if (indexOf === -1) {
            throw new Error('marble diagram for time should have a completion marker "|"');
        }
        return indexOf * TestScheduler.frameTimeFactor;
    };
    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {
        if (marbles.indexOf('^') !== -1) {
            throw new Error('cold observable cannot have subscription offset "^"');
        }
        if (marbles.indexOf('!') !== -1) {
            throw new Error('cold observable cannot have unsubscription marker "!"');
        }
        var messages = TestScheduler.parseMarbles(marbles, values, error);
        var cold = new ColdObservable_1.ColdObservable(messages, this);
        this.coldObservables.push(cold);
        return cold;
    };
    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {
        if (marbles.indexOf('!') !== -1) {
            throw new Error('hot observable cannot have unsubscription marker "!"');
        }
        var messages = TestScheduler.parseMarbles(marbles, values, error);
        var subject = new HotObservable_1.HotObservable(messages, this);
        this.hotObservables.push(subject);
        return subject;
    };
    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {
        var _this = this;
        var messages = [];
        observable.subscribe(function (value) {
            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });
        }, function (err) {
            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });
        }, function () {
            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });
        });
        return messages;
    };
    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {
        var _this = this;
        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }
        var actual = [];
        var flushTest = { actual: actual, ready: false };
        var unsubscriptionFrame = TestScheduler
            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;
        var subscription;
        this.schedule(function () {
            subscription = observable.subscribe(function (x) {
                var value = x;
                // Support Observable-of-Observables
                if (x instanceof Observable_1.Observable) {
                    value = _this.materializeInnerObservable(value, _this.frame);
                }
                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });
            }, function (err) {
                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });
            }, function () {
                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });
            });
        }, 0);
        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);
        }
        this.flushTests.push(flushTest);
        return {
            toBe: function (marbles, values, errorValue) {
                flushTest.ready = true;
                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);
            }
        };
    };
    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {
        var flushTest = { actual: actualSubscriptionLogs, ready: false };
        this.flushTests.push(flushTest);
        return {
            toBe: function (marbles) {
                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;
                flushTest.ready = true;
                flushTest.expected = marblesArray.map(function (marbles) {
                    return TestScheduler.parseMarblesAsSubscriptions(marbles);
                });
            }
        };
    };
    TestScheduler.prototype.flush = function () {
        var hotObservables = this.hotObservables;
        while (hotObservables.length > 0) {
            hotObservables.shift().setup();
        }
        _super.prototype.flush.call(this);
        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });
        while (readyFlushTests.length > 0) {
            var test = readyFlushTests.shift();
            this.assertDeepEqual(test.actual, test.expected);
        }
    };
    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {
        if (typeof marbles !== 'string') {
            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);
        }
        var len = marbles.length;
        var groupStart = -1;
        var subscriptionFrame = Number.POSITIVE_INFINITY;
        var unsubscriptionFrame = Number.POSITIVE_INFINITY;
        for (var i = 0; i < len; i++) {
            var frame = i * this.frameTimeFactor;
            var c = marbles[i];
            switch (c) {
                case '-':
                case ' ':
                    break;
                case '(':
                    groupStart = frame;
                    break;
                case ')':
                    groupStart = -1;
                    break;
                case '^':
                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {
                        throw new Error('found a second subscription point \'^\' in a ' +
                            'subscription marble diagram. There can only be one.');
                    }
                    subscriptionFrame = groupStart > -1 ? groupStart : frame;
                    break;
                case '!':
                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
                        throw new Error('found a second subscription point \'^\' in a ' +
                            'subscription marble diagram. There can only be one.');
                    }
                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;
                    break;
                default:
                    throw new Error('there can only be \'^\' and \'!\' markers in a ' +
                        'subscription marble diagram. Found instead \'' + c + '\'.');
            }
        }
        if (unsubscriptionFrame < 0) {
            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);
        }
        else {
            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);
        }
    };
    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {
        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }
        if (marbles.indexOf('!') !== -1) {
            throw new Error('conventional marble diagrams cannot have the ' +
                'unsubscription marker "!"');
        }
        var len = marbles.length;
        var testMessages = [];
        var subIndex = marbles.indexOf('^');
        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);
        var getValue = typeof values !== 'object' ?
            function (x) { return x; } :
            function (x) {
                // Support Observable-of-Observables
                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {
                    return values[x].messages;
                }
                return values[x];
            };
        var groupStart = -1;
        for (var i = 0; i < len; i++) {
            var frame = i * this.frameTimeFactor + frameOffset;
            var notification = void 0;
            var c = marbles[i];
            switch (c) {
                case '-':
                case ' ':
                    break;
                case '(':
                    groupStart = frame;
                    break;
                case ')':
                    groupStart = -1;
                    break;
                case '|':
                    notification = Notification_1.Notification.createComplete();
                    break;
                case '^':
                    break;
                case '#':
                    notification = Notification_1.Notification.createError(errorValue || 'error');
                    break;
                default:
                    notification = Notification_1.Notification.createNext(getValue(c));
                    break;
            }
            if (notification) {
                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });
            }
        }
        return testMessages;
    };
    return TestScheduler;
}(VirtualTimeScheduler_1.VirtualTimeScheduler));
exports.TestScheduler = TestScheduler;
//# sourceMappingURL=TestScheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/AnimationFrame.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__("./node_modules/rxjs/util/root.js");
var RequestAnimationFrameDefinition = (function () {
    function RequestAnimationFrameDefinition(root) {
        if (root.requestAnimationFrame) {
            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);
            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);
        }
        else if (root.mozRequestAnimationFrame) {
            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);
            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);
        }
        else if (root.webkitRequestAnimationFrame) {
            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);
            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);
        }
        else if (root.msRequestAnimationFrame) {
            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);
            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);
        }
        else if (root.oRequestAnimationFrame) {
            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);
            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);
        }
        else {
            this.cancelAnimationFrame = root.clearTimeout.bind(root);
            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };
        }
    }
    return RequestAnimationFrameDefinition;
}());
exports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;
exports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);
//# sourceMappingURL=AnimationFrame.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/ArgumentOutOfRangeError.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an element was queried at a certain index of an
 * Observable, but no such index or position exists in that sequence.
 *
 * @see {@link elementAt}
 * @see {@link take}
 * @see {@link takeLast}
 *
 * @class ArgumentOutOfRangeError
 */
var ArgumentOutOfRangeError = (function (_super) {
    __extends(ArgumentOutOfRangeError, _super);
    function ArgumentOutOfRangeError() {
        var err = _super.call(this, 'argument out of range');
        this.name = err.name = 'ArgumentOutOfRangeError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return ArgumentOutOfRangeError;
}(Error));
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;
//# sourceMappingURL=ArgumentOutOfRangeError.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/FastMap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FastMap = (function () {
    function FastMap() {
        this.values = {};
    }
    FastMap.prototype.delete = function (key) {
        this.values[key] = null;
        return true;
    };
    FastMap.prototype.set = function (key, value) {
        this.values[key] = value;
        return this;
    };
    FastMap.prototype.get = function (key) {
        return this.values[key];
    };
    FastMap.prototype.forEach = function (cb, thisArg) {
        var values = this.values;
        for (var key in values) {
            if (values.hasOwnProperty(key) && values[key] !== null) {
                cb.call(thisArg, values[key], key);
            }
        }
    };
    FastMap.prototype.clear = function () {
        this.values = {};
    };
    return FastMap;
}());
exports.FastMap = FastMap;
//# sourceMappingURL=FastMap.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/Immediate.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
Some credit for this helper goes to http://github.com/YuzuJS/setImmediate
*/

var root_1 = __webpack_require__("./node_modules/rxjs/util/root.js");
var ImmediateDefinition = (function () {
    function ImmediateDefinition(root) {
        this.root = root;
        if (root.setImmediate && typeof root.setImmediate === 'function') {
            this.setImmediate = root.setImmediate.bind(root);
            this.clearImmediate = root.clearImmediate.bind(root);
        }
        else {
            this.nextHandle = 1;
            this.tasksByHandle = {};
            this.currentlyRunningATask = false;
            // Don't get fooled by e.g. browserify environments.
            if (this.canUseProcessNextTick()) {
                // For Node.js before 0.9
                this.setImmediate = this.createProcessNextTickSetImmediate();
            }
            else if (this.canUsePostMessage()) {
                // For non-IE10 modern browsers
                this.setImmediate = this.createPostMessageSetImmediate();
            }
            else if (this.canUseMessageChannel()) {
                // For web workers, where supported
                this.setImmediate = this.createMessageChannelSetImmediate();
            }
            else if (this.canUseReadyStateChange()) {
                // For IE 6–8
                this.setImmediate = this.createReadyStateChangeSetImmediate();
            }
            else {
                // For older browsers
                this.setImmediate = this.createSetTimeoutSetImmediate();
            }
            var ci = function clearImmediate(handle) {
                delete clearImmediate.instance.tasksByHandle[handle];
            };
            ci.instance = this;
            this.clearImmediate = ci;
        }
    }
    ImmediateDefinition.prototype.identify = function (o) {
        return this.root.Object.prototype.toString.call(o);
    };
    ImmediateDefinition.prototype.canUseProcessNextTick = function () {
        return this.identify(this.root.process) === '[object process]';
    };
    ImmediateDefinition.prototype.canUseMessageChannel = function () {
        return Boolean(this.root.MessageChannel);
    };
    ImmediateDefinition.prototype.canUseReadyStateChange = function () {
        var document = this.root.document;
        return Boolean(document && 'onreadystatechange' in document.createElement('script'));
    };
    ImmediateDefinition.prototype.canUsePostMessage = function () {
        var root = this.root;
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `root.postMessage` means something completely different and can't be used for this purpose.
        if (root.postMessage && !root.importScripts) {
            var postMessageIsAsynchronous_1 = true;
            var oldOnMessage = root.onmessage;
            root.onmessage = function () {
                postMessageIsAsynchronous_1 = false;
            };
            root.postMessage('', '*');
            root.onmessage = oldOnMessage;
            return postMessageIsAsynchronous_1;
        }
        return false;
    };
    // This function accepts the same arguments as setImmediate, but
    // returns a function that requires no arguments.
    ImmediateDefinition.prototype.partiallyApplied = function (handler) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var fn = function result() {
            var _a = result, handler = _a.handler, args = _a.args;
            if (typeof handler === 'function') {
                handler.apply(undefined, args);
            }
            else {
                (new Function('' + handler))();
            }
        };
        fn.handler = handler;
        fn.args = args;
        return fn;
    };
    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {
        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);
        return this.nextHandle++;
    };
    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {
        var fn = function setImmediate() {
            var instance = setImmediate.instance;
            var handle = instance.addFromSetImmediateArguments(arguments);
            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));
            return handle;
        };
        fn.instance = this;
        return fn;
    };
    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
        var root = this.root;
        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';
        var onGlobalMessage = function globalMessageHandler(event) {
            var instance = globalMessageHandler.instance;
            if (event.source === root &&
                typeof event.data === 'string' &&
                event.data.indexOf(messagePrefix) === 0) {
                instance.runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };
        onGlobalMessage.instance = this;
        root.addEventListener('message', onGlobalMessage, false);
        var fn = function setImmediate() {
            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;
            var handle = instance.addFromSetImmediateArguments(arguments);
            instance.root.postMessage(messagePrefix + handle, '*');
            return handle;
        };
        fn.instance = this;
        fn.messagePrefix = messagePrefix;
        return fn;
    };
    ImmediateDefinition.prototype.runIfPresent = function (handle) {
        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'
        // So if we're currently running a task, we'll need to delay this invocation.
        if (this.currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // 'too much recursion' error.
            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);
        }
        else {
            var task = this.tasksByHandle[handle];
            if (task) {
                this.currentlyRunningATask = true;
                try {
                    task();
                }
                finally {
                    this.clearImmediate(handle);
                    this.currentlyRunningATask = false;
                }
            }
        }
    };
    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {
        var _this = this;
        var channel = new this.root.MessageChannel();
        channel.port1.onmessage = function (event) {
            var handle = event.data;
            _this.runIfPresent(handle);
        };
        var fn = function setImmediate() {
            var _a = setImmediate, channel = _a.channel, instance = _a.instance;
            var handle = instance.addFromSetImmediateArguments(arguments);
            channel.port2.postMessage(handle);
            return handle;
        };
        fn.channel = channel;
        fn.instance = this;
        return fn;
    };
    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {
        var fn = function setImmediate() {
            var instance = setImmediate.instance;
            var root = instance.root;
            var doc = root.document;
            var html = doc.documentElement;
            var handle = instance.addFromSetImmediateArguments(arguments);
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement('script');
            script.onreadystatechange = function () {
                instance.runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
            return handle;
        };
        fn.instance = this;
        return fn;
    };
    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {
        var fn = function setImmediate() {
            var instance = setImmediate.instance;
            var handle = instance.addFromSetImmediateArguments(arguments);
            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);
            return handle;
        };
        fn.instance = this;
        return fn;
    };
    return ImmediateDefinition;
}());
exports.ImmediateDefinition = ImmediateDefinition;
exports.Immediate = new ImmediateDefinition(root_1.root);
//# sourceMappingURL=Immediate.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/Map.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__("./node_modules/rxjs/util/root.js");
var MapPolyfill_1 = __webpack_require__("./node_modules/rxjs/util/MapPolyfill.js");
exports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();
//# sourceMappingURL=Map.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/MapPolyfill.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var MapPolyfill = (function () {
    function MapPolyfill() {
        this.size = 0;
        this._values = [];
        this._keys = [];
    }
    MapPolyfill.prototype.get = function (key) {
        var i = this._keys.indexOf(key);
        return i === -1 ? undefined : this._values[i];
    };
    MapPolyfill.prototype.set = function (key, value) {
        var i = this._keys.indexOf(key);
        if (i === -1) {
            this._keys.push(key);
            this._values.push(value);
            this.size++;
        }
        else {
            this._values[i] = value;
        }
        return this;
    };
    MapPolyfill.prototype.delete = function (key) {
        var i = this._keys.indexOf(key);
        if (i === -1) {
            return false;
        }
        this._values.splice(i, 1);
        this._keys.splice(i, 1);
        this.size--;
        return true;
    };
    MapPolyfill.prototype.clear = function () {
        this._keys.length = 0;
        this._values.length = 0;
        this.size = 0;
    };
    MapPolyfill.prototype.forEach = function (cb, thisArg) {
        for (var i = 0; i < this.size; i++) {
            cb.call(thisArg, this._values[i], this._keys[i]);
        }
    };
    return MapPolyfill;
}());
exports.MapPolyfill = MapPolyfill;
//# sourceMappingURL=MapPolyfill.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/Set.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__("./node_modules/rxjs/util/root.js");
function minimalSetImpl() {
    // THIS IS NOT a full impl of Set, this is just the minimum
    // bits of functionality we need for this library.
    return (function () {
        function MinimalSet() {
            this._values = [];
        }
        MinimalSet.prototype.add = function (value) {
            if (!this.has(value)) {
                this._values.push(value);
            }
        };
        MinimalSet.prototype.has = function (value) {
            return this._values.indexOf(value) !== -1;
        };
        Object.defineProperty(MinimalSet.prototype, "size", {
            get: function () {
                return this._values.length;
            },
            enumerable: true,
            configurable: true
        });
        MinimalSet.prototype.clear = function () {
            this._values.length = 0;
        };
        return MinimalSet;
    }());
}
exports.minimalSetImpl = minimalSetImpl;
exports.Set = root_1.root.Set || minimalSetImpl();
//# sourceMappingURL=Set.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/TimeoutError.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when duetime elapses.
 *
 * @see {@link timeout}
 *
 * @class TimeoutError
 */
var TimeoutError = (function (_super) {
    __extends(TimeoutError, _super);
    function TimeoutError() {
        var err = _super.call(this, 'Timeout has occurred');
        this.name = err.name = 'TimeoutError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return TimeoutError;
}(Error));
exports.TimeoutError = TimeoutError;
//# sourceMappingURL=TimeoutError.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/applyMixins.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function applyMixins(derivedCtor, baseCtors) {
    for (var i = 0, len = baseCtors.length; i < len; i++) {
        var baseCtor = baseCtors[i];
        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);
        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {
            var name_1 = propertyKeys[j];
            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];
        }
    }
}
exports.applyMixins = applyMixins;
//# sourceMappingURL=applyMixins.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/assign.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__("./node_modules/rxjs/util/root.js");
function assignImpl(target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    var len = sources.length;
    for (var i = 0; i < len; i++) {
        var source = sources[i];
        for (var k in source) {
            if (source.hasOwnProperty(k)) {
                target[k] = source[k];
            }
        }
    }
    return target;
}
exports.assignImpl = assignImpl;
;
function getAssign(root) {
    return root.Object.assign || assignImpl;
}
exports.getAssign = getAssign;
exports.assign = getAssign(root_1.root);
//# sourceMappingURL=assign.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/isDate.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isDate(value) {
    return value instanceof Date && !isNaN(+value);
}
exports.isDate = isDate;
//# sourceMappingURL=isDate.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/isNumeric.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isArray_1 = __webpack_require__("./node_modules/rxjs/util/isArray.js");
function isNumeric(val) {
    // parseFloat NaNs numeric-cast false positives (null|true|false|"")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    // adding 1 corrects loss of precision from parseFloat (#15100)
    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;
}
exports.isNumeric = isNumeric;
;
//# sourceMappingURL=isNumeric.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/noop.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* tslint:disable:no-empty */
function noop() { }
exports.noop = noop;
//# sourceMappingURL=noop.js.map

/***/ }),

/***/ "./node_modules/rxjs/util/not.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function not(pred, thisArg) {
    function notPred() {
        return !(notPred.pred.apply(notPred.thisArg, arguments));
    }
    notPred.pred = pred;
    notPred.thisArg = thisArg;
    return notPred;
}
exports.not = not;
//# sourceMappingURL=not.js.map

/***/ }),

/***/ "./src/app/CORSBrowserXHr.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/index.js");
var CORSBrowserXHr = (function (_super) {
    __extends(CORSBrowserXHr, _super);
    function CORSBrowserXHr() {
        _super.apply(this, arguments);
    }
    CORSBrowserXHr.prototype.build = function () {
        var x = _super.prototype.build.call(this);
        x['withCredentials'] = true;
        return x;
    };
    CORSBrowserXHr = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], CORSBrowserXHr);
    return CORSBrowserXHr;
}(http_1.BrowserXhr));
exports.CORSBrowserXHr = CORSBrowserXHr;


/***/ }),

/***/ "./src/app/Configuration/appSettings.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.AppSettings = {
    'apiSettings': { "apiURL_BASE": "http://localhost:17752" },
    'signalrEndPoint': 'http://win2012r2-d4b5d.dynamic.wealth.cloud.td.com:5985/signalr'
};
exports.AppNotificationsMSG = {
    'deletionQuestionMsg': 'Do you  really want to delete the record ?',
    'deletionStepQuestion': 'Do you  really want to delete the step ?',
    'deletionStepConfirmation': 'Step has been deleted!',
    'deletionTitle': 'Delete',
    'deletionConfirmationMsg': 'Record successfully deleted !',
    'saveConfirmedMsg': 'Record successfully updated !',
    'importConfirmedMsg': 'Import has been completed successfully !',
    'insertMSG': 'Record inserted successfully',
    'notificationTitle': 'Notification',
    'errorTitle': 'Error',
    'warningTitle': 'Warning',
    'apiMsg': {
        'apiDelete': 'API - deletion error!',
        'apiGetUserInfo': 'API - get user information failed !',
        'apiGetSchematicDetails': 'API - get schematic Details failed !'
    },
    'deactivateSchematicMsg': 'Do you  really want to deactivate schematic ?',
    'activateSchematicMsg': 'Do you  really want to activate schematic ?',
    'schematicNameChangedMsg': 'Do you  really want to change schematic name ?',
    'schematicLowerStepQuestion': 'Do you want to move the step down ?',
    'schematicHigherStepQuestion': 'Do you want to move the step up ?',
    'jsonEditPlugin': {
        'invalidFormat': 'Your JSON file has an invalid format',
        'keyValueRequired': 'Both key and value are required',
        'propertyExists': 'The property already exists:',
        'nodeProcessTitle': 'Process Setting',
        'nodeDocumentTitle': 'Document Setting',
        'nodeColumnSettingsTitle': 'Column Mapping',
        'jsonUpdate': 'JSON updated successfully' },
    'etfCreationRedemption': {
        'deletePendingTradesTitle': 'Confirm Delete',
        'deletePendingTradesMsg': 'Please note, all pending trades will be deleted. Do you want to proceed anyway ?',
        'fullResetTitle': 'Confirm Reset',
        'fullResetMsg': 'Warning: all previous trading activities will be fully reset with no option to undo. Do you want to proceed anyway ?'
    }
};


/***/ }),

/***/ "./src/app/Datahub/assets/default.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/Datahub/assets/theme_standard.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/Datahub/pipes/calendarDate.pipe.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var calendarDateFormatter_provider_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarHelpers/calendarDateFormatter.provider.ts");
var fns_1 = __webpack_require__("./src/app/Datahub/routes/home/fns.ts");
var CalendarDate = (function () {
    function CalendarDate(dateFormatter, locale) {
        this.dateFormatter = dateFormatter;
        this.locale = locale;
    }
    CalendarDate.prototype.transform = function (date, method, locale) {
        if (locale === void 0) { locale = this.locale; }
        var fnc = this.dateFormatter[method];
        var result = fnc({ date: date, locale: locale });
        if ((method !== "monthViewDayNumber") && (method !== "monthViewColumnHeader")) {
            var tmp = result;
            var pastDate = fns_1.fns.removeWeeks(fns_1.fns.parse(date), 2);
            var postDate = fns_1.fns.addWeeks(fns_1.fns.parse(date), 2);
            fns_1.fns.setCurrentDate(pastDate);
            var result1 = fnc(pastDate, locale);
            fns_1.fns.setCurrentDate(postDate);
            var result2 = fnc(postDate, locale);
            if (result1 !== tmp) {
                result = result1 + "---" + tmp;
            }
            if (result2 !== tmp) {
                result = result + "---" + result2;
            }
        }
        return result;
    };
    CalendarDate = __decorate([
        core_1.Pipe({
            name: 'calendarDate'
        }),
        __param(1, core_1.Inject(core_1.LOCALE_ID)), 
        __metadata('design:paramtypes', [(typeof (_a = typeof calendarDateFormatter_provider_1.CalendarDateFormatter !== 'undefined' && calendarDateFormatter_provider_1.CalendarDateFormatter) === 'function' && _a) || Object, String])
    ], CalendarDate);
    return CalendarDate;
    var _a;
}());
exports.CalendarDate = CalendarDate;


/***/ }),

/***/ "./src/app/Datahub/pipes/calendarEventTitle.pipe.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
//import { CalendarEvent } from 'calendar-utils';
var calendarEventTitle_provider_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarHelpers/calendarEventTitle.provider.ts");
var CalendarEventTitle = (function () {
    function CalendarEventTitle(calendarEventTitle) {
        this.calendarEventTitle = calendarEventTitle;
    }
    CalendarEventTitle.prototype.transform = function (event, titleType) {
        return this.calendarEventTitle[titleType](event);
    };
    CalendarEventTitle = __decorate([
        core_1.Pipe({
            name: 'calendarEventTitle'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof calendarEventTitle_provider_1.CalendarEventTitle !== 'undefined' && calendarEventTitle_provider_1.CalendarEventTitle) === 'function' && _a) || Object])
    ], CalendarEventTitle);
    return CalendarEventTitle;
    var _a;
}());
exports.CalendarEventTitle = CalendarEventTitle;


/***/ }),

/***/ "./src/app/Datahub/pipes/formatGridColumn.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var localizationService_1 = __webpack_require__("./src/app/ReusableServices/localizationService.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var _ = __webpack_require__("./node_modules/lodash/lodash.js");
var FormatGridColumnPipe = (function () {
    function FormatGridColumnPipe(localization) {
        this.localization = localization;
    }
    FormatGridColumnPipe.prototype.transform = function (value, args) {
        if (!(args)) {
            return value;
        }
        if (value == null) {
            return;
        }
        var output;
        var locale = this.localization.selectedLanguage.LangCode;
        var tokens;
        var digitalInfo = [];
        var formatType = args["format"].toLowerCase();
        if (formatType === "select" || formatType === "font-awesome") {
            tokens = args["pattern"];
        }
        else {
            tokens = args["pattern"].split(':');
        }
        switch (formatType) {
            case "date":
                if (isNaN(Date.parse(value))) {
                    return "";
                }
                var datePipe = new common_1.DatePipe(locale);
                output = datePipe.transform(genericfunctions_1.toUTCDate(new Date(value)), tokens[0]);
                break;
            case "number":
                if (isNaN(value)) {
                    return "";
                }
                digitalInfo = this.getDigitInfo(tokens[0]);
                var numPipe = new common_1.DecimalPipe(locale);
                var result = numPipe.transform(parseFloat(value), tokens[0]);
                output = this.addTrailingZeros(result, digitalInfo[2]);
                break;
            case "percent":
                if (isNaN(value)) {
                    return "";
                }
                digitalInfo = this.getDigitInfo(tokens[0]);
                var percentPipe = new common_1.PercentPipe(locale);
                result = percentPipe.transform(parseFloat(value), tokens[0]);
                output = this.addTrailingZeros(result, digitalInfo[2]);
                break;
            case "currency":
                if (isNaN(value)) {
                    return "";
                }
                digitalInfo = this.getDigitInfo(tokens[2]);
                var currencyPipe = new common_1.CurrencyPipe(locale);
                result = currencyPipe.transform(parseFloat(value), tokens[0], tokens[1], tokens[2]);
                output = this.addTrailingZeros(result, digitalInfo[2]);
                break;
            case "select":
                var selectPipe = new common_1.I18nSelectPipe();
                output = selectPipe.transform(String(value), tokens);
                break;
            case "font-awesome":
                var selectPipe = new common_1.I18nSelectPipe();
                output = selectPipe.transform(String(value), tokens);
                break;
            case "uppercase":
                output = value.toUpperCase();
                break;
            case "lowercase":
                output = value.toLowerCase();
                break;
            default:
                output = value;
        }
        return output;
    };
    FormatGridColumnPipe.prototype.getDigitInfo = function (input) {
        return input.split(/[.-]+/);
    };
    FormatGridColumnPipe.prototype.addTrailingZeros = function (input, fractionDigits) {
        var res = input.split(".");
        var out = input;
        if (input.indexOf('.') === -1) {
            out = input + '.' + _.repeat('0', fractionDigits);
        }
        else if (res[1].length < fractionDigits) {
            out = res[0] + '.' + _.padEnd(res[1], fractionDigits, '0');
        }
        return out;
    };
    FormatGridColumnPipe = __decorate([
        core_1.Pipe({ name: 'formatGridColumn' }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof localizationService_1.LocalizationService !== 'undefined' && localizationService_1.LocalizationService) === 'function' && _a) || Object])
    ], FormatGridColumnPipe);
    return FormatGridColumnPipe;
    var _a;
}());
exports.FormatGridColumnPipe = FormatGridColumnPipe;


/***/ }),

/***/ "./src/app/Datahub/pipes/localizationTranslatePipe.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var localizationService_1 = __webpack_require__("./src/app/ReusableServices/localizationService.ts");
var LocalizationTranslatePipe = (function () {
    function LocalizationTranslatePipe(localizationService) {
        this.localizationService = localizationService;
    }
    LocalizationTranslatePipe.prototype.transform = function (data, args) {
        if (!data) {
            return;
        }
        var returnValue;
        if (args && args[0].name) {
            returnValue = this.localizationService.getLocalizedValueDescription(args[0].name);
        }
        else {
            returnValue = this.localizationService.getLocalizedValueDescription(data);
        }
        if (returnValue === data && data.indexOf("_") > 0) {
            returnValue = this.localizationService.getLocalizedValueDescription(data.substring(data.indexOf("_") + 1));
            if (returnValue === data.substring(data.indexOf("_") + 1)) {
                return this.localizationService.getLocalizedValueDescription("defaultValidationMessage");
            }
            else {
                return returnValue;
            }
        }
        else {
            return returnValue;
        }
    };
    LocalizationTranslatePipe = __decorate([
        core_1.Pipe({ name: 'LocalizationTranslate' }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof localizationService_1.LocalizationService !== 'undefined' && localizationService_1.LocalizationService) === 'function' && _a) || Object])
    ], LocalizationTranslatePipe);
    return LocalizationTranslatePipe;
    var _a;
}());
exports.LocalizationTranslatePipe = LocalizationTranslatePipe;


/***/ }),

/***/ "./src/app/Datahub/pipes/searchFilterPipe.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var MultiSelectSearchFilter = (function () {
    function MultiSelectSearchFilter() {
    }
    MultiSelectSearchFilter.prototype.transform = function (options, args) {
        return options.filter(function (option) {
            return option.Description
                .toLowerCase()
                .indexOf((args || '').toLowerCase()) > -1;
        });
    };
    MultiSelectSearchFilter = __decorate([
        core_1.Pipe({
            name: 'searchFilter'
        }), 
        __metadata('design:paramtypes', [])
    ], MultiSelectSearchFilter);
    return MultiSelectSearchFilter;
}());
exports.MultiSelectSearchFilter = MultiSelectSearchFilter;


/***/ }),

/***/ "./src/app/Datahub/pipes/tokenFilter.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var TokenFilterPipe = (function () {
    function TokenFilterPipe() {
    }
    TokenFilterPipe.prototype.transform = function (items, filter) {
        // null check
        if (items == null || filter[0] == null || filter[0].trim() == '')
            return items;
        // Tokenized search
        var tokens = filter[0].trim().toLowerCase().split(' ');
        // The filter
        return items.filter(function (item) {
            // Convert items to text for easy searching
            var text = "";
            for (var prop in item) {
                text += item[prop] + " ";
            }
            text = text.toLowerCase();
            var match = true;
            for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
                var token = tokens_1[_i];
                match = match && text.indexOf(token) >= 0;
            }
            return match;
        });
    };
    TokenFilterPipe = __decorate([
        core_1.Pipe({ name: 'tokenFilter' }), 
        __metadata('design:paramtypes', [])
    ], TokenFilterPipe);
    return TokenFilterPipe;
}());
exports.TokenFilterPipe = TokenFilterPipe;


/***/ }),

/***/ "./src/app/Datahub/routes/accessdenied/accessdenied.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var accessdenied_routing_1 = __webpack_require__("./src/app/Datahub/routes/accessdenied/accessdenied.routing.ts");
var accessdenied_1 = __webpack_require__("./src/app/Datahub/routes/accessdenied/accessdenied.ts");
var AccessDeniedModule = (function () {
    function AccessDeniedModule() {
    }
    AccessDeniedModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, accessdenied_routing_1.AccessDeniedRouting
            ],
            declarations: [accessdenied_1.AccessDenied],
        }), 
        __metadata('design:paramtypes', [])
    ], AccessDeniedModule);
    return AccessDeniedModule;
}());
exports.AccessDeniedModule = AccessDeniedModule;


/***/ }),

/***/ "./src/app/Datahub/routes/accessdenied/accessdenied.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var accessdenied_1 = __webpack_require__("./src/app/Datahub/routes/accessdenied/accessdenied.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.AccessDeniedRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/AccessDenied', component: accessdenied_1.AccessDenied, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/accessdenied/accessdenied.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var AccessDenied = (function () {
    function AccessDenied() {
    }
    AccessDenied = __decorate([
        core_1.Component({
            selector: 'accessDenied',
            template: 'Unauthorized Access'
        }), 
        __metadata('design:paramtypes', [])
    ], AccessDenied);
    return AccessDenied;
}());
exports.AccessDenied = AccessDenied;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/Demo.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var AuxComponenetsModule_1 = __webpack_require__("./src/app/ReusableComponents/AuxComponenetsModule.ts");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var Demo_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/Demo.ts");
var Demo_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/Demo.routing.ts");
var toastyDemo_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/toastDemo/toastyDemo.Module.ts");
var dndDemo_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/dndDemo/dndDemo.Module.ts");
var slimSliderDemo_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/slimSlider/slimSliderDemo.Module.ts");
var DemoModule = (function () {
    function DemoModule() {
    }
    DemoModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, forms_1.FormsModule, router_1.RouterModule, SharedModule_1.SharedModule, AuxComponenetsModule_1.AuxComponentsModule, Demo_routing_1.DemoRoute, slimSliderDemo_Module_1.SlimSliderDemoModule, dndDemo_Module_1.DnDDemoModule, toastyDemo_Module_1.ToastDemoModule],
            declarations: [Demo_1.Demo]
        }), 
        __metadata('design:paramtypes', [])
    ], DemoModule);
    return DemoModule;
}());
exports.DemoModule = DemoModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/Demo.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var Demo_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/Demo.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.DemoRoute = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Demo', component: Demo_1.Demo, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/Demo.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Demo = (function () {
    function Demo() {
    }
    Demo = __decorate([
        core_1.Component({
            selector: 'demo-slim',
            template: ""
        }), 
        __metadata('design:paramtypes', [])
    ], Demo);
    return Demo;
}());
exports.Demo = Demo;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/dndDemo/dndDemo.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var dndDemo_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/dndDemo/dndDemo.ts");
var dndDemo_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/dndDemo/dndDemo.routing.ts");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var AuxComponenetsModule_1 = __webpack_require__("./src/app/ReusableComponents/AuxComponenetsModule.ts");
var DnDDemoModule = (function () {
    function DnDDemoModule() {
    }
    DnDDemoModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, dndDemo_routing_1.DnDDemoRoute, SharedModule_1.SharedModule, AuxComponenetsModule_1.AuxComponentsModule],
            declarations: [dndDemo_1.DnDDemo]
        }), 
        __metadata('design:paramtypes', [])
    ], DnDDemoModule);
    return DnDDemoModule;
}());
exports.DnDDemoModule = DnDDemoModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/dndDemo/dndDemo.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"container\">\r\n    <h4>Simple Drag-and-Drop</h4>\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-3\">\r\n            <div class=\"card card-success\">\r\n                <div class=\"card-header\">Available to drag</div>\r\n                <div class=\"card-block\">\r\n                    <div class=\"card\" dnd-draggable [dragEnabled]=\"true\">\r\n                        <div class=\"card-block\">\r\n                            <div>Drag Me</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-sm-3\">\r\n            <div dnd-droppable class=\"card card-info\" (onDropSuccess)=\"simpleDrop=$event\">\r\n                <div class=\"card-header\">Place to drop</div>\r\n                <div class=\"card-block\">\r\n                    <div *ngIf=\"simpleDrop\">Item was dropped here</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <h4>Restricted Drag-and-Drop with zones</h4>\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-3\">\r\n            <div class=\"card card-primary\">\r\n                <div class=\"card-header\">Available to drag</div>\r\n                <div class=\"card-block\">\r\n                    <div class=\"card\" dnd-draggable [dragEnabled]=\"true\" [dropZones]=\"['zone1']\">\r\n                        <div class=\"card-block\">\r\n                            <div>Drag Me</div>\r\n                            <div>Zone 1 only</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"card card-success\">\r\n                <div class=\"card-header\">Available to drag</div>\r\n                <div class=\"card-block\">\r\n                    <div class=\"card\" dnd-draggable [dragEnabled]=\"true\" [dropZones]=\"['zone1', 'zone2']\">\r\n                        <div class=\"card-block\">\r\n                            <div>Drag Me</div>\r\n                            <div>Zone 1 & 2</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-sm-3\">\r\n            <div dnd-droppable class=\"card card-info\" [dropZones]=\"['zone1']\" (onDropSuccess)=\"restrictedDrop1=$event\">\r\n                <div class=\"card-header\">Zone 1</div>\r\n                <div class=\"card-block\">\r\n                    <div *ngIf=\"restrictedDrop1\">Item was dropped here</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-sm-3\">\r\n            <div dnd-droppable class=\"card card-warning\" [dropZones]=\"['zone2']\" (onDropSuccess)=\"restrictedDrop2=$event\">\r\n                <div class=\"card-header\">Zone 2</div>\r\n                <div class=\"card-block\">\r\n                    <div *ngIf=\"restrictedDrop2\">Item was dropped here</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <h4>Transfer custom data in Drag-and-Drop</h4>\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-3\">\r\n            <div class=\"card card-success\">\r\n                <div class=\"card-header\">Available to drag</div>\r\n                <div class=\"card-block\">\r\n                    <div class=\"card\" dnd-draggable [dragEnabled]=\"true\" [dragData]=\"transferData\">\r\n                        <div class=\"card-block\">\r\n                            <div>Drag Me</div>\r\n                            <div>{{transferData | json}}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-sm-3\">\r\n            <div dnd-droppable class=\"card card-info\" (onDropSuccess)=\"transferDataSuccess($event)\">\r\n                <div class=\"card-header\">Place to drop (Items:{{receivedData.length}})</div>\r\n                <div class=\"card-block\">\r\n                    <div [hidden]=\"!receivedData.length > 0\" *ngFor=\"let data of receivedData\">{{data | json}}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/dndDemo/dndDemo.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var dndDemo_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/dndDemo/dndDemo.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.DnDDemoRoute = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Demo/DragAndDrop', component: dndDemo_1.DnDDemo, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/dndDemo/dndDemo.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// // Copyright (C) 2016 Sergey Akopkokhyants
// // This project is licensed under the terms of the MIT license.
// // https://github.com/akserg

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var DnDDemo = (function () {
    function DnDDemo() {
        this.simpleDrop = null;
        this.restrictedDrop1 = null;
        this.restrictedDrop2 = null;
        this.transferData = { id: 1, msg: 'Hello' };
        this.receivedData = [];
        this.availableProducts = [];
        this.shoppingBasket = [];
        this.listOne = ['Coffee', 'Orange Juice', 'Red Wine', 'Unhealty drink!', 'Water'];
        this.listBoxers = ['Sugar Ray Robinson', 'Muhammad Ali', 'George Foreman', 'Joe Frazier', 'Jake LaMotta', 'Joe Louis', 'Jack Dempsey', 'Rocky Marciano', 'Mike Tyson', 'Oscar De La Hoya'];
        this.listTeamOne = [];
        this.listTeamTwo = [];
        this.listTwo = ['Coffee', 'Orange Juice', 'Red Wine', 'Unhealty drink!', 'Water'];
        this.listRecycled = [];
        this.dragOperation = false;
        this.dragEnabled = true;
        this.containers = [
            new Container(1, 'Container 1', [new Widget('1'), new Widget('2')]),
            new Container(2, 'Container 2', [new Widget('3'), new Widget('4')]),
            new Container(3, 'Container 3', [new Widget('5'), new Widget('6')])
        ];
        this.widgets = [];
        this.availableProducts.push(new Product('Blue Shoes', 3, 35));
        this.availableProducts.push(new Product('Good Jacket', 1, 90));
        this.availableProducts.push(new Product('Red Shirt', 5, 12));
        this.availableProducts.push(new Product('Blue Jeans', 4, 60));
    }
    DnDDemo.prototype.addTo = function ($event) {
        if ($event) {
            this.widgets.push($event.dragData);
        }
    };
    DnDDemo.prototype.orderedProduct = function ($event) {
        var orderedProduct = $event.dragData;
        orderedProduct.quantity--;
    };
    DnDDemo.prototype.addToBasket = function ($event) {
        var newProduct = $event.dragData;
        for (var indx in this.shoppingBasket) {
            var product = this.shoppingBasket[indx];
            if (product.name === newProduct.name) {
                product.quantity++;
                return;
            }
        }
        this.shoppingBasket.push(new Product(newProduct.name, 1, newProduct.cost));
        this.shoppingBasket.sort(function (a, b) {
            return a.name.localeCompare(b.name);
        });
    };
    DnDDemo.prototype.totalCost = function () {
        var cost = 0;
        for (var indx in this.shoppingBasket) {
            var product = this.shoppingBasket[indx];
            cost += (product.cost * product.quantity);
        }
        return cost;
    };
    DnDDemo.prototype.transferDataSuccess = function ($event) {
        this.receivedData.push($event);
    };
    DnDDemo = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/Datahub/routes/admin/Demo/dndDemo/dndDemo.html")
        }), 
        __metadata('design:paramtypes', [])
    ], DnDDemo);
    return DnDDemo;
}());
exports.DnDDemo = DnDDemo;
var Product = (function () {
    function Product(name, quantity, cost) {
        this.name = name;
        this.quantity = quantity;
        this.cost = cost;
    }
    return Product;
}());
var Container = (function () {
    function Container(id, name, widgets) {
        this.id = id;
        this.name = name;
        this.widgets = widgets;
    }
    return Container;
}());
var Widget = (function () {
    function Widget(name) {
        this.name = name;
    }
    return Widget;
}());


/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/slimSlider/SlimSliderDemo.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var slimLoadingBarService_1 = __webpack_require__("./src/app/ReusableServices/slimLoadingBarService.ts");
var SlimSliderDemo = (function () {
    function SlimSliderDemo(slimLoader) {
        this.slimLoader = slimLoader;
    }
    SlimSliderDemo.prototype.setProgres30 = function () {
        this.slimLoader.progress = 30;
    };
    SlimSliderDemo.prototype.startProgress = function () {
        // We can listen when loading will be completed
        this.slimLoader.start(function () {
            console.log('Loading complete');
        });
    };
    SlimSliderDemo.prototype.completeProgress = function () {
        this.slimLoader.complete();
    };
    SlimSliderDemo.prototype.stopProgress = function () {
        this.slimLoader.stop();
    };
    SlimSliderDemo.prototype.resetProgress = function () {
        this.slimLoader.reset();
    };
    SlimSliderDemo.prototype.incrementProgress = function () {
        this.slimLoader.progress++;
    };
    SlimSliderDemo.prototype.changeProgressTo4px = function () {
        this.slimLoader.height = '4px';
    };
    SlimSliderDemo.prototype.changeProgressTo2px = function () {
        this.slimLoader.height = '2px';
    };
    SlimSliderDemo.prototype.changeProgressToBlue = function () {
        this.slimLoader.color = 'blue';
    };
    SlimSliderDemo.prototype.changeProgressToFirebrick = function () {
        this.slimLoader.color = 'firebrick';
    };
    SlimSliderDemo = __decorate([
        core_1.Component({
            selector: 'demo-slim',
            template: __webpack_require__("./src/app/Datahub/routes/admin/Demo/slimSlider/slimSliderDemo.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof slimLoadingBarService_1.SlimLoadingBarService !== 'undefined' && slimLoadingBarService_1.SlimLoadingBarService) === 'function' && _a) || Object])
    ], SlimSliderDemo);
    return SlimSliderDemo;
    var _a;
}());
exports.SlimSliderDemo = SlimSliderDemo;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/slimSlider/slimSliderDemo.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var slimSliderDemo_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/slimSlider/slimSliderDemo.routing.ts");
var SlimSliderDemo_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/slimSlider/SlimSliderDemo.ts");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuxComponenetsModule_1 = __webpack_require__("./src/app/ReusableComponents/AuxComponenetsModule.ts");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var SlimSliderDemoModule = (function () {
    function SlimSliderDemoModule() {
    }
    SlimSliderDemoModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, forms_1.FormsModule, router_1.RouterModule, SharedModule_1.SharedModule, AuxComponenetsModule_1.AuxComponentsModule, slimSliderDemo_routing_1.SlimSliderRoute],
            declarations: [SlimSliderDemo_1.SlimSliderDemo]
        }), 
        __metadata('design:paramtypes', [])
    ], SlimSliderDemoModule);
    return SlimSliderDemoModule;
}());
exports.SlimSliderDemoModule = SlimSliderDemoModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/slimSlider/slimSliderDemo.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"form-group row\">\r\n    <div class=\"col-md-2\">\r\n        <label><strong>Progress: </strong></label>\r\n    </div>\r\n    <div class=\"col-md-10\">\r\n        <button class=\"button-standard\" (click)=\"setProgres30()\">Progress = 30</button>\r\n        <button class=\"button-standard\" (click)=\"incrementProgress()\"><span class=\"fa fa-plus\"></span> Increment</button>\r\n        <button class=\"button-standard\" (click)=\"startProgress()\"><span class=\"fa fa-play\"></span></button>\r\n        <button class=\"button-standard\" (click)=\"stopProgress()\"><span class=\"fa fa-pause\"></span></button>\r\n        <button class=\"button-standard\" (click)=\"resetProgress()\"><span class=\"fa fa-stop\"></span></button>\r\n        <button class=\"button-standard\" (click)=\"completeProgress()\"><span class=\"fa fa-fast-forward\"></span></button>\r\n    </div>\r\n</div>\r\n<div class=\"form-group row\">\r\n    <div class=\"col-md-2\">\r\n        <label><strong>Height: </strong></label>\r\n    </div>\r\n    <div class=\"col-md-10\">\r\n        <button class=\"button-standard\" (click)=\"changeProgressTo4px()\">4px</button>\r\n        <button class=\"button-standard\" (click)=\"changeProgressTo2px()\">2px</button>\r\n    </div>\r\n</div>\r\n<div class=\"form-group row\">\r\n    <div class=\"col-md-2\">\r\n        <label><strong>Color: </strong></label>\r\n    </div>\r\n    <div class=\"col-md-10\">\r\n        <button class=\"button-standard\" (click)=\"changeProgressToBlue()\">Blue</button>\r\n        <button class=\"button-standard\" (click)=\"changeProgressToFirebrick()\">Firebrick</button>\r\n    </div>\r\n</div>\r\n<div class=\"form-group row\">\r\n    <div class=\"col-md-12\">\r\n        <ng2-slim-loading-bar></ng2-slim-loading-bar>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/slimSlider/slimSliderDemo.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var SlimSliderDemo_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/slimSlider/SlimSliderDemo.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.SlimSliderRoute = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Demo/SlimSlider', component: SlimSliderDemo_1.SlimSliderDemo, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/toastDemo/toast.communication.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
/**
 * Service helps communicate between the ToastComponent and AppComponent.
 */
var ToastCommunicationService = (function () {
    function ToastCommunicationService() {
        // Observable string sources
        this.positionSource = new Subject_1.Subject();
        // Observable string streams
        this.position$ = this.positionSource.asObservable();
    }
    ToastCommunicationService.prototype.setPosition = function (position) {
        this.positionSource.next(position);
    };
    ToastCommunicationService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], ToastCommunicationService);
    return ToastCommunicationService;
}());
exports.ToastCommunicationService = ToastCommunicationService;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/toastDemo/toastyDemo.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var toastyDemo_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/toastDemo/toastyDemo.ts");
var toastyDemo_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/toastDemo/toastyDemo.routing.ts");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var AuxComponenetsModule_1 = __webpack_require__("./src/app/ReusableComponents/AuxComponenetsModule.ts");
var ToastDemoModule = (function () {
    function ToastDemoModule() {
    }
    ToastDemoModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, forms_1.FormsModule, router_1.RouterModule, SharedModule_1.SharedModule, AuxComponenetsModule_1.AuxComponentsModule, toastyDemo_routing_1.ToastDemoRoute],
            declarations: [toastyDemo_1.ToastDemo]
        }), 
        __metadata('design:paramtypes', [])
    ], ToastDemoModule);
    return ToastDemoModule;
}());
exports.ToastDemoModule = ToastDemoModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/toastDemo/toastyDemo.html":
/***/ (function(module, exports) {

module.exports = "<ng2-toasty [position]=\"position\"></ng2-toasty>\r\n\r\n<div class=\"col-md-8 offset-md-2\">\r\n    <form class=\"form-inline\">\r\n        <div class=\"form-group\">\r\n            <label for=\"title\">Title</label>\r\n            <input class=\"form-control-sm\" type=\"text\" id=\"title\" [(ngModel)]=\"options.title\" name=\"title\">\r\n            <label for=\"msg\">Message</label>\r\n            <input class=\"form-control-sm\" type=\"text\" id=\"msg\" [(ngModel)]=\"options.msg\" name=\"msg\">\r\n            <label for=\"theme\">Theme</label>\r\n            <select class=\"form-control-sm\" [(ngModel)]=\"options.theme\" id=\"theme\" name=\"theme\">\r\n                <option *ngFor=\"let theme of themes\" [value]=\"theme.code\">{{theme.name}}</option>\r\n            </select>\r\n            <label for=\"type\">Type</label>\r\n            <select class=\"form-control-sm\" [(ngModel)]=\"options.type\" id=\"type\" name=\"type\">\r\n                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.name}}</option>\r\n            </select>\r\n            <label for=\"position\">Position</label>\r\n            <select class=\"form-control-sm\" id=\"position\" [ngModel]=\"position\" (ngModelChange)=\"changePosition($event)\" name=\"position\">\r\n                <option *ngFor=\"let pos of positions\" [value]=\"pos.code\">{{pos.name}}</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"timeout\">Timeout</label>\r\n            <input type=\"text\" class=\"form-control-sm\" id=\"timeout\" [(ngModel)]=\"options.timeout\" placeholder=\"5000\" name=\"timeout\"/>\r\n            <label for=\"showclose\">Show Close Icon</label>\r\n            <input type=\"checkbox\" id=\"showclose\" [(ngModel)]=\"options.showClose\" name=\"showClose\"/>\r\n        </div>\r\n    </form>\r\n    <div class=\"form-group\">\r\n         <pre>\r\n            <code>toastyService<span ng-if=\"options.type != 'default'\">.{{ options.type }}</span>({{ '{' }}\r\n                title: \"{{ options.title }}\",\r\n                msg: \"{{ options.msg }}\",\r\n                showClose: {{ options.showClose }},\r\n                timeout: {{ options.timeout || false }},\r\n                theme: \"{{ options.theme }}\"\r\n            {{ '}' }});\r\n            </code>\r\n            <code>toastyConfig({{ '{' }}\r\n                position: \"{{ position }}\"\r\n            {{ '}' }});\r\n            </code>\r\n        </pre>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <button class=\"button-standard\" (click)=\"clearToasties()\">Clear All</button>\r\n        <button class=\"button-standard\" (click)=\"newCountdownToast()\">Countdown</button>\r\n        <button class=\"button-standard\" (click)=\"newToast()\">Add</button>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/toastDemo/toastyDemo.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var toastyDemo_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/toastDemo/toastyDemo.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ToastDemoRoute = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Demo/ToastDemo', component: toastyDemo_1.ToastDemo, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/Demo/toastDemo/toastyDemo.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var toast_communication_service_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/toastDemo/toast.communication.service.ts");
var Rx_1 = __webpack_require__("./node_modules/rxjs/Rx.js");
var toasty_service_1 = __webpack_require__("./src/app/ReusableServices/toasty.service.ts");
var ToastDemo = (function () {
    function ToastDemo(toastyService, toastCommunicationService) {
        var _this = this;
        this.toastyService = toastyService;
        this.toastCommunicationService = toastCommunicationService;
        this.position = this.toastyService.positions[2].code;
        this.options = {
            title: 'Toast It!',
            msg: 'Mmmm, tasties...',
            showClose: true,
            timeout: 5000,
            theme: this.toastyService.themes[0].code,
            type: this.toastyService.types[0].code
        };
        this.toastCommunicationService.position$.subscribe(function (pos) { return _this.position = pos; });
        this.themes = this.toastyService.themes;
        this.types = this.toastyService.types;
        this.positions = this.toastyService.positions;
    }
    ToastDemo.prototype.getTitle = function (num) {
        return 'Countdown: ' + num;
    };
    ToastDemo.prototype.getMessage = function (num) {
        return 'Seconds left: ' + num;
    };
    ToastDemo.prototype.newToast = function () {
        var toastOptions = {
            title: this.options.title,
            msg: this.options.msg,
            showClose: this.options.showClose,
            timeout: this.options.timeout,
            theme: this.options.theme,
            position: this.position,
            onAdd: function (toast) {
                console.log('Toast ' + toast.id + ' has been added!');
            },
            onRemove: function (toast) {
                console.log('Toast ' + toast.id + ' has been removed!');
            }
        };
        switch (this.options.type) {
            case 'default':
                this.toastyService.default(toastOptions);
                break;
            case 'info':
                this.toastyService.info(toastOptions);
                break;
            case 'success':
                this.toastyService.success(toastOptions);
                break;
            case 'wait':
                this.toastyService.wait(toastOptions);
                break;
            case 'error':
                this.toastyService.error(toastOptions);
                break;
            case 'warning':
                this.toastyService.warning(toastOptions);
                break;
        }
    };
    ToastDemo.prototype.newCountdownToast = function () {
        var _this = this;
        var interval = 1000;
        var seconds = this.options.timeout / 1000;
        var subscription;
        var toastOptions = {
            title: this.getTitle(seconds || 0),
            msg: this.getMessage(seconds || 0),
            showClose: this.options.showClose,
            timeout: this.options.timeout,
            theme: this.options.theme,
            onAdd: function (toast) {
                console.log('Toast ' + toast.id + ' has been added!');
                // Run the timer with 1 second iterval
                var observable = Rx_1.Observable.interval(interval).take(seconds);
                // Start listen seconds bit
                subscription = observable.subscribe(function (count) {
                    // Update title
                    toast.title = _this.getTitle(seconds - count - 1 || 0);
                    // Update message
                    toast.msg = _this.getMessage(seconds - count - 1 || 0);
                });
            },
            onRemove: function (toast) {
                console.log('Toast ' + toast.id + ' has been removed!');
                // Stop listenning
                subscription.unsubscribe();
            }
        };
        switch (this.options.type) {
            case 'default':
                this.toastyService.default(toastOptions);
                break;
            case 'info':
                this.toastyService.info(toastOptions);
                break;
            case 'success':
                this.toastyService.success(toastOptions);
                break;
            case 'wait':
                this.toastyService.wait(toastOptions);
                break;
            case 'error':
                this.toastyService.error(toastOptions);
                break;
            case 'warning':
                this.toastyService.warning(toastOptions);
                break;
        }
    };
    ToastDemo.prototype.clearToasties = function () {
        this.toastyService.clearAll();
    };
    ToastDemo.prototype.changePosition = function ($event) {
        this.position = $event;
        // Update position of the Toasty Component
        this.toastCommunicationService.setPosition(this.position);
    };
    ToastDemo = __decorate([
        core_1.Component({
            selector: 'demo-toast',
            template: __webpack_require__("./src/app/Datahub/routes/admin/Demo/toastDemo/toastyDemo.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof toasty_service_1.ToastyService !== 'undefined' && toasty_service_1.ToastyService) === 'function' && _a) || Object, (typeof (_b = typeof toast_communication_service_1.ToastCommunicationService !== 'undefined' && toast_communication_service_1.ToastCommunicationService) === 'function' && _b) || Object])
    ], ToastDemo);
    return ToastDemo;
    var _a, _b;
}());
exports.ToastDemo = ToastDemo;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/admin.MainRouting.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var admin_1 = __webpack_require__("./src/app/Datahub/routes/admin/admin.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.AdminMainRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin', component: admin_1.Admin, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/admin.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var admin_1 = __webpack_require__("./src/app/Datahub/routes/admin/admin.ts");
var logs_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/logs/logs.Module.ts");
var auth_mainModule_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/auth.mainModule.ts");
var configBuilder_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/configBuilder/configBuilder.Module.ts");
var applicationBuilder_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/applicationBuilder/applicationBuilder.Module.ts");
var admin_MainRouting_1 = __webpack_require__("./src/app/Datahub/routes/admin/admin.MainRouting.ts");
var schedule_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/schedule.Module.ts");
var schematic_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematic.Module.ts");
var applicationTreeView_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/applicationTreeView/applicationTreeView.Module.ts");
var localization_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/localization.Module.ts");
var Demo_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/Demo.Module.ts");
var adminApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/adminApiService.ts");
var AdminModule = (function () {
    function AdminModule() {
    }
    AdminModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, admin_MainRouting_1.AdminMainRouting,
                schedule_Module_1.ScheduleModule, logs_Module_1.LogsModule, applicationBuilder_Module_1.ApplicationBuilderModule,
                auth_mainModule_1.AuthModule, applicationTreeView_Module_1.ApplicationTreeViewModule, configBuilder_Module_1.ConfigBuilderModule,
                schematic_Module_1.SchematicModule, localization_Module_1.LocalizationModule, Demo_Module_1.DemoModule
            ],
            declarations: [admin_1.Admin],
            providers: [adminApiService_1.AdminApiService]
        }), 
        __metadata('design:paramtypes', [])
    ], AdminModule);
    return AdminModule;
}());
exports.AdminModule = AdminModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/admin.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var Admin = (function () {
    function Admin(apiService, navService, location) {
        this.apiService = apiService;
        this.navService = navService;
        this.location = location;
        apiService.setApplicationsBaseUrl();
    }
    Admin = __decorate([
        core_1.Component({
            selector: 'admin',
            template: "",
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _a) || Object, (typeof (_b = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _b) || Object, (typeof (_c = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _c) || Object])
    ], Admin);
    return Admin;
    var _a, _b, _c;
}());
exports.Admin = Admin;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/adminApiService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var AdminApiService = (function () {
    function AdminApiService(httpAbs, apiService) {
        this.httpAbs = httpAbs;
        this.apiService = apiService;
        this.prefixurl = '/auth';
        this.contentType = 'application/json; charset=utf-8';
        this.logbaseurl = '/log';
        this.treemodelmetadataUrl = '/ui/treemodelmetadata';
        this.menuItemUrl = this.prefixurl + '/menuitem';
        this.roleMenuItemUrl = this.prefixurl + '/rolemenuitem';
        this.metaDataTreeViewUrl = '/ui/treemodelmetadata';
        this.publishTreeView = '/treemodel/publish';
        this.httpAbs.setBaseAddress(this.apiService.base);
    }
    AdminApiService.prototype.getLogHeader = function () {
        return this.httpAbs.fetch(this.logbaseurl + '/logheaderview');
    };
    AdminApiService.prototype.getLogHeaderFiltered = function (filter) {
        return this.httpAbs.fetchWithFilter(this.logbaseurl + '/logheaderview/paged', filter, this.contentType);
    };
    AdminApiService.prototype.getLogDetail = function (taskGUID) {
        return this.httpAbs.fetch(this.logbaseurl + '/TaskGUID/' + taskGUID + '/logdetailview');
    };
    AdminApiService.prototype.getLogDetailFiltered = function (filter) {
        return this.httpAbs.fetchWithFilter(this.logbaseurl + '/logdetailview/paged', filter, this.contentType);
    };
    AdminApiService.prototype.updateLog = function (obj) {
        return this.httpAbs.updateWithHeader(this.logbaseurl + '/logheaderview/update', JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    //TreeModelMetadata
    AdminApiService.prototype.getTreeModeMetadataByRootName = function (rootName) {
        return this.httpAbs.fetch(this.treemodelmetadataUrl + '?RootModelName=' + rootName);
    };
    //MenuItems List
    AdminApiService.prototype.getMenuItems = function () {
        return this.httpAbs.fetch(this.menuItemUrl);
    };
    AdminApiService.prototype.updateMenuItem = function (obj, primaryKeyColumn) {
        var id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.updateWithHeader(this.menuItemUrl + '/' + id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminApiService.prototype.createMenuItem = function (obj) {
        return this.httpAbs.insertWithHeader(this.menuItemUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminApiService.prototype.deleteMenuItem = function (obj, primaryKeyColumn) {
        var id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.remove(this.menuItemUrl + '/' + id);
    };
    //RoleMenuItems
    AdminApiService.prototype.getMenuItemsRoleByMenuItemId = function (id) {
        return this.httpAbs.fetch(this.menuItemUrl + '/' + id + '/rolemenuitem');
    };
    AdminApiService.prototype.createMenuItemRole = function (obj) {
        return this.httpAbs.insertWithHeader(this.roleMenuItemUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminApiService.prototype.updateMenuItemRole = function (obj, primaryKeyColumn) {
        var Id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.updateWithHeader(this.roleMenuItemUrl + '/' + Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminApiService.prototype.deleteMenuItemRole = function (obj, primaryKeyColumn) {
        var Id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.remove(this.roleMenuItemUrl + '/' + Id);
    };
    AdminApiService.prototype.getTreemodelmetadataList = function () {
        return this.httpAbs.fetch(this.metaDataTreeViewUrl);
    };
    AdminApiService.prototype.updateTreemodelmetadata = function (obj, primaryKeyColumn) {
        var Id = 0;
        Id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.updateWithHeader(this.metaDataTreeViewUrl + '/' + Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminApiService.prototype.deleteTreemodelmetadata = function (obj, primaryKeyColumn) {
        var Id = 0;
        Id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.remove(this.metaDataTreeViewUrl + '/' + Id);
    };
    AdminApiService.prototype.createTreemodelmetadata = function (obj) {
        return this.httpAbs.insertWithHeader(this.metaDataTreeViewUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminApiService.prototype.publishTreemodelmetadata = function (rootModelName) {
        return this.httpAbs.insertWithHeader(this.publishTreeView + "/" + rootModelName, '' // rootModelName
        , '', '' //empty headers
        , this.contentType);
    };
    AdminApiService.prototype.getRolesByPage = function () {
        return this.httpAbs.fetch(this.metaDataTreeViewUrl);
    };
    AdminApiService.prototype.ExecuteUpdate = function (obj, pagename, primaryKeyColumn) {
        if (primaryKeyColumn === void 0) { primaryKeyColumn = ""; }
        switch (pagename.toLowerCase()) {
            case "logs":
                return this.updateLog(obj);
            case "menuitem":
                return this.updateMenuItem(obj, primaryKeyColumn);
            case "menuitem_child":
                return this.updateMenuItemRole(obj, primaryKeyColumn);
        }
    };
    AdminApiService.prototype.ExecutePageFilter = function (pagename, filterObject) {
        switch (pagename.toLowerCase()) {
            case "logs":
                return this.getLogHeaderFiltered(filterObject);
            case "logs_child":
                return this.getLogDetailFiltered(filterObject);
        }
    };
    AdminApiService.prototype.ExecutePageRefresh = function (pagename, id) {
        if (id === void 0) { id = null; }
        switch (pagename.toLowerCase()) {
            case "logs":
                return this.getLogHeader();
            case "logs_child":
                return this.getLogDetail(id);
            case "menuitem":
                return this.getMenuItems();
            case "menuitem_child":
                return this.getMenuItemsRoleByMenuItemId(id);
        }
    };
    AdminApiService.prototype.ExecuteDelete = function (obj, pagename, primaryKeyColumn) {
        if (primaryKeyColumn === void 0) { primaryKeyColumn = ""; }
        switch (pagename.toLowerCase()) {
            case "menuitem_child":
                return this.deleteMenuItemRole(obj, primaryKeyColumn);
            case "menuitem":
                return this.deleteMenuItem(obj, primaryKeyColumn);
        }
    };
    AdminApiService.prototype.ExecuteInsert = function (obj, pagename) {
        switch (pagename.toLowerCase()) {
            case "menuitem":
                return this.createMenuItem(obj);
            case "menuitem_child":
                return this.createMenuItemRole(obj);
        }
    };
    AdminApiService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _a) || Object, (typeof (_b = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _b) || Object])
    ], AdminApiService);
    return AdminApiService;
    var _a, _b;
}());
exports.AdminApiService = AdminApiService;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/applicationBuilder/applicationBuilder.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var applicationBuilder_1 = __webpack_require__("./src/app/Datahub/routes/admin/applicationBuilder/applicationBuilder.ts");
var applicationBuilder_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/applicationBuilder/applicationBuilder.routing.ts");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var ApplicationBuilderModule = (function () {
    function ApplicationBuilderModule() {
    }
    ApplicationBuilderModule = __decorate([
        core_1.NgModule({
            imports: [forms_1.FormsModule, platform_browser_1.BrowserModule, applicationBuilder_routing_1.ApplicationBuilderRouting, SharedModule_1.SharedModule],
            declarations: [applicationBuilder_1.ApplicationBuilder],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], ApplicationBuilderModule);
    return ApplicationBuilderModule;
}());
exports.ApplicationBuilderModule = ApplicationBuilderModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/applicationBuilder/applicationBuilder.html":
/***/ (function(module, exports) {

module.exports = "<section Id=\"editForm\">\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-12 col-md-6\">\r\n            <form #genericForm=\"ngForm\" (ngSubmit)=\"saveClicked()\">\r\n                <template [ngIf]=\"pageView == 'edit'\">\r\n                    <div class=\"form-group\">\r\n                        <label><strong>Select Root Model Name:</strong></label>\r\n                        <select name=\"cboSchema\" class=\"form-control\" [(ngModel)]=\"selectedTreeModelMetadataId\" (change)=\"populateSelectedSchema($event.target.value)\">\r\n                            <option *ngFor=\"let itemOption of treeModelMetadataList\" value=\"{{itemOption.TreeModelMetadataId}}\" selected=\"itemOption.TreeModelMetadataId == selectedTreeModelMetadataId\">{{itemOption.RootModelName}}</option>\r\n                        </select>\r\n                    </div>\r\n                </template>\r\n                <template [ngIf]=\"showControls\">\r\n                    <div class=\"form-group\">\r\n                        <label><strong>Menu Item:</strong></label>\r\n                        <input type=\"text\" name=\"MenuItemName\" #name=\"ngModel\" class=\"form-control\" [(ngModel)]=\"selectedTreeModelMetadata.MenuItemName\" [disabled]=\"!showPublishButton && pageView != 'add'\" (blur)=\"checkMenuItem()\" [required]=\"true\"/>\r\n                        <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                            Valid input for RootModelName is required\r\n                        </div>\r\n                        <div [hidden]=\"!menuItemExists\" class=\"alert alert-danger\">\r\n                            Menu Item already Exists. Please select different one\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label><strong>Root Model Name:</strong></label>\r\n                        <input type=\"text\" name=\"RootModelName\" class=\"form-control\" #name=\"ngModel\" [(ngModel)]=\"selectedTreeModelMetadata.RootModelName\" [disabled]=\"!showPublishButton && pageView != 'add'\" [required]=\"true\"/>\r\n                        <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                            Valid input for RootModelName is required\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label><strong>Connection String:</strong></label>\r\n                        <input type=\"text\" name=\"ConnectionString\" class=\"form-control\" #name=\"ngModel\" [(ngModel)]=\"selectedTreeModelMetadata.ConnectionString\"/>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label><strong>Route:</strong></label>\r\n                        <input type=\"text\" name=\"Route\" class=\"form-control\" #name=\"ngModel\" [(ngModel)]=\"selectedTreeModelMetadata.Route\" [disabled]=\"selectedTreeModelMetadata.MenuItemId > 0\" [required]=\"true\"/>\r\n                        <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                            Valid input for Route is required\r\n                        </div>\r\n                    </div>\r\n                    <template [ngIf]=\"pageView != 'add'\">\r\n                        <div class=\"form-group\">\r\n                            <label><strong>Published Date:</strong></label>\r\n                            <input type=\"datetime-local\" name=\"PublishDate\" class=\"form-control\" #name=\"ngModel\" [(ngModel)]=\"selectedTreeModelMetadata.PublishDate\" disabled/>\r\n                        </div>\r\n                    </template>\r\n                    <div class=\"form-group\">\r\n                        <label><strong>Metadata JSON:</strong></label>\r\n                        <textarea name=\"MetadataJson\" #name=\"ngModel\" [(ngModel)]=\"selectedTreeModelMetadata.MetadataJSON\" required></textarea> <!--[disabled] = \"!showPublishButton && pageView != 'add'\"-->\r\n                        <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                            Valid input for MetadataJson is required\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"buttons\">\r\n                        <button type=\"button\" *ngIf=\"pageView != 'add'\" (click)=\"addClicked()\" class=\"button-standard \">\r\n                            <span class=\"fa fa-plus fa-lg\"></span>\r\n                            Add\r\n                        </button>\r\n                        <button *ngIf=\"showControls\" type=\"submit\" [disabled]=\"!genericForm.form.valid || menuItemExists\" class=\"button-standard \">\r\n                            <span class=\"fa fa-floppy-o fa-lg\"></span>\r\n                            Save\r\n                        </button>\r\n                        <button type=\"button\" *ngIf=\"showControls && pageView == 'add'\" (click)=\"cancelClicked()\" class=\"button-standard \">\r\n                            <span class=\"fa fa-ban fa-lg\"></span>\r\n                            Cancel\r\n                        </button>\r\n                        <button type=\"button\" *ngIf=\"showControls && pageView != 'add' && showPublishButton\" (click)=\"deleteClicked()\" class=\"button-standard \">\r\n                            <span class=\"fa fa-eraser fa-lg\"></span>\r\n                            Delete\r\n                        </button>\r\n                        <button type=\"button\" *ngIf=\"showControls && pageView != 'add' && showPublishButton\" (click)=\"publishClicked()\" class=\"button-standard \">\r\n                            <span class=\"fa fa-thumbs-o-up fa-lg\"></span>\r\n                            Publish\r\n                        </button>\r\n                    </div>\r\n                </template>\r\n            </form>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <displayGrid *ngIf=\"selectedTreeModelMetadata != undefined && selectedTreeModelMetadata.MenuItemId > 0\"\r\n                         [inputGridSettings]=\"menuRoleItemcontrolConfig\" [inputHttpProxy]=\"adminApiService\" [inputPageName]=\"menuPageName\"\r\n                         [ParentIdInputValue]=\"selectedTreeModelMetadata.MenuItemId\"></displayGrid>\r\n        </div>\r\n    </div>\r\n</section>\r\n"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/applicationBuilder/applicationBuilder.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var applicationBuilder_1 = __webpack_require__("./src/app/Datahub/routes/admin/applicationBuilder/applicationBuilder.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ApplicationBuilderRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/ApplicationBuilder', component: applicationBuilder_1.ApplicationBuilder, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/applicationBuilder/applicationBuilder.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var menuItemControlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/menuItem/menuItemControlConfig.ts");
var adminApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/adminApiService.ts");
var ApplicationBuilder = (function () {
    /*@ViewChild(DisplayGridComponent)
    private dataTable:DisplayGridComponent;*/
    function ApplicationBuilder(adminApiService, alert, appSettingsService) {
        this.adminApiService = adminApiService;
        this.alert = alert;
        this.appSettingsService = appSettingsService;
        this.showControls = false;
        this.treeViewMetadataTemplate = { ConnectionString: "", MetadataJSON: "", RootModelName: "", TreeModelMetadataId: 0, Route: "", PublishDate: "", MenuItemName: "", MenuItemId: 0 };
        this.primaryKeyColumn = "TreeModelMetadataId";
        this.pageView = "edit";
        this.showPublishButton = false;
        this.menuItemExists = false;
        this.menuItemsList = [];
        this.menuPageName = 'menuitem_child';
        this.menuRoleItemcontrolConfig = menuItemControlConfig_1.MenuItemControlConfig.ChildControlConfig;
        this.selectedTreeModelMetadata = this.treeViewMetadataTemplate;
        this.getTreeViewMetadataList();
    }
    /*ngAfterViewInit() {
        this.refreshMenuItemRoles();
    }*/
    ApplicationBuilder.prototype.saveClicked = function () {
        if (this.selectedTreeModelMetadata) {
            if (this.selectedTreeModelMetadata.MenuItemId > 0) {
                this.processTreeViewdata();
            }
            else {
                this.addMenuItem();
            }
        }
    };
    ApplicationBuilder.prototype.addMenuItem = function () {
        var _this = this;
        var menuItemObj = {
            Id: 0,
            LookupKey: this.selectedTreeModelMetadata.MenuItemName,
            Route: this.selectedTreeModelMetadata.Route,
            VersionStamp: ""
        };
        this.adminApiService.createMenuItem(menuItemObj).subscribe(function (res) {
            _this.adminApiService.getMenuItems().subscribe(function (res) {
                _this.menuItemsList = res;
                _this.processTreeViewdata();
            }, function (error) { }, function () { });
        }, function (error) { _this.alert.error("Error in creating new MenuItem: async error #" + error.status); }, function () { });
    };
    ApplicationBuilder.prototype.processTreeViewdata = function () {
        if (this.selectedTreeModelMetadata) {
            var x = this.buildUIToApiTreeViewTemplate(this.selectedTreeModelMetadata); // this.selectedTreeModelMetadata;
            if (this.pageView == 'edit') {
                this.saveTreeViewdata(x);
            }
            else {
                this.addTreeViewdata(x);
            }
        }
    };
    ApplicationBuilder.prototype.saveTreeViewdata = function (x) {
        var _this = this;
        this.adminApiService.updateTreemodelmetadata(x, this.primaryKeyColumn).subscribe(function (res) {
            _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.saveConfirmedMsg);
            _this.getTreeViewSchemaList();
        }, function (error) {
            _this.alert.error("Error in Updating MetaData: async error #" + error.status);
        }, function () { });
    };
    ApplicationBuilder.prototype.addTreeViewdata = function (x) {
        var _this = this;
        this.adminApiService.createTreemodelmetadata(x).subscribe(function (res) {
            _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.saveConfirmedMsg);
            _this.getTreeViewSchemaList();
        }, function (error) {
            _this.alert.error("Error in Adding MetaData: async error #" + error.status);
        }, function () { });
    };
    ApplicationBuilder.prototype.addClicked = function () {
        this.pageView = "add";
        this.showControls = true;
        this.selectedTreeModelMetadata = JSON.parse(JSON.stringify(this.treeViewMetadataTemplate));
    };
    ApplicationBuilder.prototype.cancelClicked = function () {
        this.pageView = "edit";
        if (this.selectedTreeModelMetadata.TreeModelMetadataId > 0) {
            this.populateSelectedSchema(this.selectedTreeModelMetadata.TreeModelMetadataId);
        }
        else {
            var len = this.treeModelMetadataList.length;
            if (len > 0) {
                this.populateSelectedSchema(this.treeModelMetadataList[len - 1].TreeModelMetadataId);
            }
            else {
                this.showControls = false;
            }
        }
    };
    ApplicationBuilder.prototype.deleteClicked = function () {
        var _this = this;
        if (this.selectedTreeModelMetadata && this.pageView == "edit") {
            this.alert.addAlertAndRequestAnswer(this.appSettingsService.appNotificationsMsg.deletionQuestionMsg);
            this.alert.requestConfirmationAnswer$.subscribe(function (item) {
                _this.alert.askConfirmation = false;
                if (item != "OK")
                    return;
                _this.deleteSelectedSchema();
            });
        }
    };
    ApplicationBuilder.prototype.deleteSelectedSchema = function () {
        var _this = this;
        var x = this.selectedTreeModelMetadata;
        this.adminApiService.deleteTreemodelmetadata(x, this.primaryKeyColumn).subscribe(function (res) {
            _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.deletionConfirmationMsg);
            //reset the values
            _this.selectedTreeModelMetadata = JSON.parse(JSON.stringify(_this.treeViewMetadataTemplate));
            _this.selectedTreeModelMetadataId = 0;
            _this.getTreeViewSchemaList();
        }, function (error) {
            _this.alert.error("Error in Deleting MetaData: async error #" + error.status);
        }, function () { });
    };
    ApplicationBuilder.prototype.getTreeViewMetadataList = function () {
        var _this = this;
        this.pageView = "edit";
        this.showControls = false;
        this.adminApiService.getMenuItems().subscribe(function (res) {
            _this.menuItemsList = res;
            _this.getTreeViewSchemaList();
        }, function (error) { _this.alert.error("Error in retrieving MenuItems List: async error #" + error.status); }, function () { });
    };
    ApplicationBuilder.prototype.getTreeViewSchemaList = function () {
        var _this = this;
        this.pageView = "edit";
        this.showControls = false;
        this.adminApiService.getTreemodelmetadataList().subscribe(function (res) {
            _this.treeModelMetadataList = res;
            if (_this.selectedTreeModelMetadata.TreeModelMetadataId > 0) {
                _this.populateSelectedSchema(_this.selectedTreeModelMetadata.TreeModelMetadataId);
            }
            else {
                var len = _this.treeModelMetadataList.length;
                if (len > 0) {
                    _this.populateSelectedSchema(_this.treeModelMetadataList[len - 1].TreeModelMetadataId);
                }
            }
        }, function (error) {
            _this.alert.error("Error in retrieving MetaData List: async error #" + error.status);
        }, function () { });
    };
    ApplicationBuilder.prototype.populateSelectedSchema = function (selectedValue) {
        this.showControls = true;
        this.menuItemExists = false;
        this.selectedTreeModelMetadataId = selectedValue;
        this.showPublishButton = false;
        //Convert to string and back to json -> to convert reference type data to value type
        this.buildApiToUITreeViewTemplate(JSON.parse(JSON.stringify(this.getSelectedSchema(selectedValue))));
        if (this.selectedTreeModelMetadata && !this.selectedTreeModelMetadata.PublishDate) {
            this.showPublishButton = true;
        }
        //this.refreshMenuItemRoles();
    };
    ApplicationBuilder.prototype.getSelectedSchema = function (selectedValue) {
        return this.treeModelMetadataList.find(function (p) { return p.TreeModelMetadataId == selectedValue; });
    };
    ApplicationBuilder.prototype.publishClicked = function () {
        var _this = this;
        var metaDataToPublish = this.getSelectedSchema(this.selectedTreeModelMetadataId);
        if (metaDataToPublish) {
            //if(this.selectedTreeModelMetadata && this.selectedTreeModelMetadata.MetadataJSON) {
            this.adminApiService.publishTreemodelmetadata(metaDataToPublish.RootModelName).subscribe(function (res) {
                _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.saveConfirmedMsg);
                _this.getTreeViewSchemaList();
            }, function (error) {
                _this.alert.error("Error in Publishing MetaData: async error #" + error.status);
            }, function () {
            });
        }
    };
    ApplicationBuilder.prototype.checkMenuItem = function () {
        var _this = this;
        var menuItemId = 0;
        var route = "";
        this.menuItemExists = false;
        //var menuItemValue = this.selectedTreeModelMetadata.MenuItemName;
        var tempMenuItem = this.menuItemsList.find(function (p) { return p.LookupKey.toLowerCase() === _this.selectedTreeModelMetadata.MenuItemName.toLowerCase(); });
        if (tempMenuItem) {
            menuItemId = tempMenuItem.Id;
            route = tempMenuItem.Route;
        }
        this.selectedTreeModelMetadata.MenuItemId = menuItemId;
        this.selectedTreeModelMetadata.Route = route;
        if (menuItemId > 0) {
            if (this.treeModelMetadataList.find(function (p) { return p.MenuItemId == menuItemId && p.TreeModelMetadataId != _this.selectedTreeModelMetadata.TreeModelMetadataId; })) {
                this.menuItemExists = true;
            }
        }
    };
    ApplicationBuilder.prototype.buildApiToUITreeViewTemplate = function (obj) {
        var tempMenuItem;
        var menuItemRoute = "";
        var menuItemName = "";
        var menuItemId = 0;
        if (obj.MenuItemId) {
            tempMenuItem = this.menuItemsList.find(function (p) { return p.Id == obj.MenuItemId; });
            if (tempMenuItem) {
                menuItemRoute = tempMenuItem.Route;
                menuItemName = tempMenuItem.LookupKey;
                menuItemId = obj.MenuItemId;
            }
        }
        this.selectedTreeModelMetadataId = obj.TreeModelMetadataId;
        this.selectedTreeModelMetadata = {
            ConnectionString: obj.ConnectionString,
            MetadataJSON: obj.MetadataJSON,
            RootModelName: obj.RootModelName,
            TreeModelMetadataId: obj.TreeModelMetadataId,
            Route: menuItemRoute,
            PublishDate: obj.PublishDate,
            MenuItemName: menuItemName,
            MenuItemId: menuItemId
        };
    };
    ApplicationBuilder.prototype.buildUIToApiTreeViewTemplate = function (objTreeView) {
        var tempMenuItem = this.menuItemsList.find(function (p) { return p.LookupKey.toLowerCase() == objTreeView.MenuItemName.toLowerCase(); });
        return {
            ConnectionString: objTreeView.ConnectionString,
            MetadataJSON: objTreeView.MetadataJSON,
            RootModelName: objTreeView.RootModelName,
            TreeModelMetadataId: objTreeView.TreeModelMetadataId,
            PublishDate: objTreeView.PublishDate,
            MenuItemId: tempMenuItem.Id
        };
    };
    ApplicationBuilder = __decorate([
        core_1.Component({
            selector: 'applicationBuilder',
            template: __webpack_require__("./src/app/Datahub/routes/admin/applicationBuilder/applicationBuilder.html"),
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof adminApiService_1.AdminApiService !== 'undefined' && adminApiService_1.AdminApiService) === 'function' && _a) || Object, (typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _c) || Object])
    ], ApplicationBuilder);
    return ApplicationBuilder;
    var _a, _b, _c;
}());
exports.ApplicationBuilder = ApplicationBuilder;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/applicationTreeView/applicationTreeView.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var applicationTreeView_1 = __webpack_require__("./src/app/Datahub/routes/admin/applicationTreeView/applicationTreeView.ts");
var applicationTreeView_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/applicationTreeView/applicationTreeView.routing.ts");
var TreeViewModule_1 = __webpack_require__("./src/app/ReusableComponents/treeView/TreeViewModule.ts");
var ApplicationTreeViewModule = (function () {
    function ApplicationTreeViewModule() {
    }
    ApplicationTreeViewModule = __decorate([
        core_1.NgModule({
            imports: [forms_1.FormsModule, platform_browser_1.BrowserModule, applicationTreeView_routing_1.ApplicationTreeViewRouting, SharedModule_1.SharedModule, TreeViewModule_1.TreeViewModule],
            declarations: [applicationTreeView_1.ApplicationTreeView],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], ApplicationTreeViewModule);
    return ApplicationTreeViewModule;
}());
exports.ApplicationTreeViewModule = ApplicationTreeViewModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/applicationTreeView/applicationTreeView.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var applicationTreeView_1 = __webpack_require__("./src/app/Datahub/routes/admin/applicationTreeView/applicationTreeView.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ApplicationTreeViewRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/ApplicationTreeView', component: applicationTreeView_1.ApplicationTreeView, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/applicationTreeView/applicationTreeView.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var adminApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/adminApiService.ts");
var ApplicationTreeView = (function () {
    function ApplicationTreeView(alertService, activatedRoute, adminApiService) {
        this.alertService = alertService;
        this.activatedRoute = activatedRoute;
        this.adminApiService = adminApiService;
        this.apiUrl = '';
        this.showTreeViewdata = false;
    }
    ApplicationTreeView.prototype.ngOnInit = function () {
        var self = this;
        var treeName = '';
        var id;
        self.activatedRoute.params.forEach(function (params) {
            treeName = params['modelName'];
            id = params['id'];
            self.apiUrl = '/treemodel/' + treeName + '/' + id;
            self.populateApplicationTreeViewdata(treeName);
        });
    };
    ApplicationTreeView.prototype.populateApplicationTreeViewdata = function (treeName) {
        var _this = this;
        this.adminApiService.getTreeModeMetadataByRootName(treeName).subscribe(function (res) {
            _this.jsonSchemaConfig = JSON.parse(res.MetadataJSON);
            _this.showTreeViewdata = true;
        }, function (error) {
            _this.alertService.error("Error in retrieving json schema: async error #" + error.status);
        }, function () { });
    };
    ApplicationTreeView = __decorate([
        core_1.Component({
            selector: 'auth',
            template: "<treeViewBuilder *ngIf=\"showTreeViewdata\" [jsonConfig]=\"jsonSchemaConfig\" [treeViewApiUrl]=\"apiUrl\" ></treeViewBuilder>",
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object, (typeof (_c = typeof adminApiService_1.AdminApiService !== 'undefined' && adminApiService_1.AdminApiService) === 'function' && _c) || Object])
    ], ApplicationTreeView);
    return ApplicationTreeView;
    var _a, _b, _c;
}());
exports.ApplicationTreeView = ApplicationTreeView;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/adminAuthApiService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var adminApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/adminApiService.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var AdminAuthApiService = (function () {
    function AdminAuthApiService(httpAbs, apiService, adminApiService) {
        this.httpAbs = httpAbs;
        this.apiService = apiService;
        this.adminApiService = adminApiService;
        this.prefixurl = '/auth';
        this.contentType = 'application/json; charset=utf-8';
        this.userbaseurl = this.prefixurl + '/user';
        this.rolebaseurl = this.prefixurl + '/role';
        this.resourcebaseurl = this.prefixurl + '/resource';
        this.roleresourcebaseurl = this.prefixurl + '/roleresource';
        this.userrolebaseurl = this.prefixurl + '/userrole';
        this.latestalertbaseurl = '/notification/getalert?UserId=';
        this.alertbaseurl = '/notification/alert';
        this.applicationsListUrl = this.prefixurl + '/application';
        this.roleApplicationUrl = this.prefixurl + '/roleapplication';
        this.roleApplicationMenuItemUrl = this.prefixurl + '/roleapplicationmenuitem';
        this.roleapplicationresource = this.prefixurl + '/roleapplicationresource';
        this.httpAbs.setBaseAddress(this.apiService.base);
    }
    AdminAuthApiService.prototype.getUserFiltered = function (filter) {
        return this.httpAbs.fetchWithFilter(this.userbaseurl + '/paged', filter, this.contentType);
    };
    AdminAuthApiService.prototype.getAuthUserRolesByUserId = function (id) {
        return this.httpAbs.fetch(this.userbaseurl + '/' + id + '/userrole');
    };
    AdminAuthApiService.prototype.createUserRole = function (obj) {
        return this.httpAbs.insertWithHeader(this.userrolebaseurl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.updateUserRole = function (obj) {
        return this.httpAbs.updateWithHeader(this.userrolebaseurl + '/' + obj.Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.deleteUserRole = function (obj) {
        return this.httpAbs.remove(this.userrolebaseurl + '/' + obj.Id);
    };
    AdminAuthApiService.prototype.getRoleFiltered = function (filter) {
        return this.httpAbs.fetchWithFilter(this.rolebaseurl + '/paged', filter, this.contentType);
    };
    AdminAuthApiService.prototype.getAuthUser = function (id) {
        if (id === void 0) { id = null; }
        if (id) {
            return this.httpAbs.fetch(this.userbaseurl + '/' + id);
        }
        else {
            return this.httpAbs.fetch(this.userbaseurl);
        }
    };
    AdminAuthApiService.prototype.createAuthUser = function (obj) {
        return this.httpAbs.insertWithHeader(this.userbaseurl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.updateAuthUser = function (obj) {
        return this.httpAbs.updateWithHeader(this.userbaseurl + '/' + obj.Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.deleteAuthUser = function (obj) {
        return this.httpAbs.remove(this.userbaseurl + '/' + obj.Id);
    };
    AdminAuthApiService.prototype.getAuthRole = function (id) {
        if (id === void 0) { id = null; }
        if (id) {
            return this.httpAbs.fetch(this.rolebaseurl + '/' + id);
        }
        else {
            return this.httpAbs.fetch(this.rolebaseurl);
        }
    };
    AdminAuthApiService.prototype.createAuthRole = function (obj) {
        return this.httpAbs.insertWithHeader(this.rolebaseurl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.updateAuthRole = function (obj) {
        return this.httpAbs.updateWithHeader(this.rolebaseurl + '/' + obj.Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.deleteAuthRole = function (obj) {
        return this.httpAbs.remove(this.rolebaseurl + '/' + obj.Id);
    };
    AdminAuthApiService.prototype.getAuthResource = function (id) {
        if (id === void 0) { id = null; }
        if (id) {
            return this.httpAbs.fetch(this.resourcebaseurl + '/' + id);
        }
        else {
            return this.httpAbs.fetch(this.resourcebaseurl);
        }
    };
    AdminAuthApiService.prototype.getResourceFiltered = function (filter) {
        return this.httpAbs.fetchWithFilter(this.resourcebaseurl + '/paged', filter, this.contentType);
    };
    AdminAuthApiService.prototype.createAuthResource = function (obj) {
        return this.httpAbs.insertWithHeader(this.resourcebaseurl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.updateAuthResource = function (obj) {
        return this.httpAbs.updateWithHeader(this.resourcebaseurl + '/' + obj.Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.deleteAuthResource = function (obj) {
        return this.httpAbs.remove(this.resourcebaseurl + '/' + obj.Id);
    };
    AdminAuthApiService.prototype.getAuthRoleResource = function (id) {
        if (id === void 0) { id = null; }
        if (id) {
            return this.httpAbs.fetch(this.roleresourcebaseurl + '/' + id);
        }
        else {
            return this.httpAbs.fetch(this.roleresourcebaseurl);
        }
    };
    AdminAuthApiService.prototype.getAuthRoleByResourceId = function (id) {
        return this.httpAbs.fetch(this.resourcebaseurl + '/' + id + '/roleresource');
    };
    AdminAuthApiService.prototype.getAuthRoleByRoleId = function (id) {
        return this.httpAbs.fetch(this.rolebaseurl + '/' + id + '/roleresource');
    };
    AdminAuthApiService.prototype.createAuthRoleResource = function (obj) {
        return this.httpAbs.insertWithHeader(this.roleresourcebaseurl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.updateAuthRoleResource = function (obj) {
        return this.httpAbs.updateWithHeader(this.roleresourcebaseurl + '/' + obj.Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.deleteAuthRoleResource = function (obj) {
        return this.httpAbs.remove(this.roleresourcebaseurl + '/' + obj.Id);
    };
    AdminAuthApiService.prototype.getAuthUserRole = function () {
        return this.httpAbs.fetch(this.userrolebaseurl);
    };
    AdminAuthApiService.prototype.createAuthUserRole = function (obj) {
        return this.httpAbs.insertWithHeader(this.userrolebaseurl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.updateAuthUserRole = function (obj) {
        return this.httpAbs.updateWithHeader(this.userrolebaseurl + '/' + obj.Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.deleteAuthUserRole = function (obj) {
        return this.httpAbs.remove(this.userrolebaseurl + '/' + obj.Id);
    };
    //Notification Alert functions
    AdminAuthApiService.prototype.getLatestAlert = function (id) {
        return this.httpAbs.fetch(this.latestalertbaseurl + id);
    };
    AdminAuthApiService.prototype.getNotificationAlerts = function (id) {
        if (id === void 0) { id = null; }
        if (id) {
            return this.httpAbs.fetch(this.alertbaseurl + '/' + id);
        }
        else {
            return this.httpAbs.fetch(this.alertbaseurl);
        }
    };
    AdminAuthApiService.prototype.getAlertFiltered = function (filter) {
        return this.httpAbs.fetchWithFilter(this.alertbaseurl + '/paged', filter, this.contentType);
    };
    AdminAuthApiService.prototype.createNotificationAlert = function (obj) {
        return this.httpAbs.insertWithHeader(this.alertbaseurl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.updateNotificationAlert = function (obj) {
        return this.httpAbs.updateWithHeader(this.alertbaseurl + '/' + obj.Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    //Applications List region
    AdminAuthApiService.prototype.getAuthApplicationsList = function () {
        return this.httpAbs.fetch(this.applicationsListUrl);
    };
    AdminAuthApiService.prototype.createAuthApplication = function (obj) {
        return this.httpAbs.insertWithHeader(this.applicationsListUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.updateAuthApplication = function (obj, primaryKeyColumn) {
        var id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.updateWithHeader(this.applicationsListUrl + '/' + id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.deleteAuthApplication = function (obj, primaryKeyColumn) {
        var id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.remove(this.applicationsListUrl + '/' + id);
    };
    //RoleApplication Region
    AdminAuthApiService.prototype.getRoleApplicationUrl = function (applicationId) {
        return this.applicationsListUrl + '/' + applicationId + '/roleapplication';
    };
    AdminAuthApiService.prototype.getApplicationRolesByApplicationId = function (applicationId) {
        return this.httpAbs.fetch(this.getRoleApplicationUrl(applicationId));
    };
    AdminAuthApiService.prototype.deleteApplicationRole = function (obj, primaryKeyColumn) {
        var id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.remove(this.roleApplicationUrl + '/' + id);
    };
    AdminAuthApiService.prototype.createRoleApplication = function (obj) {
        return this.httpAbs.insertWithHeader(this.roleApplicationUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.updateRoleApplication = function (obj, primaryKeyColumn) {
        var id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.updateWithHeader(this.roleApplicationUrl + '/' + id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.getRoleApplicationMenuItems = function (roleApplicationId) {
        return this.httpAbs.fetch(this.roleApplicationUrl + '/' + roleApplicationId + '/roleapplicationmenuitem');
    };
    AdminAuthApiService.prototype.updateRoleApplicationMenuItem = function (obj, primaryKeyColumn) {
        var id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.updateWithHeader(this.roleApplicationMenuItemUrl + '/' + id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.createRoleApplicationMenuItem = function (obj) {
        return this.httpAbs.insertWithHeader(this.roleApplicationMenuItemUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.deleteRoleApplicationMenuItem = function (obj, primaryKeyColumn) {
        var id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.remove(this.roleApplicationMenuItemUrl + '/' + id);
    };
    AdminAuthApiService.prototype.getRoleApplicationResources = function (roleApplicationId) {
        return this.httpAbs.fetch(this.roleApplicationUrl + '/' + roleApplicationId + '/roleapplicationresource');
    };
    AdminAuthApiService.prototype.updateRoleApplicationResources = function (obj, primaryKeyColumn) {
        var id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.updateWithHeader(this.roleapplicationresource + '/' + id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.createRoleApplicationResources = function (obj) {
        return this.httpAbs.insertWithHeader(this.roleapplicationresource, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    AdminAuthApiService.prototype.deleteRoleApplicationResources = function (obj, primaryKeyColumn) {
        var id = genericfunctions_1.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.remove(this.roleapplicationresource + '/' + id);
    };
    AdminAuthApiService.prototype.getAutoCompleteInfo = function (componentName) {
        return this.getAuthApplicationsList();
    };
    AdminAuthApiService.prototype.ExecuteUpdate = function (obj, pagename, primaryKeyColumn) {
        if (primaryKeyColumn === void 0) { primaryKeyColumn = ""; }
        switch (pagename.toLowerCase()) {
            case "user":
                return this.updateAuthUser(obj);
            case "role":
                return this.updateAuthRole(obj);
            case "resource":
                return this.updateAuthResource(obj);
            case "role_child":
            case "resource_child":
                return this.updateAuthRoleResource(obj);
            case "user_child":
                return this.updateUserRole(obj);
            case "alert":
                return this.updateNotificationAlert(obj);
            case "applicationslist":
                return this.updateAuthApplication(obj, primaryKeyColumn);
            case "applicationslist_child":
                return this.updateRoleApplication(obj, primaryKeyColumn);
            case "roleapplicationmenuitem":
                return this.updateRoleApplicationMenuItem(obj, primaryKeyColumn);
            case "roleapplicationresource":
                return this.updateRoleApplicationResources(obj, primaryKeyColumn);
        }
    };
    AdminAuthApiService.prototype.ExecutePageFilter = function (pagename, filterObject) {
        switch (pagename.toLowerCase()) {
            case "user":
                return this.getUserFiltered(filterObject);
            case "role":
                return this.getRoleFiltered(filterObject);
            case "resource":
                return this.getResourceFiltered(filterObject);
            case "alert":
                return this.getAlertFiltered(filterObject);
        }
    };
    AdminAuthApiService.prototype.ExecutePageRefresh = function (pagename, id) {
        if (id === void 0) { id = null; }
        switch (pagename.toLowerCase()) {
            case "user":
                return this.getAuthUser();
            case "role":
                return this.getAuthRole();
            case "resource":
                return this.getAuthResource();
            case "role_child":
                return this.getAuthRoleByRoleId(id);
            case "resource_child":
                return this.getAuthRoleByResourceId(id);
            case "user_child":
                return this.getAuthUserRolesByUserId(id);
            case "alert":
                return this.getNotificationAlerts(id);
            case "applicationslist":
                return this.getAuthApplicationsList();
            case "applicationslist_child":
                return this.getApplicationRolesByApplicationId(id);
            case "roleapplicationmenuitem":
                return this.getRoleApplicationMenuItems(id);
            case "roleapplicationresource":
                return this.getRoleApplicationResources(id);
        }
    };
    AdminAuthApiService.prototype.ExecuteDelete = function (obj, pagename, primaryKeyColumn) {
        if (primaryKeyColumn === void 0) { primaryKeyColumn = ""; }
        switch (pagename.toLowerCase()) {
            case "user":
                return this.deleteAuthUser(obj);
            case "role":
                return this.deleteAuthRole(obj);
            case "resource":
                return this.deleteAuthResource(obj);
            case "role_child":
            case "resource_child":
                return this.deleteAuthRoleResource(obj);
            case "user_child":
                return this.deleteUserRole(obj);
            case "applicationslist":
                return this.deleteAuthApplication(obj, primaryKeyColumn);
            case "applicationslist_child":
                return this.deleteApplicationRole(obj, primaryKeyColumn);
            case "roleapplicationmenuitem":
                return this.deleteRoleApplicationMenuItem(obj, primaryKeyColumn);
            case "roleapplicationresource":
                return this.deleteRoleApplicationResources(obj, primaryKeyColumn);
        }
    };
    AdminAuthApiService.prototype.ExecuteInsert = function (obj, pagename) {
        switch (pagename.toLowerCase()) {
            case "user":
                return this.createAuthUser(obj);
            case "role":
                return this.createAuthRole(obj);
            case "resource":
                return this.createAuthResource(obj);
            case "role_child":
            case "resource_child":
                return this.createAuthRoleResource(obj);
            case "user_child":
                return this.createUserRole(obj);
            case "alert":
                return this.createNotificationAlert(obj);
            case "applicationslist":
                return this.createAuthApplication(obj);
            case "applicationslist_child":
                return this.createRoleApplication(obj);
            case "roleapplicationmenuitem":
                return this.createRoleApplicationMenuItem(obj);
            case "roleapplicationresource":
                return this.createRoleApplicationResources(obj);
        }
    };
    AdminAuthApiService.prototype.checkBusinessValidations = function (inputRecords, pageName) {
        switch (pageName.toLowerCase()) {
            case "userrolegrid":
                inputRecords.forEach(function (x) {
                    x.checkBox.checked = (x.primaryKey && x.primaryKey.value) ? true : false;
                });
                break;
        }
    };
    AdminAuthApiService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _a) || Object, (typeof (_b = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _b) || Object, (typeof (_c = typeof adminApiService_1.AdminApiService !== 'undefined' && adminApiService_1.AdminApiService) === 'function' && _c) || Object])
    ], AdminAuthApiService);
    return AdminAuthApiService;
    var _a, _b, _c;
}());
exports.AdminAuthApiService = AdminAuthApiService;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/applicationsList/applicationsList.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var applicationsList_routes_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/applicationsList/applicationsList.routes.ts");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var applicationsList_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/applicationsList/applicationsList.ts");
var ApplicationsListModule = (function () {
    function ApplicationsListModule() {
    }
    ApplicationsListModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, applicationsList_routes_1.ApplicationsListRouting, SharedModule_1.SharedModule],
            declarations: [applicationsList_1.ApplicationsList],
        }), 
        __metadata('design:paramtypes', [])
    ], ApplicationsListModule);
    return ApplicationsListModule;
}());
exports.ApplicationsListModule = ApplicationsListModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/applicationsList/applicationsList.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var applicationsList_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/applicationsList/applicationsList.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ApplicationsListRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Auth/ApplicationsList', component: applicationsList_1.ApplicationsList, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/applicationsList/applicationsList.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var applicationsListControlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/applicationsList/applicationsListControlConfig.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var adminAuthApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/adminAuthApiService.ts");
var adminApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/adminApiService.ts");
var ApplicationsList = (function () {
    function ApplicationsList(alert, apiService, vmMatrix, adminAuthApiService, adminApiService) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.adminAuthApiService = adminAuthApiService;
        this.adminApiService = adminApiService;
        this.tabsListData = [];
        this.tabControlConfig = applicationsListControlConfig_1.ApplicationsListTabConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
        this.rolesList = [];
        this.selectedApplicationId = 0;
        this.selectedRoleApplicationId = 0;
    }
    ApplicationsList.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    ApplicationsList.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    ApplicationsList.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    ApplicationsList.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData, this.adminAuthApiService);
    };
    ApplicationsList.prototype.displayTabInfo = function (tabInfo) {
        var _this = this;
        this.selectedTabInfo = tabInfo;
        this.formBuilder = null;
        switch (tabInfo.TabKey) {
            case "Resources":
                var menuItemControl = tabInfo.TabControls.find(function (p) { return p.ComponentName == "menuitem"; });
                if (menuItemControl) {
                    menuItemControl['httpProxy'] = this.adminApiService;
                }
                this.tabBuilderControl.displayTabInfo(tabInfo);
                break;
            case "ApplicationRoles":
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "applicationroles"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                }
                tabInfo.TabControls.forEach(function (x) {
                    if (x.ComponentName == "roleapplicationmenuitem" || x.ComponentName == "roleapplicationresource") {
                        x.ShowDefault = false;
                    }
                });
                if (!this.rolesList.length) {
                    this.adminAuthApiService.getAuthRole().subscribe(function (res) {
                        _this.rolesList = res;
                        _this.tabBuilderControl.displayTabInfo(tabInfo);
                    }, function (error) {
                        _this.alert.error('Error in retrieving Roles' + error.status);
                    });
                }
                else {
                    this.tabBuilderControl.displayTabInfo(tabInfo);
                }
                break;
            default:
                this.tabBuilderControl.displayTabInfo(tabInfo);
                break;
        }
    };
    ApplicationsList.prototype.doActionFromChildTab = function (outputData) {
        switch (outputData.TabKey) {
            case "ApplicationRoles":
                this.executeApplicationRolesPage(outputData);
        }
    };
    ApplicationsList.prototype.executeApplicationRolesPage = function (outputData) {
        switch (outputData.updatedValue.controlName) {
            case "Application":
                this.selectedApplicationId = outputData.updatedValue.value;
                this.getApplicationRolesList();
                break;
            case "Role":
                this.selectedRoleApplicationId = outputData.updatedValue.value;
                this.displayRoleApplicationChildItems();
        }
    };
    ApplicationsList.prototype.getApplicationRolesList = function () {
        var _this = this;
        var applicationRolesList = [];
        if (this.selectedApplicationId) {
            this.adminAuthApiService.getApplicationRolesByApplicationId(this.selectedApplicationId).subscribe(function (res) {
                applicationRolesList = _this.getformattedRoleApplicationsList(res);
                var roleControl = _this.formBuilder.data.find(function (x) { return x.name == "Role"; });
                _this.vmMatrix.bindCustomDropDown(roleControl, applicationRolesList);
            }, function (error) {
                _this.alert.error('Error in retrieving Application Roles' + error.status);
            });
        }
    };
    ApplicationsList.prototype.getformattedRoleApplicationsList = function (applicationRolesList) {
        var _this = this;
        var formattedList = [];
        if (this.rolesList && this.rolesList.length && applicationRolesList && applicationRolesList.length) {
            applicationRolesList.forEach(function (x) {
                var tempRole = _this.rolesList.find(function (p) { return p.Id == x.RoleId; });
                if (tempRole) {
                    formattedList.push({
                        RoleApplicationId: x.Id,
                        Name: tempRole.Name
                    });
                }
            });
        }
        return formattedList;
    };
    ApplicationsList.prototype.displayRoleApplicationChildItems = function () {
        var _this = this;
        var updatedTabsList = [];
        if (this.selectedRoleApplicationId && this.selectedTabInfo) {
            this.apiService.fetchMultipleList([this.adminAuthApiService.roleApplicationUrl + '/' + this.selectedRoleApplicationId + '/roleapplicationmenuitem',
                this.adminAuthApiService.roleApplicationUrl + '/' + this.selectedRoleApplicationId + '/roleapplicationresource'
            ]).subscribe(function (res) {
                _this.selectedTabInfo.TabControls.forEach(function (x) {
                    if (x.ComponentName == "roleapplicationmenuitem" || x.ComponentName == "roleapplicationresource") {
                        x.data = (x.ComponentName == "roleapplicationmenuitem") ? res[0] : res[1];
                        x.parentIdInputValue = _this.selectedRoleApplicationId;
                        x.ShowDefault = true;
                        updatedTabsList.push(x);
                    }
                });
                _this.tabBuilderControl.LoadSpecificTabsByUpdate(updatedTabsList);
            }, function (error) {
                _this.alert.error('Error in retrieving Application Roles Menu and Resources' + error.status);
            });
        }
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], ApplicationsList.prototype, "tabBuilderControl", void 0);
    ApplicationsList = __decorate([
        core_1.Component({
            selector: 'applicationsList',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object, (typeof (_e = typeof adminAuthApiService_1.AdminAuthApiService !== 'undefined' && adminAuthApiService_1.AdminAuthApiService) === 'function' && _e) || Object, (typeof (_f = typeof adminApiService_1.AdminApiService !== 'undefined' && adminApiService_1.AdminApiService) === 'function' && _f) || Object])
    ], ApplicationsList);
    return ApplicationsList;
    var _a, _b, _c, _d, _e, _f;
}());
exports.ApplicationsList = ApplicationsList;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/applicationsList/applicationsListControlConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.RoleApplicationsControlConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    PaginationPageLimit: 10,
    ShowFilterRow: true,
    IsScrollableGrid: true,
    ForeignKeyColumn: "ApplicationId",
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "ApplicationId",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Application",
            "dataSourceAddress": { tableName: "/auth/application", dbColumnName: "Id", displayColumnName: "Name" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "RoleId",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Role",
            "dataSourceAddress": { tableName: "/auth/Role", dbColumnName: "Id", displayColumnName: "Name" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};
exports.ApplicationsListControlConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    PaginationPageLimit: 10,
    ShowFilterRow: true,
    IsScrollableGrid: true,
    IsChildPage: "true",
    ChildControlConfig: exports.RoleApplicationsControlConfig,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "LookupKey",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "LookupKey",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};
exports.RolesListControlConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    PaginationPageLimit: 10,
    RowSelectionMode: "None",
    ShowFilterRow: true,
    ChildGridType: "displayGrid",
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "External Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};
exports.MenuItemsConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    PaginationPageLimit: 10,
    ShowFilterRow: true,
    //ForeignKeyColumn: "ApplicationId",
    IsScrollableGrid: true,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "ApplicationId",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Application",
            "dataSourceAddress": { tableName: "/auth/Application", dbColumnName: "Id", displayColumnName: "Name" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "LookupKey",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "LookupKey",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Route",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Route",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "ViewConfig",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "ViewConfig",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "Title",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Title",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "MenuType",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Menu Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Parameter",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Parameters",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }
    ]
};
exports.ResourcesConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    //PaginationPageLimit: 10,
    IsScrollableGrid: true,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "External Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "ApiUrl",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ApiUrl",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};
exports.ApplicationRolesConfig = {
    ColumnConfiguration: [
        {
            "dbColumnName": "Application",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Application Name",
            "dataSourceAddress": { tableName: "/auth/Application", dbColumnName: "Id", displayColumnName: "Name" },
            "dataSource": undefined,
            "regex": undefined
        },
        {
            "dbColumnName": "Role",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Role",
            "dataSourceAddress": { dbColumnName: "RoleApplicationId", displayColumnName: "Name" },
            "dataSource": undefined,
            "regex": undefined
        }
    ]
};
exports.ApplicationRoleMenuItemConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    PaginationPageLimit: 10,
    ShowFilterRow: true,
    ForeignKeyColumn: "RoleApplicationId",
    IsScrollableGrid: true,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "RoleApplicationId",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Role",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "MenuItemId",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Menu Item",
            "dataSourceAddress": { tableName: "/auth/menuItem", dbColumnName: "Id", displayColumnName: "LookupKey" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Create",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Create",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Read",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Read",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Update",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Update",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Delete",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Delete",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};
exports.ApplicationRoleResourceConfig = {
    ChildType: "editInline",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    PaginationPageLimit: 10,
    ShowFilterRow: true,
    ForeignKeyColumn: "RoleApplicationId",
    IsScrollableGrid: true,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "RoleApplicationId",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Role",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "ResourceId",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Resource Name",
            "dataSourceAddress": { tableName: "/auth/resource", dbColumnName: "Id", displayColumnName: "Name", isBodyRemoved: true },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Create",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Create",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Read",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Read",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Update",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Update",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Delete",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Delete",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};
exports.ApplicationsListTabConfig = {
    TabsList: [
        {
            TabKey: "Applications",
            TabName: "Applications",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "ApplicationsList",
                    PageType: "displaygrid",
                    gridSettings: exports.ApplicationsListControlConfig,
                    PageOperationType: 'dynamicform'
                }
            ],
        }, {
            TabKey: "Roles",
            TabName: "Roles List",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "role",
                    PageType: "displaygrid",
                    gridSettings: exports.RolesListControlConfig,
                    PageOperationType: 'dynamicform'
                }
            ],
        },
        {
            TabKey: "Resources",
            TabName: "Resources",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "menuitem",
                    PageType: "displaygrid",
                    gridSettings: exports.MenuItemsConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: true,
                    ComponentName: "resource",
                    PageType: "displaygrid",
                    gridSettings: exports.ResourcesConfig,
                    PageOperationType: 'dynamicform'
                }
            ],
        },
        {
            TabKey: "ApplicationRoles",
            TabName: "Application Roles",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "applicationroles",
                    PageType: "formbuilder",
                    gridSettings: exports.ApplicationRolesConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "roleapplicationmenuitem",
                    PageType: "displaygrid",
                    gridSettings: exports.ApplicationRoleMenuItemConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "roleapplicationresource",
                    PageType: "displaygrid",
                    gridSettings: exports.ApplicationRoleResourceConfig,
                    PageOperationType: 'dynamicform'
                }
            ]
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/auth.mainModule.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var auth_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/auth.ts");
var user_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/user/user.Module.ts");
var roler_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/role/roler.Module.ts");
var auth_routes_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/auth.routes.ts");
var resource_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/resource/resource.Module.ts");
var notification_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/notificationAlert/notification.Module.ts");
var menuItem_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/menuItem/menuItem.Module.ts");
var adminAuthApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/adminAuthApiService.ts");
var applicationsList_module_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/applicationsList/applicationsList.module.ts");
var AuthModule = (function () {
    function AuthModule() {
    }
    AuthModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, auth_routes_1.AuthRouting, user_Module_1.AuthUserModule, roler_Module_1.AuthRoleModule, resource_Module_1.ResourceModule,
                notification_Module_1.NotificationModule, menuItem_Module_1.MenuItemModule, applicationsList_module_1.ApplicationsListModule
            ],
            declarations: [auth_1.Auth],
            providers: [adminAuthApiService_1.AdminAuthApiService]
        }), 
        __metadata('design:paramtypes', [])
    ], AuthModule);
    return AuthModule;
}());
exports.AuthModule = AuthModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/auth.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var auth_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/auth.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.AuthRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Auth', component: auth_1.Auth, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/auth.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var Auth = (function () {
    function Auth(navService, location) {
        this.navService = navService;
        /*this.navService.getChildMenu(['Admin','Auth']);
        navService.setCurrentPage(location.path(false));*/
        /* let links=this.navService.getLeftMenuRoutes(['Auth']);
         navService.NavigateToPage(links,null);*/
    }
    Auth = __decorate([
        core_1.Component({
            selector: 'auth',
            template: "",
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _b) || Object])
    ], Auth);
    return Auth;
    var _a, _b;
}());
exports.Auth = Auth;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/menuItem/menuItem.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var menuItem_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/menuItem/menuItem.routing.ts");
var menuItem_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/menuItem/menuItem.ts");
var MenuItemModule = (function () {
    function MenuItemModule() {
    }
    MenuItemModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, menuItem_routing_1.MenuItemRouting, SharedModule_1.SharedModule],
            declarations: [menuItem_1.MenuItem],
        }), 
        __metadata('design:paramtypes', [])
    ], MenuItemModule);
    return MenuItemModule;
}());
exports.MenuItemModule = MenuItemModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/menuItem/menuItem.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var menuItem_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/menuItem/menuItem.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.MenuItemRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Auth/MenuItem', component: menuItem_1.MenuItem, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/menuItem/menuItem.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var menuItemControlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/menuItem/menuItemControlConfig.ts");
var adminApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/adminApiService.ts");
var MenuItem = (function () {
    function MenuItem(adminApiService) {
        this.adminApiService = adminApiService;
        this.controlConfig = menuItemControlConfig_1.MenuItemControlConfig;
    }
    MenuItem.prototype.ngAfterViewInit = function () {
        this.refreshUsers();
    };
    MenuItem.prototype.refreshUsers = function () {
        this.dataTable.GetParentPageDetails(this.controlConfig, this.adminApiService, "menuitem");
    };
    __decorate([
        core_1.ViewChild(displayGrid_1.DisplayGridComponent), 
        __metadata('design:type', (typeof (_a = typeof displayGrid_1.DisplayGridComponent !== 'undefined' && displayGrid_1.DisplayGridComponent) === 'function' && _a) || Object)
    ], MenuItem.prototype, "dataTable", void 0);
    MenuItem = __decorate([
        core_1.Component({
            selector: 'menuItem',
            template: '<div><displayGrid></displayGrid></div>',
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof adminApiService_1.AdminApiService !== 'undefined' && adminApiService_1.AdminApiService) === 'function' && _b) || Object])
    ], MenuItem);
    return MenuItem;
    var _a, _b;
}());
exports.MenuItem = MenuItem;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/menuItem/menuItemControlConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var TheChild = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    ForeignKeyColumn: "MenuItemId",
    PaginationPageLimit: 10,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "RoleId",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Role",
            "dataSourceAddress": { tableName: "/auth/Role", dbColumnName: "Id", displayColumnName: "Description" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "MenuItemId",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "MenuItem",
            "dataSourceAddress": { tableName: "/auth/menuitem", dbColumnName: "Id", displayColumnName: "LookupKey" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Create",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Create",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Read",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Read",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Update",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Update",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Delete",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Delete",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};
exports.MenuItemControlConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: true,
    ShallHideAddButton: false,
    IsChildPage: "true",
    ChildControlConfig: TheChild,
    PaginationPageLimit: 10,
    ShowFilterRow: true,
    ForeignKeyColumn: "ApplicationId",
    IsScrollableGrid: true,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "ApplicationId",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Application",
            "dataSourceAddress": { tableName: "/auth/Application", dbColumnName: "Id", displayColumnName: "Name" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "LookupKey",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "LookupKey",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Route",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Route",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "ViewConfig",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "ViewConfig",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "Title",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Title",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "MenuType",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Menu Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Parameter",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Parameters",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/notificationAlert/notification.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var notification_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/notificationAlert/notification.routing.ts");
var notificationAlert_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/notificationAlert/notificationAlert.ts");
var NotificationModule = (function () {
    function NotificationModule() {
    }
    NotificationModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, notification_routing_1.NotificationRouting, SharedModule_1.SharedModule],
            declarations: [notificationAlert_1.NotificationAlert],
        }), 
        __metadata('design:paramtypes', [])
    ], NotificationModule);
    return NotificationModule;
}());
exports.NotificationModule = NotificationModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/notificationAlert/notification.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var notificationAlert_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/notificationAlert/notificationAlert.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.NotificationRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Auth/NotificationAlert', component: notificationAlert_1.NotificationAlert, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/notificationAlert/notificationAlert.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var notificationAlertControlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/notificationAlert/notificationAlertControlConfig.ts");
var adminAuthApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/adminAuthApiService.ts");
var NotificationAlert = (function () {
    function NotificationAlert(adminAuthApiService) {
        this.adminAuthApiService = adminAuthApiService;
        this.controlConfig = notificationAlertControlConfig_1.NotificationAlertControlConfig;
    }
    NotificationAlert.prototype.ngAfterViewInit = function () {
        this.refreshAlerts();
    };
    NotificationAlert.prototype.refreshAlerts = function () {
        this.dataTable.GetParentPageDetails(this.controlConfig, this.adminAuthApiService, "alert");
    };
    __decorate([
        core_1.ViewChild(displayGrid_1.DisplayGridComponent), 
        __metadata('design:type', (typeof (_a = typeof displayGrid_1.DisplayGridComponent !== 'undefined' && displayGrid_1.DisplayGridComponent) === 'function' && _a) || Object)
    ], NotificationAlert.prototype, "dataTable", void 0);
    NotificationAlert = __decorate([
        core_1.Component({
            selector: 'notificationAlert',
            template: '<div><displayGrid></displayGrid></div>'
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof adminAuthApiService_1.AdminAuthApiService !== 'undefined' && adminAuthApiService_1.AdminAuthApiService) === 'function' && _b) || Object])
    ], NotificationAlert);
    return NotificationAlert;
    var _a, _b;
}());
exports.NotificationAlert = NotificationAlert;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/notificationAlert/notificationAlertControlConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.NotificationAlertControlConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: true,
    ShallHideAddButton: false,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "StartDate",
            "htmlControlType": "datetime-local",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Start Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "EndDate",
            "htmlControlType": "datetime-local",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "End Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "IsActive",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Active",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "RoleId",
            "htmlControlType": "select",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Role",
            "dataSourceAddress": { tableName: "/auth/role", dbColumnName: "Id", displayColumnName: "Description" },
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "CreatedBy",
            "htmlControlType": "select",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "CreatedBy",
            "dataSourceAddress": { tableName: "/auth/User", dbColumnName: "Id", displayColumnName: "Login" },
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/resource/resource.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var resource_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/resource/resource.ts");
var resource_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/resource/resource.routing.ts");
var ResourceModule = (function () {
    function ResourceModule() {
    }
    ResourceModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, resource_routing_1.ResourceRouting, SharedModule_1.SharedModule],
            declarations: [resource_1.AuthResource],
        }), 
        __metadata('design:paramtypes', [])
    ], ResourceModule);
    return ResourceModule;
}());
exports.ResourceModule = ResourceModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/resource/resource.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var resource_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/resource/resource.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ResourceRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Auth/Resource', component: resource_1.AuthResource, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/resource/resource.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var resourceControlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/resource/resourceControlConfig.ts");
var adminAuthApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/adminAuthApiService.ts");
var AuthResource = (function () {
    function AuthResource(adminAuthApiService) {
        this.adminAuthApiService = adminAuthApiService;
        this.controlConfig = resourceControlConfig_1.ResourceControlConfig;
    }
    AuthResource.prototype.ngAfterViewInit = function () {
        this.refreshResources();
    };
    AuthResource.prototype.refreshResources = function () {
        this.dataTable.GetParentPageDetails(this.controlConfig, this.adminAuthApiService, "resource");
    };
    __decorate([
        core_1.ViewChild(displayGrid_1.DisplayGridComponent), 
        __metadata('design:type', (typeof (_a = typeof displayGrid_1.DisplayGridComponent !== 'undefined' && displayGrid_1.DisplayGridComponent) === 'function' && _a) || Object)
    ], AuthResource.prototype, "dataTable", void 0);
    AuthResource = __decorate([
        core_1.Component({
            selector: 'authResource',
            template: '<div><displayGrid></displayGrid></div>',
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof adminAuthApiService_1.AdminAuthApiService !== 'undefined' && adminAuthApiService_1.AdminAuthApiService) === 'function' && _b) || Object])
    ], AuthResource);
    return AuthResource;
    var _a, _b;
}());
exports.AuthResource = AuthResource;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/resource/resourceControlConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.TheChild = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    ForeignKeyColumn: "ResourceId",
    PaginationPageLimit: 10,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        },
        {
            "dbColumnName": "RoleId",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Role",
            "dataSourceAddress": { tableName: "/auth/Role", dbColumnName: "Id", displayColumnName: "Description" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "ResourceId",
            "htmlControlType": "select",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "ApiUrl",
            "dataSourceAddress": { tableName: "/auth/resource", dbColumnName: "Id", displayColumnName: "ApiUrl" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Create",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Create",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Read",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Read",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Update",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Update",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Delete",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Delete",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }]
};
exports.ResourceControlConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    IsChildPage: "true",
    PaginationPageLimit: 10,
    ChildControlConfig: exports.TheChild,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        },
        {
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "External Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "ApiUrl",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ApiUrl",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/role/role.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var role_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/role/role.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.RoleRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Auth/Role', component: role_1.AuthRole, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/role/role.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var roleControlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/role/roleControlConfig.ts");
var adminAuthApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/adminAuthApiService.ts");
var AuthRole = (function () {
    function AuthRole(adminAuthApiService) {
        this.adminAuthApiService = adminAuthApiService;
        this.controlConfig = roleControlConfig_1.RoleControlConfig;
    }
    AuthRole.prototype.ngAfterViewInit = function () {
        this.refreshRoles();
    };
    AuthRole.prototype.refreshRoles = function () {
        this.dataTable.GetParentPageDetails(this.controlConfig, this.adminAuthApiService, "role");
    };
    __decorate([
        core_1.ViewChild(displayGrid_1.DisplayGridComponent), 
        __metadata('design:type', (typeof (_a = typeof displayGrid_1.DisplayGridComponent !== 'undefined' && displayGrid_1.DisplayGridComponent) === 'function' && _a) || Object)
    ], AuthRole.prototype, "dataTable", void 0);
    AuthRole = __decorate([
        core_1.Component({
            selector: 'auth',
            template: '<div><displayGrid></displayGrid></div>',
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof adminAuthApiService_1.AdminAuthApiService !== 'undefined' && adminAuthApiService_1.AdminAuthApiService) === 'function' && _b) || Object])
    ], AuthRole);
    return AuthRole;
    var _a, _b;
}());
exports.AuthRole = AuthRole;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/role/roleControlConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.TheChild = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    PaginationPageLimit: 10,
    ForeignKeyColumn: "RoleId",
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isAlwaysVisibleOn": ["FormBuilder"]
        },
        {
            "dbColumnName": "RoleId",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Role",
            "dataSourceAddress": { tableName: "/auth/Role", dbColumnName: "Id", displayColumnName: "Description" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "ResourceId",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "ApiUrl",
            "dataSourceAddress": { tableName: "/auth/resource", dbColumnName: "Id", displayColumnName: "ApiUrl" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Create",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Create",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Read",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Read",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Update",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Update",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Delete",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Delete",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isAlwaysVisibleOn": ["FormBuilder"]
        }]
};
exports.RoleControlConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    IsChildPage: "true",
    ChildControlConfig: exports.TheChild,
    PaginationPageLimit: 10,
    RowSelectionMode: "None",
    ShowFilterRow: true,
    ChildGridType: "displayGrid",
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isAlwaysVisibleOn": ["FormBuilder"]
        },
        {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "External Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isAlwaysVisibleOn": ["FormBuilder"]
        }]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/role/roler.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var role_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/role/role.ts");
var role_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/role/role.routing.ts");
var AuthRoleModule = (function () {
    function AuthRoleModule() {
    }
    AuthRoleModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, role_routing_1.RoleRouting, SharedModule_1.SharedModule],
            declarations: [role_1.AuthRole],
        }), 
        __metadata('design:paramtypes', [])
    ], AuthRoleModule);
    return AuthRoleModule;
}());
exports.AuthRoleModule = AuthRoleModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/user/user.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var user_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/user/user.routing.ts");
var user_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/user/user.ts");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var AuthUserModule = (function () {
    function AuthUserModule() {
    }
    AuthUserModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, user_routing_1.UserRouting, SharedModule_1.SharedModule],
            declarations: [user_1.AuthUser],
        }), 
        __metadata('design:paramtypes', [])
    ], AuthUserModule);
    return AuthUserModule;
}());
exports.AuthUserModule = AuthUserModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/user/user.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var user_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/user/user.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.UserRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Auth/User', component: user_1.AuthUser, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/user/user.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var userControlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/user/userControlConfig.ts");
var adminAuthApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/auth/adminAuthApiService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var AuthUser = (function () {
    function AuthUser(adminAuthApiService, vmMatrix, apiService, alert, appSettingsService) {
        this.adminAuthApiService = adminAuthApiService;
        this.vmMatrix = vmMatrix;
        this.apiService = apiService;
        this.alert = alert;
        this.appSettingsService = appSettingsService;
        this.controlConfig = userControlConfig_1.UserControlConfig;
        this.tabsListData = [];
        this.tabControlConfig = userControlConfig_1.UserTabControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
        this.selectedUserId = 0;
    }
    AuthUser.prototype.ngOnInit = function () {
        this.tabsListData = [];
        this.getTabsData();
    };
    AuthUser.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    AuthUser.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    AuthUser.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData, this.adminAuthApiService);
    };
    AuthUser.prototype.displayTabInfo = function (tabInfo) {
        switch (tabInfo.TabKey) {
            case 'UserRoles':
                var tempFormBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "userroleform"; });
                if (tempFormBuilder) {
                    tempFormBuilder.data = this.vmMatrix.getFormBuilderControls(tempFormBuilder.gridSettings);
                }
                var tempGrid = tabInfo.TabControls.find(function (x) { return x.ComponentName == "userrolegrid"; });
                if (tempGrid) {
                    tempGrid.ShowDefault = false;
                }
                break;
        }
        this.selectedTabInfo = tabInfo;
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    AuthUser.prototype.doActionFromChildTab = function (outputData) {
        this.customMessages = [];
        switch (outputData.updatedValue.controlName) {
            case "Login":
                this.selectedUserId = outputData.updatedValue.value;
                this.getUserRoleTabInfo();
                break;
            case "Save":
                this.updateUserRoles(outputData);
                break;
            case "Cancel":
                this.getUserRoleTabInfo();
                break;
        }
    };
    AuthUser.prototype.getUserRoleTabInfo = function () {
        var _this = this;
        var updatedTabsList = [];
        this.apiService.getArrayFromQuery("Admin_UserRoleMembership", JSON.stringify({ Parameters: [{ Name: "@UserId", Value: this.selectedUserId }] })).subscribe(function (res) {
            if (_this.selectedTabInfo) {
                var userRolegrid = _this.selectedTabInfo.TabControls.find(function (p) { return p.ComponentName == 'userrolegrid'; });
                if (userRolegrid) {
                    userRolegrid['data'] = res;
                    userRolegrid.ShowDefault = true;
                    updatedTabsList.push(userRolegrid);
                    _this.tabBuilderControl.LoadSpecificTabsByUpdate(updatedTabsList);
                }
            }
        }, function (error) {
            _this.alert.error("Error in retrieving User role Membership info" + error.status);
        }, function () {
        });
    };
    AuthUser.prototype.updateUserRoles = function (outputData) {
        var _this = this;
        var rolesTobeAddedList = [];
        var addedUserRolesList = [];
        var rolesTobeRemovedList = [];
        var removedUserRolesList = [];
        if (outputData.updatedValue) {
            var selectedList = outputData.updatedValue.value;
            if (selectedList && selectedList.length) {
                rolesTobeAddedList = selectedList.filter(function (p) { return (!p.primaryKey.value) && p.checkBox.checked; });
            }
            var masterList = outputData.updatedValue.masterList;
            if (masterList && masterList.length) {
                rolesTobeRemovedList = masterList.filter(function (p) { return p.primaryKey.value && (!p.checkBox.checked); });
            }
        }
        rolesTobeAddedList.forEach(function (p) {
            var formattedUserRole = _this.buildUserRoleObject(p);
            addedUserRolesList.push(formattedUserRole);
        });
        rolesTobeRemovedList.forEach(function (p) {
            var formattedUserRole = _this.buildUserRoleObject(p);
            removedUserRolesList.push(formattedUserRole);
        });
        if (addedUserRolesList.length) {
            this.addUserRolesList(addedUserRolesList, removedUserRolesList);
        }
        else if (removedUserRolesList.length) {
            this.removeUserRolesList(removedUserRolesList);
        }
    };
    AuthUser.prototype.addUserRolesList = function (addedUserRolesList, removedUserRolesList) {
        var _this = this;
        if (removedUserRolesList === void 0) { removedUserRolesList = []; }
        this.apiService.insertBulkRecords('/auth/userrole/multiple', JSON.stringify(addedUserRolesList)).subscribe(function (res) {
            if (removedUserRolesList && removedUserRolesList.length) {
                _this.removeUserRolesList(removedUserRolesList);
            }
            else {
                _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.saveConfirmedMsg);
                _this.getUserRoleTabInfo();
            }
        }, function (error) {
            _this.alert.error("Error in inserting User role Membership" + error.status);
        });
    };
    AuthUser.prototype.removeUserRolesList = function (removedUserRolesList) {
        var _this = this;
        this.apiService.removeBulkRecords('/auth/userrole/multiple', JSON.stringify(removedUserRolesList)).subscribe(function (res) {
            _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.saveConfirmedMsg);
            _this.getUserRoleTabInfo();
        }, function (error) {
            _this.alert.error("Error in deleting User role Membership" + error.status);
        });
    };
    AuthUser.prototype.buildUserRoleObject = function (rowInfo) {
        //Always expect a roleId. If not error
        var roleId = rowInfo.cells.find(function (p) { return p.name.toLowerCase() == 'roleid'; }).val;
        var id = rowInfo.primaryKey.value;
        if (!id) {
            id = 0;
        }
        var tempUserRole = new UserRole(id, roleId, this.selectedUserId);
        return tempUserRole;
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], AuthUser.prototype, "tabBuilderControl", void 0);
    AuthUser = __decorate([
        core_1.Component({
            selector: 'authUser',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>",
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof adminAuthApiService_1.AdminAuthApiService !== 'undefined' && adminAuthApiService_1.AdminAuthApiService) === 'function' && _b) || Object, (typeof (_c = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _c) || Object, (typeof (_d = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _d) || Object, (typeof (_e = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _e) || Object, (typeof (_f = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _f) || Object])
    ], AuthUser);
    return AuthUser;
    var _a, _b, _c, _d, _e, _f;
}());
exports.AuthUser = AuthUser;
var UserRole = (function () {
    function UserRole(id, roleId, userId) {
        this.VersionStamp = '';
        this.Id = id;
        this.RoleId = roleId;
        this.UserId = userId;
    }
    return UserRole;
}());
exports.UserRole = UserRole;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/auth/user/userControlConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.UserRoleFormControlConfig = {
    ColumnConfiguration: [
        {
            "dbColumnName": "Login",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Login",
            "dataSourceAddress": { tableName: "/auth/user", dbColumnName: "Id", displayColumnName: "Login" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
    ]
};
exports.UserRoleControlConfig = {
    ChildType: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    RowSelectionMode: 'Multi',
    UseBusinessValidation: true,
    CustomButtons: [
        {
            name: 'Save',
            value: 'Save',
            disabled: false,
            visible: true,
            formValidate: false
        },
        {
            name: 'Cancel',
            value: 'Cancel',
            disabled: false,
            visible: true,
            formValidate: false
        }
    ],
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        },
        {
            "dbColumnName": "ApplicationId",
            "htmlControlType": "select",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Application",
            "dataSourceAddress": { tableName: "/auth/Application", dbColumnName: "Id", displayColumnName: "Name" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "RoleId",
            "htmlControlType": "select",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Role",
            "dataSourceAddress": { tableName: "/auth/role", dbColumnName: "Id", displayColumnName: "Name" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        }]
};
exports.UserControlConfig = {
    ChildType: "editInline",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    PaginationPageLimit: 10,
    ShowFilterRow: true,
    IsScrollableGrid: true,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        },
        {
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Login",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "UserName",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "CostCentre",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Cost Centre",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }],
    "RulesConfig": [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": [
                "required"
            ],
            "ruleAssociates": [
                "Name",
                "Login",
                "CostCentre"
            ],
            "apiObject": "User"
        }]
};
exports.UserTabControlConfig = {
    TabsList: [
        {
            TabKey: "User",
            TabName: "User",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "user",
                    PageType: "displaygrid",
                    gridSettings: exports.UserControlConfig
                }
            ],
        },
        {
            TabKey: "UserRoles",
            TabName: "User Roles",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "userroleform",
                    PageType: "formbuilder",
                    gridSettings: exports.UserRoleFormControlConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "userrolegrid",
                    PageType: "displaygrid",
                    gridSettings: exports.UserRoleControlConfig
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/configBuilder/configBuilder.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var configBuilder_1 = __webpack_require__("./src/app/Datahub/routes/admin/configBuilder/configBuilder.ts");
var configBuilder_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/configBuilder/configBuilder.routing.ts");
var configBuilderAddEditForm_1 = __webpack_require__("./src/app/Datahub/routes/admin/configBuilder/configBuilderAddEditForm/configBuilderAddEditForm.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var ConfigBuilderModule = (function () {
    function ConfigBuilderModule() {
    }
    ConfigBuilderModule = __decorate([
        core_1.NgModule({
            imports: [forms_1.FormsModule, platform_browser_1.BrowserModule, configBuilder_routing_1.ConfigBuilderRouting, SharedModule_1.SharedModule],
            declarations: [configBuilder_1.ConfigBuilder, configBuilderAddEditForm_1.configBuilderAddEditForm],
        }), 
        __metadata('design:paramtypes', [])
    ], ConfigBuilderModule);
    return ConfigBuilderModule;
}());
exports.ConfigBuilderModule = ConfigBuilderModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/configBuilder/configBuilder.html":
/***/ (function(module, exports) {

module.exports = "<section class=\"row\">\r\n    <template [ngIf]=\"isPageForm\">\r\n        <configBuilderAddEditForm [originalInput]=\"pageEditViewRowDataTable\" [pageType]=\"selectedPageType\" [pluginInput]=\"pageEditViewRowDataTable\" [gridSettings]=\"config\"></configBuilderAddEditForm>\r\n    </template>\r\n    <template [ngIf]=\"isColumnForm\">\r\n        <configBuilderAddEditForm [originalInput]=\"columnEditViewRowDataTable\" [pageType]=\"selectedPageType\" [pluginInput]=\"pageEditViewRowDataTable\" [gridSettings]=\"config\"></configBuilderAddEditForm>\r\n    </template>\r\n    <article>\r\n        <div>\r\n            <button class=\"button-standard \" (click)=\"addPageClicked()\">Add Page</button>\r\n            <button class=\"button-standard \" (click)=\"addColumnClicked()\">Add Column</button>\r\n            <button class=\"button-standard \" (click)=\"previewClicked()\">Preview Form</button>\r\n        </div>\r\n        <div>\r\n            <input type=\"text\" [(ngModel)]=\"deleteColumnValue\"/>\r\n            <button class=\"button-standard \" (click)=\"deleteColumnClicked()\">Delete Column</button>\r\n        </div>\r\n    </article>\r\n</section>\r\n<section>\r\n    <article Id=\"ConfigBuilderResult\">\r\n        <label>JSON Output</label>\r\n        <div><textarea>{{jsonResult}}</textarea></div>\r\n        <label>Validation Result</label>\r\n        <div><textarea>{{schemaValidationResult}}</textarea></div>\r\n    </article>\r\n    <article Id=\"ConfigBuilderPreview\">\r\n        <div *ngIf=\"IsPreview\" class=\"row\">\r\n            <div class=\"col-sm-12 col-md-6\">\r\n                <formBuilder [IsHideCancel]=\"true\" [pluginInput]=\"previewEditViewRowTable\" [gridSettings]=\"objectResult\"></formBuilder>\r\n            </div>\r\n        </div>\r\n    </article>\r\n</section>\r\n"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/configBuilder/configBuilder.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var configBuilder_1 = __webpack_require__("./src/app/Datahub/routes/admin/configBuilder/configBuilder.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ConfigBuilderRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/configBuilder', component: configBuilder_1.ConfigBuilder, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/configBuilder/configBuilder.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var configBuilderColumnConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/configBuilder/configBuilderColumnConfig.ts");
var configBuilderPageConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/configBuilder/configBuilderPageConfig.ts");
var configBuilderMetaRules_1 = __webpack_require__("./src/app/Datahub/routes/admin/configBuilder/configBuilderMetaRules.ts");
var FormSchema_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/StandardValidation/FormSchema.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var ConfigBuilder = (function () {
    function ConfigBuilder(elementRef, vmMat, intFormSer, alert, appSettingsService, navService, location) {
        var _this = this;
        this.elementRef = elementRef;
        this.vmMat = vmMat;
        this.intFormSer = intFormSer;
        this.alert = alert;
        this.appSettingsService = appSettingsService;
        this.navService = navService;
        this.location = location;
        this.jsonResult = "Hello";
        this.IsPreview = false;
        this.pageConfig = configBuilderPageConfig_1.ConfigBuilderPageConfig;
        this.columnConfig = configBuilderColumnConfig_1.ConfigBuilderColumnConfig;
        this.configBuilderRuleAndSchema = configBuilderMetaRules_1.ConfigBuilderRuleAndSchema;
        this.ruleObj = new FormSchema_1.JsonSchemaRuleFactory(this.configBuilderRuleAndSchema).CreateRule("ConfigBuilderRuleAndSchema");
        //navService.setCurrentPage(location.path(false));
        //this.dc=dcl;
        this.elemRef = elementRef;
        this.vmMatrix = vmMat;
        this.interFormService = intFormSer;
        this.interFormService.columnInserted.subscribe(function (x) { return _this.columnInserted(x); });
        this.interFormService.pageInserted.subscribe(function (x) { return _this.pageInserted(x); });
        this.objectResult = Object.create(null);
        this.objectResult.ColumnConfiguration = new Array();
        var columnObject = [{
                dbColumnName: "",
                htmlControlType: "text",
                "isVisible": true,
                "isRequired": true,
                "isComplexType": false,
                "displayName": "",
                "dataSourceAddress": "",
                "dataSource": "",
                "regex": "",
                "columnCss": ""
            }];
        var pageObject = [{
                ChildType: "",
                PrimaryKeyColumn: "",
                ForeignKeyColumn: "",
                ShallHideDeleteButton: false,
                ShallHideAddButton: false,
                IsChildPage: true,
                ShowFilterRow: false,
                PaginationPageLimit: "10",
            }];
        var foreignKeyNode = this.columnConfig.find(function (x) { return x.dbColumnName === "dataSourceAddress"; });
        var foreignKeyFirstObject = this.vmMatrix.extractMatrix(foreignKeyNode.isComplexTypeInlineTemplate, foreignKeyNode.isComplexTypeInlineTemplateConfig);
        var foreignKeyHeader = this.vmMatrix.extractHeader(foreignKeyNode.isComplexTypeInlineTemplate, foreignKeyNode.isComplexTypeInlineTemplateConfig);
        var foreignKeyEditViewRowDataTable = this.vmMatrix.editMatrix(foreignKeyFirstObject[0].cells, foreignKeyHeader, foreignKeyNode.isComplexTypeInlineTemplateConfig);
        foreignKeyNode.isComplexTypeInlineTemplate = foreignKeyEditViewRowDataTable;
        this.columnObject = this.vmMatrix.extractMatrix(columnObject, this.columnConfig);
        this.columnHeader = this.vmMatrix.extractHeader(columnObject, this.columnConfig);
        this.columnEditViewRowDataTable = this.vmMatrix.editMatrix(this.columnObject[0].cells, this.columnHeader, this.columnConfig);
        this.firstPageObject = this.vmMatrix.extractMatrix(pageObject, this.pageConfig);
        this.pageHeader = this.vmMatrix.extractHeader(pageObject, this.pageConfig);
        this.pageEditViewRowDataTable = this.vmMatrix.editMatrix(this.firstPageObject[0].cells, this.pageHeader, this.pageConfig);
    }
    ConfigBuilder.prototype.RefreshDataFromFormBuilder = function (updatedValue) {
        console.log(updatedValue);
        if (updatedValue === "cancel") {
            this.cancelClicked();
        }
        else {
            this.PageRefreshFromDynamicComponent(updatedValue);
        }
    };
    ConfigBuilder.prototype.PageRefreshFromDynamicComponent = function (data) {
    };
    ConfigBuilder.prototype.cancelClicked = function () {
    };
    ConfigBuilder.prototype.addPageClicked = function () {
        this.selectedPageType = "configBuilderAddPage";
        this.config = this.pageConfig;
        this.isPageForm = true;
        this.isColumnForm = false;
    };
    ConfigBuilder.prototype.addColumnClicked = function () {
        this.selectedPageType = "configBuilderAddColumn";
        this.config = this.columnConfig;
        this.isPageForm = false;
        this.isColumnForm = true;
    };
    ConfigBuilder.prototype.pageInserted = function (x) {
        ;
        this.objectResult = x;
        this.objectResult.ColumnConfiguration = new Array();
        this.jsonResult = JSON.stringify(this.objectResult);
        this.validateSchema();
    };
    ConfigBuilder.prototype.columnInserted = function (x) {
        var indexPos = this.objectResult.ColumnConfiguration.findIndex(function (y) { return y.dbColumnName.toLowerCase() === x.dbColumnName.toLowerCase(); });
        if (indexPos > -1) {
            this.objectResult.ColumnConfiguration[indexPos] = x;
        }
        else {
            this.objectResult.ColumnConfiguration.push(x);
        }
        this.jsonResult = JSON.stringify(this.objectResult);
        this.validateSchema();
    };
    ConfigBuilder.prototype.validateSchema = function () {
        var result = this.ruleObj.Validate(this.objectResult);
        if (!result.HasErrors) {
            this.schemaValidationResult = "Success";
        }
        else {
            this.schemaValidationResult = "ERRORS:";
        }
    };
    ConfigBuilder.prototype.previewClicked = function () {
        this.IsPreview = !this.IsPreview;
        this.formBuilderheaderTable = this.vmMatrix.extractHeader(null, this.objectResult);
        this.previewEditViewRowTable = this.vmMatrix.getFormBuilderControls(this.objectResult);
    };
    ConfigBuilder.prototype.deleteColumnClicked = function () {
        var _this = this;
        var deletedColumnValue = this.deleteColumnValue;
        if (this.objectResult) {
            var x = this.objectResult.ColumnConfiguration.find(function (x) { return x.dbColumnName.toLowerCase() === _this.deleteColumnValue.toLowerCase(); });
            if (x) {
                this.alert.addAlertAndRequestAnswer(this.appSettingsService.appNotificationsMsg.deletionQuestionMsg);
                this.alert.requestConfirmationAnswer$.subscribe(function (item) {
                    _this.alert.askConfirmation = false;
                    if (item != "OK")
                        return;
                    _this.objectResult.ColumnConfiguration.forEach(function (item, index, object) {
                        if (item.dbColumnName.toLowerCase() === deletedColumnValue.toLowerCase()) {
                            object.splice(index, 1);
                        }
                    });
                    _this.alert.addAlert("column deleted successfully");
                    _this.jsonResult = JSON.stringify(_this.objectResult);
                    _this.validateSchema();
                });
            }
            else {
                this.alert.error("column " + this.deleteColumnValue + " does not exist in json!!!");
            }
        }
    };
    __decorate([
        core_1.ViewChild(forms_1.FormBuilder), 
        __metadata('design:type', (typeof (_a = typeof forms_1.FormBuilder !== 'undefined' && forms_1.FormBuilder) === 'function' && _a) || Object)
    ], ConfigBuilder.prototype, "formBuilderPreview", void 0);
    ConfigBuilder = __decorate([
        core_1.Component({
            selector: 'login',
            template: __webpack_require__("./src/app/Datahub/routes/admin/configBuilder/configBuilder.html"),
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _b) || Object, (typeof (_c = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _c) || Object, (typeof (_d = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _d) || Object, (typeof (_e = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _e) || Object, (typeof (_f = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _f) || Object, (typeof (_g = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _g) || Object, (typeof (_h = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _h) || Object])
    ], ConfigBuilder);
    return ConfigBuilder;
    var _a, _b, _c, _d, _e, _f, _g, _h;
}());
exports.ConfigBuilder = ConfigBuilder;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/configBuilder/configBuilderAddEditForm/configBuilderAddEditForm.html":
/***/ (function(module, exports) {

module.exports = "<article Id=\"editConfigPage\" *ngIf=\"visiblePlugin\">\r\n    <div class=\"col-md-12\">\r\n        <div class=\"{{nodeClass}}\">\r\n            <section Id=\"editForm\">\r\n                <form #genericForm=\"ngForm\">\r\n                    <template ngFor let-ln [ngForOf]=\"editViewRowDataTable\">\r\n                        <div class=\"col-md-5\">\r\n                            <label [attr.for]=\"ln.sequence\">{{ln.label}}:</label>\r\n                        </div>\r\n                        <div class=\"col-md-7\">\r\n                            <template [ngIf]=\"ln.htmlControlType !== 'select' && ln.htmlControlType !== 'radio' && ln.htmlControlType !== 'checkbox'\">\r\n                                <input name={{ln.label}} #name=\"ngModel\" [attr.Id]=\"ln.sequence\" type={{ln.htmlControlType}} [(ngModel)]=\"ln.val\" checked={{ln.val}}>\r\n                                <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                                    Valid input for {{ln.label}} is required\r\n                                </div>\r\n                            </template>\r\n                            <template [ngIf]=\"ln.htmlControlType === 'checkbox'\">\r\n                                <input name={{ln.label}} #name=\"ngModel\" [attr.Id]=\"ln.sequence\" type=\"checkbox\" [(ngModel)]=\"ln.val\" [disabled]=\"!ln.isVisible\" (click)=\"inputClicked(ln)\">\r\n                                <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                                    Valid input for {{ln.label}} is required\r\n                                </div>\r\n                            </template>\r\n                            <template [ngIf]=\"ln.htmlControlType === 'select'\">\r\n                                <select name={{ln.label}} #name=\"ngModel\" [(ngModel)]=\"ln.val\" [attr.Id]=\"ln.sequence\">\r\n                                    <option *ngFor=\"let itemOption of ln.dataSource\" value=\"{{itemOption}}\">{{itemOption}}</option>\r\n                                </select>\r\n                                <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                                    Valid input for {{ln.label}} is required\r\n                                </div>\r\n                            </template>\r\n                            <template [ngIf]=\"ln.htmlControlType === 'radio'\">\r\n                                <template ngFor let-itemOption [ngForOf]=\"ln.dataSource\">\r\n                                    <div class=\"row\">\r\n                                        <input name=\"ln.objId\" type=\"radio\" [(ngModel)]=\"ln.val\" value=\"{{itemOption}}\"><span class=\"float-xs-left\">{{' ' + itemOption + '    '}}</span><br/>\r\n                                    </div>\r\n                                </template>\r\n                            </template>\r\n                        </div>\r\n                    </template>\r\n                    <div id=\"buttons\">\r\n                        <button (click)=\"saveClicked()\" class=\"button-standard \">\r\n                            <span class=\"fa fa-floppy-o fa-lg\"></span>\r\n                            Save\r\n                        </button>\r\n                        <button (click)=\"cancelClicked()\" class=\"button-standard \" *ngIf=\"!IsHideCancel\">\r\n                            <span class=\"fa fa-ban fa-lg\"></span>\r\n                            Cancel\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </section>\r\n        </div>\r\n    </div>\r\n</article>\r\n"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/configBuilder/configBuilderAddEditForm/configBuilderAddEditForm.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var configBuilderAddEditForm = (function () {
    function configBuilderAddEditForm(intFormSer, matrixService) {
        this.intFormSer = intFormSer;
        this.matrixService = matrixService;
        this.PageType = "view";
        this.pageName = "";
        this.pluginValue = "";
        this.visiblePlugin = true;
        this.interFormsService = intFormSer;
    }
    configBuilderAddEditForm.prototype.ngOnInit = function () {
        this.editViewRowDataTable = this.pluginInput;
    };
    configBuilderAddEditForm.prototype.cancelClicked = function () {
        this.interFormsService.closeCurrentlyOpenedForm();
    };
    configBuilderAddEditForm.prototype.saveClicked = function () {
        var primaryColumnName = this.matrixService.getPrimaryColumnName(this.gridSettings);
        this.pluginValue = this.matrixService.buildJSONObject(this.editViewRowDataTable, primaryColumnName);
        switch (this.PageType) {
            case "configBuilderAddColumn":
                this.interFormsService.columnInserted.emit(this.pluginValue);
                break;
            case "configBuilderAddPage":
                this.interFormsService.pageInserted.emit(this.pluginValue);
                break;
        }
    };
    configBuilderAddEditForm.prototype.inputClicked = function (input) {
        if (input === undefined) {
            return;
        }
        this.selectedInput = input;
        var inputConfig = this.gridSettings.ColumnConfiguration.find(function (z) { return z.dbColumnName === input.name; });
        if (inputConfig.isComplexTypeInline) {
            input.isToggleable = true;
            this.interFormsService.assignControl(input);
        }
    };
    __decorate([
        core_1.Input('originalInput'), 
        __metadata('design:type', Object)
    ], configBuilderAddEditForm.prototype, "originalInput", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], configBuilderAddEditForm.prototype, "pluginInput", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], configBuilderAddEditForm.prototype, "gridSettings", void 0);
    __decorate([
        core_1.Input('pageType'), 
        __metadata('design:type', String)
    ], configBuilderAddEditForm.prototype, "PageType", void 0);
    __decorate([
        core_1.Input('pageName'), 
        __metadata('design:type', String)
    ], configBuilderAddEditForm.prototype, "pageName", void 0);
    __decorate([
        core_1.Input('NodeClass'), 
        __metadata('design:type', String)
    ], configBuilderAddEditForm.prototype, "nodeClass", void 0);
    configBuilderAddEditForm = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/Datahub/routes/admin/configBuilder/configBuilderAddEditForm/configBuilderAddEditForm.html"),
            selector: 'configBuilderAddEditForm'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _a) || Object, (typeof (_b = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _b) || Object])
    ], configBuilderAddEditForm);
    return configBuilderAddEditForm;
    var _a, _b;
}());
exports.configBuilderAddEditForm = configBuilderAddEditForm;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/configBuilder/configBuilderColumnConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var foreignKeyBuilder_1 = __webpack_require__("./src/app/Datahub/routes/admin/configBuilder/foreignKeyBuilder.ts");
exports.ConfigBuilderColumnConfig = {
    ColumnConfiguration: [
        {
            "dbColumnName": "dbColumnName",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Column Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
        },
        {
            "dbColumnName": "htmlControlType",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "updatedValue Type",
            "dataSourceAddress": { dbColumnName: "Id", displayColumnName: "Description" },
            "dataSource": [{ Id: "text", Description: "text" }, { Id: "select", Description: "select" }, { Id: "datetime-local", Description: "datetime-local" },
                { Id: "checkbox", Description: "checkbox" }, { Id: "number", Description: "number" }],
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
        },
        {
            "dbColumnName": "isVisible",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Is Visible",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "isRequired",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Is Required",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "isComplexType",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Is Complex Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "displayName",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Display Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
        },
        {
            "dbColumnName": "dataSourceAddress",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isComplexTypeInline": true,
            "isComplexTypeInlineTemplate": [{ tableName: "", dbColumnName: "", displayColumnName: "" }],
            "isComplexTypeInlineTemplateConfig": foreignKeyBuilder_1.ForeignKeyBuilderConfig,
            "isRequired": true,
            "displayName": "Foreign Key",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": true,
            "isToggleable": false,
        },
        {
            "dbColumnName": "dataSource",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isComplexTypeInline": false,
            "isRequired": true,
            "displayName": "Foreign Key Selection",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
        },
        {
            "dbColumnName": "regex",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Regular Expression",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": true,
            "isToggleable": false
        },
        {
            "dbColumnName": "columnCss",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Column CSS Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false
        },
        {
            "dbColumnName": "isAllowGridLevelEdit",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Is Allow Grid Level Edit",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "isToggleable",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Is Toggleable",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/configBuilder/configBuilderMetaRules.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* export var json={
    dbColumnName: {
        rules: {required: true, maxlength: 15}},
    LastName: {
        rules: {required: true, maxlength: 15}}
    Contacts: [
        {
            Email: {
                rules: {
                    required: true,
                    maxlength: 100,
                    email: true
                }
            },
            Mobile: {
                CountryCode: {
                    rules: {required: true, maxlength: 3, enum: ["FRA", "CZE", "USA", "GER"] }
                },
                Number: {
                    rules: {required: true, maxlength: 9 }
                }
            },
            FixedLine: {
                CountryCode: {
                    rules: {required: true, maxlength: 3, enum: ["FRA", "CZE", "USA", "GER"] }
                },
                Number: {
                    rules: {required: true, maxlength: 9 }
                }
            }
        },{maxItems: 4, minItems: 2}
    ]
}*/

exports.ConfigBuilderRuleAndSchema = {
    dbColumnName: {
        type: "string",
        title: "First name",
        required: "true",
        maxLength: 15
    },
    htmlControlType: {
        type: "string",
        "title": "Last name",
        required: true,
        maxLength: 15
    },
    isVisible: {
        type: "boolean",
        required: true
    },
    isRequired: {
        type: "boolean",
        required: true
    },
    isComplexType: {
        type: "boolean",
        required: true,
    },
    displayName: {
        type: "string",
        "title": "Display name",
        required: true,
        maxLength: 15
    },
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/configBuilder/configBuilderPageConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.ConfigBuilderPageConfig = {
    ColumnConfiguration: [
        {
            "dbColumnName": "ChildType",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Edit Type",
            "dataSourceAddress": { dbColumnName: "Id", displayColumnName: "Description" },
            "dataSource": [{ Id: "edit", Description: "edit" }, { Id: "editInline", Description: "editInline" }],
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
        },
        {
            "dbColumnName": "PrimaryKeyColumn",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Primary Key Column",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
        },
        {
            "dbColumnName": "ForeignKeyColumn",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Foreign Key Column",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
        },
        {
            "dbColumnName": "ShallHideDeleteButton",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Hide Delete Button",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "ShallHideAddButton",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Hide Add Button",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "IsChildPage",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Is Child Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "ShowFilterRow",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Show Filter Row",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "PaginationPageLimit",
            "htmlControlType": "numeric",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Pagination page limit",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[0-9]*$",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
        }
    ] };


/***/ }),

/***/ "./src/app/Datahub/routes/admin/configBuilder/foreignKeyBuilder.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.ForeignKeyBuilderConfig = {
    ColumnConfiguration: [
        {
            "dbColumnName": "tableName",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Foreign Table Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
        },
        {
            "dbColumnName": "dbColumnName",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": " ForeignKey Column Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
        },
        {
            "dbColumnName": "displayColumnName",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Display Column Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "",
            "isAllowGridLevelEdit": false,
            "isToggleable": false,
        }]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/localization/language/language.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var language_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/language/language.ts");
var language_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/language/language.routing.ts");
var LanguageModule = (function () {
    function LanguageModule() {
    }
    LanguageModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, language_routing_1.LanguageRouting, SharedModule_1.SharedModule],
            declarations: [language_1.Language],
        }), 
        __metadata('design:paramtypes', [])
    ], LanguageModule);
    return LanguageModule;
}());
exports.LanguageModule = LanguageModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/localization/language/language.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var language_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/language/language.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.LanguageRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Localization/Language', component: language_1.Language, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/localization/language/language.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var languageControlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/language/languageControlConfig.ts");
var localizationService_1 = __webpack_require__("./src/app/ReusableServices/localizationService.ts");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var Language = (function () {
    function Language(navService, localizationApi, alt, location) {
        this.navService = navService;
        this.localizationApi = localizationApi;
        this.alt = alt;
        this.location = location;
        this.searchKey = "";
        this.controlConfig = languageControlConfig_1.LanguageControlConfig;
        this.alert = alt;
        // navService.setCurrentPage(location.path(false));
    }
    Language.prototype.ngAfterViewInit = function () {
        this.refresh();
    };
    Language.prototype.refresh = function () {
        this.dataTable.GetParentPageDetails(this.controlConfig, this.localizationApi, "language");
    };
    __decorate([
        core_1.ViewChild(displayGrid_1.DisplayGridComponent), 
        __metadata('design:type', (typeof (_a = typeof displayGrid_1.DisplayGridComponent !== 'undefined' && displayGrid_1.DisplayGridComponent) === 'function' && _a) || Object)
    ], Language.prototype, "dataTable", void 0);
    Language = __decorate([
        core_1.Component({
            selector: 'language',
            template: "<div><displayGrid></displayGrid></div>",
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _b) || Object, (typeof (_c = typeof localizationService_1.LocalizationService !== 'undefined' && localizationService_1.LocalizationService) === 'function' && _c) || Object, (typeof (_d = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _d) || Object, (typeof (_e = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _e) || Object])
    ], Language);
    return Language;
    var _a, _b, _c, _d, _e;
}());
exports.Language = Language;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/localization/language/languageControlConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.LanguageControlConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: true,
    IsSpreadsheetGrid: false,
    ShallHideAddButton: false,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isAllowGridLevelEdit": false,
        },
        {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "isAllowGridLevelEdit": true,
        },
        {
            "dbColumnName": "LangCode",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Language Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isAllowGridLevelEdit": true,
        },
        {
            "dbColumnName": "IsActive",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Active",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isAllowGridLevelEdit": true,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/localization/localization.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var localization_routes_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/localization.routes.ts");
var localization_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/localization.ts");
var language_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/language/language.Module.ts");
var valueSet_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/valueSet/valueSet.Module.ts");
var LocalizationModule = (function () {
    function LocalizationModule() {
    }
    LocalizationModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, forms_1.FormsModule, router_1.RouterModule, SharedModule_1.SharedModule, localization_routes_1.LocalizationRouting, language_Module_1.LanguageModule, valueSet_Module_1.ValueSetModule
            ],
            declarations: [localization_1.Localization]
        }), 
        __metadata('design:paramtypes', [])
    ], LocalizationModule);
    return LocalizationModule;
}());
exports.LocalizationModule = LocalizationModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/localization/localization.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var localization_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/localization.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.LocalizationRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Localization', component: localization_1.Localization, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/localization/localization.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Localization = (function () {
    function Localization() {
    }
    Localization = __decorate([
        core_1.Component({
            selector: 'localization',
            template: ""
        }), 
        __metadata('design:paramtypes', [])
    ], Localization);
    return Localization;
}());
exports.Localization = Localization;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/localization/valueSet/valueSet.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var valueSet_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/valueSet/valueSet.ts");
var valueSet_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/valueSet/valueSet.routing.ts");
var ValueSetModule = (function () {
    function ValueSetModule() {
    }
    ValueSetModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, valueSet_routing_1.ValueSetRouting, SharedModule_1.SharedModule],
            declarations: [valueSet_1.ValueSet],
        }), 
        __metadata('design:paramtypes', [])
    ], ValueSetModule);
    return ValueSetModule;
}());
exports.ValueSetModule = ValueSetModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/localization/valueSet/valueSet.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var valueSet_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/valueSet/valueSet.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ValueSetRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Localization/ValueSet', component: valueSet_1.ValueSet, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/localization/valueSet/valueSet.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var valueSetControlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/localization/valueSet/valueSetControlConfig.ts");
var localizationService_1 = __webpack_require__("./src/app/ReusableServices/localizationService.ts");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var ValueSet = (function () {
    function ValueSet(navService, localizationApi, alt, location) {
        this.navService = navService;
        this.localizationApi = localizationApi;
        this.alt = alt;
        this.location = location;
        this.searchKey = "";
        this.newValueSet = {};
        this.controlConfig = valueSetControlConfig_1.ValueSetControlConfig;
        this.alert = alt;
        // navService.setCurrentPage(location.path(false));
    }
    ValueSet.prototype.ngAfterViewInit = function () {
        this.refresh();
    };
    ValueSet.prototype.refresh = function () {
        this.dataTable.GetParentPageDetails(this.controlConfig, this.localizationApi, "valueSet");
    };
    __decorate([
        core_1.ViewChild(displayGrid_1.DisplayGridComponent), 
        __metadata('design:type', (typeof (_a = typeof displayGrid_1.DisplayGridComponent !== 'undefined' && displayGrid_1.DisplayGridComponent) === 'function' && _a) || Object)
    ], ValueSet.prototype, "dataTable", void 0);
    ValueSet = __decorate([
        core_1.Component({
            selector: 'valueSet',
            template: "<div><displayGrid></displayGrid></div>",
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _b) || Object, (typeof (_c = typeof localizationService_1.LocalizationService !== 'undefined' && localizationService_1.LocalizationService) === 'function' && _c) || Object, (typeof (_d = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _d) || Object, (typeof (_e = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _e) || Object])
    ], ValueSet);
    return ValueSet;
    var _a, _b, _c, _d, _e;
}());
exports.ValueSet = ValueSet;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/localization/valueSet/valueSetControlConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var TheChild = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    ForeignKeyColumn: "ValueSetId",
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        },
        {
            "dbColumnName": "ValueSetId",
            "htmlControlType": "select",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "ValueSet Description",
            "dataSourceAddress": { tableName: "/localization/valueSet", dbColumnName: "Id", displayColumnName: "Description" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "LanguageId",
            "htmlControlType": "select",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Language",
            "dataSourceAddress": { tableName: "/Localization/language", dbColumnName: "Id", displayColumnName: "Description" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Value",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "isAllowGridLevelEdit": true,
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }]
};
exports.ValueSetControlConfig = {
    ChildType: "editInline",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    IsChildPage: "true",
    ChildControlConfig: TheChild,
    PaginationPageLimit: 10,
    ShowFilterRow: true,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isAllowGridLevelEdit": false,
        },
        {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "isAllowGridLevelEdit": true,
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isAllowGridLevelEdit": false,
        }]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/logs/logs.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var logs_routes_1 = __webpack_require__("./src/app/Datahub/routes/admin/logs/logs.routes.ts");
var logs_1 = __webpack_require__("./src/app/Datahub/routes/admin/logs/logs.ts");
var LogsModule = (function () {
    function LogsModule() {
    }
    LogsModule = __decorate([
        core_1.NgModule({
            imports: [common_1.CommonModule, platform_browser_1.BrowserModule, SharedModule_1.SharedModule, logs_routes_1.LogsRoutes],
            declarations: [logs_1.Logs]
        }), 
        __metadata('design:paramtypes', [])
    ], LogsModule);
    return LogsModule;
}());
exports.LogsModule = LogsModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/logs/logs.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var logs_1 = __webpack_require__("./src/app/Datahub/routes/admin/logs/logs.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.LogsRoutes = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Logs', component: logs_1.Logs, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/logs/logs.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var core_2 = __webpack_require__("./node_modules/@angular/core/index.js");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var logsControlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/logs/logsControlConfig.ts");
var adminApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/adminApiService.ts");
var Logs = (function () {
    function Logs(adminApiService) {
        this.adminApiService = adminApiService;
        this.controlConfig = logsControlConfig_1.LogsControlConfig;
    }
    Logs.prototype.ngAfterViewInit = function () {
        this.refreshLogs();
    };
    Logs.prototype.refreshLogs = function () {
        this.dataTable.GetParentPageDetails(this.controlConfig, this.adminApiService, "logs");
    };
    __decorate([
        core_2.ViewChild(displayGrid_1.DisplayGridComponent), 
        __metadata('design:type', (typeof (_a = typeof displayGrid_1.DisplayGridComponent !== 'undefined' && displayGrid_1.DisplayGridComponent) === 'function' && _a) || Object)
    ], Logs.prototype, "dataTable", void 0);
    Logs = __decorate([
        core_1.Component({
            selector: 'logs',
            template: "<div><displayGrid></displayGrid></div>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof adminApiService_1.AdminApiService !== 'undefined' && adminApiService_1.AdminApiService) === 'function' && _b) || Object])
    ], Logs);
    return Logs;
    var _a, _b;
}());
exports.Logs = Logs;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/logs/logsControlConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Created by matesc2 on 10/14/2016.
 */
exports.TheChild = {
    Name: "LogsControlConfig",
    ChildType: "",
    ForeignKeyColumn: "TaskGUID",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    DefaultSortColumn: "creationdate",
    DefaultSortDirection: "asc",
    ServerPagination: true,
    IsScrollableGrid: true,
    "ColumnConfiguration": [
        {
            "dbColumnName": "TaskGUID",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "TaskGUID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false,
        },
        {
            "dbColumnName": "SchematicId",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Schematic ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": true,
        },
        {
            "dbColumnName": "StepId",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Step No",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false,
        },
        {
            "dbColumnName": "Message",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Message",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false,
        },
        {
            "dbColumnName": "CreationDate",
            "htmlControlType": "datetime-local",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Creation Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false
        },
        {
            "dbColumnName": "Level",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Level",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false,
        },
        {
            "dbColumnName": "Logger",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "Logger",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false,
        },
        {
            "dbColumnName": "LogType",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Log Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": true,
        }]
};
exports.LogsControlConfig = {
    ChildType: "editInline",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsChildPage: "false",
    ChildControlConfig: exports.TheChild,
    PrimaryKeyColumn: "TaskGUID",
    DefaultSortColumn: "startdate",
    DefaultSortDirection: "desc",
    ServerPagination: true,
    PaginationPageLimit: 10,
    ChildGridType: "displayGrid",
    "ColumnConfiguration": [
        {
            "dbColumnName": "TaskGUID",
            "htmlControlType": "text",
            "isVisible": false,
            "readOnly": true,
            "isComplexType": false,
            "displayName": "TaskGUID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false,
            "isToggleable": false
        },
        {
            "dbColumnName": "Entity",
            "htmlControlType": "text",
            "isVisible": true,
            "readOnly": true,
            "isComplexType": false,
            "displayName": "Pipeline/Schematic",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": true,
            "isToggleable": true
        },
        {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "readOnly": true,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false,
            "isToggleable": false
        },
        {
            "dbColumnName": "StartDate",
            "htmlControlType": "datetime-local",
            "isVisible": true,
            "readOnly": true,
            "isComplexType": false,
            "displayName": "Start Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": true,
            "isToggleable": false
        },
        {
            "dbColumnName": "EndDate",
            "htmlControlType": "datetime-local",
            "isVisible": true,
            "readOnly": true,
            "isComplexType": false,
            "displayName": "End Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false,
            "isToggleable": false
        },
        {
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": true,
            "readOnly": true,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": true,
            "isToggleable": false
        },
        {
            "dbColumnName": "UserName",
            "htmlControlType": "text",
            "isVisible": false,
            "readOnly": true,
            "isComplexType": false,
            "displayName": "User Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false,
            "isToggleable": false
        },
        {
            "dbColumnName": "MachineName",
            "htmlControlType": "text",
            "isVisible": false,
            "readOnly": true,
            "isComplexType": false,
            "displayName": "Machine Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false,
            "isToggleable": false
        },
        {
            "dbColumnName": "Resolved",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Resolved",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false,
            "isToggleable": false,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "Comments",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Comments",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false,
            "isToggleable": false
        },
        {
            "dbColumnName": "ResUserName",
            "htmlControlType": "text",
            "isVisible": true,
            "readOnly": true,
            "isComplexType": false,
            "displayName": "Resolved By",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "filterable": false,
            "isToggleable": false
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/config/config.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var config_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/config/config.ts");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var config_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/config/config.routing.ts");
var ConfigModule = (function () {
    function ConfigModule() {
    }
    ConfigModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, config_routing_1.ConfigRouting, SharedModule_1.SharedModule, config_routing_1.ConfigRouting],
            declarations: [config_1.Config],
        }), 
        __metadata('design:paramtypes', [])
    ], ConfigModule);
    return ConfigModule;
}());
exports.ConfigModule = ConfigModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/config/config.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var config_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/config/config.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ConfigRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Schedule/Config', component: config_1.Config, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/config/config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var scheduleService_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/scheduleService.ts");
var controlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/config/controlConfig.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var Config = (function () {
    function Config(schedulesApi, alert, navService, location) {
        this.schedulesApi = schedulesApi;
        this.alert = alert;
        this.navService = navService;
        this.location = location;
        this.searchKey = "";
        this.controlConfig = controlConfig_1.ControlConfig;
        //navService.setCurrentPage(location.path(false));
    }
    Config.prototype.ngAfterViewInit = function () {
        this.refreshConfigs();
    };
    Config.prototype.refreshConfigs = function () {
        this.dataTable.GetParentPageDetails(this.controlConfig, this.schedulesApi, "config");
    };
    __decorate([
        core_1.ViewChild(displayGrid_1.DisplayGridComponent), 
        __metadata('design:type', (typeof (_a = typeof displayGrid_1.DisplayGridComponent !== 'undefined' && displayGrid_1.DisplayGridComponent) === 'function' && _a) || Object)
    ], Config.prototype, "dataTable", void 0);
    Config = __decorate([
        core_1.Component({
            template: "<div><displayGrid></displayGrid></div>",
            providers: [scheduleService_1.SchedulesApiService]
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof scheduleService_1.SchedulesApiService !== 'undefined' && scheduleService_1.SchedulesApiService) === 'function' && _b) || Object, (typeof (_c = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _c) || Object, (typeof (_d = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _d) || Object, (typeof (_e = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _e) || Object])
    ], Config);
    return Config;
    var _a, _b, _c, _d, _e;
}());
exports.Config = Config;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/config/controlConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.ControlConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    ShallHideAddButton: false,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "EntityId",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "EntityId",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "EntityTypeId",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "EntityTypeId",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "IsActive",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Active",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "HolidaysSetCodeId",
            "htmlControlType": "radio",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Holiday Description",
            "dataSourceAddress": { tableName: "/schedules/holidayssetcode", dbColumnName: "Id", displayColumnName: "Description" },
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "HolidayBehaviorId",
            "htmlControlType": "select",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Holiday Behavior",
            "dataSourceAddress": { tableName: "/schedules/holidaybehavior", dbColumnName: "Id", displayColumnName: "Description" },
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "FirstRunDateTime",
            "htmlControlType": "datetime-local",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "First Run Time",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "RunWindowStartTime",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Start Time",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "RunWindowEndTime",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "End Time",
            "dataSourceAddress": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "MinutesToNextRun",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Time to Run",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "LookupDaysWhereClause",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": true,
            "isRequired": true,
            "displayName": "Lookup Days",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/holiday/holiday.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var holiday_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/holiday/holiday.routing.ts");
var holiday_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/holiday/holiday.ts");
var HolidayModule = (function () {
    function HolidayModule() {
    }
    HolidayModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, holiday_routing_1.HolidayRouting, SharedModule_1.SharedModule],
            declarations: [holiday_1.Holiday],
        }), 
        __metadata('design:paramtypes', [])
    ], HolidayModule);
    return HolidayModule;
}());
exports.HolidayModule = HolidayModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/holiday/holiday.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var holiday_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/holiday/holiday.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.HolidayRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Schedule/Holiday', component: holiday_1.Holiday, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/holiday/holiday.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var scheduleService_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/scheduleService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var holidayControlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/holiday/holidayControlConfig.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var Holiday = (function () {
    function Holiday(schedulesApi, alert, navService, location) {
        this.schedulesApi = schedulesApi;
        this.alert = alert;
        this.navService = navService;
        this.location = location;
        this.newHoliday = {};
        this.searchKey = "";
        this.controlConfig = holidayControlConfig_1.HolidayControlConfig;
        //   navService.setCurrentPage(location.path(false));
    }
    Holiday.prototype.ngAfterViewInit = function () {
        this.refreshHolidays();
    };
    Holiday.prototype.refreshHolidays = function () {
        this.dataTable.GetParentPageDetails(this.controlConfig, this.schedulesApi, "holiday");
    };
    __decorate([
        core_1.ViewChild(displayGrid_1.DisplayGridComponent), 
        __metadata('design:type', (typeof (_a = typeof displayGrid_1.DisplayGridComponent !== 'undefined' && displayGrid_1.DisplayGridComponent) === 'function' && _a) || Object)
    ], Holiday.prototype, "dataTable", void 0);
    Holiday = __decorate([
        core_1.Component({
            selector: 'schedule',
            template: "<div><displayGrid></displayGrid></div>",
            providers: [scheduleService_1.SchedulesApiService]
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof scheduleService_1.SchedulesApiService !== 'undefined' && scheduleService_1.SchedulesApiService) === 'function' && _b) || Object, (typeof (_c = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _c) || Object, (typeof (_d = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _d) || Object, (typeof (_e = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _e) || Object])
    ], Holiday);
    return Holiday;
    var _a, _b, _c, _d, _e;
}());
exports.Holiday = Holiday;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/holiday/holidayControlConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.HolidayControlConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    IsSpreadsheetGrid: false,
    PaginationPageLimit: 5,
    ShallHideAddButton: false,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isAllowGridLevelEdit": false,
        },
        {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "isAllowGridLevelEdit": true,
        },
        {
            "dbColumnName": "HolidayDate",
            "htmlControlType": "datetime-local",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Holiday Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isAllowGridLevelEdit": true,
        },
        {
            "dbColumnName": "HolidaysSetCodeId",
            "htmlControlType": "radio",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Holiday Set Code",
            "dataSourceAddress": { tableName: "/schedules/holidayssetcode", dbColumnName: "Id", displayColumnName: "Description" },
            "dataSource": undefined,
            "regex": undefined,
            "isAllowGridLevelEdit": true,
            "isToggleable": false
        },
        {
            "dbColumnName": "IsActive",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Active",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isAllowGridLevelEdit": true,
            "isToggleable": true,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isAllowGridLevelEdit": false,
        }]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/holidaySetCode/holidaySetCode.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var holidaySetCode_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/holidaySetCode/holidaySetCode.ts");
var holidaySetCode_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/holidaySetCode/holidaySetCode.routing.ts");
var HolidaySetCodeModule = (function () {
    function HolidaySetCodeModule() {
    }
    HolidaySetCodeModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, holidaySetCode_routing_1.HolidaySetCodeRouting, SharedModule_1.SharedModule, holidaySetCode_routing_1.HolidaySetCodeRouting],
            declarations: [holidaySetCode_1.HolidaySetCode],
        }), 
        __metadata('design:paramtypes', [])
    ], HolidaySetCodeModule);
    return HolidaySetCodeModule;
}());
exports.HolidaySetCodeModule = HolidaySetCodeModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/holidaySetCode/holidaySetCode.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var holidaySetCode_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/holidaySetCode/holidaySetCode.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.HolidaySetCodeRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Schedule/HolidaySetCode', component: holidaySetCode_1.HolidaySetCode, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/holidaySetCode/holidaySetCode.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var scheduleService_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/scheduleService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var holidaySetCodeConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/holidaySetCode/holidaySetCodeConfig.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var HolidaySetCode = (function () {
    function HolidaySetCode(schedulesApi, alert, navService, location) {
        this.schedulesApi = schedulesApi;
        this.alert = alert;
        this.navService = navService;
        this.location = location;
        this.newHolidaySetCode = {};
        this.searchKey = "";
        //TODO:RF
        this.controlConfig = holidaySetCodeConfig_1.HolidaySetCodeControlConfig;
        // navService.setCurrentPage(location.path(false));
    }
    HolidaySetCode.prototype.ngAfterViewInit = function () {
        this.refreshHolidaySetCodes();
    };
    HolidaySetCode.prototype.refreshHolidaySetCodes = function () {
        this.dataTable.GetParentPageDetails(this.controlConfig, this.schedulesApi, "holidaysetcode");
    };
    __decorate([
        core_1.ViewChild(displayGrid_1.DisplayGridComponent), 
        __metadata('design:type', (typeof (_a = typeof displayGrid_1.DisplayGridComponent !== 'undefined' && displayGrid_1.DisplayGridComponent) === 'function' && _a) || Object)
    ], HolidaySetCode.prototype, "dataTable", void 0);
    HolidaySetCode = __decorate([
        core_1.Component({
            selector: 'schedule',
            template: '<div><displayGrid></displayGrid></div>',
            //TODO:RF
            //directives: [DisplayGridComponent],
            //pipes: [TokenFilterPipe],
            providers: [scheduleService_1.SchedulesApiService]
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof scheduleService_1.SchedulesApiService !== 'undefined' && scheduleService_1.SchedulesApiService) === 'function' && _b) || Object, (typeof (_c = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _c) || Object, (typeof (_d = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _d) || Object, (typeof (_e = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _e) || Object])
    ], HolidaySetCode);
    return HolidaySetCode;
    var _a, _b, _c, _d, _e;
}());
exports.HolidaySetCode = HolidaySetCode;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/holidaySetCode/holidaySetCodeConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.HolidaySetCodeControlConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: false,
    PaginationPageLimit: 5,
    ShallHideAddButton: false,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isToggleable": false
        },
        {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "isToggleable": true,
        },
        {
            "dbColumnName": "ExternalCode",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "External Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "isToggleable": false
        },
        {
            "dbColumnName": "IsActive",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Active",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isToggleable": false,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isToggleable": false
        }]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/schedule.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var schedule_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/schedule.ts");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
//import {NgModule} from "@angular/core//metadata/ng_module";
var schedule_routes_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/schedule.routes.ts");
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var holiday_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/holiday/holiday.Module.ts");
var holidaySetCode_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/holidaySetCode/holidaySetCode.Module.ts");
var config_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/config/config.Module.ts");
var ScheduleModule = (function () {
    function ScheduleModule() {
    }
    ScheduleModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, forms_1.FormsModule, router_1.RouterModule, SharedModule_1.SharedModule, schedule_routes_1.ScheduleRouting, holiday_Module_1.HolidayModule, holidaySetCode_Module_1.HolidaySetCodeModule, config_Module_1.ConfigModule
            ],
            declarations: [schedule_1.Schedule]
        }), 
        __metadata('design:paramtypes', [])
    ], ScheduleModule);
    return ScheduleModule;
}());
exports.ScheduleModule = ScheduleModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/schedule.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var schedule_1 = __webpack_require__("./src/app/Datahub/routes/admin/schedule/schedule.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ScheduleRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Schedule', component: schedule_1.Schedule, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/schedule.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var Schedule = (function () {
    function Schedule(navService, location) {
        this.navService = navService;
        this.location = location;
        /*this.navService.getChildMenu(['Admin','Schedule']);
        this.navService.getLeftMenuRoutes(['Schedule']);
        navService.setCurrentPage(location.path(false));*/
    }
    Schedule = __decorate([
        core_1.Component({
            selector: 'schedule',
            template: ""
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _b) || Object])
    ], Schedule);
    return Schedule;
    var _a, _b;
}());
exports.Schedule = Schedule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schedule/scheduleService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var SchedulesApiService = (function () {
    function SchedulesApiService(httpAbstract) {
        this.httpAbstract = httpAbstract;
        this.prefixurl = '/schedules';
        this.contentType = 'application/json; charset=utf-8';
        this.HolidayCodeBaseUrl = this.prefixurl + '/holidayssetcode';
        this.HolidayBaseUrl = this.prefixurl + '/holiday';
        this.ConfigBaseUrl = this.prefixurl + '/config';
        this.httpAbs = httpAbstract;
    }
    //Start: HolidaySetCode
    SchedulesApiService.prototype.getHolidaySetCodes = function () {
        return this.httpAbs.fetch(this.HolidayCodeBaseUrl);
    };
    SchedulesApiService.prototype.getHolidaySetCodesById = function (id) {
        return this.httpAbs.fetch(this.HolidayCodeBaseUrl + '/' + id);
    };
    SchedulesApiService.prototype.getHolidaySetCodesFiltered = function (filter) {
        return this.httpAbs.fetchWithFilter(this.HolidayCodeBaseUrl + '/paged', filter, this.contentType);
    };
    SchedulesApiService.prototype.createHolidaySetCode = function (obj) {
        return this.httpAbs.insertWithHeader(this.HolidayCodeBaseUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchedulesApiService.prototype.updateHolidaySetCode = function (obj) {
        return this.httpAbs.updateWithHeader(this.HolidayCodeBaseUrl + '/' + obj.Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchedulesApiService.prototype.deleteHolidaySetCode = function (obj) {
        return this.httpAbs.remove(this.HolidayCodeBaseUrl + '/' + obj.Id);
    };
    //End: HolidaySetCode
    //Start:Holiday
    SchedulesApiService.prototype.getHolidays = function () {
        return this.httpAbs.fetch(this.HolidayBaseUrl);
    };
    SchedulesApiService.prototype.getHolidaysById = function (id) {
        return this.httpAbs.fetch(this.HolidayBaseUrl + '/' + id);
    };
    SchedulesApiService.prototype.getHolidaysFiltered = function (filter) {
        return this.httpAbs.fetchWithFilter(this.HolidayBaseUrl + '/paged', filter, this.contentType);
    };
    SchedulesApiService.prototype.createHoliday = function (obj) {
        return this.httpAbs.insertWithHeader(this.HolidayBaseUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchedulesApiService.prototype.updateHoliday = function (obj) {
        return this.httpAbs.updateWithHeader(this.HolidayBaseUrl + '/' + obj.Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchedulesApiService.prototype.deleteHoliday = function (obj) {
        return this.httpAbs.remove(this.HolidayBaseUrl + '/' + obj.Id);
    };
    //End:Holiday
    //Start:Config
    SchedulesApiService.prototype.getConfigs = function () {
        return this.httpAbs.fetch(this.ConfigBaseUrl);
    };
    SchedulesApiService.prototype.getConfigsById = function (id) {
        return this.httpAbs.fetch(this.ConfigBaseUrl + '/' + id);
    };
    SchedulesApiService.prototype.getConfigsFiltered = function (filter) {
        return this.httpAbs.fetchWithFilter(this.ConfigBaseUrl + '/paged', filter, this.contentType);
    };
    SchedulesApiService.prototype.createConfig = function (obj) {
        return this.httpAbs.insertWithHeader(this.ConfigBaseUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchedulesApiService.prototype.updateConfig = function (obj) {
        return this.httpAbs.updateWithHeader(this.ConfigBaseUrl + '/' + obj.Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchedulesApiService.prototype.deleteConfig = function (obj) {
        return this.httpAbs.remove(this.HolidayBaseUrl + '/' + obj.Id);
    };
    SchedulesApiService.prototype.ExecuteUpdate = function (obj, pagename) {
        switch (pagename.toLowerCase()) {
            case "holidaysetcode":
                return this.updateHolidaySetCode(obj);
            // break;
            case "holiday":
                return this.updateHoliday(obj);
            //break;
            case "config":
                return this.updateConfig(obj);
        }
    };
    SchedulesApiService.prototype.ExecuteInsert = function (obj, pagename) {
        switch (pagename.toLowerCase()) {
            case "holidaysetcode":
                return this.createHolidaySetCode(obj);
            // break;
            case "holiday":
                return this.createHoliday(obj);
            //break;
            case "config":
                return this.createConfig(obj);
        }
    };
    SchedulesApiService.prototype.ExecuteDelete = function (obj, pagename) {
        switch (pagename.toLowerCase()) {
            case "holidaysetcode":
                return this.deleteHolidaySetCode(obj);
            // break;
            case "holiday":
                return this.deleteHoliday(obj);
            //break;
            case "config":
                return this.deleteConfig(obj);
        }
    };
    SchedulesApiService.prototype.ExecutePageRefresh = function (pagename) {
        switch (pagename.toLowerCase()) {
            case "holidaysetcode":
                return this.getHolidaySetCodes();
            // break;
            case "holiday":
                return this.getHolidays();
            //break;
            case "config":
                return this.getConfigs();
        }
    };
    SchedulesApiService.prototype.ExecutePageFilter = function (pagename, filterObject) {
        switch (pagename.toLowerCase()) {
            case "holidaysetcode":
                return this.getHolidaySetCodesFiltered(filterObject);
            // break;
            case "holiday":
                return this.getHolidaysFiltered(filterObject);
            //break;
            case "config":
                return this.getConfigsFiltered(filterObject);
        }
    };
    SchedulesApiService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _a) || Object])
    ], SchedulesApiService);
    return SchedulesApiService;
    var _a;
}());
exports.SchedulesApiService = SchedulesApiService;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/Execution/executionDialogService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
// file contains code to facilitate communication between pipelines and schematics on execution page
// it is used when pipeline is calling for execution and to send to parent the messages for each schematic
var ExecutionDialogService = (function () {
    function ExecutionDialogService(alertService) {
        this.alertService = alertService;
        this.sendExecutionMessage$ = new core_1.EventEmitter();
        this.schematicRuntimeValue$ = new core_1.EventEmitter();
        this.askForSchematicsRuntimeValue$ = new core_1.EventEmitter();
        this.configToggle$ = new core_1.EventEmitter();
        this.messageToggle$ = new core_1.EventEmitter();
    }
    ExecutionDialogService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _a) || Object])
    ], ExecutionDialogService);
    return ExecutionDialogService;
    var _a;
}());
exports.ExecutionDialogService = ExecutionDialogService;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/Execution/executionUtils.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Pipeline = (function () {
    function Pipeline(id, description) {
        this.id = id;
        this.description = description;
        this.schematics = [];
        this.pipelineRuntimeValue = '{';
        this.idForSchematics = []; /// these ARE NOT schematicIds but are id for schematics inside of pipeline
    }
    return Pipeline;
}());
exports.Pipeline = Pipeline;
var Schematic = (function () {
    function Schematic(id, pipelineId, schematicId, sequenceNbr) {
        this.id = id;
        this.pipelineId = pipelineId;
        this.schematicId = schematicId;
        this.sequenceNbr = sequenceNbr;
    }
    return Schematic;
}());
exports.Schematic = Schematic;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/Execution/schematicExecution.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var schematicExecution_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/Execution/schematicExecution.routing.ts");
var schematicExecution_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/Execution/schematicExecution.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var schematicpreview_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematicpreview/schematicpreview.ts");
var SchematicExecutionModule = (function () {
    function SchematicExecutionModule() {
    }
    SchematicExecutionModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, forms_1.FormsModule, SharedModule_1.SharedModule, schematicExecution_routing_1.SchematicExecutionRouting],
            declarations: [schematicExecution_1.SchematicExecution, schematicpreview_1.SchematicPreview],
        }), 
        __metadata('design:paramtypes', [])
    ], SchematicExecutionModule);
    return SchematicExecutionModule;
}());
exports.SchematicExecutionModule = SchematicExecutionModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/Execution/schematicExecution.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"card-block\">\r\n    <div class=\"form-group row\">\r\n        <div class=\"col-md-12\">\r\n            <label>Enter <em>id</em> or <em>description</em> to search for (</label>\r\n            <input type=\"radio\" name=\"pageContentType\" [(ngModel)]=\"pageContentType\" value=\"schematic\" (click)=\"resetSearch()\"> Schematic\r\n            <input type=\"radio\" name=\"pageContentType\" [(ngModel)]=\"pageContentType\" value=\"pipeline\" (click)=\"resetSearch()\"> Pipeline ) :\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group row\">\r\n        <div class=\"col-md-12 col-lg-6\">\r\n            <typeahead-input #typeAhead [search]=\"autocompleteInput.searchPipelineAndSchematics\" (onSelected)=\"onObjectContentSelected($event)\"></typeahead-input>\r\n        </div>\r\n    </div>\r\n    <template [ngIf]=\"hasContent\">\r\n        <div class=\"form-group row\">\r\n            <div class=\"col-md-3\">\r\n                <button (click)=\"callForExecute()\" class=\"button-standard\" [disabled]=\"isExecuting || !executeStatus\">\r\n                    <span class=\"fa fa-play\"></span>\r\n                    Execute\r\n                </button>\r\n            </div>\r\n            <div class=\"col-md-5\">\r\n                {{connectionStatus}}\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n                <input type=\"checkbox\" (click)=\"configToggle($event.target.checked)\"/>Config\r\n                <input type=\"checkbox\" (click)=\"messageToggle($event.target.checked)\" checked/>Message\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n                {{executionStatusMsg}}\r\n            </div>\r\n        </div>\r\n    </template>\r\n    <template [ngIf]=\"pageContentType === 'schematic' && hasContent\">\r\n        <template [ngIf]=\"selectedSchematic.id\">\r\n            <schematicPreview [schematicId]=\"selectedSchematic.id\"></schematicPreview>\r\n        </template>\r\n    </template>\r\n    <template [ngIf]=\"pageContentType === 'pipeline' && hasContent\">\r\n        <template ngFor let-schematic [ngForOf]=\"selectedPipeline.schematics\">\r\n            Schematic id: {{schematic.schematicId}} - Sequence # : {{schematic.sequenceNbr}}\r\n            <schematicPreview [schematicId]=\"schematic.schematicId\" [Id]=\"schematic.id\"></schematicPreview>\r\n        </template>\r\n    </template>\r\n    <!-- Messages -->\r\n    <template [ngIf]=\"allMessages.length > 0\">\r\n        <div class=\"card card-block\">\r\n            <ul id=\"stepMessages\" size=\"5\" class=\"full-width\">\r\n                <li [ngClass]=\"msg.class\" *ngFor=\"let msg of allMessages\" highlightlast> {{msg.date | date:\"MM/dd/yy hh:mm\" }} - {{'Step ' + msg.stepId}} - {{msg.message}}</li>\r\n            </ul>\r\n        </div>\r\n        <br>\r\n    </template>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/Execution/schematicExecution.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var schematicExecution_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/Execution/schematicExecution.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.SchematicExecutionRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Schematic/SchematicExecution', component: schematicExecution_1.SchematicExecution, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/Execution/schematicExecution.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var schematicService_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematicService.ts");
var schematicpreview_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematicpreview/schematicpreview.ts");
var signalr_1 = __webpack_require__("./src/app/Datahub/services/signalr.ts");
var typeahead_1 = __webpack_require__("./src/app/ReusableComponents/typeahead/typeahead.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var executionUtils_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/Execution/executionUtils.ts");
var executionDialogService_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/Execution/executionDialogService.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var SchematicExecution = (function () {
    function SchematicExecution(processApi, signalr, alert, channelService, intFormSvc) {
        this.processApi = processApi;
        this.signalr = signalr;
        this.alert = alert;
        this.channelService = channelService;
        this.intFormSvc = intFormSvc;
        this.connectionStatus = "connecting to server";
        this.pageContentType = "schematic";
        this.hasContent = false;
        this.selectedPipeline = new executionUtils_1.Pipeline(null, null);
        this.selectedSchematic = new executionUtils_1.Schematic(null, null);
        this.executeStatus = true;
        this.allMessages = [];
        this.executionStatusMsg = '';
        this.isExecuting = false;
        var self = this;
        self.msgSubscription = channelService.sendExecutionMessage$.subscribe(function (answer) {
            if (!answer.hasOwnProperty('lastMsg')) {
                answer.forEach(function (x) {
                    if (self.allMessages.indexOf(x) == -1) {
                        self.allMessages.push(x);
                    }
                    ;
                });
            }
            else {
                //   self.alert.error(answer.lastMsg);
                self.intFormSvc.stopSpinner();
                self.executionStatusMsg = answer.lastMsg;
                self.isExecuting = false;
            }
        });
        self.runtimeValue = channelService.schematicRuntimeValue$.subscribe(function (answer) {
            self.execute(answer);
        });
    }
    SchematicExecution.prototype.ngOnInit = function () {
        var self = this;
        self.autocompleteInput = new Object();
        self.autocompleteInput.searchPipelineAndSchematics = this.searchPipelineAndSchematics();
        self.signalrDialogChannel();
    };
    SchematicExecution.prototype.ngOnDestroy = function () {
        this.signalr = null;
        this.signalRSubscription.unsubscribe();
        this.msgSubscription.unsubscribe();
    };
    SchematicExecution.prototype.signalrDialogChannel = function () {
        var _this = this;
        this.signalRSubscription = this.signalr.connectionEstablished.subscribe(function (data) {
            _this.showConnectionStatus(data);
        });
    };
    SchematicExecution.prototype.showConnectionStatus = function (data) {
        var msg;
        if (data.connectionID.length > 0) {
            msg = "Connection established, connection id " + data.connectionID;
            this.executeStatus = true;
        }
        else {
            msg = "Connection failed, " + data.message;
            this.executeStatus = false;
        }
        this.connectionStatus = msg;
    };
    SchematicExecution.prototype.searchPipelineAndSchematics = function () {
        var self = this;
        return function (filter) {
            return new Promise(function (resolve, reject) {
                self.hasContent = false;
                if (self.pageContentType === 'schematic') {
                    var schematicsSubscription_1 = self.processApi.getallSchematics().subscribe(function (res) {
                        self.allSchematics = res;
                        var outputList = new Array();
                        self.allSchematics.forEach(function (x) {
                            if (x.LookupKey.toUpperCase().indexOf(filter.toUpperCase()) > -1 || x.SchematicId == filter || filter.trim() === '')
                                outputList.push({
                                    'id': x.SchematicId,
                                    'text': x.LookupKey,
                                    'type': self.pageContentType
                                });
                        });
                        resolve(outputList);
                        schematicsSubscription_1.unsubscribe();
                    }, function (err) { return console.log("Error in search schematics", err); });
                }
                else {
                    var pipelinesSubscription_1 = self.processApi.getallPipelines().subscribe(function (res) {
                        self.allPipelines = res;
                        var outputList = new Array();
                        self.allPipelines.forEach(function (x) {
                            if (x.LookupKey.toUpperCase().indexOf(filter.toUpperCase()) > -1 || x.PipelineId == filter || filter.trim() === '')
                                outputList.push({
                                    'id': x.PipelineId,
                                    'text': x.LookupKey,
                                    'type': self.pageContentType
                                });
                        });
                        resolve(outputList);
                        pipelinesSubscription_1.unsubscribe();
                    }, function (err) { return console.log("Error in search schematics", err); });
                }
            });
        };
    };
    SchematicExecution.prototype.onObjectContentSelected = function (contentObj) {
        var self = this;
        self.allMessages = [];
        self.hasContent = true;
        if (contentObj.type === 'schematic') {
            this.selectedSchematic = new executionUtils_1.Schematic(contentObj.id);
        }
        else {
            self.selectedPipeline = new executionUtils_1.Pipeline(contentObj.id, contentObj.text);
            self.getSchematicsForPipelineById(contentObj.id);
        }
    };
    SchematicExecution.prototype.resetSearch = function () {
        var self = this;
        self.hasContent = false;
        self.intFormSvc.stopSpinner();
        self.isExecuting = false;
        self.executionStatusMsg = '';
        self.allMessages = [];
        self.typeAhead.reset();
        if (self.pageContentType === 'schematic') {
            self.selectedSchematic = new executionUtils_1.Schematic();
        }
        else {
            self.selectedPipeline = new executionUtils_1.Pipeline();
        }
    };
    SchematicExecution.prototype.getSchematicsForPipelineById = function (pipeLineId) {
        var self = this;
        var subscription = self.processApi.getSchematicsForPipelineById(pipeLineId).subscribe(function (res) {
            res.forEach(function (x) {
                var pipeLineSchematic = new executionUtils_1.Schematic(x.Id, x.PipelineId, x.SchematicId, x.SequenceNumber);
                self.selectedPipeline.schematics.push(pipeLineSchematic);
            });
            subscription.unsubscribe();
        }, function (err) { return console.log("Error getting pipelineschematics for pipelind ID :" + pipeLineId, err); });
    };
    SchematicExecution.prototype.callForExecute = function () {
        var self = this;
        self.isExecuting = true;
        self.executionStatusMsg = "Running...";
        self.intFormSvc.startSpinner('page', 'Executing schematic ' + self.selectedSchematic.id + '...');
        self.allMessages = [];
        self.selectedPipeline.pipelineRuntimeValue = '';
        self.selectedPipeline.idForSchematics = [];
        self.selectedPipeline.schematics.forEach(function (x) { return self.selectedPipeline.idForSchematics.push(x.id); });
        self.channelService.askForSchematicsRuntimeValue$.emit(true);
    };
    SchematicExecution.prototype.execute = function (obj) {
        var self = this;
        if (self.pageContentType === 'schematic') {
            self.signalr.executeSchematic(self.selectedSchematic.id, obj.runtimeValue);
        }
        else {
            self.selectedPipeline.pipelineRuntimeValue += '"' + obj.id + '":' + obj.runtimeValue + ';';
            var idToRemove = self.selectedPipeline.idForSchematics.find(function (x) { return x == obj.id; });
            if (idToRemove) {
                self.selectedPipeline.idForSchematics.splice(self.selectedPipeline.idForSchematics.indexOf(idToRemove), 1);
            }
            if (self.selectedPipeline.idForSchematics.length == 0) {
                var runtimeVal = '{' + self.selectedPipeline.pipelineRuntimeValue.slice(0, self.selectedPipeline.pipelineRuntimeValue.length - 1) + '}';
                //let runtimeVal = self.selectedPipeline.pipelineRuntimeValue.slice(0, self.selectedPipeline.pipelineRuntimeValue.length - 1);
                self.signalr.executePipeline(self.selectedPipeline.id, runtimeVal);
            }
        }
    };
    SchematicExecution.prototype.configToggle = function (toggleTo) {
        this.channelService.configToggle$.emit(toggleTo);
    };
    SchematicExecution.prototype.messageToggle = function (toggleTo) {
        this.channelService.messageToggle$.emit(toggleTo);
    };
    __decorate([
        core_1.ViewChild(schematicpreview_1.SchematicPreview), 
        __metadata('design:type', (typeof (_a = typeof schematicpreview_1.SchematicPreview !== 'undefined' && schematicpreview_1.SchematicPreview) === 'function' && _a) || Object)
    ], SchematicExecution.prototype, "schematicPreview", void 0);
    __decorate([
        core_1.ViewChild(typeahead_1.TypeAhead), 
        __metadata('design:type', (typeof (_b = typeof typeahead_1.TypeAhead !== 'undefined' && typeahead_1.TypeAhead) === 'function' && _b) || Object)
    ], SchematicExecution.prototype, "typeAhead", void 0);
    SchematicExecution = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/Datahub/routes/admin/schematic/Execution/schematicExecution.html"),
            providers: [schematicService_1.SchematicApiService, signalr_1.signalr, executionDialogService_1.ExecutionDialogService]
        }), 
        __metadata('design:paramtypes', [(typeof (_c = typeof schematicService_1.SchematicApiService !== 'undefined' && schematicService_1.SchematicApiService) === 'function' && _c) || Object, (typeof (_d = typeof signalr_1.signalr !== 'undefined' && signalr_1.signalr) === 'function' && _d) || Object, (typeof (_e = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _e) || Object, (typeof (_f = typeof executionDialogService_1.ExecutionDialogService !== 'undefined' && executionDialogService_1.ExecutionDialogService) === 'function' && _f) || Object, (typeof (_g = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _g) || Object])
    ], SchematicExecution);
    return SchematicExecution;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.SchematicExecution = SchematicExecution;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/configuration/configuration.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var configuration_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/configuration/configuration.ts");
var configuration_routing_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/configuration/configuration.routing.ts");
var ConfigurationModule = (function () {
    function ConfigurationModule() {
    }
    ConfigurationModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, SharedModule_1.SharedModule, configuration_routing_1.ConfigurationRouting],
            declarations: [configuration_1.Configuration],
        }), 
        __metadata('design:paramtypes', [])
    ], ConfigurationModule);
    return ConfigurationModule;
}());
exports.ConfigurationModule = ConfigurationModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/configuration/configuration.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var configuration_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/configuration/configuration.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ConfigurationRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Schematic/Configuration', component: configuration_1.Configuration, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/configuration/configuration.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var schematicService_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematicService.ts");
var core_2 = __webpack_require__("./node_modules/@angular/core/index.js");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var configurationControlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/configuration/configurationControlConfig.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var Configuration = (function () {
    function Configuration(processApi, alert, navService, location) {
        //navService.setCurrentPage(location.path(false));
        this.processApi = processApi;
        this.alert = alert;
        this.navService = navService;
        this.location = location;
        this.newHoliday = {};
        this.searchKey = "";
        this.controlConfig = configurationControlConfig_1.ConfigUnitControlConfig;
    }
    Configuration.prototype.ngAfterViewInit = function () {
        this.refreshConfigurationUnits();
    };
    Configuration.prototype.refreshConfigurationUnits = function () {
        this.dataTable.GetParentPageDetails(this.controlConfig, this.processApi, "unit");
    };
    __decorate([
        core_2.ViewChild(displayGrid_1.DisplayGridComponent), 
        __metadata('design:type', (typeof (_a = typeof displayGrid_1.DisplayGridComponent !== 'undefined' && displayGrid_1.DisplayGridComponent) === 'function' && _a) || Object)
    ], Configuration.prototype, "dataTable", void 0);
    Configuration = __decorate([
        core_1.Component({
            selector: 'process',
            template: "<div><displayGrid></displayGrid></div>",
            providers: [schematicService_1.SchematicApiService]
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof schematicService_1.SchematicApiService !== 'undefined' && schematicService_1.SchematicApiService) === 'function' && _b) || Object, (typeof (_c = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _c) || Object, (typeof (_d = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _d) || Object, (typeof (_e = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _e) || Object])
    ], Configuration);
    return Configuration;
    var _a, _b, _c, _d, _e;
}());
exports.Configuration = Configuration;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/configuration/configurationControlConfig.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.TheChild = {
    ChildType: "edit",
    ShallHideDeleteButton: true,
    ShallHideAddButton: false,
    ForeignKeyColumn: "UnitId",
    PrimaryKeyColumn: "ConfigValueTypeId",
    ColumnConfiguration: [{
            "dbColumnName": "ConfigValueTypeId",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ConfigValueTypeId",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "MessageTypeId",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Message Type",
            "dataSourceAddress": { tableName: "/config/messagetype", dbColumnName: "MessageTypeId", displayColumnName: "LookupKey" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "UnitId",
            "htmlControlType": "select",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Unit",
            "dataSourceAddress": { tableName: "/config/unit", dbColumnName: "UnitId", displayColumnName: "LookupKey" },
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "LookupKey",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "Template",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Template",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
            "type": "json"
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};
exports.ConfigUnitControlConfig = {
    ChildType: "edit",
    ShallHideDeleteButton: true,
    ShallHideAddButton: false,
    IsChildPage: "true",
    ChildControlConfig: exports.TheChild,
    PaginationPageLimit: 10,
    PrimaryKeyColumn: "UnitId",
    ColumnConfiguration: [{
            "dbColumnName": "UnitId",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "LookupKey",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": "^[a-zA-Z.]{2,30}$",
        },
        {
            "dbColumnName": "UnitTypeId",
            "htmlControlType": "select",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Unit Type",
            "dataSourceAddress": { tableName: "/config/UnitType", dbColumnName: "UnitTypeId", displayColumnName: "UnitTypeLookupKey" },
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "VersionStamp",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "VersionStamp",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/designer/schematicDesigner.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var schematicDesigner_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/designer/schematicDesigner.ts");
var schematicDesignerRouting_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/designer/schematicDesignerRouting.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SchematicDesignerModule = (function () {
    function SchematicDesignerModule() {
    }
    SchematicDesignerModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, forms_1.FormsModule, SharedModule_1.SharedModule, schematicDesignerRouting_1.SchematicDesignerRouting],
            declarations: [schematicDesigner_1.SchematicDesigner],
        }), 
        __metadata('design:paramtypes', [])
    ], SchematicDesignerModule);
    return SchematicDesignerModule;
}());
exports.SchematicDesignerModule = SchematicDesignerModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/designer/schematicDesigner.html":
/***/ (function(module, exports) {

module.exports = "<template [ngIf]=\"apiIsLoaded\">\r\n    <!-- adding New Schematic section, visible when Add new schematic is pressed -->\r\n    <template [ngIf]=\"addSchematicVisibility\">\r\n        <div class=\"card-block\">\r\n            <div class=\"form-inline\">\r\n                <label for=\"schematicName\">Enter Schematic Name:</label>\r\n                <input id=\"schematicName\" class=\"form-control\" #newSchematicName type=\"text\" size=\"40\">\r\n                <button (click)=\"saveNewSchematic(newSchematicName.value)\" class=\"button-standard\" title=\"Save schematic.\">\r\n                    <span class=\"fa fa-floppy-o fa-lg\"></span>\r\n                    Save Schematic\r\n                </button>\r\n                <button (click)=\"cancelSchematicClicked()\" class=\"button-standard\" title=\"Cancel\">\r\n                    <span class=\"fa fa-ban fa-lg\"></span>\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </template>\r\n    <!-- TypeAhead search, top right buttons and schematic header -->\r\n    <template [ngIf]=\"!addSchematicVisibility\">\r\n        <div class=\"card-block\">\r\n            <!-- typeahead and top right buttons -->\r\n            <!-- typeahead section -->\r\n            <div class=\"row\">\r\n                <div class=\"col-md-12 col-lg-9 col-xl-6\">\r\n                    <div class=\"form-group\">\r\n                        <label>Enter below <strong>schematic id</strong> or <strong>schematic description</strong> to search for:</label>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <typeahead-input [search]=\"autocompleteInput.searchSchematics\" (onSelected)=\"onSchematicSelected($event)\"></typeahead-input>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- top  right top buttons -->\r\n            <div class=\"form-group row\">\r\n                <div class=\"col-md-12\">\r\n                    <button id=\"addSchematicBtn\" (click)=\"addSchematicClicked()\" class=\"button-standard \">\r\n                        <span class=\"fa fa-plus fa-lg\"></span>\r\n                        Create New Schematic\r\n                    </button>\r\n                    <button id=\"btnPageRefresh\" *ngIf=\"selectedSchematic.schematicId\" (click)=\"refreshPage()\" class=\"button-standard \">\r\n                        <span class=\"fa fa-refresh fa-lg\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <!-- schematic header zone -->\r\n            <div class=\"card\" *ngIf=\"selectedSchematic.schematicId\">\r\n                <div class=\"card-header\">\r\n                    <div class=\"col-md-12 pl-0\">\r\n                        <div class=\"col-md-3 col-lg-2\">\r\n                            <h4 class=\"card-title mb-0\"> Schematic: {{selectedSchematic.schematicId}} </h4>\r\n                        </div>\r\n                        <div class=\"col-md-4 col-lg-3\">\r\n                            <input id=\"schematicDesc\" class=\"form-control-sm full-width\" type=\"text\" [(ngModel)]=\"selectedSchematic.description\">\r\n                        </div>\r\n                        <div class=\"col-md-1\">\r\n                            <button (click)=\"changeSchematicDescription(selectedSchematic)\" class=\"button-standard \" data-toggle=\"tooltip\" title=\"Save schematic description.\">\r\n                                <span class=\"fa fa-floppy-o fa-lg\"></span>\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"col-md-4 col-lg-3\">\r\n                            <template [ngIf]=\"selectedSchematic.isActive\">\r\n                                <button id=\"btnDeactivate\" (click)=\"deactivateSchematic(selectedSchematic)\" class=\"button-standard\" title=\"Deactivate schematic.\">\r\n                                    <span class=\"fa fa-ban fa-lg\"></span>\r\n                                </button>\r\n                                <button id=\"btnSchematicClone\" (click)=\"cloneSchematic(selectedSchematic)\" class=\"button-standard\" title=\"Clone Schematic.\">\r\n                                    <span class=\"fa fa-clone fa-lg\"></span>\r\n                                </button>\r\n                            </template>\r\n                            <template [ngIf]=\"selectedSchematic.schematicId && !selectedSchematic.isActive\">\r\n                                <button id=\"btnActivate\" (click)=\"activateSchematic(selectedSchematic)\" class=\"button-standard\" title=\"Activate schematic.\">\r\n                                    <span class=\"fa fa-check fa-lg\"></span>\r\n                                </button>\r\n                            </template>\r\n                        </div>\r\n                    </div>\r\n                    <!-- should appear underneath the schematic ID -->\r\n                    <template [ngIf]=\"!selectedSchematic.isActive && selectedSchematic.schematicId\">\r\n                        <div class=\"col-md-2\">\r\n                            <span class=\"text-danger\">(deactivated)</span>\r\n                        </div>\r\n                    </template>\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <!-- editing existing schematic: steps and adding new stp area -->\r\n                    <template [ngIf]=\"!addSchematicVisibility\">\r\n                        <!-- editing steps area -->\r\n                        <accordion *ngFor=\"let step of allStepsVM\" [title]=\"'StepNo: ' + step.StepNumber\" [(collapsed)]=\"step.isCollapsed\">\r\n                            <!-- step header -->\r\n                            <accordionHeaderContent>\r\n                                <div class=\"col-md-10\">\r\n                                    <div class=\"col-md-4\">\r\n                                        <input class=\"form-control-sm full-width\" type=\"text\" [(ngModel)]=\"step.StepDescription\">\r\n                                    </div>\r\n                                    <div class=\"col-md-1\">\r\n                                        <button (click)=\"stepDefinitionUpdate(step)\"\r\n                                                class=\"button-standard \" data-toggle=\"tooltip\" title=\"Save step description.\">\r\n                                            <span class=\"fa fa-floppy-o fa-lg\"></span>\r\n                                        </button>\r\n                                    </div>\r\n                                    <div class=\"col-md-3\">\r\n                                        <span><strong>{{step.UnitName}}</strong></span>\r\n                                    </div>\r\n                                    <div class=\"col-md-4\">\r\n                                        <button (click)=\"higherStep(step)\" class=\"button-standard \"\r\n                                                *ngIf=\"step.StepNumber !== 1 && lastStepNumber > 1\" data-toggle=\"tooltip\" title=\"Raise this step.\">\r\n                                            <span class=\"fa fa-arrow-up fa-lg\"></span>\r\n                                        </button>\r\n                                        <button (click)=\"lowerStep(step)\" class=\"button-standard \"\r\n                                                *ngIf=\"step.StepNumber !== lastStepNumber && lastStepNumber > 1\" data-toggle=\"tooltip\" title=\"Lower this step.\">\r\n                                            <span class=\"fa fa-arrow-down fa-lg\"></span>\r\n                                        </button>\r\n                                        <button id=\"btnDeleteStep\" (click)=\"deleteStep(step)\" class=\"button-standard \" data-toggle=\"tooltip\" title=\"Delete this step.\">\r\n                                            <span class=\"fa fa-trash fa-lg\"></span>\r\n                                        </button>\r\n                                        <button id=\"btnStepShowCloneZone\" (click)=\"showCloneStep(step)\" class=\"button-standard \" data-toggle=\"tooltip\" title=\"Clone this step.\">\r\n                                            <span class=\"fa fa-clone fa-lg\"></span>\r\n                                        </button>\r\n                                        <button (click)=\"addStepConfiguration(step)\" class=\"button-standard\" data-toggle=\"tooltip\" title=\"Add a new configuration to this step.\">\r\n                                            <span class=\"fa fa-cog fa-lg\"></span>\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-md-2\">\r\n                                    <span *ngIf=\"!step.isComplete\" class=\"text-danger\">(incompleted)</span>\r\n                                </div>\r\n                            </accordionHeaderContent>\r\n                            <accordionBodyContent>\r\n                                <!-- section for cloning step -->\r\n                                <div class=\"card card-block\" *ngIf=\"step.state === 'doClone'\">\r\n                                    <div class=\"form-group\">\r\n                                        <label>Enter schematic ID you want to clone for/to:</label>\r\n                                        <input type=\"number\" class=\"form-control-sm\" #cloneToSchematicID>\r\n                                        <button id=\"btnDoStepClone\" (click)=\"doStepClone(step, cloneToSchematicID.value)\" class=\"button-standard \" data-toggle=\"tooltip\" title=\"Clone this step.\">\r\n                                            <span class=\"fa fa-plus fa-lg\"></span> Clone Step\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"card-block p-0\">\r\n                                    <ul class=\"pl-0\">\r\n                                        <template ngFor let-asset [ngForOf]=\"step.StepAssets\">\r\n                                            <template [ngIf]=\"asset.ConfigValueId\">\r\n                                                <li class=\"list-group-item\">\r\n                                                    <button (click)=\"inlineDeleteClicked(asset)\" class=\"button-standard\">\r\n                                                        <span class=\"fa fa-trash\"></span>\r\n                                                    </button>\r\n                                                    <button *ngIf=\"!asset.editByComponent\" (click)=\"inlineEditClicked(asset.Sequence)\" class=\"button-standard\">\r\n                                                        <span class=\"fa fa-pencil\"></span>\r\n                                                    </button>\r\n                                                    <button *ngIf=\"asset.editByComponent\" (click)=\"asset.isVisible=!asset.isVisible\" class=\"button-standard\">\r\n                                                        <span class=\"fa fa-pencil\"></span>\r\n                                                    </button>\r\n                                                    <template [ngIf]=\"!asset.editByComponent\">\r\n                                                        &nbsp;<strong>{{asset.ConfigValueTypeLookupKey}}</strong> === {{asset.ConfigurationValue | slice:0:100}}\r\n                                                    </template>\r\n                                                    <template [ngIf]=\"asset.editByComponent\">\r\n                                                        <template [ngIf]=\"!asset.isVisible\">\r\n                                                            <strong>{{asset.ConfigValueTypeLookupKey}}</strong> {{asset.ConfigurationValue | slice:0:100}}\r\n                                                        </template>\r\n                                                        <div class=\"card-block\" *ngIf=\"asset.componentType == 'JsonLike' && asset.isVisible\">\r\n                                                            <json-edit [inputJson]='asset.ConfigurationValue'\r\n                                                                       [PredefinedJsonValues]=\"asset.Template\" [isRoot]='true'\r\n                                                                       [parentStep]='step'\r\n                                                                       (cancelChanges)=\"jsonCanceled($event,asset)\"\r\n                                                                       (out)=\"getJson($event, asset, step)\"></json-edit>\r\n                                                        </div>\r\n                                                        <div class=\"card-block\" *ngIf=\"asset.componentType == 'ARRAYLIKE' && asset.isVisible\">\r\n                                                            <table-edit-config [inputArray]='asset.ConfigurationValue'\r\n                                                                               [PredefinedJsonValues]=\"asset.Template\"\r\n                                                                               [parentStep]='step'\r\n                                                                               (cancelChanges)=\"jsonCanceled($event,asset)\"\r\n                                                                               (out)=\"getJson($event, asset, step)\"></table-edit-config>\r\n                                                        </div>\r\n                                                    </template>\r\n                                                </li>\r\n                                            </template>\r\n                                            <div *ngIf=\"visiblityMatrix[asset.Sequence].isVisible && !asset.editByComponent\" id=\"editableArea\" class=\"card-block\">\r\n                                                <div class=\"form-group\">\r\n                                                    <textarea class=\"textArea\" [(ngModel)]=\"asset.ConfigurationValue\"></textarea>\r\n                                                </div>\r\n                                                <div class=\"form-group\">\r\n                                                    <button (click)=\"inlineEditSave(asset)\" class=\"button-standard \">\r\n                                                        <span class=\"fa fa-floppy-o fa-lg\"></span>\r\n                                                        Save\r\n                                                    </button>\r\n                                                    <button (click)=\"inlineEditClicked(asset.Sequence)\" class=\"button-standard \">\r\n                                                        <span class=\"fa fa-ban fa-lg\"></span>\r\n                                                        Cancel\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </template>\r\n                                    </ul>\r\n                                </div>\r\n                                <div class=\"card\" *ngIf=\"step.StepAddingConfiguration && step.allConfigValueTypesVM.length > 0\">\r\n                                    <div class=\"card-header\">\r\n                                        <h5 class=\"card-title mb-0\">Step {{step.StepNumber}} Configuration</h5>\r\n                                    </div>\r\n                                    <div class=\"card-block\">\r\n                                        <div class=\"form-group\">\r\n                                            <select #configValueTypeEntry (change)=\"configValueTypeSelected($event.target.value, step)\">\r\n                                                <option *ngFor=\"let configValueType of step.allConfigValueTypesVM\"\r\n                                                        (value)=\"configValueType\"\r\n                                                        [ngClass]=\"{'text-danger': configValueType.isMandatory}\">\r\n                                                    {{configValueType.description}}\r\n                                                </option>\r\n                                            </select>\r\n                                            <input type=\"text\" *ngIf=\"!step.isAddingJSON\" [(ngModel)]=\"step.selectedConfigValue\">\r\n                                        </div>\r\n                                        <div *ngIf=\"step.isAddingJSON\" class=\"row\">\r\n                                            <div class=\"col-md-12\">\r\n                                                <div class=\"card-block\" *ngIf=\"!step.isArrayLike\">\r\n                                                    <json-edit #jsonEdit [inputJson]='step.selectedConfigValue' [parentStep]='step'\r\n                                                               [PredefinedJsonValues]=\"step.selectedConfigType.template\" [isRoot]='true'\r\n                                                               (cancelChanges)=\"cancelConfigClicked(step)\"\r\n                                                               (out)=\"addNewJson($event,step)\"></json-edit>\r\n                                                </div>\r\n                                                <div class=\"card-block\" *ngIf=\"step.isArrayLike\">\r\n                                                    <table-edit-config [inputArray]='step.selectedConfigValue'\r\n                                                                       [PredefinedJsonValues]=\"step.selectedConfigType.template\"\r\n                                                                       [parentStep]='step'\r\n                                                                       (cancelChanges)=\"cancelConfigClicked(step)\"\r\n                                                                       (out)=\"addNewJson($event,step)\"></table-edit-config>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <button (click)=\"saveConfigClicked(step, configValueTypeEntry.value)\"\r\n                                                class=\"button-standard \">\r\n                                            <span class=\"fa fa-floppy-o fa-lg\"></span>\r\n                                            Save\r\n                                        </button>\r\n                                        <button (click)=\"cancelConfigClicked(step)\"\r\n                                                class=\"button-standard \">\r\n                                            <span class=\"fa fa-ban fa-lg\"></span>\r\n                                            Cancel\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </accordionBodyContent>\r\n                        </accordion>\r\n                        <!-- buttons for adding new steps and file script generate -->\r\n                        <template [ngIf]=\"selectedSchematic.isActive\">\r\n                            <div class=\"form-group\">\r\n                                <button (click)=\"generateSqlScript(selectedSchematic)\" class=\"button-standard\">\r\n                                    <span class=\"fa fa-file-text-o fa-lg\"></span>\r\n                                    Generate SQL Script\r\n                                </button>\r\n                                <button id=\"btnAddNewStep\" (click)=\"addStepClicked()\" class=\"button-standard\">\r\n                                    <span class=\"fa fa-plus fa-lg\"></span>\r\n                                    Add New Step\r\n                                </button>\r\n                            </div>\r\n                        </template>\r\n                        <template [ngIf]=\"addStepVisibility\">\r\n                            <!-- adding new step for schematic -->\r\n                            <div class=\"card card-block\">\r\n                                <div class=\"form-group row\">\r\n                                    <div class=\"col-md-3 col-form-label\">\r\n                                        <label><strong>Choose a unit:</strong></label>\r\n                                    </div>\r\n                                    <div class=\"col-md-9\">\r\n                                        <select (change)=\"unitSelected($event.target.value)\" [disabled]=\"unitFrozen\" class=\"form-control\">\r\n                                            <option *ngFor=\"let unit of allUnitsVM\" (value)=\"unit\">{{unit.description}}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group row\">\r\n                                    <div class=\"col-md-3 col-form-label\">\r\n                                        <label><strong>Step description:</strong></label>\r\n                                    </div>\r\n                                    <div class=\"col-md-9\">\r\n                                        <input type=\"text\" [(ngModel)]=\"newStepDescription\" class=\"form-control\">\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group row\">\r\n                                    <div class=\"col-md-12\">\r\n                                        <button (click)=\"saveNewStep()\" class=\"button-standard\">\r\n                                            <span class=\"fa fa-floppy-o fa-lg\"></span>\r\n                                            Save Step\r\n                                        </button>\r\n                                        <button (click)=\"cancelAddStepClicked()\"\r\n                                                class=\"button-standard\">\r\n                                            <span class=\"fa fa-ban fa-lg\"></span>\r\n                                            Cancel\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </template>\r\n                        <!-- generate sql script for file -->\r\n                        <template [ngIf]=\"schematicState == 'genSQLScript'\">\r\n                            <div class=\"card\">\r\n                                <div class=\"card-header\">\r\n                                    <h4 class=\"card-title\">\r\n                                        Schematic Script\r\n                                        <span id=\"close-schematic-icon\" class=\"align-middle fa fa-times-circle fa-lg text-danger float-xs-right\" (click)=\"closeSQLScriptArea()\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Close script section.\"></span>\r\n                                    </h4>\r\n                                </div>\r\n                                <div class=\"card-block\">\r\n                                    <textarea class=\"full-width\" [(ngModel)]=\"sqlScript\" style=\"height: 300px\" onClick=\"this.setSelectionRange(0, this.value.length)\"></textarea>\r\n                                </div>\r\n                            </div>\r\n                        </template>\r\n                    </template>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </template>\r\n</template>"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/designer/schematicDesigner.scss":
/***/ (function(module, exports) {

module.exports = "#close-schematic-icon {\n  cursor: pointer; }\n"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/designer/schematicDesigner.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var schematicService_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematicService.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var schematicDesignerUtils_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/designer/schematicDesignerUtils.ts");
var appSettings_1 = __webpack_require__("./src/app/Configuration/appSettings.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var SchematicDesigner = (function (_super) {
    __extends(SchematicDesigner, _super);
    function SchematicDesigner(processService, elementRef, appSettings, alert, route) {
        _super.call(this);
        this.processService = processService;
        this.elementRef = elementRef;
        this.appSettings = appSettings;
        this.alert = alert;
        this.route = route;
        this.appSettingsService = appSettings;
        this.elemRef = elementRef;
        this.processApi = processService;
    }
    SchematicDesigner.prototype.ngOnInit = function () {
        var self = this;
        self.initialDataAnouncedSource = new Subject_1.Subject();
        self.initialDataAnounced$ = self.initialDataAnouncedSource.asObservable();
        self.autocompleteInput = new Object();
        self.autocompleteInput.searchSchematics = this.searchSchematics();
        self.setPageType(false); //edit page
        var id = undefined;
        self.route.params.forEach(function (params) {
            id = params['id'];
        });
        if (id) {
            var subscription_1 = self.initialDataAnounced$.subscribe(function (x) {
                self.SchematicSelected(id);
                subscription_1.unsubscribe();
            });
        }
    };
    SchematicDesigner.prototype.ngOnDestroy = function () {
        this.initialDataAnouncedSource.unsubscribe();
    };
    SchematicDesigner.prototype.setPageType = function (boolValue) {
        this.IsAddpage = boolValue;
        this.apiIsLoaded = false;
        this.allSteps = new Array();
        // get schematics details(data needed to works with schematics...)
        this.getSchematicsDetails();
        this.sequence = 1;
    };
    SchematicDesigner.prototype.getSchematicsDetails = function () {
        var _this = this;
        var self = this;
        this.processApi.fetchMultipleForSchematics().subscribe(function (res) {
            self.allSchematics = res[0];
            self.allUnits = res[1];
            self.allConfigValueTypes = res[2];
            self.allUnitTypes = res[3];
            // go and make VM  objects
            self.loadSchematicDesigner();
            self.initialDataAnouncedSource.next("DataIsObtained");
        }, function (error) {
            console.log("Error getting schematic details:", error);
            _this.alert.error("Error getting schematic details:" + error.message);
        }, function () {
        });
    };
    SchematicDesigner.prototype.loadSchematicDesigner = function () {
        var self = this;
        self.apiIsLoaded = true;
        // set all units (list of possible steps in case user creates new)
        self.allUnitsVM = self.buildAllUnitsVM();
        self.selectedUnit = self.allUnitsVM[0];
        // create list of step configuration elements/components(when you uses adds step configuration , the values available are  from
        // this list (in fact  will be this list minus whatever steo already have )
        self.allConfigValueTypesVM = self.buildConfigValueTypesVM();
        self.selectedConfigType = self.allConfigValueTypesVM[0];
        self.allSchematicsVM = self.buildSchematicsVM();
        if (!self.selectedSchematic) {
            self.selectedSchematic = new schematicDesignerUtils_1.Schematic(null, null, null, false);
        }
        if (self.isNewSchematic) {
            self.SchematicSelected(self.newSchematicDescription);
            self.isNewSchematic = false;
            return;
        }
        if (self.isClone) {
            self.SchematicSelected(self.cloneID.toString());
            self.isClone = false;
            return;
        }
        if (this.selectedSchematic.schematicId) {
            this.SchematicSelected(this.selectedSchematic.schematicId);
        }
        ;
    };
    // endregion build
    SchematicDesigner.prototype.buildAllUnitsVM = function () {
        var newVM = new Array();
        this.allUnits.forEach(function (x) {
            newVM.push({
                id: x.UnitId,
                description: x.LookupKey
            });
        });
        return newVM.sort(schematicDesignerUtils_1.sortByDesc);
    };
    SchematicDesigner.prototype.buildConfigValueTypesVM = function () {
        var unitId = this.selectedUnit.id;
        var newconfigs = new Array();
        this.allConfigValueTypes.forEach(function (x) {
            if (x.UnitId === unitId) {
                var newObj = new schematicDesignerUtils_1.ConfigValueType(x.ConfigValueTypeId, x.UnitId, x.LookupKey, x.Template ? x.Template : '', x.IsMandatory);
                newconfigs.push(newObj);
            }
        });
        return newconfigs.sort(schematicDesignerUtils_1.sortByDesc);
    };
    SchematicDesigner.prototype.buildSchematicsVM = function () {
        var newVM = new Array();
        this.allSchematics.forEach(function (x) {
            if (x.hasOwnProperty('SchematicId')) {
                var schematic = new schematicDesignerUtils_1.Schematic(x.SchematicId, x.LookupKey, x.IsActive == 0 ? "(InActive)" : "", x.IsActive == 0 ? false : true);
                newVM.push(schematic);
            }
        });
        return newVM;
    };
    SchematicDesigner.prototype.SchematicSelected = function (idOrDescription) {
        var self = this;
        self.schematicState = 'neutral';
        var schematicId = idOrDescription;
        self.selectedSchematic = self.allSchematicsVM.find(function (x) {
            return (x.schematicId == schematicId || x.description === idOrDescription);
        });
        self.GetSchematicConfiguration();
    };
    SchematicDesigner.prototype.configValueTypeSelected = function (selectedValue, step) {
        step.isAddingJSON = false;
        step.selectedConfigValue = null;
        var lcConfigValFounded = this.allConfigValueTypesVM.find(function (x) {
            return x.description.toLowerCase().replace(/\s+/g, '') == selectedValue.toLowerCase().replace(/\s+/g, '');
        });
        if (lcConfigValFounded) {
            try {
                if (!lcConfigValFounded.template || lcConfigValFounded.template.length == 0) {
                    step.selectedConfigValue = '';
                    step.selectedConfigType = lcConfigValFounded;
                }
                else {
                    var type = JSON.parse(lcConfigValFounded.template)['#Type#'];
                    if (type) {
                        step.selectedConfigType = lcConfigValFounded;
                        if (type.toUpperCase() == 'ARRAYLIKE') {
                            step.selectedConfigValue = '[[' + schematicDesignerUtils_1.jsonToDoc(lcConfigValFounded.template, step) + ']]';
                            step.isArrayLike = true;
                        }
                        else {
                            step.selectedConfigValue = schematicDesignerUtils_1.jsonToDoc(lcConfigValFounded.template, step);
                            step.isArrayLike = false;
                        }
                        setTimeout(function () {
                            if (step.selectedConfigValue != '')
                                step.isAddingJSON = true;
                        }, 50);
                    }
                }
            }
            catch (err) {
                console.log('Invalid JSON template with no type defined!');
                this.alert.error("Invalid Template : ConfigValueTypeId:" + err.message);
            }
        }
    };
    SchematicDesigner.prototype.unitSelected = function (unitName) {
        var self = this;
        var result = self.allUnitsVM.find(function (u) {
            return u.description.toLowerCase().replace(/\s+/g, '') === unitName.toLowerCase().replace(/\s+/g, '');
        });
        this.selectedUnit = result ? result : '';
        this.allConfigValueTypesVM = this.buildConfigValueTypesVM();
        this.selectedConfigType = this.allConfigValueTypesVM[0];
    };
    SchematicDesigner.prototype.inlineEditClicked = function (sequenceNo) {
        var match = this.visiblityMatrix.find(function (x) {
            return x.Sequence === sequenceNo;
        });
        if (match) {
            match.isVisible = !match.isVisible;
        }
    };
    SchematicDesigner.prototype.inlineEditSave = function (asset) {
        var _this = this;
        var configValueId = asset.ConfigValueId;
        var schematicId = this.selectedSchematic.schematicId;
        if (configValueId) {
            var obj = this.allConfigValues.find(function (x) {
                if (x.ConfigValueId === configValueId)
                    return x;
            });
            if (obj) {
                obj.Value = asset.ConfigurationValue;
                this.processApi.updateConfigValues(obj, "ConfigValueId").subscribe(function (res) {
                    _this.getSchematicStepsBySchematicId(schematicId);
                    if (!asset.editByComponent)
                        _this.inlineEditClicked(asset.Sequence);
                }, function (error) {
                    _this.alert.error("Error in updating ConfigValue " + error.Status);
                });
            }
        }
    };
    // method used when you edit an existing asset of type JSON
    SchematicDesigner.prototype.getJson = function (eventData, asset, step) {
        var _this = this;
        var self = this;
        asset.ConfigurationValue = eventData.value;
        self.inlineEditSave(asset);
        asset.isVisible = false;
        try {
            var targetAsset_1 = step.StepAssets.find(function (x) {
                if (x.editByComponent && x.componentType == 'ARRAYLIKE') {
                    return true;
                }
                ;
                return false;
            });
            if (targetAsset_1 && asset.componentType.toUpperCase() == "JSONLIKE") {
                var jsonFromEvent = JSON.parse(eventData.value);
                var targetConfigValue = JSON.parse(targetAsset_1.ConfigurationValue);
                var settedSections_1 = [];
                var existingSections_1 = [];
                jsonFromEvent.forEach(function (x) {
                    settedSections_1.push('DocPart' + ' - ' + x.DocPart);
                });
                targetConfigValue.forEach(function (x) {
                    existingSections_1.push('DocPart' + ' - ' + x[0].DocPart);
                });
                existingSections_1.forEach(function (x) {
                    if (settedSections_1.indexOf(x) == -1) {
                        targetAsset_1.isVisible = true;
                        self.alert.addAlertAndRequestAnswer('Do you want to delete section : ' + x + ' in Column Mapping?', null, 'Delete Section');
                        var subscription = self.alert.requestConfirmationAnswer$.subscribe(function (answer) {
                            subscription.unsubscribe();
                            if (answer != "OK") {
                                targetAsset_1.isVisible = false;
                                return;
                            }
                            setTimeout(function () {
                                _this.alert.sendSectionForDelete$.emit(x);
                            }, 300);
                        });
                    }
                });
            }
        }
        catch (Exception) {
            console.log("Unable to delete corresponding section from Column mapping");
        }
    };
    // method used when you add new asset of type JSON
    SchematicDesigner.prototype.addNewJson = function (eventData, step) {
        step.selectedConfigValue = eventData.value;
    };
    SchematicDesigner.prototype.buildSchematicSteps = function () {
        var _this = this;
        var sequence = 0;
        var visMatrix = new Array();
        var schematicId = this.selectedSchematic.schematicId;
        var self = this;
        self.processApi.getSchematicStepsBySchematicId(schematicId).subscribe(function (res) {
            self.allSchematicSteps = res[0];
            self.allConfigValues = res[1].DataTable;
            self.allSchematicConfiguration.forEach(function (x) {
                x.Sequence = sequence;
                var visiblityObj = { Sequence: sequence, isVisible: false, Editable: false };
                visMatrix.push(visiblityObj);
                sequence++;
            });
            self.visiblityMatrix = visMatrix;
            self.allStepsVM = new Array();
            var maxStepNo = 1;
            // this method is called only by method  self.GetSchematicConfiguration()
            // and there are populated self.lastStepNumber and self.allSchematicConfiguration
            while (maxStepNo <= self.lastStepNumber) {
                var assets = self.allSchematicConfiguration.filter(function (x) {
                    return x.StepNumber === maxStepNo;
                });
                if (assets) {
                    assets.forEach(function (x) {
                        if (x.ConfigurationValue) {
                            try {
                                if (!x.Template || x.Template.length == 0) {
                                    x.editByComponent = false;
                                }
                                else {
                                    var type = JSON.parse(x.Template)['#Type#'];
                                    if (type) {
                                        x.editByComponent = true;
                                        if (type.toUpperCase() == 'ARRAYLIKE') {
                                            x.componentType = type.toUpperCase();
                                        }
                                        else {
                                            x.componentType = 'JsonLike';
                                        }
                                    }
                                    else {
                                        x.editByComponent = false;
                                    }
                                }
                            }
                            catch (err) {
                                console.log('Invalid JSON template with no type defined!');
                                self.alert.error("Invalid Template : ConfigValueTypeId:" + x.ConfigValueTypeId + " : " + x.Template + " - " + err.message);
                                x.editByComponent = false;
                            }
                        }
                        else {
                            x.editByComponent = false;
                        }
                    });
                }
                // get step description
                var step = self.allSchematicSteps.find(function (x) { return x.StepNumber === maxStepNo; });
                var stepIsVisible = false;
                if (self.updatedStep) {
                    if (self.updatedStep.SchematicStepId == step.SchematicStepId && self.updatedStep.StepNumber == maxStepNo && self.updatedStep.SchematicId == schematicId) {
                        stepIsVisible = true;
                        self.updatedStep = undefined;
                    }
                }
                var stepToAdd = new schematicDesignerUtils_1.Step(step.SchematicStepId, maxStepNo, step.StepDescription, schematicId, assets[0].UnitLookupKey);
                stepToAdd.isVisible = stepIsVisible;
                stepToAdd.StepAssets = assets;
                stepToAdd.StepActive = assets[0].StepActive;
                stepToAdd.isComplete = true;
                self.stepSelected(stepToAdd);
                self.allStepsVM.push(stepToAdd);
                maxStepNo++;
            }
        }, function (error) {
            _this.alert.error(" Error in getting Schematic Steps , for schematic id : " + schematicId + error.status);
        }, function () {
        });
    };
    SchematicDesigner.prototype.getSchematicStepsBySchematicId = function (schematicID) {
        var _this = this;
        this.processApi.getSchematicStepsBySchematicId(schematicID).subscribe(function (res) {
            _this.allSchematicSteps = res[0];
            _this.allConfigValues = res[1].DataTable;
        }, function (error) {
            _this.alert.error(" Error in getting Schematic Steps " + error.status);
        }, function () {
        });
    };
    SchematicDesigner.prototype.addClicked = function () {
        if (!this.selectedConfigValue) {
            return;
        }
        var newObj = {
            ConfigurationTypeName: this.selectedConfigType.description,
            ConfigurationTypeValue: this.selectedConfigValue,
            ConfigValueId: 0,
            ShowEdit: false
        };
        var currentStep = this.allSteps.pop();
        this.showAdd = true;
        if (currentStep.UnitName === "") {
            currentStep.UnitName = this.selectedUnit.description;
        }
        currentStep.StepAssets.push(newObj);
        this.allSteps.push(currentStep);
        this.unitFrozen = true;
        this.selectedConfigValue = "";
    };
    SchematicDesigner.prototype.addNewStep = function () {
        this.showAdd = false;
        this.addAStep();
        this.unitFrozen = false;
        this.selectedConfigValue = "";
    };
    SchematicDesigner.prototype.addAStep = function () {
        var stepObj = { StepNo: this.sequence, UnitName: "", StepAssets: [], ShowAdd: false };
        this.allSteps.push(stepObj);
        this.sequence++;
    };
    SchematicDesigner.prototype.lowerStep = function (step) {
        var _this = this;
        var self = this;
        self.alert.addAlertAndRequestAnswer(appSettings_1.AppNotificationsMSG.schematicLowerStepQuestion, null, 'Step position change:');
        var subscription = self.alert.requestConfirmationAnswer$.subscribe(function (item) {
            self.alert.askConfirmation = false;
            subscription.unsubscribe();
            if (item != "OK") {
                return;
            }
            var location = self.allStepsVM.indexOf(step);
            if (location === self.allStepsVM.length - 1) {
                return;
            }
            var objStepNumber = location + 1;
            var currentSchematicStep = self.allSchematicSteps.find(function (x) {
                if (x.StepNumber == objStepNumber) {
                    return x;
                }
            });
            var nextSchematicStep = self.allSchematicSteps.find(function (x) {
                if (x.StepNumber == (objStepNumber + 1)) {
                    return x;
                }
            });
            if (currentSchematicStep != undefined) {
                currentSchematicStep.StepNumber++;
            }
            if (nextSchematicStep != undefined) {
                nextSchematicStep.StepNumber--;
            }
            var currentObj = JSON.stringify(_this.allStepsVM[location + 1]);
            var nextObj = self.allStepsVM[location];
            var nextObjCopy = JSON.stringify(nextObj);
            self.allStepsVM[location + 1] = JSON.parse(nextObjCopy);
            self.allStepsVM[location] = JSON.parse(currentObj);
            self.allStepsVM[location + 1].StepNumber++;
            self.allStepsVM[location].StepNumber--;
            self.saveSchematicStepNumber(currentSchematicStep, nextSchematicStep);
        });
    }; // end lower step
    SchematicDesigner.prototype.higherStep = function (step) {
        var _this = this;
        var self = this;
        self.alert.addAlertAndRequestAnswer(appSettings_1.AppNotificationsMSG.schematicHigherStepQuestion, null, 'Step position change:');
        var subscription = self.alert.requestConfirmationAnswer$.subscribe(function (item) {
            self.alert.askConfirmation = false;
            subscription.unsubscribe();
            if (item != "OK") {
                return;
            }
            var location = self.allStepsVM.indexOf(step);
            if (location === 0) {
                return;
            }
            var objStepNumber = location + 1;
            var currentSchematicStep = _this.allSchematicSteps.find(function (x) {
                if (x.StepNumber == objStepNumber) {
                    return x;
                }
            });
            var nextSchematicStep = _this.allSchematicSteps.find(function (x) {
                if (x.StepNumber == (objStepNumber - 1)) {
                    return x;
                }
            });
            if (currentSchematicStep != undefined) {
                currentSchematicStep.StepNumber--;
            }
            if (nextSchematicStep != undefined) {
                nextSchematicStep.StepNumber++;
            }
            var currentObj = JSON.stringify(_this.allStepsVM[location]);
            var nextObj = _this.allStepsVM[location - 1];
            var nextObjCopy = JSON.stringify(nextObj);
            _this.allStepsVM[location] = JSON.parse(nextObjCopy);
            _this.allStepsVM[location - 1] = JSON.parse(currentObj);
            _this.allStepsVM[location - 1].StepNumber--;
            _this.allStepsVM[location].StepNumber++;
            _this.saveSchematicStepNumber(currentSchematicStep, nextSchematicStep);
        });
    };
    SchematicDesigner.prototype.saveSchematicStepNumber = function (currentobj, nextobj) {
        var _this = this;
        var primaryKeyColumn = "SchematicStepId";
        var schematicId = this.selectedSchematic.schematicId;
        this.processApi.updateSchematicStep(currentobj, primaryKeyColumn).subscribe(function (res) {
            _this.processApi.updateSchematicStep(nextobj, primaryKeyColumn).subscribe(function (res) {
                _this.getSchematicStepsBySchematicId(schematicId);
            }, function (error) {
                _this.alert.error(" Error in getting Schematic Steps " + error.status);
            }, function () {
            });
        }, function (error) {
            _this.alert.error(" Error in getting Schematic Steps " + error.status);
        }, function () {
        });
    };
    SchematicDesigner.prototype.SortStepNumber = function (a, b) {
        if (a.StepNumber < b.StepNumber)
            return -1;
        else if (a.StepNumber > b.StepNumber)
            return 1;
        else
            return 0;
    };
    SchematicDesigner.prototype.getConfigValueObject = function (configValueId) {
        var result;
        var self = this;
        if (this.allConfigValues.length > 0) {
            result = self.allConfigValues.find(function (x) {
                return x.ConfigValueId === configValueId;
            });
        }
        return result;
    };
    SchematicDesigner.prototype.addStepClicked = function () {
        this.addStepVisibility = true;
        this.schematicState = "none";
    };
    SchematicDesigner.prototype.cancelAddStepClicked = function () {
        this.addStepVisibility = false;
    };
    // this is for Add Step Configuration button
    SchematicDesigner.prototype.addStepConfiguration = function (step) {
        step.isCollapsed = false;
        step.StepAddingConfiguration = true;
        this.selectedConfigType = "";
        this.stepSelected(step);
        if (step.allConfigValueTypesVM.length == 0) {
            this.alert.addAlert("Configuration is completed for this step!");
        }
    };
    SchematicDesigner.prototype.stepSelected = function (step) {
        var self = this;
        var unitName = step.UnitName;
        var result = self.allUnitsVM.find(function (u) {
            return u.description.toLowerCase().replace(/\s+/g, '') === unitName.toLowerCase().replace(/\s+/g, '');
        });
        this.selectedUnit = result ? result : "";
        this.allConfigValueTypesVM = this.buildConfigValueTypesVM();
        step.allConfigValueTypesVM = [];
        step.allConfigValueTypesVM = this.buildConfigValueTypesVM().filter(function (x) {
            if (step.StepAssets.find(function (y) {
                return (y.UnitId == x.unitId && y.ConfigValueTypeLookupKey && y.ConfigValueTypeLookupKey.toUpperCase() == x.description.toUpperCase());
            }) === undefined) {
                return x;
            }
        });
        step.isComplete = step.allConfigValueTypesVM.find(function (x) {
            return x.isMandatory;
        }) ? false : true;
        this.selectedConfigType = step.allConfigValueTypesVM[0];
        if (this.selectedConfigType)
            this.configValueTypeSelected(this.selectedConfigType.description, step);
    };
    SchematicDesigner.prototype.cancelConfigClicked = function (step) {
        //this.addConfigVisibility=false;
        step.StepAddingConfiguration = false;
    };
    /// bellow method is called when asset is saved for step
    SchematicDesigner.prototype.saveConfigClicked = function (step, configValueTypeEntry) {
        // execute next line if user landed on page and did not make any selection from drop down( took default one....)
        if (step.selectedConfigType === undefined) {
            this.configValueTypeSelected(configValueTypeEntry, step);
        }
        var configValueTypeId = step.selectedConfigType.id;
        var data = step.StepAssets.find(function (x) {
            if (x.ConfigValueTypeId == configValueTypeId) {
                return x;
            }
        });
        if (data) {
            this.alert.error("This configValue Type already exists for the step. Please select different ConfigValueType");
            return;
        }
        var schematicStepId = 0;
        var objSchematicStep = this.allSchematicSteps.find(function (x) {
            if (x.StepNumber === step.StepNumber)
                return x;
        });
        if (objSchematicStep) {
            schematicStepId = objSchematicStep.SchematicStepId;
        }
        var obj = {
            ConfigValueTypeId: step.selectedConfigType.id,
            Value: step.selectedConfigValue,
            SchematicStepId: schematicStepId
        };
        var self = this;
        self.processApi.createConfigValues(obj).subscribe(function (res) {
            self.addConfigVisibility = false;
            self.selectedConfigValue = "";
            self.updatedStep = new schematicDesignerUtils_1.Step(step.SchematicStepId, step.StepNumber, step.StepDescription, self.selectedSchematic.schematicId);
            self.GetSchematicConfiguration();
        }, function (error) {
            self.alert.error(" Error in getting Schematic Steps " + error.status);
        });
    };
    SchematicDesigner.prototype.inlineDeleteClicked = function (asset) {
        var _this = this;
        var self = this;
        self.alert.addAlertAndRequestAnswer(appSettings_1.AppNotificationsMSG.deletionQuestionMsg);
        var subscription = self.alert.requestConfirmationAnswer$.subscribe(function (answer) {
            self.alert.askConfirmation = false;
            subscription.unsubscribe();
            if (answer != "OK")
                return;
            var configValueId = asset.ConfigValueId;
            if (configValueId) {
                var obj = _this.allConfigValues.find(function (x) {
                    if (x.ConfigValueId === configValueId)
                        return x;
                });
                if (obj) {
                    _this.processApi.deleteConfigValues(obj, "ConfigValueId").subscribe(function (res) {
                        self.updatedStep = new schematicDesignerUtils_1.Step(asset.SchematicStepId, asset.StepNumber, asset.StepDescription, self.selectedSchematic.schematicId);
                        _this.GetSchematicConfiguration();
                    }, function (error) {
                        _this.alert.error(" Error in deleting ConfigValues " + error.status);
                    });
                }
            }
        });
    };
    SchematicDesigner.prototype.cancelSaveConfigClicked = function () {
        this.addConfigVisibility = false;
    };
    SchematicDesigner.prototype.stepDefinitionUpdate = function (step) {
        var self = this;
        var stepMsg = "Do you want to update step definition ?";
        self.alert.addAlertAndRequestAnswer(stepMsg, null, "Step definition update");
        var subscription = self.alert.requestConfirmationAnswer$.subscribe(function (item) {
            self.alert.askConfirmation = false;
            subscription.unsubscribe();
            if (item != "OK") {
                return;
            }
            self.stepUpdate(step);
        });
    };
    // this method is called to delete the step
    SchematicDesigner.prototype.deleteStep = function (step) {
        var self = this;
        var stepId = step.SchematicStepId;
        self.alert.addAlertAndRequestAnswer(appSettings_1.AppNotificationsMSG.deletionStepQuestion);
        var subscription = self.alert.requestConfirmationAnswer$.subscribe(function (item) {
            self.alert.askConfirmation = false;
            subscription.unsubscribe();
            if (item != "OK") {
                return;
            }
            /// if user answer is OK , than do the job
            self.processApi.deleteStepByStepId(stepId).subscribe(function (res) {
                self.alert.addAlert(appSettings_1.AppNotificationsMSG.deletionStepConfirmation);
                self.setPageType(false);
            }, function (error) {
                self.alert.error(" Error when delete the step:" + error.status);
            }, function () {
            });
        });
    };
    // this method is used just to update step description  and is called in stepDefinitionUpdate  ( see above)
    SchematicDesigner.prototype.stepUpdate = function (step) {
        var self = this;
        var schematicId = self.selectedSchematic.schematicId;
        var obj = self.allSchematicSteps.find(function (x) {
            if (x.SchematicStepId == step.StepAssets[0].SchematicStepId) {
                return x;
            }
        });
        if (obj) {
            obj.Active = step.StepActive;
            obj.StepDescription = step.StepDescription;
            self.processApi.updateSchematicStep(obj, "SchematicStepId").subscribe(function (res) {
                self.getSchematicStepsBySchematicId(schematicId);
                self.alert.addAlert('Step updated!');
            }, function (error) {
                self.alert.error(" Error in getting Schematic Steps " + error.status);
            }, function () {
            });
        }
    };
    // bellow method is used when new step is created
    SchematicDesigner.prototype.saveNewStep = function () {
        if (this.newStepDescription.length < 1) {
            this.alert.error("Step description is required!");
            return;
        }
        this.addStepVisibility = false;
        var reverseList = this.allStepsVM.sort(function (a, b) {
            return b.StepNumber - a.StepNumber;
        });
        var newStepNumber = 1;
        if (reverseList[0]) {
            newStepNumber = reverseList[0].StepNumber + 1;
        }
        var ob = {
            StepNumber: newStepNumber,
            StepAssets: [],
            UnitName: this.selectedUnit.description,
            isVisible: false,
        };
        this.allStepsVM.push(ob);
        this.allStepsVM.sort(function (a, b) {
            return a.StepNumber - b.StepNumber;
        });
        this.createSchematicStep(newStepNumber);
    };
    SchematicDesigner.prototype.createSchematicStep = function (stepNumber) {
        var _this = this;
        var schematicId = this.selectedSchematic.schematicId;
        var unitId = this.selectedUnit.id;
        var stepDescription = this.newStepDescription;
        var obj = {
            SchematicId: schematicId,
            UnitId: unitId,
            StepNumber: stepNumber,
            Active: 1,
            StepDescription: stepDescription
        };
        this.processApi.createSchematicStep(obj).subscribe(function (res) {
            _this.GetSchematicConfiguration();
        }, function (error) {
            _this.alert.error(" Error in creating Schematic Steps " + error.status);
        });
    };
    // region Schematic functions
    //
    SchematicDesigner.prototype.saveNewSchematic = function (schematicName) {
        var self = this;
        if (!schematicName) {
            self.alert.addAlert("You need to enter schematic name in order to save it!");
            return;
        }
        self.addSchematicVisibility = false;
        var obj = { LookupKey: schematicName, IsActive: true };
        this.processApi.createSchematic(obj).subscribe(function (res) {
            self.isNewSchematic = true;
            self.newSchematicDescription = schematicName;
            self.setPageType(false);
        }, function (error) {
            alert("error");
        }, function () {
        });
    };
    SchematicDesigner.prototype.addSchematicClicked = function () {
        this.addSchematicVisibility = true;
    };
    SchematicDesigner.prototype.activateSchematic = function (schematic) {
        this.schematicChange(schematic, true);
    };
    SchematicDesigner.prototype.deactivateSchematic = function (schematic) {
        this.schematicChange(schematic, false);
    };
    SchematicDesigner.prototype.changeSchematicDescription = function (schematic) {
        this.schematicChange(schematic, schematic.isActive, schematic.description);
    };
    /// this method is used to activate or deactivate schematic or to update schematic description
    SchematicDesigner.prototype.schematicChange = function (schematic, toStatus, description) {
        var _this = this;
        var self = this;
        var actionTitle = "Deactivate Schematic";
        var errorMsg = " Error when deactive Schematic";
        var question = appSettings_1.AppNotificationsMSG.deactivateSchematicMsg;
        if (toStatus) {
            actionTitle = 'Activate Schematic';
            errorMsg = " Error when activate Schematic";
            question = appSettings_1.AppNotificationsMSG.activateSchematicMsg;
        }
        if (description) {
            actionTitle = 'Schematic name changed';
            errorMsg = " Error when changing schematic name";
            question = appSettings_1.AppNotificationsMSG.schematicNameChangedMsg;
        }
        self.alert.addAlertAndRequestAnswer(question, null, actionTitle);
        var subscription = self.alert.requestConfirmationAnswer$.subscribe(function (item) {
            self.alert.askConfirmation = false;
            subscription.unsubscribe();
            if (item != "OK")
                return;
            /// if user answer is OK , than do the job
            if (self.selectedSchematic.schematicId) {
                var schematicId = schematic.schematicId;
                var obj = self.allSchematics.find(function (x) {
                    if (x.SchematicId == schematicId) {
                        return x;
                    }
                });
                if (obj) {
                    obj.IsActive = toStatus;
                    if (description) {
                        obj.LookupKey = description;
                    }
                    self.processApi.updateSchematic(obj, "SchematicId").subscribe(function (res) {
                        //updated
                        // this.allSchematicsVM = [];
                        _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.saveConfirmedMsg);
                        _this.setPageType(false);
                    }, function (error) {
                        _this.alert.error(errorMsg + error.status);
                    }, function () {
                    });
                }
            }
        });
    };
    SchematicDesigner.prototype.cancelSchematicClicked = function () {
        this.addSchematicVisibility = false;
        this.selectedProcessName = "";
    };
    SchematicDesigner.prototype.GetSchematicConfiguration = function () {
        var self = this;
        self.allStepsVM = new Array();
        self.processApi.getSchematicConfiguartionById(this.selectedSchematic.schematicId).subscribe(function (res) {
            self.allSchematicConfiguration = res.sort(function (a, b) {
                return a.StepNumber - b.StepNumber;
            });
            var reverseList = res.sort(function (a, b) {
                return b.StepNumber - a.StepNumber;
            });
            if (reverseList.length > 0) {
                self.lastStepNumber = reverseList[0].StepNumber;
            }
            self.buildSchematicSteps();
        }, function (error) {
            console.log("Error getting schematic configuration:", error);
            self.alert.error("API error : processApi.getSchematicConfiguartionById:" + error._body);
        }, function () {
        });
    };
    SchematicDesigner.prototype.jsonCanceled = function (event, asset) {
        if (event)
            asset.isVisible = false;
    };
    SchematicDesigner.prototype.getTemplateByAsset = function (asset) {
        var configValueTypeId = asset.ConfigValueTypeId;
        if (configValueTypeId) {
            var obj = this.allConfigValueTypes.find(function (x) {
                if (x.ConfigValueTypeId === configValueTypeId)
                    return x;
            });
            if (obj) {
                return obj.Template;
            }
        }
    };
    SchematicDesigner.prototype.onSchematicSelected = function (schematic) {
        this.SchematicSelected(schematic.id);
    };
    /// this method provide seeds input for typeahead component and it will be passed via autocompleteInput object
    SchematicDesigner.prototype.searchSchematics = function () {
        var _this = this;
        return function (filter) {
            return new Promise(function (resolve, reject) {
                var subscription = _this.processApi.getallSchematics().subscribe(function (res) {
                    _this.allSchematics = res;
                    var outputList = new Array();
                    _this.allSchematics.forEach(function (x) {
                        if (x.LookupKey.toUpperCase().indexOf(filter.toUpperCase()) > -1 || x.SchematicId == filter || filter.trim() === '')
                            outputList.push({
                                'id': x.SchematicId,
                                'text': x.LookupKey,
                            });
                    });
                    resolve(outputList);
                    subscription.unsubscribe();
                }, function (err) { return console.log("Error in search schematics", err); });
            });
        };
    };
    SchematicDesigner.prototype.cloneSchematic = function (schematic) {
        var self = this;
        var schematicId = schematic.schematicId;
        var obj = { 'SchematicId': schematicId };
        self.processApi.cloneSchematicbyId(obj).subscribe(function (res) {
            self.cloneID = res;
            self.isClone = true;
            self.setPageType(false);
            self.alert.addAlert("The schematic has been cloned under id: " + res);
        }, function (error) {
            self.alert.error(" Error trying to clone the schematic # " + schematicId + " - " + error.status);
        }, function () {
        });
    };
    SchematicDesigner.prototype.generateSqlScript = function (schematic) {
        var self = this;
        self.addStepVisibility = false;
        var schematicId = schematic.schematicId;
        self.schematicState = "genSQLScript";
        self.processApi.genSQLScriptBySchematicId(schematicId).subscribe(function (res) {
            self.sqlScript = res;
            self.alert.addAlert("The script has been generated !");
        }, function (error) {
            self.alert.error(" Error trying to generate SQL script for schematic # " + schematicId + " - " + error.status);
        }, function () {
        });
    };
    SchematicDesigner.prototype.closeSQLScriptArea = function () {
        var self = this;
        self.schematicState = "none";
        self.sqlScript = '';
    };
    SchematicDesigner.prototype.showCloneStep = function (step) {
        if (step.state === 'doClone') {
            step.state = 'none';
            return;
        }
        step.state = 'doClone';
        step.isCollapsed = false;
    };
    SchematicDesigner.prototype.doStepClone = function (step, cloneToSchematicID) {
        var self = this;
        if (!cloneToSchematicID) {
            self.alert.error("You need schematic id in order to clone a step!");
            return;
        }
        var stepId = step.SchematicStepId;
        /// bellow object is expected by end point
        var obj = { 'SchematicId': cloneToSchematicID, 'StepId': stepId };
        self.processApi.cloneStepToSchematic(obj).subscribe(function (res) {
            if (res) {
                self.alert.addAlert("The step has been cloned!");
                step.state = 'none';
                self.setPageType(false);
            }
            else {
                self.alert.error(" Error trying to clone step # " + stepId + " - " + ' schematic #' + cloneToSchematicID + ' is not found!');
            }
        }, function (error) {
            self.alert.error(" Error trying to clone step # " + stepId + " - " + error.status);
        }, function () {
        });
    };
    SchematicDesigner.prototype.refreshPage = function () {
        this.setPageType(false);
    };
    SchematicDesigner = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/Datahub/routes/admin/schematic/designer/schematicDesigner.html"),
            styles: [__webpack_require__("./src/app/Datahub/routes/admin/schematic/designer/schematicDesigner.scss")],
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof schematicService_1.SchematicApiService !== 'undefined' && schematicService_1.SchematicApiService) === 'function' && _a) || Object, (typeof (_b = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _b) || Object, (typeof (_c = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _c) || Object, (typeof (_d = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _d) || Object, (typeof (_e = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _e) || Object])
    ], SchematicDesigner);
    return SchematicDesigner;
    var _a, _b, _c, _d, _e;
}(schematicDesignerUtils_1.BaseSchematicDesigner));
exports.SchematicDesigner = SchematicDesigner;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/designer/schematicDesignerRouting.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var schematicDesigner_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/designer/schematicDesigner.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.SchematicDesignerRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Schematic/SchematicDesigner', component: schematicDesigner_1.SchematicDesigner, canActivate: [AuthGuard_1.AuthGuard] },
    { path: 'Datahub/Admin/Schematic/SchematicDesigner/:id', component: schematicDesigner_1.SchematicDesigner, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/designer/schematicDesignerUtils.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 file contains the objects and util functions used
in schematicDesigner.ts
*/
var BaseSchematicDesigner = (function () {
    function BaseSchematicDesigner() {
        this.IsAddpage = false;
        this.allSteps = new Array();
        this.sequence = 1;
        this.allSchematicConfigurationVM = new Array();
        this.addConfigVisibility = false;
        this.apiIsLoaded = false;
        this.unitFrozen = false;
        this.showAdd = false;
        this.addSchematicVisibility = false;
        this.deleteStepVisibility = false;
        this.addStepVisibility = false;
        this.newStepDescription = '';
        this.isNewSchematic = false;
        this.newSchematicDescription = '';
        this.updatedStep = undefined;
        this.isClone = false;
        this.schematicState = "neutral";
    }
    return BaseSchematicDesigner;
}());
exports.BaseSchematicDesigner = BaseSchematicDesigner;
var Schematic = (function () {
    function Schematic(schematicId, description, Status, isActive) {
        if (isActive === void 0) { isActive = true; }
        this.schematicId = schematicId;
        this.description = description;
        this.Status = Status;
        this.isActive = isActive;
        this.Steps = [];
    }
    return Schematic;
}());
exports.Schematic = Schematic;
var Step = (function () {
    function Step(SchematicStepId, StepNumber, StepDescription, SchematicId, UnitName) {
        this.SchematicStepId = SchematicStepId;
        this.StepNumber = StepNumber;
        this.StepDescription = StepDescription;
        this.SchematicId = SchematicId;
        this.UnitName = UnitName;
        this.isVisible = false;
        this.StepAssets = [];
        this.StepActive = true;
        this.StepAddingConfiguration = false;
        this.isAddingJSON = false;
        this.isArrayLike = false;
        this.selectedConfigValue = '';
        this.isComplete = true;
        this.state = 'none';
        this.isCollapsed = true;
    }
    ;
    return Step;
}());
exports.Step = Step;
var ConfigValueType = (function () {
    function ConfigValueType(id, unitId, description, template, isMandatory) {
        if (isMandatory === void 0) { isMandatory = false; }
        this.id = id;
        this.unitId = unitId;
        this.description = description;
        this.template = template;
        this.isMandatory = isMandatory;
    }
    return ConfigValueType;
}());
exports.ConfigValueType = ConfigValueType;
function sortByDesc(a, b) {
    var descA = a.description.toUpperCase();
    var descB = b.description.toUpperCase();
    if (descA < descB) {
        return -1;
    }
    if (descA > descB) {
        return 1;
    }
    return 0;
}
exports.sortByDesc = sortByDesc;
function jsonToDoc(template, step) {
    if (template.length == 0) {
        return '';
    }
    var result = '{';
    try {
        var jsonObject = JSON.parse(template);
        Object.keys(jsonObject).forEach(function (x) {
            if (!(/^\#.*\#$/.test(x)))
                result += '"' + x + '"' + ' : "" ,';
        });
    }
    catch (error) {
        console.log('Error converting template to object in schematic designer: ' + error.message);
        step.isAddingJSON = false;
        return '';
    }
    result = result.slice(0, -1);
    result += '}';
    return result;
}
exports.jsonToDoc = jsonToDoc;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/editViaTable/tableEdit.html":
/***/ (function(module, exports) {

module.exports = "<div *ngIf=\"isOpen\" class=\"card\">\r\n    <div class=\"card-header\">\r\n        <ul>\r\n            <li style=\"display: inline-block\">\r\n                <span class=\"node\">{{documentTitle}}</span>\r\n                <template [ngIf]=\"availableSections.length > 0\">\r\n                    <button style=\"height:25px\" (click)=\"addNewSection(newOption.value)\">Add New Section</button>\r\n                    <select #newOption style=\"width: 150px;height:23px\">\r\n                        <option>Choose a section</option>\r\n                        <option *ngFor=\"let itemOption of availableSections\" value=\"{{itemOption}}\">{{itemOption}}</option>\r\n                    </select>\r\n                </template>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"listArea\">\r\n        <template ngFor let-section [ngForOf]=\"mainArray\">\r\n            <div class=\"col-md-11\">\r\n                <span (click)=\"toggle(section)\" class=\"node\">{{section.sectionName}}</span>\r\n                <img src=\"/app/Datahub/img/collapse_expand.png\" (click)=\"toggle(section)\" class=\"expandCollapseBtn\">\r\n            </div>\r\n            <div class=\"col-md-1\">\r\n                <button (click)=\"removeSection(section)\" class=\"button-standard \" style=\"float: right\"><span class=\"fa fa-trash fa-lg\"></span></button>\r\n            </div>\r\n            <table id=\"tblList\" *ngIf=\"section.expanded\">\r\n                <tr style=\"border: 1px solid black; background-color: #f4f5f3; height: 30px\">\r\n                    <th class=\"text-xs-center\" style=\"border: 1px solid black;\" *ngFor=\"let item of headerList\">\r\n                        <span><strong>{{item}}</strong></span>\r\n                    </th>\r\n                    <th>\r\n                        <span><strong>Ops available</strong></span>\r\n                    </th>\r\n                </tr>\r\n                <tr *ngFor=\"let rowArray of section\" style=\"nth-child(2n) {background-color: #00AA00}; border: 1px solid black; height: 35px;\">\r\n                    <td *ngFor=\"let item of rowArray\" style=\"width:50px; padding: 5px; border: 1px solid black\" class=\"text-xs-center\">\r\n                        <input style=\"height:23px;\" *ngIf=\"item.objType == 'textbox' \" #theValue readonly=\"{{item.readOnly}}\"\r\n                               type=\"text\"\r\n                               [ngClass]=\"{neutral: !item.isChanged, changed: item.isChanged}\" [(ngModel)]=\"item.value\"\r\n                               (ngModelChange)=\"itemChanged(item, section)\" (keyup)=\"checkIt($event, item)\">\r\n                        <input *ngIf=\"item.objType =='checkbox'\" #theValue readonly=\"{{item.readOnly}}\" type=\"checkbox\"\r\n                               [(ngModel)]=\"item.value\" (keyup)=\"checkIt($event, item)\" (ngModelChange)=\"itemChanged(item,section)\">\r\n\r\n\r\n                        <select *ngIf=\"item.objType =='dropdown'\" class=\"full-width\" #theValue\r\n                                [ngClass]=\"{neutral: !item.isChanged, changed: item.isChanged}\"\r\n                                [(ngModel)]=\"item.value\" style=\"height:23px;\">\r\n                            <option *ngFor=\"let itemOption of item.listValues\" value=\"{{itemOption}}\">{{itemOption}}\r\n                            </option>\r\n                        </select>\r\n                    </td>\r\n                    <td class=\"text-xs-center\" style=\"width: 550px;\">\r\n                        <div class=\"expandable\">\r\n                            <div style=\"display: inline\">\r\n                                <button class=\"button-standard\" (click)=\"removeRowItem(rowArray, section)\"><span class=\"fa fa-trash fa-lg\"></span></button>\r\n                                <button class=\"button-standard\" (click)=\"addNewRow(rowArray, section)\" data-toggle=\"tooltip\" title=\"Insert new row bellow.\"><span class=\"fa fa-plus fa-lg\"></span></button>\r\n                                <button class=\"button-standard\" *ngIf=\"section.indexOf(rowArray) > 0\" (click)=\"moveRow(rowArray, section, 'up')\" data-toggle=\"tooltip\" title=\"Move row up.\" style=\"float: right;height: 20px;\">\r\n                                    <span class=\"fa fa-arrow-up fa-lg\"></span>\r\n                                </button>\r\n                                <button class=\"button-standard \" *ngIf=\"section.indexOf(rowArray) < section.length-1\" (click)=\"moveRow(rowArray, section, 'down')\" data-toggle=\"tooltip\" title=\"Move row down.\" style=\"float: right;height: 20px;\">\r\n                                    <span class=\"fa fa-arrow-down fa-lg\"></span>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </template>\r\n    </div>\r\n    <div class=\"bottomBttns text-xs-left\">\r\n        <button id=\"saveTop\" class=\"button-standard \" (click)=\"doSave()\"><span\r\n                class=\"fa fa-floppy-o fa-lg\"></span> Apply Changes\r\n        </button>\r\n        <button class=\"button-standard \" (click)=\"cancelClicked()\"><span\r\n                class=\"fa fa-ban fa-lg\"></span> Cancel\r\n        </button>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/editViaTable/tableEdit.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var lastItem_component_1 = __webpack_require__("./src/app/ReusableComponents/jsonEdit/lastItem.component.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var appSettings_1 = __webpack_require__("./src/app/Configuration/appSettings.ts");
var TableEditConfig = (function () {
    function TableEditConfig(_alert) {
        var _this = this;
        this._alert = _alert;
        this.out = new core_1.EventEmitter();
        this.cancelChanges = new core_1.EventEmitter();
        this.headerList = [];
        this.isOpen = true;
        this.assignedSections = [];
        this.allSections = [];
        this.availableSections = [];
        this.referenceAsset = undefined;
        ///subscribe for sections sent to be deleted
        this.subscription = _alert.sendSectionForDelete$.subscribe(function (answer) {
            var section = _this.mainArray.find(function (x) {
                x.sectionName == answer;
            });
            _this.mainArray.splice(_this.mainArray.indexOf(section), 1);
            _this.doSave();
        });
    }
    TableEditConfig.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    TableEditConfig.prototype.ngOnInit = function () {
        var self = this;
        try {
            self.documentTitle = JSON.parse(self.PredefinedJsonValues)['#Title#'];
            self.mainArray = JSON.parse(this.inputArray);
            var assets = self.parentStep.StepAssets;
            self.referenceAsset = assets.find(function (x) {
                try {
                    if (JSON.parse(x.Template)['#Type#'].toUpperCase() === 'JSONLIKE' && JSON.parse(x.Template)['#Title#'].toUpperCase() === 'DOCUMENT SETTING') {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                catch (Error) {
                    return false;
                }
            });
            // bellow line change mainArray to have simple objects inside
            self.buildMainArray(this.mainArray);
            self.getAllSections();
            // bellow line is creating section titles and header for sections
            self.createTableView();
        }
        catch (Error) {
            self.isOpen = false;
            this._alert.error(appSettings_1.AppNotificationsMSG.jsonEditPlugin.invalidFormat + Error.message);
            return;
        }
    };
    TableEditConfig.prototype.buildMainArray = function (theInput) {
        var self = this;
        for (var i in theInput) {
            var o = theInput[i];
            if (o instanceof Array) {
                self.buildMainArray(o);
            }
            else {
                theInput[i] = self.buildArrayOfSimpleObjects(o);
                theInput[i].hasSimpleObjects = true;
            }
        }
    };
    TableEditConfig.prototype.buildArrayOfSimpleObjects = function (theObject) {
        var arrToAdd = [];
        for (var key2 in theObject) {
            if (typeof theObject[key2] != 'function') {
                arrToAdd.push(new lastItem_component_1.simpleObject(key2, theObject[key2]));
            }
        }
        return arrToAdd;
    };
    TableEditConfig.prototype.createTableView = function () {
        var self = this;
        //resolve sections name
        self.mainArray.forEach(function (x) {
            var simplObj = x[0][0];
            Object.defineProperty(x, 'sectionName', {
                value: simplObj.label + ' - ' + simplObj.value,
                enumerable: false
            });
            Object.defineProperty(x, 'DocumentFormat', {
                value: self.sectionDocFormat(x),
                enumerable: false
            });
            Object.defineProperty(x, 'expanded', { value: false, enumerable: false, writable: true });
            self.assignedSections.push(x.sectionName);
            // resolve input types for each section
            x.forEach(function (rowArray) {
                self.resolveInputTypes(rowArray);
            });
        });
        self.availableSections = self.allSections.filter(function (x) { return self.assignedSections.indexOf(x) == -1; });
        try {
            var headerArray_1 = [];
            self.mainArray[0][0].forEach(function (x) {
                headerArray_1.push(x.label);
            });
            this.headerList = headerArray_1;
        }
        catch (Error) {
            self._alert.error("Error when create header list array : " + Error.message);
            return;
        }
    };
    TableEditConfig.prototype.doSave = function () {
        try {
            //let arrayForSave = JSON.parse(JSON.stringify(this.mainArray));
            var arrayForSave = this.mainArray.slice();
            this.buildToSaveArray(arrayForSave);
            var stringOut = this.arrayToString(arrayForSave);
            this.out.emit({ 'value': stringOut });
            this._alert.addAlert(appSettings_1.AppNotificationsMSG.jsonEditPlugin.jsonUpdate);
            this.isOpen = false;
        }
        catch (Error) {
            this._alert.error("Edited JSON : " + appSettings_1.AppNotificationsMSG.jsonEditPlugin.invalidFormat + Error.message);
            return;
        }
    };
    TableEditConfig.prototype.arrayToString = function (inputArray) {
        var result = ",";
        for (var i = 0, j = inputArray.length; i < j; i++) {
            if (inputArray[i] instanceof Array) {
                result += this.arrayToString(inputArray[i]) + ',';
            }
            else {
                result += inputArray[i] + ',';
            }
        }
        result = "[" + result.slice(1, result.length - 1) + "]";
        return result;
    };
    TableEditConfig.prototype.buildJsonFromArray = function (theArray) {
        var result = '';
        theArray.map(function (x) {
            var theValue = JSON.stringify(x.value);
            if (x.objType == 'checkbox') {
                theValue = x.value ? JSON.stringify("1") : JSON.stringify("0");
            }
            result += ',"' + x.label + '":' + theValue;
        });
        // return JSON.parse( '{' + result.slice(1) + '}');
        return '{' + result.slice(1) + '}';
    };
    ;
    TableEditConfig.prototype.buildToSaveArray = function (theInput) {
        for (var i in theInput) {
            var o = theInput[i];
            if (o instanceof Array) {
                if (o[0] instanceof lastItem_component_1.simpleObject) {
                    theInput[i] = this.buildJsonFromArray(o);
                }
                else {
                    this.buildToSaveArray(o);
                }
            }
        }
    };
    TableEditConfig.prototype.toggle = function (section) {
        section.expanded = !section.expanded;
    };
    TableEditConfig.prototype.removeSection = function (section) {
        var self = this;
        self._alert.addAlertAndRequestAnswer("Do you want to delete the section ?", null, 'Delete:');
        var subscription = self._alert.requestConfirmationAnswer$.subscribe(function (item) {
            self._alert.askConfirmation = false;
            subscription.unsubscribe();
            if (item != "OK") {
                return;
            }
            self.availableSections.push(section.sectionName);
            self.assignedSections.splice(self.assignedSections.indexOf(section.sectionName, 1));
            self.mainArray.splice(self.mainArray.indexOf(section), 1);
        });
    };
    TableEditConfig.prototype.cancelClicked = function () {
        this.isOpen = false;
        this.cancelChanges.emit(true);
    };
    TableEditConfig.prototype.itemChanged = function (item, section) {
        if (item.oldValue !== item.value) {
            item.isChanged = true;
            if (item.label.toUpperCase() === 'LENGTH') {
                this.recalculateStartPosition(section);
            }
        }
        else {
            item.isChanged = false;
        }
    };
    TableEditConfig.prototype.checkIt = function (event, item) {
        if (event.keyCode == 27 && item.oldValue !== item.value) {
            item.value = item.oldValue;
            item.isChanged = false;
        }
    };
    TableEditConfig.prototype.removeRowItem = function (row, section) {
        var self = this;
        self._alert.addAlertAndRequestAnswer("Do you want to delete the row ?", null, 'Delete:');
        var subscription = self._alert.requestConfirmationAnswer$.subscribe(function (item) {
            self._alert.askConfirmation = false;
            subscription.unsubscribe();
            if (item != "OK") {
                return;
            }
            section.splice(section.indexOf(row), 1);
            if (section.length == 0) {
                self.availableSections.push(section.sectionName);
                self.assignedSections.splice(self.assignedSections.indexOf(section.sectionName, 1));
                self.mainArray.splice(self.mainArray.indexOf(section), 1);
            }
            else {
                self.reindexColumn(section, 'ORDER');
                self.recalculateStartPosition(section);
            }
        });
    };
    TableEditConfig.prototype.moveRow = function (row, section, direction) {
        var self = this;
        self.moveItemInArray(section, row, direction);
        self.reindexColumn(section, 'ORDER');
        self.recalculateStartPosition(section);
    };
    TableEditConfig.prototype.addNewRow = function (row, section) {
        var self = this;
        var docFormat = section.DocumentFormat;
        if (docFormat === 'UNKNOWN') {
            this._alert.error('Unknown DocFormat, you are not able to add new records!!!');
            return;
        }
        var position = section.indexOf(row);
        var elemCopy = row.map(cloneSimpleObj);
        elemCopy.forEach(function (x) {
            x.isChanged = true;
        });
        elemCopy.hasSimpleObjects = true;
        section.splice(position + 1, 0, elemCopy);
        self.reindexColumn(section, 'ORDER');
        self.recalculateStartPosition(section);
        this._alert.addAlert("New row has been inserted!");
    };
    TableEditConfig.prototype.addNewSection = function (sectionName) {
        if (sectionName.indexOf('-') == -1) {
            this._alert.addAlert("Please select a section from the list!");
            return;
        }
        var self = this;
        var sectionNbr = parseInt(sectionName.slice(sectionName.indexOf('-') + 1));
        var newSection = [];
        // let  elemCopy = JSON.parse(JSON.stringify(row));
        var elemCopy = self.mainArray[0][0].map(cloneSimpleObj);
        elemCopy.forEach(function (x) {
            x.isChanged = false;
            if (x.label.toUpperCase() === 'DOCPART') {
                x.value = sectionNbr;
            }
            else {
                x.value = '';
            }
        });
        elemCopy.hasSimpleObjects = true;
        newSection.push(elemCopy);
        Object.defineProperty(newSection, 'sectionName', {
            value: sectionName,
            enumerable: false
        });
        self.mainArray.push(newSection);
        self.availableSections.splice(self.availableSections.indexOf(sectionName), 1);
        this._alert.addAlert("New section has been created!");
    };
    TableEditConfig.prototype.reindexColumn = function (section, column) {
        section.forEach(function (lineArray) {
            var index = section.indexOf(lineArray);
            var orderObj = lineArray.find(function (x) {
                return x.label.toUpperCase() === column.toUpperCase();
            });
            if (orderObj) {
                orderObj.value = index;
            }
        });
    };
    TableEditConfig.prototype.recalculateStartPosition = function (section) {
        if (section.DocumentFormat.toUpperCase() != 'FIXEDLENGTH') {
            return;
        }
        var valForNext = 0;
        for (var i = 0, j = section.length; i < j; i++) {
            var lineArray = section[i];
            var lengthObj = lineArray.find(function (x) {
                return x.label.toUpperCase() === 'LENGTH';
            });
            var startPositionObj = lineArray.find(function (x) {
                return x.label.toUpperCase() === 'STARTPOSITION';
            });
            if (lengthObj && startPositionObj) {
                startPositionObj.value = valForNext;
                valForNext = parseInt(lengthObj.value) + parseInt(startPositionObj.value);
            }
        }
    };
    TableEditConfig.prototype.sectionDocFormat = function (section) {
        var self = this;
        if (self.referenceAsset) {
            var settingSections = JSON.parse(self.referenceAsset.ConfigurationValue);
            var settingsForSection = settingSections.find(function (x) {
                for (var key in x) {
                    var o = x[key];
                    if (key + ' - ' + o === section.sectionName) {
                        return true;
                    }
                }
                return false;
            });
            if (settingsForSection) {
                return settingsForSection['DocFormat'];
            }
        }
        return "UNKNOWN";
    };
    TableEditConfig.prototype.getAllSections = function () {
        var self = this;
        self.allSections = [];
        if (self.referenceAsset) {
            var settingSections = JSON.parse(self.referenceAsset.ConfigurationValue);
            settingSections.forEach(function (x) {
                for (var key in x) {
                    var o = x[key];
                    if (key.toUpperCase() === 'DOCPART') {
                        self.allSections.push(key + ' - ' + o);
                    }
                }
            });
        }
    };
    TableEditConfig.prototype.moveItemInArray = function (arr, item, direction) {
        var position = arr.indexOf(item);
        if (direction === 'up' && arr[position - 1]) {
            arr[position - 1] = [arr[position], arr[position] = arr[position - 1]][0];
        }
        if (direction === 'down' && arr[position + 1]) {
            arr[position + 1] = [arr[position], arr[position] = arr[position + 1]][0];
        }
    };
    TableEditConfig.prototype.resolveInputTypes = function (Items) {
        var preDefinedJsonKeys = [];
        try {
            var predefValues_1 = JSON.parse(this.PredefinedJsonValues);
            if (Object.keys(predefValues_1).length === 0 && predefValues_1.constructor === Object)
                return;
            for (var key in predefValues_1) {
                preDefinedJsonKeys.push(key);
            }
            Items.forEach(function (x) {
                if (predefValues_1.hasOwnProperty(x.label)) {
                    var availableOptions = predefValues_1[x.label];
                    if (availableOptions.hasOwnProperty('values')) {
                        x.objType = "dropdown";
                        x.listValues = availableOptions.values;
                    }
                    if (availableOptions.hasOwnProperty('type') && availableOptions.type == 'boolean') {
                        x.objType = "checkbox";
                        if (x.value == '0') {
                            x.value = false;
                        }
                    }
                    if (availableOptions.hasOwnProperty('readOnly')) {
                        if (availableOptions.readOnly)
                            x.readOnly = true;
                    }
                }
            });
        }
        catch (Error) {
            this._alert.error("JSON template error when in table edit" + Error.message);
            return;
        }
    };
    __decorate([
        core_1.Input('parentStep'), 
        __metadata('design:type', Object)
    ], TableEditConfig.prototype, "parentStep", void 0);
    __decorate([
        core_1.Input('inputArray'), 
        __metadata('design:type', Object)
    ], TableEditConfig.prototype, "inputArray", void 0);
    __decorate([
        core_1.Input('PredefinedJsonValues'), 
        __metadata('design:type', Object)
    ], TableEditConfig.prototype, "PredefinedJsonValues", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], TableEditConfig.prototype, "out", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], TableEditConfig.prototype, "cancelChanges", void 0);
    TableEditConfig = __decorate([
        core_1.Component({
            selector: "table-edit-config",
            template: __webpack_require__("./src/app/Datahub/routes/admin/schematic/editViaTable/tableEdit.html"),
            styles: [__webpack_require__("./src/app/ReusableComponents/jsonEdit/jsonEdit.scss")]
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _a) || Object])
    ], TableEditConfig);
    return TableEditConfig;
    var _a;
}());
exports.TableEditConfig = TableEditConfig;
function cloneSimpleObj(x) {
    var theClone;
    theClone = new lastItem_component_1.simpleObject(x.label, x.value);
    theClone.oldValue = x.value;
    theClone.isChanged = true;
    theClone.objType = x.objType;
    theClone.listValues = x.listValues;
    return theClone;
}


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/pipeLine/Schematics.pipe.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var SchematicFilter = (function () {
    function SchematicFilter() {
    }
    SchematicFilter.prototype.transform = function (schematics, filterValue) {
        if (filterValue) {
            return schematics.filter(function (x) {
                return x.id == filterValue || x.description.toUpperCase().indexOf(filterValue.toUpperCase()) > -1;
            });
        }
        else {
            return schematics;
        }
    };
    SchematicFilter = __decorate([
        core_1.Pipe({ name: 'schematicsByIdOrDesc' }), 
        __metadata('design:paramtypes', [])
    ], SchematicFilter);
    return SchematicFilter;
}());
exports.SchematicFilter = SchematicFilter;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/pipeLine/pipeLine.scss":
/***/ (function(module, exports) {

module.exports = ".processList {\n  width: 100%;\n  height: 300px;\n  border: 2px solid #73AD21;\n  overflow-y: auto;\n  background: white; }\n\n.itemList:hover {\n  background-color: greenyellow;\n  cursor: hand; }\n\ninput:required {\n  border-color: red !important; }\n\ninput:required + label {\n  color: red; }\n"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/pipeLine/pipeLineDesigner.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var pipelineDesignerRouting_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/pipeLine/pipelineDesignerRouting.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var pipeLineDesigner_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/pipeLine/pipeLineDesigner.ts");
var Schematics_pipe_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/pipeLine/Schematics.pipe.ts");
var PipelineDesignerModule = (function () {
    function PipelineDesignerModule() {
    }
    PipelineDesignerModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, forms_1.FormsModule, SharedModule_1.SharedModule, pipelineDesignerRouting_1.PipelineDesignerRouting],
            declarations: [pipeLineDesigner_1.PipeLineDesigner, Schematics_pipe_1.SchematicFilter],
        }), 
        __metadata('design:paramtypes', [])
    ], PipelineDesignerModule);
    return PipelineDesignerModule;
}());
exports.PipelineDesignerModule = PipelineDesignerModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/pipeLine/pipeLineDesigner.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"card-block\">\r\n    <div class=\"form-group row\">\r\n        <div class=\"col-md-12 col-lg-6\">\r\n            <label>Search for pipeline: </label>\r\n            <typeahead-input [search]=\"autocompleteInput.searchPipelines\" (onSelected)=\"onPipeLineSelected($event)\"></typeahead-input>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group row\">\r\n        <div class=\"col-md-12\">\r\n            <button (click)=\"newPipeline()\" class=\"button-standard \">\r\n                <span class=\"fa fa-plus fa-lg\"></span> New Pipeline\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n<template [ngIf]=\"hasPipeline\">\r\n    <div class=\"card-block\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12 col-lg-9\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-header\">\r\n                        <div class=\"card-title\">\r\n                            <h3>PipelineId: {{currentPipeLine.pipelineId}}</h3>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"card-block\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"plDescription\"><strong>Description:</strong></label>\r\n                            <input type=\"text\" id=\"plDescription\" class=\"form-control\" [(ngModel)]=\"currentPipeLine.description\" placeholder=\"Enter your description here\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"chkboxPLActive\"><strong>Is Active</strong></label>\r\n                            <input type=\"checkbox\" id=\"chkboxPLActive\" class=\"form-control\" [(ngModel)]=\"currentPipeLine.isActive\">\r\n                        </div>\r\n                        <table class=\"full-width table table-bordered table-hover table-striped\">\r\n                            <tr>\r\n                                <!--\r\n                                <th>Id</th>\r\n                                <th>PipelineId</th>\r\n                                -->\r\n                                <th>Schematic Id</th>\r\n                                <th>Schematic Description</th>\r\n                                <th>Sequence Nbr</th>\r\n                                <th>Stop on failure</th>\r\n                                <th>Active</th>\r\n                                <th></th>\r\n                            </tr>\r\n                            <tr *ngFor=\"let pipeLineSchematic of  currentPipeLine.pipeLineSchematics\">\r\n                                <!--  <td class=\"bordered\">{{pipeLineSchematic.id}}</td>\r\n                                  <td class=\"bordered\">{{pipeLineSchematic.pipeLineId}}</td>\r\n                                  -->\r\n                                <td>{{pipeLineSchematic.schematicId}}</td>\r\n                                <td><a (click)=\"navigateToSchematic(pipeLineSchematic.schematicId)\">{{pipeLineSchematic.description}}</a></td>\r\n                                <td><input class=\"form-control-sm full-width\" type=\"text\" [(ngModel)]=\"pipeLineSchematic.sequenceNumber\" disabled></td>\r\n                                <td><input type=\"checkbox\" id=\"chkStopOnFailure\" [(ngModel)]=\"pipeLineSchematic.stopPipelineOnFailure\"></td>\r\n                                <td><input type=\"checkbox\" id=\"chkisActive\" [(ngModel)]=\"pipeLineSchematic.isActive\"></td>\r\n                                <td>\r\n                                    <button class=\"button-standard\" (click)=\"removePipeLineSchematic(pipeLineSchematic, currentPipeLine)\">\r\n                                        <span class=\"fa fa-trash fa-lg\"></span>\r\n                                    </button>\r\n                                    <button class=\"button-standard\" *ngIf=\"currentPipeLine.pipeLineSchematics.indexOf(pipeLineSchematic) > 0\" (click)=\"moveRow(pipeLineSchematic, currentPipeLine.pipeLineSchematics, 'up')\" data-toggle=\"tooltip\" title=\"Move row up.\">\r\n                                        <span class=\"fa fa-arrow-up fa-lg\"></span>\r\n                                    </button>\r\n                                    <button class=\"button-standard\" *ngIf=\"currentPipeLine.pipeLineSchematics.indexOf(pipeLineSchematic) < currentPipeLine.pipeLineSchematics.length-1\" (click)=\"moveRow(pipeLineSchematic, currentPipeLine.pipeLineSchematics, 'down')\" data-toggle=\"tooltip\"\r\n                                            title=\"Move row down.\">\r\n                                        <span class=\"fa fa-arrow-down fa-lg\"></span>\r\n                                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </div>\r\n                    <div class=\"card-block\">\r\n                        <div class=\"col-md-12 text-md-center\">\r\n                            <button (click)=\"doSave(currentPipeLine)\" class=\"button-standard \">\r\n                                <span class=\"fa fa-floppy-o fa-lg\"></span> Save\r\n                            </button>\r\n                            <button (click)=\"cancel()\" class=\"button-standard \">\r\n                                <span class=\"fa fa-ban fa-lg\"></span> Cancel\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-sm-12 col-lg-3\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-block\">\r\n                        <div class=\"form-group\">\r\n                            <label><strong>List of schematics:</strong></label>\r\n                            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"schematicFilter\" placeholder=\"..enter the value to filter by.\" (change)=\"0\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <div class=\"processList\">\r\n                                <div *ngFor=\"let schematic of allSchematicsForUI | schematicsByIdOrDesc:schematicFilter\">\r\n                                    <span class=\"itemList\" (dblclick)=\"insertSchematicIntoPipeLine(schematic)\">{{schematic.id}} - {{schematic.description}}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/pipeLine/pipeLineDesigner.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var schematicService_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematicService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var pipeLineUtils_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/pipeLine/pipeLineUtils.ts");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var PipeLineDesigner = (function () {
    function PipeLineDesigner(processService, alert, router) {
        this.processService = processService;
        this.alert = alert;
        this.router = router;
        this.status = 'editing';
        this.allSchematics = [];
        this.allSchematicsForUI = [];
        this.hasPipeline = false;
        this.autocompleteInput = new Object();
        this.autocompleteInput.searchPipelines = this.searchPipeLines();
    }
    PipeLineDesigner.prototype.ngOnInit = function () {
        var self = this;
        self.hasPipeline = false;
        this.getAllSchematics();
    };
    PipeLineDesigner.prototype.navigateToSchematic = function (id) {
        this.router.navigate(['Datahub/Admin/Schematic/SchematicDesigner', { 'id': id }]);
    };
    PipeLineDesigner.prototype.insertSchematicIntoPipeLine = function (schematic) {
        var self = this;
        var pipeLineSchematic = new pipeLineUtils_1.PipelineSchematic(self.currentPipeLine.pipelineId, schematic.id);
        pipeLineSchematic.description = schematic.description;
        pipeLineSchematic.stopPipelineOnFailure = true;
        pipeLineSchematic.sequenceNumber = (self.currentPipeLine.pipeLineSchematics.length + 1).toString();
        self.currentPipeLine.pipeLineSchematics.push(pipeLineSchematic);
    };
    PipeLineDesigner.prototype.getAllSchematics = function () {
        var self = this;
        var subscription = self.processService.getallSchematics().subscribe(function (res) {
            res.forEach(function (x) {
                var schematicForList = new pipeLineUtils_1.Schematic(x.SchematicId, x.LookupKey);
                self.allSchematics.push(schematicForList);
            });
            self.allSchematics.sort(pipeLineUtils_1.sortById);
            self.allSchematicsForUI = self.allSchematics.slice();
            subscription.unsubscribe();
        }, function (err) { return console.log("Error in search schematics", err); });
    };
    PipeLineDesigner.prototype.doSave = function (pipeline) {
        var self = this;
        var allRequired = true;
        if (pipeline.description.length == 0) {
            self.alert.error('You must enter pipeline description in order to save it!');
            allRequired = false;
        }
        if (pipeline.pipeLineSchematics.length == 0) {
            self.alert.error('Pipeline must have at least one shematic!');
            allRequired = false;
        }
        if (!allRequired) {
            return;
        }
        var pipelineForAPI = {
            'IsActive': pipeline.isActive ? 1 : 0,
            'LookupKey': pipeline.description,
            'PipelineId': pipeline.pipelineId, 'VersionStamp': pipeline.VersionStamp
        };
        if (pipeline.isNew) {
            // insert
            self.processService.createPipeline(pipelineForAPI).flatMap(function (data) {
                return self.processService.getPipelineByDescription(pipeline.description);
            }).subscribe(function (res) {
                pipeline.pipeLineSchematics.forEach(function (x) {
                    x.pipeLineId = res.PipelineId;
                });
                pipeline.pipelineId = res.PipelineId;
                pipeline.VersionStamp = res.VersionStamp;
                self.savePipeLineSchematicsByPipeline(pipeline);
            }, function (error) {
                self.alert.error('Error when saving NEW pipeline #:' + pipeline.description + ' -  ' + error.status);
            });
        }
        else {
            self.processService.updatePipeline(pipelineForAPI, "PipelineId").subscribe(function (res) {
                // save the childrens (schematics)
                self.savePipeLineSchematicsByPipeline(pipeline);
            }, function (error) {
                self.alert.error('Error when saving pipeline #:' + pipeline.pipelineId + ' -  ' + error.status);
            });
        }
    };
    PipeLineDesigner.prototype.savePipeLineSchematicsByPipeline = function (pipeline) {
        var self = this;
        var pipeLineSchematics = pipeline.pipeLineSchematics;
        var schematicsToBeUpdated = [];
        var schematicsToBeInserted = [];
        var schematicsToBeDeleted = [];
        pipeline.pipeLineSchematicsAPI.forEach(function (x) {
            var objFounded = pipeLineSchematics.find(function (y) {
                return y.id === x.Id && y.schematicId == x.SchematicId;
            });
            if (!objFounded) {
                schematicsToBeDeleted.push(x);
            }
        });
        pipeLineSchematics.forEach(function (schematic) {
            // if schematic id than you do update
            if (schematic.id) {
                var schematicObj = pipeline.pipeLineSchematicsAPI.find(function (x) { return x.SchematicId == schematic.schematicId && x.Id == schematic.id; });
                if (schematicObj) {
                    schematicObj.SequenceNumber = schematic.sequenceNumber;
                    schematicObj.StopPipelineOnFailure = schematic.stopPipelineOnFailure ? 1 : 0;
                    schematicObj.IsActive = schematic.isActive ? 1 : 0;
                    schematicsToBeUpdated.push(schematicObj);
                }
            }
            else {
                var newSchematicObj = {
                    IsActive: schematic.isActive ? 1 : 0,
                    PipelineId: schematic.pipeLineId,
                    SchematicId: schematic.schematicId,
                    SequenceNumber: schematic.sequenceNumber,
                    StopPipelineOnFailure: schematic.stopPipelineOnFailure ? 1 : 0
                };
                schematicsToBeInserted.push(newSchematicObj);
            }
        });
        var subscription = Observable_1.Observable.forkJoin(self.processService.updateMultiplePipelineSchematics(schematicsToBeUpdated), self.processService.insertMultiplePipelineSchematics(schematicsToBeInserted), self.processService.deleteMultiplePipelineSchematics(schematicsToBeDeleted)).subscribe(function (res) {
            // do refresh if all went well
            self.onPipeLineSelected({
                id: pipeline.pipelineId,
                text: pipeline.description,
                isActive: pipeline.isActive,
                VersionStamp: pipeline.VersionStamp
            });
            self.alert.addAlert("Pipeline has been been saved!");
            subscription.unsubscribe();
        }, function (error) {
            self.alert.error('Error when saving pipeline #:' + pipeline.pipelineId + ' -  ' + error.status);
            subscription.unsubscribe();
        });
    };
    PipeLineDesigner.prototype.removePipeLineSchematic = function (pipeLineSchematic, currentPipeLine) {
        var self = this;
        currentPipeLine.pipeLineSchematics.splice(currentPipeLine.pipeLineSchematics.indexOf(pipeLineSchematic), 1);
        self.reindexSequenceNbr(currentPipeLine.pipeLineSchematics);
    };
    PipeLineDesigner.prototype.newPipeline = function () {
        var self = this;
        self.currentPipeLine = new pipeLineUtils_1.Pipeline('0', '', false);
        self.currentPipeLine.isNew = true;
        self.currentPipeLine.isActive = true;
        self.hasPipeline = true;
    };
    PipeLineDesigner.prototype.cancel = function () {
        var self = this;
        self.hasPipeline = false;
    };
    PipeLineDesigner.prototype.searchPipeLines = function () {
        var _this = this;
        return function (filter) {
            return new Promise(function (resolve, reject) {
                var subscription = _this.processService.getallPipelines().subscribe(function (res) {
                    _this.allPipelines = res;
                    var outputList = new Array();
                    _this.allPipelines.forEach(function (x) {
                        if (x.LookupKey.toUpperCase().indexOf(filter.toUpperCase()) > -1 || x.PipelineId == filter || filter.trim() === '')
                            outputList.push({
                                'id': x.PipelineId,
                                'text': x.LookupKey,
                                'isActive': x.IsActive,
                                'VersionStamp': x.VersionStamp
                            });
                    });
                    resolve(outputList);
                    subscription.unsubscribe();
                }, function (err) { return console.log("Error in pipline search", err); });
            });
        };
    };
    PipeLineDesigner.prototype.onPipeLineSelected = function (pipeLineObj) {
        var self = this;
        var pipeLineId = pipeLineObj.id;
        self.currentPipeLine = new pipeLineUtils_1.Pipeline(pipeLineObj.id, pipeLineObj.text, pipeLineObj.isActive);
        self.currentPipeLine.VersionStamp = pipeLineObj.VersionStamp;
        self.getSchematicsForPipelineById(pipeLineId);
        self.hasPipeline = true;
    };
    PipeLineDesigner.prototype.getSchematicsForPipelineById = function (pipeLineId) {
        var self = this;
        var subscription = this.processService.getSchematicsForPipelineById(pipeLineId).subscribe(function (res) {
            var pipeLineSchematics = new Array();
            res.forEach(function (x) {
                var pipeLineSchematic = new pipeLineUtils_1.PipelineSchematic(x.PipelineId, x.SchematicId);
                pipeLineSchematic.isActive = x.IsActive;
                pipeLineSchematic.sequenceNumber = x.SequenceNumber;
                pipeLineSchematic.stopPipelineOnFailure = x.StopPipelineOnFailure;
                pipeLineSchematic.id = x.Id;
                // bellow code is getting description of schematic but it is wrong approach, it should come from API.....
                self.allSchematics.find(function (s) {
                    if (s.id == pipeLineSchematic.schematicId) {
                        pipeLineSchematic.description = s.description;
                        return true;
                    }
                    else {
                        return false;
                    }
                });
                pipeLineSchematics.push(pipeLineSchematic);
            });
            self.currentPipeLine.pipeLineSchematics = pipeLineSchematics;
            self.currentPipeLine.pipeLineSchematicsAPI = res;
            subscription.unsubscribe();
        }, function (err) { return console.log("Error getting pipelineschematics for pipelind ID :" + pipeLineId, err); });
    };
    PipeLineDesigner.prototype.moveRow = function (schematic, table, direction) {
        var self = this;
        self.moveItemInArray(table, schematic, direction);
        self.reindexSequenceNbr(table);
    };
    PipeLineDesigner.prototype.moveItemInArray = function (arr, item, direction) {
        var position = arr.indexOf(item);
        if (direction === 'up' && arr[position - 1]) {
            arr[position - 1] = [arr[position], arr[position] = arr[position - 1]][0];
        }
        if (direction === 'down' && arr[position + 1]) {
            arr[position + 1] = [arr[position], arr[position] = arr[position + 1]][0];
        }
    };
    PipeLineDesigner.prototype.reindexSequenceNbr = function (arr) {
        arr.forEach(function (x) { return x.sequenceNumber = (arr.indexOf(x) + 1).toString(); });
    };
    PipeLineDesigner = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/Datahub/routes/admin/schematic/pipeLine/pipeLineDesigner.html"),
            styles: [__webpack_require__("./src/app/Datahub/routes/admin/schematic/pipeLine/pipeLine.scss")]
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof schematicService_1.SchematicApiService !== 'undefined' && schematicService_1.SchematicApiService) === 'function' && _a) || Object, (typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _c) || Object])
    ], PipeLineDesigner);
    return PipeLineDesigner;
    var _a, _b, _c;
}());
exports.PipeLineDesigner = PipeLineDesigner;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/pipeLine/pipeLineUtils.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// bellow are objects ( to be used to separate file
var Pipeline = (function () {
    function Pipeline(pipelineId, description, isActive) {
        if (isActive === void 0) { isActive = true; }
        this.pipelineId = pipelineId;
        this.description = description;
        this.isActive = isActive;
        this.pipeLineSchematics = [];
        this.pipeLineSchematicsAPI = [];
        this.isNew = false;
    }
    return Pipeline;
}());
exports.Pipeline = Pipeline;
var PipelineSchematic = (function () {
    function PipelineSchematic(pipeLineId, schematicId) {
        this.pipeLineId = pipeLineId;
        this.schematicId = schematicId;
        this.stopPipelineOnFailure = false;
        this.isActive = true;
        this.id = undefined;
    }
    return PipelineSchematic;
}());
exports.PipelineSchematic = PipelineSchematic;
// these are objects that come from API and will be assigned to the pipelines
var Schematic = (function () {
    function Schematic(id, description) {
        this.id = id;
        this.description = description;
    }
    return Schematic;
}());
exports.Schematic = Schematic;
function sortById(a, b) {
    return Number(a.id) - Number(b.id);
}
exports.sortById = sortById;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/pipeLine/pipelineDesignerRouting.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var pipeLineDesigner_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/pipeLine/pipeLineDesigner.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.PipelineDesignerRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Schematic/Pipeline', component: pipeLineDesigner_1.PipeLineDesigner, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/schematic.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var schematic_routes_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematic.routes.ts");
var schematic_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematic.ts");
var schematicService_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematicService.ts");
var schematicDesigner_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/designer/schematicDesigner.Module.ts");
var configuration_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/configuration/configuration.Module.ts");
var schematicExecution_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/Execution/schematicExecution.Module.ts");
var pipeLineDesigner_Module_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/pipeLine/pipeLineDesigner.Module.ts");
var SchematicModule = (function () {
    function SchematicModule() {
    }
    SchematicModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, schematic_routes_1.SchematicRouting, configuration_Module_1.ConfigurationModule, schematicDesigner_Module_1.SchematicDesignerModule, schematicExecution_Module_1.SchematicExecutionModule, pipeLineDesigner_Module_1.PipelineDesignerModule
            ],
            declarations: [schematic_1.Schematic],
            providers: [schematicService_1.SchematicApiService]
        }), 
        __metadata('design:paramtypes', [])
    ], SchematicModule);
    return SchematicModule;
}());
exports.SchematicModule = SchematicModule;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/schematic.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var schematic_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematic.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.SchematicRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Admin/Schematic', component: schematic_1.Schematic, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/schematic.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var Schematic = (function () {
    function Schematic(navService) {
        this.navService = navService;
        /* this.navService.getChildMenu(['Admin','Schematic']);
         this.navService.getLeftMenuRoutes(['Schematic']);*/
    }
    Schematic = __decorate([
        core_1.Component({
            selector: 'schematic',
            template: "",
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object])
    ], Schematic);
    return Schematic;
    var _a;
}());
exports.Schematic = Schematic;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/schematicService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var SchematicApiService = (function () {
    function SchematicApiService(httpAbstract) {
        this.httpAbstract = httpAbstract;
        this.prefixurl = '/config';
        this.contentType = 'application/json; charset=utf-8';
        this.configValueTypeBaseUrl = this.prefixurl + '/configvaluetype';
        this.unitbaseurl = this.prefixurl + '/unit';
        this.unittypebaseurl = this.prefixurl + '/unittype';
        this.configvaluebaseurl = this.prefixurl + '/configvalue';
        this.schematicBaseUrl = this.prefixurl + '/schematic';
        this.schematicViewUrl = this.prefixurl + '/schematicconfiguration';
        this.schematicStepurl = this.prefixurl + '/schematicstep';
        this.pipeLineBaseUrl = this.prefixurl + '/pipeline';
        this.pipeLineSchematicBaseUrl = this.prefixurl + '/pipelineschematic';
        this.httpAbs = httpAbstract;
    }
    // pipeline region
    SchematicApiService.prototype.deleteMultiplePipelineSchematics = function (obj) {
        return this.httpAbs.removeBulkRecords(this.pipeLineSchematicBaseUrl + '/multiple', JSON.stringify(obj), '', '', this.contentType);
    };
    SchematicApiService.prototype.getPipelineByDescription = function (descrtiption) {
        return this.httpAbs.fetch(this.pipeLineBaseUrl + '?LookupKey=' + descrtiption);
    };
    SchematicApiService.prototype.insertMultiplePipelineSchematics = function (obj) {
        return this.httpAbs.insertWithHeader(this.pipeLineSchematicBaseUrl + '/multiple', JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.updateMultiplePipelineSchematics = function (obj) {
        return this.httpAbs.updateWithHeader(this.pipeLineSchematicBaseUrl + '/multiple', JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.updatePipeline = function (obj, primaryKeyColumn) {
        var Id = 0;
        Id = this.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.updateWithHeader(this.pipeLineBaseUrl + '/' + Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.createPipeline = function (obj) {
        return this.httpAbs.insertWithHeader(this.pipeLineBaseUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.getallPipelines = function () {
        return this.httpAbs.fetch(this.pipeLineBaseUrl);
    };
    SchematicApiService.prototype.getSchematicsForPipelineById = function (id) {
        return this.httpAbs.fetch(this.pipeLineBaseUrl + '/' + id + '/pipelineschematic');
    };
    /// schematic region
    //Clone Schematic by id
    SchematicApiService.prototype.cloneStepToSchematic = function (obj) {
        return this.httpAbs.insertWithHeader(this.schematicBaseUrl + '/clonestep/', JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.deleteStepByStepId = function (id) {
        return this.httpAbs.remove(this.schematicBaseUrl + '/step/' + id);
    };
    //Clone Schematic by id
    SchematicApiService.prototype.cloneSchematicbyId = function (obj) {
        return this.httpAbs.insertWithHeader(this.schematicBaseUrl + '/clone/', JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.genSQLScriptBySchematicId = function (id) {
        return this.httpAbs.fetch(this.schematicBaseUrl + '/promotion/' + id);
    };
    //Start: ConfigValueType
    SchematicApiService.prototype.getConfigValueTypes = function () {
        return this.httpAbs.fetch(this.configValueTypeBaseUrl);
    };
    SchematicApiService.prototype.getConfigValueTypesById = function (id) {
        return this.httpAbs.fetch(this.configValueTypeBaseUrl + '/' + id);
    };
    SchematicApiService.prototype.getConfigValueTypesByUnitId = function (id) {
        return this.httpAbs.fetch(this.unitbaseurl + '/' + id + '/configValueType');
    };
    SchematicApiService.prototype.createConfigValueType = function (obj) {
        return this.httpAbs.insertWithHeader(this.configValueTypeBaseUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.getallSchematics = function () {
        return this.httpAbs.fetch(this.schematicBaseUrl);
    };
    SchematicApiService.prototype.createSchematic = function (obj) {
        return this.httpAbs.insertWithHeader(this.schematicBaseUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.updateSchematic = function (obj, primaryKeyColumn) {
        var Id = 0;
        Id = this.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.updateWithHeader(this.schematicBaseUrl + '/' + Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.updateConfigValueType = function (obj, primaryKeyColumn) {
        var Id = 0;
        Id = this.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.updateWithHeader(this.configValueTypeBaseUrl + '/' + Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.getIdValue = function (obj, primaryKeyColumn) {
        var Id;
        if (primaryKeyColumn != undefined && primaryKeyColumn != "") {
            for (var i = 0; i < Object.keys(obj).length; i++) {
                if (Object.keys(obj)[i] === primaryKeyColumn || Object.keys(obj)[i] === "Id") {
                    Id = obj[Object.keys(obj)[i]];
                    break;
                }
            }
        }
        return Id;
    };
    SchematicApiService.prototype.deleteConfigValueType = function (obj) {
        return this.httpAbs.remove(this.configValueTypeBaseUrl + '/' + obj.Id);
    };
    //End: ConfigValueType
    //ConfigValue
    SchematicApiService.prototype.updateConfigValues = function (obj, primaryKeyColumn) {
        var Id = 0;
        Id = this.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.updateWithHeader(this.configvaluebaseurl + '/' + Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.createConfigValues = function (obj) {
        return this.httpAbs.insertWithHeader(this.configvaluebaseurl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.deleteConfigValues = function (obj, primaryKeyColumn) {
        var Id = 0;
        Id = this.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.remove(this.configvaluebaseurl + '/' + Id);
    };
    //Config.Unit
    SchematicApiService.prototype.getConfigUnits = function () {
        return this.httpAbs.fetch(this.unitbaseurl);
    };
    SchematicApiService.prototype.getConfigUnitssById = function (id) {
        return this.httpAbs.fetch(this.unitbaseurl + '/' + id);
    };
    SchematicApiService.prototype.getConfigUnitsFiltered = function (filter) {
        return this.httpAbs.fetchWithFilter(this.unitbaseurl + '/paged', filter, this.contentType);
    };
    SchematicApiService.prototype.getConfigUnitsByUnitTypeId = function (id) {
        return this.httpAbs.fetch(this.unittypebaseurl + '/' + id + '/unit');
    };
    SchematicApiService.prototype.createConfigUnits = function (obj) {
        return this.httpAbs.insertWithHeader(this.unitbaseurl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.updateConfigUnits = function (obj, primaryKeyColumn) {
        var Id = 0;
        Id = this.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.updateWithHeader(this.unitbaseurl + '/' + Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.getSchematicConfiguartionById = function (id) {
        return this.httpAbs.fetch(this.schematicViewUrl + "?schematicId=" + id);
    };
    SchematicApiService.prototype.fetchMultipleForSchematics = function () {
        var processTablesArray = new Array();
        processTablesArray.push("/config/schematic");
        processTablesArray.push("/config/unit");
        processTablesArray.push("/config/configvaluetype");
        processTablesArray.push("/config/unitType");
        //processTablesArray.push("/config/SchematicStep");
        return this.httpAbs.fetchMultiple(processTablesArray);
    };
    SchematicApiService.prototype.fetchMultipleForSchematicConfiguration = function (id) {
        var schematicConfigArray = new Array();
        schematicConfigArray.push(this.schematicViewUrl + "?schematicId=" + id);
        schematicConfigArray.push(this.configValueTypeBaseUrl);
        return this.httpAbs.fetchMultiple(schematicConfigArray);
    };
    SchematicApiService.prototype.getSchematicStepsBySchematicId = function (id) {
        var processTablesArray = new Array();
        processTablesArray.push(this.schematicBaseUrl + "/" + id + '/schematicstep');
        processTablesArray.push("/config/getconfigvaluesbyschematicid?SchematicID=" + id);
        return this.httpAbs.fetchMultiple(processTablesArray);
        //return this.httpAbs.fetch(this.schematicBaseUrl +"/" + id + '/schematicstep');
    };
    SchematicApiService.prototype.createSchematicStep = function (obj) {
        return this.httpAbs.insertWithHeader(this.schematicStepurl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.updateSchematicStep = function (obj, primaryKeyColumn) {
        var Id = 0;
        Id = this.getIdValue(obj, primaryKeyColumn);
        return this.httpAbs.updateWithHeader(this.schematicStepurl + '/' + Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    SchematicApiService.prototype.ExecuteUpdate = function (obj, pagename, primaryKeyColumn) {
        switch (pagename.toLowerCase()) {
            case "unit_child":
                return this.updateConfigValueType(obj, primaryKeyColumn);
            // break;
            case "unit":
                return this.updateConfigUnits(obj, primaryKeyColumn);
            case "configvalue":
                return this.updateConfigValues(obj, primaryKeyColumn);
        }
    };
    SchematicApiService.prototype.ExecuteInsert = function (obj, pagename) {
        switch (pagename.toLowerCase()) {
            case "unit_child":
                return this.createConfigValueType(obj);
            case "unit":
                return this.createConfigUnits(obj);
            case "configvalue":
                return this.createConfigValues(obj);
            case "schematic":
                return this.createSchematic(obj);
        }
    };
    SchematicApiService.prototype.ExecuteDelete = function (obj, pagename) {
        switch (pagename.toLowerCase()) {
            case "unit_child":
                return this.deleteConfigValueType(obj);
        }
    };
    SchematicApiService.prototype.ExecutePageRefresh = function (pagename, id) {
        if (id === void 0) { id = null; }
        switch (pagename.toLowerCase()) {
            case "unit_child":
                return this.getConfigValueTypesByUnitId(id);
            case "unit":
                return this.getConfigUnits();
            case "unittype_child":
                return this.getConfigUnitsByUnitTypeId(id);
        }
    };
    SchematicApiService.prototype.ExecutePageFilter = function (pagename, filterObject) {
        switch (pagename.toLowerCase()) {
            case "unit":
                return this.getConfigUnitsFiltered(filterObject);
        }
    };
    SchematicApiService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _a) || Object])
    ], SchematicApiService);
    return SchematicApiService;
    var _a;
}());
exports.SchematicApiService = SchematicApiService;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/schematicpreview/SchematicExecInfo.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var schematicService_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematicService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var executionDialogService_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/Execution/executionDialogService.ts");
var SchematicExecInfo = (function () {
    function SchematicExecInfo(processApi, appSetttingService, alert, channelService) {
        this.processApi = processApi;
        this.appSetttingService = appSetttingService;
        this.alert = alert;
        this.channelService = channelService;
        this.showAllStepConfig = false; //toggle to show all config for each step
        this.showAllStepMessage = true; //toggle to show execution message for each step
        this.toggleListMessage = true;
        this.schematicState = ""; //state of this schematic
        this.userRunTimeValues = new UserRunTimeValues(); //user runtime overwrite values    
        var self = this;
        self.subcriptConfigToggle = self.channelService.configToggle$.subscribe(function (answer) {
            self.stepConfigToggleAll(answer);
        });
        self.messageToggle = self.channelService.messageToggle$.subscribe(function (answer) {
            self.stepResultToggleAll(answer);
        });
    }
    SchematicExecInfo.prototype.ngOnDestroy = function () {
        var self = this;
        self.subcriptConfigToggle.unsubscribe();
        self.messageToggle.unsubscribe();
    };
    SchematicExecInfo.prototype.getSchematicConfiguration = function (schematicID, isExecutePage) {
        var _this = this;
        this.reset();
        this.schematicID = schematicID;
        this.isExecutePage = isExecutePage;
        if (this.schematicID > 0) {
            this.processApi.fetchMultipleForSchematicConfiguration(this.schematicID).subscribe(function (res) {
                _this.buildSchematicConfig(res[0]);
                _this.allConfigValueTypes = res[1];
            }, function (error) {
                _this.alert.error(_this.appSetttingService.appNotificationsMsg.apiMsg.apiGetSchematicDetails + error.status);
            }, function () { });
        }
    };
    // if you have Id that means execution is inside of pipeline
    SchematicExecInfo.prototype.receiveMsg = function (data, Id) {
        var self = this;
        // do a little job and make string JSON ready
        var dataJSonReady = data.replace(/\\/g, "\\\\").replace(/\r?\n|\r/g, "").replace(/\t/g, '');
        try {
            var jsonData = JSON.parse(dataJSonReady);
            var step = self.allStepsVM.find(function (x) { return x.StepNumber.toString() === jsonData.stepId; });
            if (step != null) {
                self.updateStepState(jsonData.stepId, jsonData.logLevel, jsonData.message);
                var msgResult = new Array();
                if (step.ExecutionMessage.length > 0) {
                    msgResult = step.ExecutionMessage;
                }
                // bellow line is coverting ticksfrom C# to Date available for JavaScript
                var mcString = Number(jsonData.timeStamp.slice(0, jsonData.timeStamp.indexOf('.')));
                var epochMicrotimeDiff = 621355824000000000;
                var theDate = new Date((mcString - epochMicrotimeDiff) / 10000);
                msgResult.push({
                    'schematicId': jsonData.schematicId,
                    'stepId': jsonData.stepId,
                    'timestamp': jsonData.timeStamp,
                    'message': jsonData.message,
                    'class': jsonData.logLevel,
                    'date': theDate
                });
                msgResult.sort(sortByTimestamp);
                step.ExecutionMessage = msgResult;
                self.channelService.sendExecutionMessage$.emit(msgResult);
                if (jsonData.message.toUpperCase().indexOf('CONTINUE FALSE') > -1) {
                    self.channelService.sendExecutionMessage$.emit({ 'lastMsg': 'Finished - but incomplete !!!!' });
                }
            }
            else {
                if (jsonData.stepId === "0" && jsonData.message.startsWith("Schematic Completed with state ")) {
                    self.schematicState = jsonData.message;
                    self.channelService.sendExecutionMessage$.emit({ 'lastMsg': 'Schematic Completed with state' + jsonData.messge });
                    return;
                }
                if (jsonData.stepId === "0" && jsonData.message.startsWith("Pipeline") && jsonData.message.indexOf('finished with state') > -1) {
                    self.schematicState = jsonData.message;
                    self.channelService.sendExecutionMessage$.emit({ 'lastMsg': jsonData.messge });
                    return;
                }
                if (jsonData.stepId === "0" && jsonData.message.startsWith("Schematic") && jsonData.message.indexOf('finished with state') > -1 && typeof Id == 'undefined') {
                    self.schematicState = jsonData.message;
                    self.channelService.sendExecutionMessage$.emit({ 'lastMsg': jsonData.messge });
                    return;
                }
                if (jsonData.stepId === "0" && jsonData.message.startsWith('Cannot continue to process Pipeline')) {
                    self.schematicState = jsonData.message;
                    self.channelService.sendExecutionMessage$.emit({ 'lastMsg': 'Pipeline finished!' + jsonData.messge });
                    return;
                }
            }
        }
        catch (Exception) {
            console.log('Error when processing SignalR messages:' + "| message is :" + data);
            //    self.alert.error('Error when processing SignalR messages. It is not in expected format!!' + data);
            return;
        }
    };
    SchematicExecInfo.prototype.getStepState = function (stepNumber) {
        if (this.isExecutePage) {
            return this.allStepsVM.find(function (x) { return x.StepNumber == stepNumber; }).StepStateDisplay;
        }
        else {
            return "";
        }
    };
    SchematicExecInfo.prototype.getUserRunTimeValues = function () {
        var userRunTimeValues = new UserRunTimeValues();
        //populate BusinessDate
        userRunTimeValues.BusinessDate = this.userRunTimeValues.BusinessDate;
        //populate overwritten config values, if any
        this.allStepsVM.forEach(function (x) {
            x.StepAssets.forEach(function (item) {
                if (item.RuntimeConfigurationValue != "") {
                    userRunTimeValues.ConfigValues.push(new ConfigValue(item.ConfigvalueId, item.RuntimeConfigurationValue));
                }
            });
        });
        //populate steps to skip, if any
        this.allStepsVM.forEach(function (x) {
            if (!x.Active)
                userRunTimeValues.StepsToSkip.push(x.StepNumber);
        });
        //populate runtime values, if any
        if (this.userRunTimeValues.RuntimeValues.length > 0)
            userRunTimeValues.RuntimeValues = this.userRunTimeValues.RuntimeValues;
        var jsonString = JSON.stringify(userRunTimeValues);
        console.debug("userRunTimeValues: " + jsonString);
        return jsonString;
    };
    SchematicExecInfo.prototype.addRuntimeValue = function (runtimeMask, runtimeValue) {
        if (runtimeMask.trim() != "" && !this.userRunTimeValues.RuntimeValues.find(function (x) { return x.Key == runtimeMask; }))
            this.userRunTimeValues.RuntimeValues.push(new Runtimevalue(runtimeMask, runtimeValue));
    };
    SchematicExecInfo.prototype.removeRuntimeValue = function (runtimeMask) {
        this.userRunTimeValues.RuntimeValues.forEach(function (item, index, object) {
            if (item.Key == runtimeMask) {
                object.splice(index, 1);
            }
        });
    };
    SchematicExecInfo.prototype.stepConfigToggle = function (stepNumber) {
        var match = this.allStepsVM.find(function (x) { return x.StepNumber === stepNumber; });
        if (match) {
            match.StepConfigVisibility = !match.StepConfigVisibility;
        }
    };
    SchematicExecInfo.prototype.stepMessageToggle = function (stepNumber) {
        var match = this.allStepsVM.find(function (x) { return x.StepNumber === stepNumber; });
        if (match) {
            match.StepMessageVisibility = !match.StepMessageVisibility;
        }
    };
    SchematicExecInfo.prototype.stepConfigToggleAll = function (show) {
        this.allStepsVM.forEach(function (x) {
            x.StepConfigVisibility = show;
        });
    };
    SchematicExecInfo.prototype.stepResultToggleAll = function (show) {
        this.toggleListMessage = !this.toggleListMessage;
        this.allStepsVM.forEach(function (x) {
            x.StepMessageVisibility = show;
        });
    };
    SchematicExecInfo.prototype.resetSteps = function () {
        this.allStepsVM.forEach(function (x) {
            x.Reset();
        });
        this.schematicState = "";
    };
    SchematicExecInfo.prototype.reset = function () {
        this.schematicID = 0;
        this.isExecutePage = false;
        this.lastStepNumber = 0;
        this.showAllStepConfig = false;
        this.showAllStepMessage = true;
        this.toggleListMessage = true;
        this.schematicState = "";
        this.allStepsVM = [];
        this.userRunTimeValues = new UserRunTimeValues();
        this.allSchematicConfiguration = [];
        this.allConfigValueTypes = [];
    };
    SchematicExecInfo.prototype.buildSchematicConfig = function (res) {
        if (res.length > 0) {
            this.allSchematicConfiguration = res.sort(function (a, b) {
                return a.StepNumber - b.StepNumber;
            });
            var reverseList = res.sort(function (a, b) {
                return b.StepNumber - a.StepNumber;
            });
            if (reverseList) {
                this.lastStepNumber = reverseList[0].StepNumber;
            }
            this.buildSchematicSteps();
        }
    };
    SchematicExecInfo.prototype.buildSchematicSteps = function () {
        var sequence = 0;
        var self = this;
        self.allStepsVM = new Array();
        var maxStepNo = 1;
        while (maxStepNo <= this.lastStepNumber) {
            var assets = this.allSchematicConfiguration.filter(function (x) { return x.StepNumber === maxStepNo; });
            var stepConfigs = new Array();
            assets.forEach(function (x) {
                var configValue = x.ConfigurationValue.trim();
                var editByComponent = false;
                var componentType = 'JsonLike';
                try {
                    if (!x.Template || x.Template.length == 0) {
                        editByComponent = false;
                    }
                    else {
                        var type = JSON.parse(x.Template)['#Type#'];
                        if (type) {
                            editByComponent = true;
                            if (type.toUpperCase() == 'ARRAYLIKE') {
                                componentType = type.toUpperCase();
                            }
                            else {
                                componentType = 'JsonLike';
                            }
                        }
                        else {
                            editByComponent = false;
                        }
                    }
                }
                catch (err) {
                    console.log('Invalid JSON template with no type defined!');
                    self.alert.error("Invalid Template : ConfigValueTypeId:" + err.message);
                    editByComponent = false;
                }
                var stepConfig = new StepConfig(x.ConfigValueId, configValue, configValue, x.ConfigValueTypeLookupKey, x.ConfigValueTypeId, x.Template, editByComponent, !editByComponent);
                stepConfig.componentType = componentType;
                stepConfigs.push(stepConfig);
                //TODO: we can use the comment out line when api call is modified
                //stepConfigs.push(new StepConfig(x.ConfigValueId, configValue, "", x.ConfigValueTypeLookupKey, x.ConfigValueTypeId));
            });
            var step = new Step(maxStepNo, assets[0].UnitLookupKey, stepConfigs);
            self.allStepsVM.push(step);
            maxStepNo++;
        }
    };
    SchematicExecInfo.prototype.updateStepState = function (stepNumber, logLevel, msg) {
        var step = this.allStepsVM.find(function (x) { return x.StepNumber.toString() == stepNumber; });
        if (step != null) {
            var state = step.StepState;
            if (state == "") {
                step.StepStateDisplay = "<label><strong>Running</strong></label>";
                step.StepState = "Running";
            }
            if (logLevel == "Error" || msg.endsWith("continue False")) {
                step.StepStateDisplay = "<label class='text-danger'><strong>Error</strong></label>";
                step.StepState = "Error";
            }
            else if (logLevel == "Fatal" || msg.endsWith("continue False")) {
                step.StepStateDisplay = "<label class='text-danger'><strong>Fatal</strong></label>";
                step.StepState = "Fatal";
            }
            else if (logLevel == "Warn" && state != "Error") {
                step.StepStateDisplay = "<label class='text-warning'><strong>Warn</strong></label>";
                step.StepState = "Warn";
            }
            else if (msg.endsWith("continue True") && (state == "" || state == "Running")) {
                step.StepStateDisplay = "<label class='text-success'><strong>Succeeded</strong></label>";
                step.StepState = "Succeeded";
            }
        }
        if (this.allStepsVM.find(function (x) { return x.StepState == "Running"; }))
            this.schematicState = "Running";
    };
    SchematicExecInfo = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof schematicService_1.SchematicApiService !== 'undefined' && schematicService_1.SchematicApiService) === 'function' && _a) || Object, (typeof (_b = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _b) || Object, (typeof (_c = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _c) || Object, (typeof (_d = typeof executionDialogService_1.ExecutionDialogService !== 'undefined' && executionDialogService_1.ExecutionDialogService) === 'function' && _d) || Object])
    ], SchematicExecInfo);
    return SchematicExecInfo;
    var _a, _b, _c, _d;
}());
exports.SchematicExecInfo = SchematicExecInfo;
var UserRunTimeValues = (function () {
    function UserRunTimeValues() {
        this.BusinessDate = new Date(); //.toLocaleDateString();
        this.StepsToSkip = [];
        this.RuntimeValues = [];
        this.ConfigValues = [];
    }
    return UserRunTimeValues;
}());
exports.UserRunTimeValues = UserRunTimeValues;
var ConfigValue = (function () {
    function ConfigValue(ConfigID, ConfigValue) {
        this.ConfigID = ConfigID;
        this.ConfigValue = ConfigValue;
    }
    return ConfigValue;
}());
exports.ConfigValue = ConfigValue;
var Runtimevalue = (function () {
    function Runtimevalue(Key, Value) {
        this.Key = Key;
        this.Value = Value;
    }
    return Runtimevalue;
}());
exports.Runtimevalue = Runtimevalue;
var Step = (function () {
    function Step(StepNumber, UnitName, StepAssets, ExecutionMessage, StepStateDisplay, StepState, StepMessageVisibility, StepConfigVisibility, Active) {
        if (ExecutionMessage === void 0) { ExecutionMessage = []; }
        if (StepStateDisplay === void 0) { StepStateDisplay = ""; }
        if (StepState === void 0) { StepState = ""; }
        if (StepMessageVisibility === void 0) { StepMessageVisibility = true; }
        if (StepConfigVisibility === void 0) { StepConfigVisibility = false; }
        if (Active === void 0) { Active = true; }
        this.StepNumber = StepNumber;
        this.UnitName = UnitName;
        this.StepAssets = StepAssets;
        this.ExecutionMessage = ExecutionMessage;
        this.StepStateDisplay = StepStateDisplay;
        this.StepState = StepState;
        this.StepMessageVisibility = StepMessageVisibility;
        this.StepConfigVisibility = StepConfigVisibility;
        this.Active = Active;
    }
    Step.prototype.Reset = function () {
        this.ExecutionMessage = [];
        this.StepStateDisplay = "";
        this.StepState = "";
    };
    return Step;
}());
exports.Step = Step;
var StepConfig = (function () {
    function StepConfig(ConfigvalueId, ConfigurationValue, RuntimeConfigurationValue, ConfigValueTypeLookupKey, ConfigValueTypeId, Template, editByComponent, isVisible) {
        if (Template === void 0) { Template = ""; }
        if (editByComponent === void 0) { editByComponent = false; }
        if (isVisible === void 0) { isVisible = true; }
        this.ConfigvalueId = ConfigvalueId;
        this.ConfigurationValue = ConfigurationValue;
        this.RuntimeConfigurationValue = RuntimeConfigurationValue;
        this.ConfigValueTypeLookupKey = ConfigValueTypeLookupKey;
        this.ConfigValueTypeId = ConfigValueTypeId;
        this.Template = Template;
        this.editByComponent = editByComponent;
        this.isVisible = isVisible;
        this.componentType = 'JsonLike';
    }
    return StepConfig;
}());
exports.StepConfig = StepConfig;
function sortByTimestamp(n1, n2) {
    if (n1.timestamp > n2.timestamp) {
        return 1;
    }
    if (n1.timestamp < n2.timestamp) {
        return -1;
    }
    return 0;
}
exports.sortByTimestamp = sortByTimestamp;


/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/schematicpreview/schematicpreview.html":
/***/ (function(module, exports) {

module.exports = "<article>\r\n    <br/>\r\n    <!--\r\n        <div class=\"row\">\r\n            <div class=\"col-3\"></div>\r\n            <div class=\"col-18\">\r\n                <div *ngIf=\"isExecutePage\" class=\"tdam-connection-panel\">\r\n                    <table cellpadding=\"10\" cellspacing=\"10\" width=\"100%\">\r\n                        <tr>\r\n                            <td colspan=\"4\"><b> {{connectionStatus}} </b></td>\r\n                        </tr>\r\n                        <tr><td>&nbsp;</td></tr>\r\n                        <tr>\r\n                            <td colspan=\"2\"></td>\r\n                            <td colspan=\"2\" align=\"right\">\r\n                                <input type=\"checkbox\" (click)=\"schematic.stepConfigToggleAll($event.target.checked)\" [(ngModel)]=\"schematic.showAllStepConfig\" />Config\r\n                                <input type=\"checkbox\" (click)=\"schematic.stepResultToggleAll($event.target.checked)\" [(ngModel)]=\"schematic.showAllStepMessage\" />Message\r\n                            </td>\r\n                        </tr>\r\n                  -->\r\n\r\n    <!--\r\n    <tr>\r\n        <td>Requested Date</td>\r\n        <td><input type=\"date\" [(ngModel)]=\"schematic.userRunTimeValues.BusinessDate\" placeholder=\"yyyy-MM-dd\" /></td>\r\n    </tr>\r\n    <tr>\r\n        <td>Runtime Value</td>\r\n        <td><input type=\"text\" placeholder=\"mask\" [(ngModel)]=\"runtimeMask\" /></td>\r\n        <td><input type=\"text\" placeholder=\"value\" [(ngModel)]=\"runtimeValue\" /></td>\r\n        <td><button class=\"tdam-button tdam-button-secondary\" rightAlign (click)=\"schematic.addRuntimeValue(runtimeMask, runtimeValue)\">Add</button></td>\r\n    </tr>\r\n    -->\r\n    <!--\r\n                        <tr *ngFor=\"let runtimevalue of schematic.userRunTimeValues.RuntimeValues\">\r\n                            <td></td>\r\n                            <td>{{runtimevalue.Key}}</td>\r\n                            <td>{{runtimevalue.Value}}</td>\r\n                            <td><label (click)=\"schematic.removeRuntimeValue(runtimevalue.Key)\">X</label></td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-3\"></div>\r\n        </div>\r\n      <spinner [isRunning]=\"isSpinnerRunning\"></spinner>\r\n        -->\r\n\r\n    <!--<article>\r\n        &lt;!&ndash;\r\n        <button id=\"btnTopExec\" (click)=\"executeSchematicClicked()\" class=\"btn tdam-button-secondary\" *ngIf=\"isExecutePage\" [disabled]=\"!executeStatus\">\r\n            <span class=\"fa fa-floppy-o fa-lgd\"></span>\r\n            Execute\r\n        </button>\r\n\r\n        <span class=\"schematicState\"> {{schematic.schematicState}} </span>\r\n            &ndash;&gt;\r\n    </article>-->\r\n    <template ngFor let-step [ngForOf]=\"schematic.allStepsVM\">\r\n        <div class=\"card\">\r\n            <!-- header -->\r\n            <div class=\"card-header\">\r\n                <table width=\"100%\" cellpadding=\"5\" cellspacing=\"5\">\r\n                    <tr>\r\n                        <td width=\"3%\" align=\"center\"><span><input type=\"checkbox\" *ngIf=\"isExecutePage\" [(ngModel)]=\"step.Active\"/></span></td>\r\n                        <td width=\"47%\" align=\"left\"><span> # {{step.StepNumber}}  {{step.UnitName}}</span></td>\r\n                        <td width=\"40%\" align=\"left\">\r\n                            <span *ngIf=\"isExecutePage\"><input type=\"checkbox\" (click)=\"schematic.stepConfigToggle(step.StepNumber)\" [(ngModel)]=\"step.StepConfigVisibility\"/>Config</span>\r\n                            <span *ngIf=\"isExecutePage\"><input type=\"checkbox\" (click)=\"schematic.stepMessageToggle(step.StepNumber)\" [(ngModel)]=\"step.StepMessageVisibility\"/>Message</span>\r\n                        </td>\r\n                        <td width=\"10%\" align=\"left\">\r\n                            <div innerHTML=\"{{schematic.getStepState(step.StepNumber)}}\"></div>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n            <div class=\"card-block\">\r\n                <!-- step config -->\r\n                <div id=\"stepConfig\" *ngIf=\"!isExecutePage || step.StepConfigVisibility\">\r\n                    <ul class=\"list-group\">\r\n                        <li *ngFor=\"let asset of step.StepAssets\" class=\"list-group-item\">\r\n                            <template [ngIf]=\"!asset.editByComponent\">\r\n                                <span class=\"ntooltip\" >\r\n                                    {{getStepConfigName(asset.ConfigValueTypeLookupKey) }}\r\n                                    <span class=\"ntooltiptext\">Use ESC to reverse to initial value!</span>\r\n                                </span>\r\n                            </template>\r\n                            <span *ngIf=\"asset.editByComponent\">\r\n                                        {{getStepConfigName(asset.ConfigValueTypeLookupKey) }}\r\n                                    </span>\r\n                            <span *ngIf=\"asset.editByComponent\">\r\n                                        (JSON element) {{':'}}\r\n                                    </span>\r\n                            <button *ngIf=\"!asset.isVisible\" (click)=\"asset.isVisible=!asset.isVisible\" class=\"button-standard \">\r\n                                <span class=\"fa fa-plus fa-lg\"></span>\r\n                            </button>\r\n                            <button *ngIf=\"asset.isVisible\" (click)=\"asset.isVisible=!asset.isVisible\" class=\"button-standard \">\r\n                                <span class=\"fa fa-minus-circle fa-lg\"></span>\r\n                            </button>\r\n                            <template [ngIf]=\"!asset.editByComponent && asset.isVisible\">\r\n                                <textarea id=\"execution-textarea\" rows=\"1\" cols=\"25\" [(ngModel)]=\"asset.RuntimeConfigurationValue\" [ngClass]=\"{neutral: !asset.isChanged, changed: asset.isChanged}\" (keyup)=\"checkIt($event, asset)\" (ngModelChange)=\"assetChanged(asset)\"></textarea>\r\n                            </template>\r\n                            <template [ngIf]=\"asset.editByComponent && asset.isVisible\">\r\n                                <json-edit *ngIf=\"asset.componentType == 'JsonLike'\" [inputJson]='asset.ConfigurationValue'\r\n                                           [PredefinedJsonValues]=\"asset.Template\" [isRoot]='true' (out)=\"getJson($event, asset, step)\"\r\n                                           (cancelChanges)=\"jsonCanceled($event,asset)\"></json-edit>\r\n                                <table-edit-config *ngIf=\"asset.componentType == 'ARRAYLIKE' && asset.isVisible\"\r\n                                                   [inputArray]='asset.ConfigurationValue'\r\n                                                   [PredefinedJsonValues]=\"asset.Template\"\r\n                                                   [parentStep]='step'\r\n                                                   (cancelChanges)=\"jsonCanceled($event,asset)\"\r\n                                                   (out)=\"getJson($event, asset, step)\"></table-edit-config>\r\n                            </template>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <!-- uncomment bellow div if you want messages to be showed by step and not all together -->\r\n            <!-- execution result for this step\r\n            <div id=\"stepResult\" *ngIf=\"step.StepMessageVisibility && isExecutePage\">\r\n                <ul id=\"stepMsg\" name=\"stepMsg\" size=\"5\" style=\"width: 100%; max-width: 100%;\" *ngIf=\"showMsg\">\r\n                    <li [ngClass]=\"msg.class\" *ngFor=\"#msg of step.ExecutionMessage\" highlightlast>{{msg.date | date:\"MM/dd/yy hh:mm\" }}  - {{msg.message}}</li>\r\n                </ul>\r\n            </div>\r\n            -->\r\n        </div>\r\n\r\n    </template>\r\n    <!-- comment next article if you don't want to show all messages in same place -->\r\n    <!--\r\n    <article *ngIf=\"schematic.toggleListMessage && showMsg\">\r\n        <div class=\"tdam-steps-panel\" >\r\n            <ul id=\"stepMessages\"  size=\"5\" style=\"width: 100%; max-width: 100%;\" >\r\n            <span *ngFor=\"let step of schematic.allStepsVM\">\r\n                <span *ngIf=\"step.StepMessageVisibility\">\r\n                <li [ngClass]=\"msg.class\" *ngFor=\"let msg of step.ExecutionMessage\" highlightlast> {{msg.date | date:\"MM/dd/yy hh:mm\" }} - {{'Step ' + msg.stepId}} - {{msg.message}}</li>\r\n                </span>\r\n            </span>\r\n            </ul>\r\n        </div>\r\n        <br>\r\n    </article>\r\n       -->\r\n    <article>\r\n        <!--\r\n        <button (click)=\"executeSchematicClicked()\" class=\"btn tdam-button-secondary\" *ngIf=\"isExecutePage\" [disabled]=\"!executeStatus\">\r\n            <span class=\"fa fa-floppy-o fa-lgd\"></span>\r\n            Execute\r\n        </button>\r\n        -->\r\n        <span><strong>{{schematic.schematicState}} </strong></span>\r\n    </article>\r\n</article>\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/schematicpreview/schematicpreview.scss":
/***/ (function(module, exports) {

module.exports = ".ntooltip {\n  position: relative;\n  display: inline-block;\n  border-bottom: 1px dotted black;\n  /* If you want dots under the hoverable text */ }\n\n/* Tooltip text */\n.ntooltip .ntooltiptext {\n  visibility: hidden;\n  background-color: rgba(92, 239, 21, 0.97);\n  color: #2b0d21;\n  text-align: center;\n  padding: 5px 0;\n  border-radius: 6px;\n  position: absolute;\n  z-index: 10; }\n\n.ntooltip:hover .ntooltiptext {\n  visibility: visible; }\n\n.ntooltip .ntooltiptext {\n  width: 320px;\n  top: 100%;\n  left: 50%;\n  margin-left: -60px; }\n\n#stepConfig {\n  background-color: #f4f7f4; }\n"

/***/ }),

/***/ "./src/app/Datahub/routes/admin/schematic/schematicpreview/schematicpreview.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var signalr_1 = __webpack_require__("./src/app/Datahub/services/signalr.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var SchematicExecInfo_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematicpreview/SchematicExecInfo.ts");
var executionDialogService_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/Execution/executionDialogService.ts");
var SchematicPreview = (function () {
    function SchematicPreview(schematicExecInfo, appSetting, alert, signalr, elementRef, channelService) {
        this.schematicExecInfo = schematicExecInfo;
        this.appSetting = appSetting;
        this.alert = alert;
        this.signalr = signalr;
        this.elementRef = elementRef;
        this.channelService = channelService;
        this.connectionStatus = "connecting to server";
        this.isExecutePage = false;
        this.isInputPageTypeExecute = false;
        this.showMsg = false;
        this.runtimeMask = "";
        this.runtimeValue = "";
        this.isSpinnerRunning = false;
        this.executeStatus = true;
        this.schematic = schematicExecInfo;
        this.appSettingService = appSetting;
        this.elemRef = elementRef;
    }
    SchematicPreview.prototype.ngOnDestroy = function () {
        var self = this;
        self.signalr = null;
        self.subcriptRuntimeValues.unsubscribe();
        self.messagesSubscription.unsubscribe();
    };
    SchematicPreview.prototype.ngOnInit = function () {
        var _this = this;
        var self = this;
        self.subscribeForMessages();
        self.populateWithSchematicDetails(this.schematicId, true);
        self.subcriptRuntimeValues = self.channelService.askForSchematicsRuntimeValue$.subscribe(function (answer) {
            if (answer) {
                _this.executeSchematicClicked();
            }
        });
    };
    SchematicPreview.prototype.subscribeForMessages = function () {
        var _this = this;
        var self = this;
        self.messagesSubscription = self.signalr.msgReceived.subscribe(function (data) {
            //  self.showMessage(data);
            self.schematic.receiveMsg(data, self.Id);
            if (data.indexOf("Complete") > -1) {
                _this.isSpinnerRunning = false;
                _this.schematic.schematicState = "Finished";
            }
        }, function (error) {
            self.alert.error(self.appSettingService.appNotificationsMsg.apiMsg.apiGetSchematicDetails + error.status);
            self.connectionStatus = error.status;
            self.executeStatus = false;
            self.isSpinnerRunning = false;
        });
    };
    SchematicPreview.prototype.populateWithSchematicDetails = function (schematicId, isExecutionPage) {
        if (isExecutionPage === void 0) { isExecutionPage = false; }
        this.reset();
        if (schematicId > 0) {
            this.isInputPageTypeExecute = isExecutionPage;
            this.schematicId = schematicId;
            this.isExecutePage = isExecutionPage;
            this.schematic.getSchematicConfiguration(schematicId, isExecutionPage);
        }
    };
    SchematicPreview.prototype.reset = function () {
        this.showMsg = false;
        this.runtimeMask = "";
        this.runtimeValue = "";
    };
    SchematicPreview.prototype.setExecutePageChanges = function () {
        if (this.schematic.allStepsVM.length > 0) {
            this.isExecutePage = this.isInputPageTypeExecute;
        }
        else {
            this.isExecutePage = false;
        }
    };
    SchematicPreview.prototype.createUserConfigurationValue = function (assets) {
        var userConfigurationValue = [];
        assets.forEach(function (x) {
            userConfigurationValue.push({ ConfigID: x.ConfigValueId, ConfigValue: "" });
        });
        return userConfigurationValue;
    };
    /*
        showMessage(data: any) {
            this.schematic.receiveMsg(data);
        }
    */
    SchematicPreview.prototype.executeSchematicClicked = function () {
        var self = this;
        if (this.schematicId) {
            this.isSpinnerRunning = true;
            //clear previous result
            this.schematic.resetSteps();
            this.showMsg = true;
            //execute
            //this.signalr.executeSchematic(String(this.schematicId), this.schematic.getUserRunTimeValues());
            this.channelService.schematicRuntimeValue$.emit({ 'runtimeValue': this.schematic.getUserRunTimeValues(), 'id': self.Id ? self.Id : '' });
        }
    };
    SchematicPreview.prototype.getStepConfigName = function (configValueTypeLookupKey) {
        var pos = configValueTypeLookupKey.indexOf(":");
        if (pos > 0)
            return configValueTypeLookupKey.substring(pos + 1).trim();
        else
            return configValueTypeLookupKey;
    };
    SchematicPreview.prototype.getColumnWith = function () {
        if (this.isExecutePage)
            return "40%";
        else
            return "80%";
    };
    SchematicPreview.prototype.updateJsonValueToModel = function (asset, updatedValue) {
        asset.RuntimeConfigurationValue = updatedValue;
    };
    SchematicPreview.prototype.getJson = function (eventData, asset, step) {
        var _this = this;
        var self = this;
        asset.RuntimeConfigurationValue = eventData.value;
        try {
            var targetAsset_1 = step.StepAssets.find(function (x) {
                if (x.editByComponent && x.componentType == 'ARRAYLIKE') {
                    return true;
                }
                ;
                return false;
            });
            if (targetAsset_1 && asset.componentType.toUpperCase() == "JSONLIKE") {
                var jsonFromEvent = JSON.parse(eventData.value);
                var targetConfigValue = JSON.parse(targetAsset_1.ConfigurationValue);
                var settedSections_1 = [];
                var existingSections_1 = [];
                jsonFromEvent.forEach(function (x) {
                    settedSections_1.push('DocPart' + ' - ' + x.DocPart);
                });
                targetConfigValue.forEach(function (x) {
                    existingSections_1.push('DocPart' + ' - ' + x[0].DocPart);
                });
                existingSections_1.forEach(function (x) {
                    if (settedSections_1.indexOf(x) == -1) {
                        targetAsset_1.isVisible = true;
                        self.alert.addAlertAndRequestAnswer('Do you want to delete section : ' + x + ' in Column Mapping?', null, 'Delete Section');
                        var subscription = self.alert.requestConfirmationAnswer$.subscribe(function (answer) {
                            subscription.unsubscribe();
                            if (answer != "OK") {
                                targetAsset_1.isVisible = false;
                                return;
                            }
                            setTimeout(function () {
                                _this.alert.sendSectionForDelete$.emit(x);
                            }, 300);
                        });
                    }
                });
            }
        }
        catch (Exception) {
            console.log("Unable to delete corresponding section from Column mapping");
        }
    };
    SchematicPreview.prototype.jsonCanceled = function (event, asset) {
        if (event)
            asset.isVisible = false;
    };
    SchematicPreview.prototype.assetChanged = function (asset) {
        if (asset.ConfigurationValue !== asset.RuntimeConfigurationValue) {
            asset.isChanged = true;
        }
        else {
            asset.isChanged = false;
        }
    };
    SchematicPreview.prototype.checkIt = function (event, asset) {
        if (event.keyCode == 27 && asset.ConfigurationValue !== asset.RuntimeConfigurationValue) {
            asset.RuntimeConfigurationValue = asset.ConfigurationValue;
            asset.isChanged = false;
        }
    };
    __decorate([
        core_1.Input("schematicId"), 
        __metadata('design:type', Number)
    ], SchematicPreview.prototype, "schematicId", void 0);
    __decorate([
        core_1.Input("Id"), 
        __metadata('design:type', Number)
    ], SchematicPreview.prototype, "Id", void 0);
    SchematicPreview = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/Datahub/routes/admin/schematic/schematicpreview/schematicpreview.html"),
            styles: [__webpack_require__("./src/app/Datahub/routes/admin/schematic/schematicpreview/schematicpreview.scss")],
            selector: 'schematicPreview',
            providers: [SchematicExecInfo_1.SchematicExecInfo]
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof SchematicExecInfo_1.SchematicExecInfo !== 'undefined' && SchematicExecInfo_1.SchematicExecInfo) === 'function' && _a) || Object, (typeof (_b = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _b) || Object, (typeof (_c = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _c) || Object, (typeof (_d = typeof signalr_1.signalr !== 'undefined' && signalr_1.signalr) === 'function' && _d) || Object, (typeof (_e = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _e) || Object, (typeof (_f = typeof executionDialogService_1.ExecutionDialogService !== 'undefined' && executionDialogService_1.ExecutionDialogService) === 'function' && _f) || Object])
    ], SchematicPreview);
    return SchematicPreview;
    var _a, _b, _c, _d, _e, _f;
}());
exports.SchematicPreview = SchematicPreview;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/aplicationsComponents/applicationsComponentsModule.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var http_1 = __webpack_require__("./node_modules/@angular/http/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var editPortfolio_1 = __webpack_require__("./src/app/Datahub/routes/applications/aplicationsComponents/editPortfolio/editPortfolio.ts");
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var portfolio_pipe_1 = __webpack_require__("./src/app/Datahub/routes/applications/aplicationsComponents/editPortfolio/portfolio.pipe.ts");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var ApplicationsCommonModule = (function () {
    function ApplicationsCommonModule() {
    }
    ApplicationsCommonModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, forms_1.FormsModule, http_1.HttpModule, SharedModule_1.SharedModule
            ],
            exports: [
                editPortfolio_1.EditPortfolio, portfolio_pipe_1.PortfolioFilter
            ],
            declarations: [
                editPortfolio_1.EditPortfolio, portfolio_pipe_1.PortfolioFilter
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], ApplicationsCommonModule);
    return ApplicationsCommonModule;
}());
exports.ApplicationsCommonModule = ApplicationsCommonModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/aplicationsComponents/editPortfolio/editPortfolio.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.PortfolioComponentConfig = {
    CustomButtons: [
        {
            name: 'OpenChangeForm',
            value: 'Open Change Form',
            disabled: false,
            visible: true,
            formValidate: false
        }, {
            name: 'Reset',
            value: 'Reset',
            disabled: false,
            visible: true,
            formValidate: false
        }, {
            name: 'Update',
            value: 'Update',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "Search",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Search",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "PortfolioNumber",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "PortfolioNumber",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "PortfolioName",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "PortfolioName",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "PortfolioManager",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "IA Code",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_Lookup",
                dbColumnName: "id", displayColumnName: "name",
                dbParameters: { Parameters: [{ Name: "@type", Value: 3 }, { Name: "@GroupId", Value: 421 }, { Name: "@LoginName", Value: "ghindg2" }] } },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "ProjectedAUM",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "ProjectedAUM",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "InceptionDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "InceptionDate",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Notes",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Notes",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }
    ],
    RulesConfig: []
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/aplicationsComponents/editPortfolio/editPortfolio.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"form-group\">\r\n    <label><strong>Search for portfolio:</strong></label>\r\n    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"portfolioFilter\" placeholder=\"..enter the value to filter by.\" (change)=\"0\">\r\n</div>\r\n<div class=\"form-group\">\r\n    <div class=\"processList\">\r\n        <div *ngFor=\"let portfolio of allPortfolios | portfoliosByNumberOrName:portfolioFilter:true\">\r\n            <span class=\"itemList\" (dblclick)=\"getPortfolio(portfolio)\">{{portfolio.number}} - {{portfolio.name}}</span>\r\n        </div>\r\n    </div>\r\n</div>\r\n<formBuilder [gridSettings]=\"gridSettings\"\r\n             [httpProxy]=\"httpProxy\" [pluginInput]=\"inputData\"\r\n             (formBuilderNotifier)=\"updateDataFromComponents($event, componentName)\"></formBuilder>"

/***/ }),

/***/ "./src/app/Datahub/routes/applications/aplicationsComponents/editPortfolio/editPortfolio.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var editPortfolio_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/aplicationsComponents/editPortfolio/editPortfolio.config.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var EditPortfolio = (function () {
    function EditPortfolio(vmMatrix, apiService, alert) {
        this.vmMatrix = vmMatrix;
        this.apiService = apiService;
        this.alert = alert;
        this.gridSettings = editPortfolio_config_1.PortfolioComponentConfig;
        this.allPortfolios = [];
    }
    EditPortfolio.prototype.ngOnInit = function () {
        this.searchPortfolios();
        //this.setDataSources();
    };
    EditPortfolio.prototype.displayFormBuilderInfo = function () {
        this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
    };
    EditPortfolio.prototype.onPortfolioSelected = function (portfolio) {
        var self = this;
        var portfolioId = portfolio.id;
        self.currentPortfolio = new PortfolioItem(portfolio.id, portfolio.number, portfolio.name);
        //self.getPortfolioById(portfolioNumber);
    };
    EditPortfolio.prototype.getPortfolio = function (portfolio) {
        var self = this;
    };
    EditPortfolio.prototype.searchPortfolios = function () {
        var _this = this;
        this.apiService.getArrayFromQuery("ManagedProgramDB_Portfolio", JSON.stringify({
            Parameters: [{ Name: "@pType", Value: -1 },
                { Name: "@pSystemId", Value: this.SystemId },
                { Name: "@pLoginName", Value: 'ghindg2' }] //this.apiService.CurrentUser.LoginName
        })).subscribe(function (res) {
            _this.allPortfolios = res;
        }, function (error) {
            _this.alert.error("ManagedProgramDB_GetGroup. Error in retrieving drop down info" + error.status);
        }, function () { });
    };
    EditPortfolio.prototype.setDataSources = function () {
        var _this = this;
        var PortfolioManager = this.gridSettings.ColumnConfiguration.find(function (p) { return p.dbColumnName == 'PortfolioManager'; });
        var urlList = [{ url: PortfolioManager.dataSourceAddress.tableName, body: PortfolioManager.dataSourceAddress.dbParameters }];
        this.apiService.fetchMultipleListWithBody(urlList).subscribe(function (res) {
            PortfolioManager.dataSource = res;
            _this.displayFormBuilderInfo();
        }, function (error) {
            _this.alert.error("Error in retrieving drop down info" + error.status);
        }, function () {
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], EditPortfolio.prototype, "SystemId", void 0);
    EditPortfolio = __decorate([
        core_1.Component({
            selector: 'editPortfolio',
            template: __webpack_require__("./src/app/Datahub/routes/applications/aplicationsComponents/editPortfolio/editPortfolio.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _a) || Object, (typeof (_b = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _b) || Object, (typeof (_c = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _c) || Object])
    ], EditPortfolio);
    return EditPortfolio;
    var _a, _b, _c;
}());
exports.EditPortfolio = EditPortfolio;
var PortfolioItem = (function () {
    function PortfolioItem(id, number, name) {
        this.id = id;
        this.number = number;
        this.name = name;
    }
    return PortfolioItem;
}());
exports.PortfolioItem = PortfolioItem;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/aplicationsComponents/editPortfolio/portfolio.pipe.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var PortfolioFilter = (function () {
    function PortfolioFilter() {
    }
    PortfolioFilter.prototype.transform = function (portfolios, filterValue, number) {
        if (filterValue) {
            if (number) {
                return portfolios.filter(function (x) { return x.PortfolioNumber.includes(filterValue); });
            }
            else {
                return portfolios.filter(function (x) { return x.PortfolioName.includes(filterValue); });
            }
        }
        else {
            return [];
        }
    };
    PortfolioFilter = __decorate([
        core_1.Pipe({ name: 'portfoliosByNumberOrName' }), 
        __metadata('design:paramtypes', [])
    ], PortfolioFilter);
    return PortfolioFilter;
}());
exports.PortfolioFilter = PortfolioFilter;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/applications.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var applications_1 = __webpack_require__("./src/app/Datahub/routes/applications/applications.ts");
var applications_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/applications.routes.ts");
var tools_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/tools.module.ts");
var exceptionReports_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/exceptionReports/exceptionReports.module.ts");
var tradesReports_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/tradesReports.module.ts");
var applicationsComponentsModule_1 = __webpack_require__("./src/app/Datahub/routes/applications/aplicationsComponents/applicationsComponentsModule.ts");
var ApplicationsModule = (function () {
    function ApplicationsModule() {
    }
    ApplicationsModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, applications_routes_1.ApplicationsMainRouting, tools_module_1.ToolsModule, exceptionReports_module_1.ExceptionReportsModule, tradesReports_module_1.TradeReportsModule, applicationsComponentsModule_1.ApplicationsCommonModule
            ],
            declarations: [applications_1.Applications],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], ApplicationsModule);
    return ApplicationsModule;
}());
exports.ApplicationsModule = ApplicationsModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/applications.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var applications_1 = __webpack_require__("./src/app/Datahub/routes/applications/applications.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ApplicationsMainRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications', component: applications_1.Applications, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/applications.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var Applications = (function () {
    function Applications(navService, apiService) {
        this.navService = navService;
        this.apiService = apiService;
    }
    Applications.prototype.ngOnDestroy = function () {
        this.apiService.setApplicationsBaseUrl();
    };
    Applications = __decorate([
        core_1.Component({
            selector: 'applications',
            template: ""
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _b) || Object])
    ], Applications);
    return Applications;
    var _a, _b;
}());
exports.Applications = Applications;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/exceptionReports/exceptionReports.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"col-sm-12 col-md-6\">\r\n    <form name=\"genericForm\">\r\n        <div class=\"form-group\">\r\n            <customUploader [UploadOptions]=\"uploadOptions\"></customUploader>\r\n            <input type=\"button\" class=\"button-standard\" name=\"setoptions\" value=\"Set Upload Options\" (click)=\"setUploadOptions();\">\r\n        </div>\r\n    </form>\r\n</div>"

/***/ }),

/***/ "./src/app/Datahub/routes/applications/exceptionReports/exceptionReports.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var exceptionReports_1 = __webpack_require__("./src/app/Datahub/routes/applications/exceptionReports/exceptionReports.ts");
var exceptionReports_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/exceptionReports/exceptionReports.routes.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var ExceptionReportsModule = (function () {
    function ExceptionReportsModule() {
    }
    ExceptionReportsModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, SharedModule_1.SharedModule, forms_1.FormsModule, exceptionReports_routes_1.ExceptionReportsRouting
            ],
            declarations: [exceptionReports_1.ExceptionReports]
        }), 
        __metadata('design:paramtypes', [])
    ], ExceptionReportsModule);
    return ExceptionReportsModule;
}());
exports.ExceptionReportsModule = ExceptionReportsModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/exceptionReports/exceptionReports.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var exceptionReports_1 = __webpack_require__("./src/app/Datahub/routes/applications/exceptionReports/exceptionReports.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ExceptionReportsRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/ExceptionReports', component: exceptionReports_1.ExceptionReports, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/exceptionReports/exceptionReports.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var ExceptionReports = (function () {
    function ExceptionReports(navService) {
        this.navService = navService;
        this.uploadOptions = {};
        this.navService.getChildMenu(['Applications', 'ExceptionReports']);
        this.navService.getLeftMenuRoutes(['ExceptionReports']);
    }
    ExceptionReports.prototype.ngOnInit = function () {
        this.uploadOptions = {
            data: { databaseUpload: true, removeAfterUpload: false },
            allowedExtensions: ['txt', 'xlsx', 'xls'],
            multiple: true,
            maxUploadSize: 20000,
            maxUploads: 2,
            autoUpload: false
        };
    };
    ExceptionReports.prototype.setUploadOptions = function () {
        this.uploadOptions = { fileName: "New File Name.txt" };
    };
    ExceptionReports = __decorate([
        core_1.Component({
            selector: 'exceptionReports',
            template: __webpack_require__("./src/app/Datahub/routes/applications/exceptionReports/exceptionReports.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object])
    ], ExceptionReports);
    return ExceptionReports;
    var _a;
}());
exports.ExceptionReports = ExceptionReports;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/benchMarkIndex.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var benchMarkIndex_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/benchMarkIndex.routes.ts");
var worldGovernmentBondIndex_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/worldGovernmentBondIndex/worldGovernmentBondIndex.module.ts");
var tsx_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/tsx/tsx.module.ts");
var sAndP_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/sAndP/sAndP.module.ts");
var riskAnalyticsBenchmarks_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/riskAnalyticsBenchmarks/riskAnalyticsBenchmarks.module.ts");
var scotia_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/scotia/scotia.module.ts");
var msci_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/msci/msci.module.ts");
var benchMarkIndex_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/benchMarkIndex.ts");
var wilshireIndex_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/wilshireIndex/wilshireIndex.module.ts");
var bmoNesbittBurnsIndex_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/bmoNesbittBurnsIndex/bmoNesbittBurnsIndex.module.ts");
var BenchMarkIndexModule = (function () {
    function BenchMarkIndexModule() {
    }
    BenchMarkIndexModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, benchMarkIndex_routes_1.BenchMarkIndexRouting,
                bmoNesbittBurnsIndex_module_1.BmiBMONesbittBurnsIndexModule, msci_module_1.BmiMsciModule, riskAnalyticsBenchmarks_module_1.BmiRiskAnalyticsBenchmarksModule, sAndP_module_1.BmiSandPModule,
                wilshireIndex_module_1.BmiWilshireIndexModule, scotia_module_1.BmiScotiaModule, tsx_module_1.BmiTsxModule, worldGovernmentBondIndex_module_1.BmiWorldGovernmentBondIndexModule
            ],
            declarations: [benchMarkIndex_1.BenchMarkIndex],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], BenchMarkIndexModule);
    return BenchMarkIndexModule;
}());
exports.BenchMarkIndexModule = BenchMarkIndexModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/benchMarkIndex.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var benchMarkIndex_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/benchMarkIndex.ts");
exports.BenchMarkIndexRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/BenchMarkIndex', component: benchMarkIndex_1.BenchMarkIndex, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/benchMarkIndex.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var BenchMarkIndex = (function () {
    function BenchMarkIndex(navigationService, alt, location) {
        this.navigationService = navigationService;
        this.alt = alt;
        this.location = location;
        this.childItems = [];
        this.alert = alt;
    }
    BenchMarkIndex.prototype.ngOnInit = function () {
        this.childItems = this.navigationService.getChildMenusForTileView('BenchMarkIndex');
    };
    BenchMarkIndex = __decorate([
        core_1.Component({
            selector: 'benchMarkIndex',
            template: "\n    <tileView [menuItemsList]=\"childItems\"></tileView>\n"
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _c) || Object])
    ], BenchMarkIndex);
    return BenchMarkIndex;
    var _a, _b, _c;
}());
exports.BenchMarkIndex = BenchMarkIndex;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/bmoNesbittBurnsIndex/bmoNesbittBurnsIndex.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "SecurityID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    RowSelectionMode: "None",
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    ShowFooterRow: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "CUSIP",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "CUSIP",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "ISIN",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ISIN",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "TICKER",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "TICKER",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Duration",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Duration",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "SourceID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Source ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "SecurityID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Weight",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Weight",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-3" },
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" },
        }]
};
var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'Preview',
            value: 'Preview',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "ReportDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Report Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "BMONesbittBurnsIndex",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "BMO Nesbitt Burns Index",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/GetBMONBLookup",
                dbColumnName: "value", displayColumnName: "name", defaultValue: [{ Value: "", Name: "" }], dbParameters: { Parameters: [] } },
            "dataSource": undefined,
            "regex": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["ReportDate", "BMONesbittBurnsIndex"],
            "apiObject": undefined
        },
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        }]
};
exports.BmoNesbittBurnsIndexControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "DisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: DisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/bmoNesbittBurnsIndex/bmoNesbittBurnsIndex.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var bmoNesbittBurnsIndex_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/bmoNesbittBurnsIndex/bmoNesbittBurnsIndex.ts");
var bmoNesbittBurnsIndex_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/bmoNesbittBurnsIndex/bmoNesbittBurnsIndex.routes.ts");
var BmiBMONesbittBurnsIndexModule = (function () {
    function BmiBMONesbittBurnsIndexModule() {
    }
    BmiBMONesbittBurnsIndexModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, bmoNesbittBurnsIndex_routes_1.BmiBMONesbittBurnsIndexRouting
            ],
            declarations: [bmoNesbittBurnsIndex_1.BmiBMONesbittBurnsIndex],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], BmiBMONesbittBurnsIndexModule);
    return BmiBMONesbittBurnsIndexModule;
}());
exports.BmiBMONesbittBurnsIndexModule = BmiBMONesbittBurnsIndexModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/bmoNesbittBurnsIndex/bmoNesbittBurnsIndex.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var bmoNesbittBurnsIndex_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/bmoNesbittBurnsIndex/bmoNesbittBurnsIndex.ts");
exports.BmiBMONesbittBurnsIndexRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/BenchMarkIndex/BmiBMONesbittBurnsIndex', component: bmoNesbittBurnsIndex_1.BmiBMONesbittBurnsIndex, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/bmoNesbittBurnsIndex/bmoNesbittBurnsIndex.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var bmoNesbittBurnsIndex_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/bmoNesbittBurnsIndex/bmoNesbittBurnsIndex.config.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var BmiBMONesbittBurnsIndex = (function () {
    function BmiBMONesbittBurnsIndex(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = bmoNesbittBurnsIndex_config_1.BmoNesbittBurnsIndexControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    BmiBMONesbittBurnsIndex.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    BmiBMONesbittBurnsIndex.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    BmiBMONesbittBurnsIndex.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    BmiBMONesbittBurnsIndex.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    BmiBMONesbittBurnsIndex.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DisplayGrid"; });
        if (this.gridView) {
            this.gridView.ShowDefault = false;
        }
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            var d = new Date();
            d.setDate(d.getDate() - 2);
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val = genericfunctions_1.toDateString(d);
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    BmiBMONesbittBurnsIndex.prototype.doActionFromChildTab = function (outputData) {
        this.customMessages = [];
        if (outputData.updatedValue.controlName == "Preview") {
            this.showReport();
        }
    };
    BmiBMONesbittBurnsIndex.prototype.showReport = function () {
        var _this = this;
        var selectedDate = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val;
        var spSelected = this.formBuilder.data.find(function (x) { return x.name == "BMONesbittBurnsIndex"; }).val;
        this.apiService.getArrayFromQuery("GetMaxDateFromTblIndexNesbittBurns", JSON.stringify({ Parameters: [
                { Name: "@pMonth", Value: new Date(selectedDate).getMonth() + 1 },
                { Name: "@pYear", Value: new Date(selectedDate).getFullYear() }
            ] })).subscribe(function (res) {
            if (res.length == 1) {
                _this.apiService.getArrayFromQuery("GetNesbittBurnsIndex", JSON.stringify({
                    Parameters: [
                        { Name: "@pSpName", Value: spSelected },
                        { Name: "@pDate", Value: res[0].maxdate }]
                })).subscribe(function (res) {
                    _this.gridView.ShowDefault = true;
                    _this.gridView.data = res;
                    if (res.length > 0) {
                        var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                        _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
                    }
                    _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
                }, function (error) {
                    _this.alert.error("GetNesbittBurnsIndex : async error #" + error.status);
                }, function () {
                });
            }
        }, function (error) {
            _this.alert.error("GetMaxDateFromTblIndexNesbittBurns : async error #" + error.status);
        }, function () { });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], BmiBMONesbittBurnsIndex.prototype, "tabBuilderControl", void 0);
    BmiBMONesbittBurnsIndex = __decorate([
        core_1.Component({
            selector: 'bmoNesbittBurnsIndex',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], BmiBMONesbittBurnsIndex);
    return BmiBMONesbittBurnsIndex;
    var _a, _b, _c, _d;
}());
exports.BmiBMONesbittBurnsIndex = BmiBMONesbittBurnsIndex;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/msci/msci.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var msiValidationFunctions_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/msci/msiValidationFunctions.ts");
exports.TheChild = {
    Name: "DisplayGridChildConfig",
    ChildType: "",
    ForeignKeyColumn: "CountryCode",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    ShowFooterRow: true,
    ColumnConfiguration: [{
            "dbColumnName": "CountryCode",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Country Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Weight",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Weight",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-3" }
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" },
        }, {
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "TICKER",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "TICKER",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "index_market_cap",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Index Market Cap",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "number", pattern: "1.1-2" }
        }, {
            "dbColumnName": "foreign_inclusion_factor",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Foreign Inclusion Factor",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "number", pattern: "1.1-2" }
        }, {
            "dbColumnName": "price",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Price",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "number", pattern: "1.1-2" }
        }, {
            "dbColumnName": "Price_ISO_currency_symbol",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Currency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};
exports.DisplayGridMasterConfig = {
    ChildType: "",
    ShallHideAddButton: true,
    ShallHideDeleteButton: true,
    ChildControlConfig: exports.TheChild,
    PrimaryKeyColumn: "CountryCode",
    ChildGridType: "displayGrid",
    IsScrollableGrid: true,
    ShowFooterRow: true,
    ColumnConfiguration: [{
            "dbColumnName": "RegionCountry",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Region/Country",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isToggleable": true
        }, {
            "dbColumnName": "CountryCode",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Country Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ClosingMarketCap",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Closing Market Cap",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "currency", pattern: "USD:true:1.2-2" }
        }, {
            "dbColumnName": "Weight",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Weight",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-3" }
        }]
};
var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'Preview',
            value: 'Preview',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "ReportDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Report Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        },
        {
            "dbColumnName": "IndexType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Index Type",
            "dataSourceAddress": { dbColumnName: "ID", displayColumnName: "Description" },
            "dataSource": [{ ID: "REGION", Description: "REGION" }, { ID: "COUNTRY", Description: "COUNTRY" }],
            "regex": undefined,
        }, {
            "dbColumnName": "Region",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Region",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/MSCIRegionLookup",
                dbColumnName: "value", displayColumnName: "name", defaultValue: [{ Value: "", Name: "" }], dbParameters: { Parameters: [] } },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Country",
            "htmlControlType": "customselect",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Country",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/MSCICountryLookup",
                dbColumnName: "value", displayColumnName: "name", defaultValue: [{ Value: "", Name: "" }], dbParameters: { Parameters: [] } },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "IndexTypeInclude",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Include Index Type",
            "dataSourceAddress": { dbColumnName: "ID", displayColumnName: "Description" },
            "dataSource": [{ ID: "NONE", Description: "NONE" }, { ID: "REGION", Description: "REGION" }, { ID: "COUNTRY", Description: "COUNTRY" }],
            "regex": undefined,
        }, {
            "dbColumnName": "RegionInclude",
            "htmlControlType": "customselect",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Include Region",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/MSCIRegionLookup",
                dbColumnName: "value", displayColumnName: "name", defaultValue: [{ Value: "", Name: "" }], dbParameters: { Parameters: [] } },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "CountryInclude",
            "htmlControlType": "customselect",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Include Country",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/MSCICountryLookup",
                dbColumnName: "value", displayColumnName: "name", defaultValue: [{ Value: "", Name: "" }], dbParameters: { Parameters: [] } },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "IndexTypeExclude",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Exclude Index Type",
            "dataSourceAddress": { dbColumnName: "ID", displayColumnName: "Description" },
            "dataSource": [{ ID: "NONE", Description: "NONE" }, { ID: "REGION", Description: "REGION" }, { ID: "COUNTRY", Description: "COUNTRY" }],
            "regex": undefined,
        }, {
            "dbColumnName": "RegionExclude",
            "htmlControlType": "customselect",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Exclude Region",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/MSCIRegionLookup",
                dbColumnName: "value", displayColumnName: "name", defaultValue: [{ Value: "", Name: "" }], dbParameters: { Parameters: [] } },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "CountryExclude",
            "htmlControlType": "customselect",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Exclude Country",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/MSCICountryLookup",
                dbColumnName: "value", displayColumnName: "name", defaultValue: [{ Value: "", Name: "" }], dbParameters: { Parameters: [] } },
            "dataSource": undefined,
            "regex": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required", "date"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        }, {
            "ruleType": "OneOf",
            "applyTo": "OneOf",
            "ruleName": ["requiredTarget"],
            "ruleValue": { "targets": ["RegionExclude", "CountryExclude"], "ruleFunction": msiValidationFunctions_1.ValidateTargetForExclude },
            "ruleAssociates": ["IndexTypeExclude"],
            "apiObject": undefined
        }, {
            "ruleType": "OneOf",
            "applyTo": "OneOf",
            "ruleName": ["requiredTarget"],
            "ruleValue": { "targets": ["RegionInclude", "CountryInclude"], "ruleFunction": msiValidationFunctions_1.ValidateTargetForInclude },
            "ruleAssociates": ["IndexTypeInclude"],
            "apiObject": undefined
        }
    ]
};
exports.MsciControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "DisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: exports.DisplayGridMasterConfig,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/msci/msci.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var msci_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/msci/msci.routes.ts");
var msci_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/msci/msci.ts");
var BmiMsciModule = (function () {
    function BmiMsciModule() {
    }
    BmiMsciModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, msci_routes_1.BmiMsciRouting
            ],
            declarations: [msci_1.BmiMsci],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], BmiMsciModule);
    return BmiMsciModule;
}());
exports.BmiMsciModule = BmiMsciModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/msci/msci.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var msci_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/msci/msci.ts");
exports.BmiMsciRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/BenchMarkIndex/BmiMsci', component: msci_1.BmiMsci, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/msci/msci.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var msci_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/msci/msci.config.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var BmiMsci = (function () {
    function BmiMsci(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = msci_config_1.MsciControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    BmiMsci.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    BmiMsci.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    BmiMsci.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    BmiMsci.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    BmiMsci.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DisplayGrid"; });
        if (this.gridView) {
            this.gridView.ShowDefault = false;
        }
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            var d = new Date();
            d.setDate(d.getDate() - 2);
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val = genericfunctions_1.toDateString(d);
            this.formBuilder.data.find(function (x) { return x.name == "IndexType"; }).val = "REGION";
            this.formBuilder.data.find(function (x) { return x.name == "IndexTypeInclude"; }).val = "NONE";
            this.formBuilder.data.find(function (x) { return x.name == "IndexTypeExclude"; }).val = "NONE";
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    BmiMsci.prototype.doActionFromChildTab = function (outputData) {
        this.customMessages = [];
        switch (outputData.updatedValue.controlName) {
            case "IndexType":
                this.formBuilder.data.find(function (x) { return x.name == "Region"; }).isVisible = outputData.updatedValue.value == "REGION";
                this.formBuilder.data.find(function (x) { return x.name == "Country"; }).isVisible = outputData.updatedValue.value == "COUNTRY";
                break;
            case "IndexTypeInclude":
                this.formBuilder.data.find(function (x) { return x.name == "RegionInclude"; }).isVisible = outputData.updatedValue.value == "REGION";
                this.formBuilder.data.find(function (x) { return x.name == "CountryInclude"; }).isVisible = outputData.updatedValue.value == "COUNTRY";
                break;
            case "IndexTypeExclude":
                this.formBuilder.data.find(function (x) { return x.name == "RegionExclude"; }).isVisible = outputData.updatedValue.value == "REGION";
                this.formBuilder.data.find(function (x) { return x.name == "CountryExclude"; }).isVisible = outputData.updatedValue.value == "COUNTRY";
                break;
            case "Preview":
                this.showReport();
                break;
        }
    };
    BmiMsci.prototype.getSummaryData = function (data) {
        var countriesSummary = [];
        var countries = this.formBuilder.data.find(function (x) { return x.name == "Country"; });
        countries.masterdataSource.forEach(function (x) {
            var countryData = data.filter(function (y) { return y.ISO == x.value; });
            if (countryData.length > 0) {
                var weightSum = 0;
                var closingMarketCapSum = 0;
                for (var i = countryData.length; i--;) {
                    weightSum += countryData[i].Weight;
                    closingMarketCapSum += countryData[i].Closing_Security_Market_Cap;
                }
                countriesSummary.push({
                    RegionCountry: x.name, CountryCode: x.value,
                    ClosingMarketCap: closingMarketCapSum, Weight: weightSum
                });
            }
        });
        return countriesSummary;
    };
    BmiMsci.prototype.getCountrySummaryData = function (data, iso) {
        var summary = [];
        var countryData = data.filter(function (x) { return x.ISO == iso; });
        countryData.forEach(function (x) {
            summary.push({ CountryCode: x.ISO, Weight: x.Weight, Date: x.Date, Name: x.Name,
                TICKER: x.TICKER, IndexMarketCap: x.Index_Market_Cap, ForeignInclusionFactor: x.foreign_inclusion_factor,
                Price: x.price, Currency: x.Price_ISO_currency_symbol });
        });
        return summary;
    };
    BmiMsci.prototype.showReport = function () {
        var _this = this;
        var indexType;
        var includeIndexType = -1;
        var excludeIndexType = -1;
        var indexCode = "";
        var includeIndexCode = "";
        var excludeIndexCode = "";
        var selectedDate = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val;
        var indexTypeSelected = this.formBuilder.data.find(function (x) { return x.name == "IndexType"; }).val;
        var regionsSelected = this.formBuilder.data.find(function (x) { return x.name == "Region"; }).val;
        var countriesSelected = this.formBuilder.data.find(function (x) { return x.name == "Country"; }).val;
        var includeIndexTypeSelected = this.formBuilder.data.find(function (x) { return x.name == "IndexTypeInclude"; }).val;
        var includeRegionsSelected = this.formBuilder.data.find(function (x) { return x.name == "RegionInclude"; }).val;
        var includeCountriesSelected = this.formBuilder.data.find(function (x) { return x.name == "CountryInclude"; }).val;
        var excludeIndexTypeSelected = this.formBuilder.data.find(function (x) { return x.name == "IndexTypeExclude"; }).val;
        var excludeRegionsSelected = this.formBuilder.data.find(function (x) { return x.name == "RegionExclude"; }).val;
        var excludeCountriesSelected = this.formBuilder.data.find(function (x) { return x.name == "CountryExclude"; }).val;
        if (indexTypeSelected == "REGION") {
            indexType = 0;
            indexCode = regionsSelected;
        }
        else if (indexTypeSelected == "COUNTRY") {
            indexType = 1;
            indexCode = countriesSelected;
        }
        if (includeIndexTypeSelected == "REGION") {
            includeIndexType = 0;
            includeIndexCode = includeRegionsSelected;
        }
        else if (includeIndexTypeSelected == "COUNTRY") {
            includeIndexType = 1;
            includeIndexCode = includeCountriesSelected;
        }
        if (excludeIndexTypeSelected == "REGION") {
            excludeIndexType = 0;
            excludeIndexCode = excludeRegionsSelected;
        }
        else if (excludeIndexTypeSelected == "COUNTRY") {
            excludeIndexType = 1;
            excludeIndexCode = excludeCountriesSelected;
        }
        this.apiService.getArrayFromQuery("Benchmark_GetMSCIIndex", JSON.stringify({
            Parameters: [
                { Name: "@pReportDate", Value: selectedDate },
                { Name: "@pIndexType", Value: indexType },
                { Name: "@pIndexCode", Value: indexCode },
                { Name: "@pIncludeIndexType", Value: includeIndexType },
                { Name: "@pIncludeIndexCode", Value: includeIndexCode },
                { Name: "@pExcludeIndexType", Value: excludeIndexType },
                { Name: "@pExcludeIndexCode", Value: excludeIndexCode }]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            var masterData = _this.getSummaryData(res);
            if (masterData.length > 0) {
                var messageBlock = [masterData.length + (masterData.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            masterData.forEach(function (p) {
                p.childData = res.filter(function (c) { return c.ISO == p.CountryCode; });
            });
            _this.gridView.data = masterData;
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("GetMSCIIndex : async error #" + error.status);
        }, function () {
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], BmiMsci.prototype, "tabBuilderControl", void 0);
    BmiMsci = __decorate([
        core_1.Component({
            selector: 'msci',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], BmiMsci);
    return BmiMsci;
    var _a, _b, _c, _d;
}());
exports.BmiMsci = BmiMsci;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/msci/msiValidationFunctions.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// these functions decide what must be required when value is selected in cbobox
// for ex. if index exclude is REGION than RegionExclude is required
function ValidateTargetForExclude(theValue) {
    if (theValue.toString().toUpperCase() === "REGION")
        return "RegionExclude";
    if (theValue.toString().toUpperCase() === "COUNTRY")
        return "CountryExclude";
    return "UNKNOWN";
}
exports.ValidateTargetForExclude = ValidateTargetForExclude;
function ValidateTargetForInclude(theValue) {
    if (theValue.toString().toUpperCase() === "REGION")
        return "RegionInclude";
    if (theValue.toString().toUpperCase() === "COUNTRY")
        return "CountryInclude";
    return "UNKNOWN";
}
exports.ValidateTargetForInclude = ValidateTargetForInclude;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/riskAnalyticsBenchmarks/riskAnalyticsBenchmarks.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Validation_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/StandardValidation/Validation.ts");
var DisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "SecurityID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    RowSelectionMode: "None",
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    ShowFooterRow: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "CUSIP",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "CUSIP",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "SEDOL",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "SEDOL",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "ISIN",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ISIN",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "TICKER",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "TICKER",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Duration",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Duration",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "AverageRating",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Average Rating",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "SourceID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Source ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "SecurityID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Weight",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Weight",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-3" },
        }, {
            "dbColumnName": "MarketCap",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Market Cap",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-2" },
        }, {
            "dbColumnName": "Share_Cumulative",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Share Cumulative",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-2" },
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "shortDate" },
        }]
};
var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'RunReport',
            value: 'Run Report',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "StartDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Start Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "EndDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "End Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "RiskAnalyticsBenchmarksIndex",
            "htmlControlType": "checkboxlist",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Select Index",
            "dataSourceAddress": { dbColumnName: "value", displayColumnName: "name" },
            "dataSource": undefined,
            "regex": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["StartDate", "EndDate", "RiskAnalyticsBenchmarksIndex"],
            "apiObject": "",
        }, {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["StartDate", "EndDate"],
            "apiObject": "",
        }, {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["dateCompare"],
            "ruleAssociates": ["StartDate"],
            "apiObject": "",
            "ruleValue": { CompareTo: "EndDate", CompareOperator: Validation_1.CompareOperator.LessThanEqual }
        }]
};
exports.RiskAnalyticsBenchmarksControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "DisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: DisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/riskAnalyticsBenchmarks/riskAnalyticsBenchmarks.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var riskAnalyticsBenchmarks_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/riskAnalyticsBenchmarks/riskAnalyticsBenchmarks.routes.ts");
var riskAnalyticsBenchmarks_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/riskAnalyticsBenchmarks/riskAnalyticsBenchmarks.ts");
var BmiRiskAnalyticsBenchmarksModule = (function () {
    function BmiRiskAnalyticsBenchmarksModule() {
    }
    BmiRiskAnalyticsBenchmarksModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, riskAnalyticsBenchmarks_routes_1.BmiRiskAnalyticsBenchmarksRouting
            ],
            declarations: [riskAnalyticsBenchmarks_1.BmiRiskAnalyticsBenchmarks],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], BmiRiskAnalyticsBenchmarksModule);
    return BmiRiskAnalyticsBenchmarksModule;
}());
exports.BmiRiskAnalyticsBenchmarksModule = BmiRiskAnalyticsBenchmarksModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/riskAnalyticsBenchmarks/riskAnalyticsBenchmarks.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var riskAnalyticsBenchmarks_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/riskAnalyticsBenchmarks/riskAnalyticsBenchmarks.ts");
exports.BmiRiskAnalyticsBenchmarksRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/BenchMarkIndex/BmiRiskAnalyticsBenchmarks', component: riskAnalyticsBenchmarks_1.BmiRiskAnalyticsBenchmarks, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/riskAnalyticsBenchmarks/riskAnalyticsBenchmarks.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var riskAnalyticsBenchmarks_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/riskAnalyticsBenchmarks/riskAnalyticsBenchmarks.config.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var BmiRiskAnalyticsBenchmarks = (function () {
    function BmiRiskAnalyticsBenchmarks(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = riskAnalyticsBenchmarks_config_1.RiskAnalyticsBenchmarksControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
        this.listBoxData = [
            { name: 'DEX Universe', value: 'DEX_UNIVERSE' },
            { name: 'MSCI EAFE', value: 'MSCI_EAFE' },
            { name: 'MSCI World Ex Canada', value: 'MSCI_WORLD_EX_CANADA' },
            { name: 'Nasdaq 100', value: 'NASDAQ_100' },
            { name: 'S&P 500', value: 'SP_500' },
            { name: 'S&P/TSX 60', value: 'SP_TSX_60' },
            //{name:'SP_TSX_CAPPED_COMPOSITE_INDEX', value:'SP_TSX_CAPPED_COMPOSITE_INDEX'},
            { name: 'S&P/TSX Composite Index', value: 'SP_TSX_COMPOSITE_INDEX' },
            { name: 'S&P/TSX Equity Index', value: 'SP_TSX_EQUITY_INDEX' },
            { name: 'MSCI ACWI', value: 'MSCI_ACWI' },
            { name: 'MSCI Emerging Market', value: 'MSCI_Emerging_Market' },
            { name: 'S&P 1500', value: 'SP_1500' },
            { name: 'MSCI World', value: 'MSCI_WORLD' }
        ];
    }
    BmiRiskAnalyticsBenchmarks.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    BmiRiskAnalyticsBenchmarks.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    BmiRiskAnalyticsBenchmarks.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    BmiRiskAnalyticsBenchmarks.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    BmiRiskAnalyticsBenchmarks.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DisplayGrid"; });
        if (this.gridView) {
            this.gridView.ShowDefault = false;
        }
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            this.setDefaultDate();
            var RiskAnalyticsBenchmarksIndex = this.formBuilder.data.find(function (x) { return x.name == "RiskAnalyticsBenchmarksIndex"; });
            this.vmMatrix.bindCustomCheckBoxList(RiskAnalyticsBenchmarksIndex, this.listBoxData);
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    BmiRiskAnalyticsBenchmarks.prototype.setDefaultDate = function () {
        var _this = this;
        this.apiService.getArrayFromQuery("Benchmark_GetLastWeekDay").subscribe(function (res) {
            if (res[0].LastWeekDay) {
                var d = new Date(res[0].LastWeekDay);
                _this.formBuilder.data.find(function (x) { return x.name == "StartDate"; }).val = genericfunctions_1.toDateString(d);
                _this.formBuilder.data.find(function (x) { return x.name == "EndDate"; }).val = genericfunctions_1.toDateString(d);
            }
        }, function (error) {
            _this.alert.error("Benchmark_GetLastWeekDay : async error #" + error.status);
        }, function () {
        });
    };
    BmiRiskAnalyticsBenchmarks.prototype.doActionFromChildTab = function (outputData) {
        this.customMessages = [];
        if (outputData.updatedValue.controlName == "RunReport") {
            this.RunReport(outputData.updatedValue.value);
        }
    };
    BmiRiskAnalyticsBenchmarks.prototype.RunReport = function (data) {
        var eqProcessID = 369; //EQ process ID
        var fiProcessID = 370; //FI process ID
        var fileName, importRequestedDate;
        var importParameter = [];
        var fromDate = moment(genericfunctions_1.toUTCDate(new Date(data.StartDate)));
        var toDate = moment(genericfunctions_1.toUTCDate(new Date(data.EndDate)));
        var indices = data.RiskAnalyticsBenchmarksIndex;
        var isEqSelected = !indices.find(function (x) { return x == 'DEX_UNIVERSE' && indices.length == 1; });
        if (indices.find(function (x) { return x == 'DEX_UNIVERSE'; })) {
            while (fromDate <= toDate) {
                if (!(fromDate.isoWeekday() == 6 || fromDate.isoWeekday() == 7)) {
                    fileName = fromDate.format("YYYYMMDD") + "_FI.csv";
                    importRequestedDate = fromDate.format('MM/DD/YYYY');
                    importParameter.push("$[FileName]=" + "UI\\" + fileName);
                    this.doArchive(fileName, fiProcessID);
                }
                fromDate = fromDate.add(1, 'd');
            }
        }
        fromDate = moment.utc(data.StartDate);
        while (fromDate <= toDate) {
            if (!(fromDate.isoWeekday() == 6 || fromDate.isoWeekday() == 7) && isEqSelected) {
                fileName = fromDate.format("YYYYMMDD") + "_EQ.csv";
                importRequestedDate = fromDate.format('MM/DD/YYYY');
                indices.forEach(function (x) {
                    switch (x) {
                        case 'MSCI_EAFE':
                            importParameter.push("$[DoMsciEafe]=1");
                            break;
                        case 'MSCI_WORLD_EX_CANADA':
                            importParameter.push("$[DoMsciWorldExCanada]=1");
                            break;
                        case 'NASDAQ_100':
                            importParameter.push("$[DoNasdaq100]=1");
                            break;
                        case 'SP_500':
                            importParameter.push("$[DoSp500]=1");
                            break;
                        case 'SP_TSX_60':
                            importParameter.push("$[DoSpTsx60]=1");
                            break;
                        case 'SP_TSX_CAPPED_COMPOSITE_INDEX':
                            importParameter.push("$[DoSpTsxCappedCompositeIndex]=1");
                            break;
                        case 'SP_TSX_COMPOSITE_INDEX':
                            importParameter.push("$[DoSpTsxCompositeIndex]=1");
                            break;
                        case 'SP_TSX_EQUITY_INDEX':
                            importParameter.push("$[DoSpTsxEquityIndex]=1");
                            break;
                        case 'MSCI_ACWI':
                            importParameter.push("$[DoMsciAcwi]=1");
                            break;
                        case 'MSCI_Emerging_Market':
                            importParameter.push("$[DoMSCIEmergingMarket]=1");
                            break;
                        case 'SP_1500':
                            importParameter.push("$[DoSP1500]=1");
                            break;
                        case 'MSCI_WORLD':
                            importParameter.push("$[DoMsciWorld]=1");
                            break;
                    }
                    importParameter.push("$[FileName]=" + "UI\\" + fileName);
                });
                /*importParameter.push("$[DoMsciEafe]=" + (indices.find(x=> x == 'MSCI_EAFE')?1:0));
                importParameter.push("$[DoMsciWorldExCanada]=" + (indices.find(x=> x == 'MSCI_WORLD_EX_CANADA')?1:0));
                importParameter.push("$[DoNasdaq100]=" + (indices.find(x=> x == 'NASDAQ_100')?1:0));
                importParameter.push("$[DoSp500]=" + (indices.find(x=> x == 'SP_500')?1:0));
                importParameter.push("$[DoSpTsx60]=" + (indices.find(x=> x == 'SP_TSX_60')?1:0));
                importParameter.push("$[DoSpTsxCappedCompositeIndex]=" + (indices.find(x=> x == 'SP_TSX_CAPPED_COMPOSITE_INDEX')?1:0));
                importParameter.push("$[DoSpTsxCompositeIndex]=" + (indices.find(x=> x == 'SP_TSX_COMPOSITE_INDEX')?1:0));
                importParameter.push("$[DoSpTsxEquityIndex]=" + (indices.find(x=> x == 'SP_TSX_EQUITY_INDEX')?1:0));
                importParameter.push("$[DoMsciAcwi]=" + (indices.find(x=> x == 'MSCI_ACWI')?1:0));
                importParameter.push("$[DoMSCIEmergingMarket]=" + (indices.find(x=> x == 'MSCI_Emerging_Market')?1:0));
                importParameter.push("$[DoSP1500]=" + (indices.find(x=> x == 'SP_1500')?1:0));
                importParameter.push("$[DoMsciWorld]=" + (indices.find(x=> x == 'MSCI_WORLD')?1:0));
                importParameter.push("$[FileName]=" + "UI\\" + fileName);*/
                this.doArchive(fileName, eqProcessID);
            }
            fromDate = fromDate.add(1, 'd');
        }
    };
    BmiRiskAnalyticsBenchmarks.prototype.doArchive = function (filename, processID) {
        //SELECT [Sink] FROM tblTransferFileProcess WHERE ProcessID={0}
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], BmiRiskAnalyticsBenchmarks.prototype, "tabBuilderControl", void 0);
    BmiRiskAnalyticsBenchmarks = __decorate([
        core_1.Component({
            selector: 'riskAnalyticsBenchmarks',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], BmiRiskAnalyticsBenchmarks);
    return BmiRiskAnalyticsBenchmarks;
    var _a, _b, _c, _d;
}());
exports.BmiRiskAnalyticsBenchmarks = BmiRiskAnalyticsBenchmarks;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/sAndP/sAndP.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "SecurityID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    RowSelectionMode: "None",
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    ShowFooterRow: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "CUSIP",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "CUSIP",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "SEDOL",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "SEDOL",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "ISIN",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "ISIN",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "TICKER",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "TICKER",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Duration",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Duration",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "AverageRating",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Average Rating",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "SourceID",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "Source ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "SecurityID",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "displayName": "Security ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Weight",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Weight",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-3" },
        }, {
            "dbColumnName": "MarketCap",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Market Cap",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-2" },
        }, {
            "dbColumnName": "Share_Cumulative",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Share Cumulative",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-2" },
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" },
        }]
};
var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'Preview',
            value: 'Preview',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "ReportDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Report Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "SandPSubIndex",
            "htmlControlType": "select",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "S&P Sub Index",
            "dataSourceAddress": {
                tableName: "/Application/SqlStatementDetail/GetSPLookup",
                dbColumnName: "value", displayColumnName: "name", defaultValue: [{ Value: "", Name: "" }], dbParameters: { Parameters: [] }
            },
            "dataSource": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["ReportDate", "SandPSubIndex"],
            "apiObject": undefined
        },
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        }]
};
exports.SandPControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "DisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: DisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/sAndP/sAndP.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var sAndP_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/sAndP/sAndP.routes.ts");
var sAndP_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/sAndP/sAndP.ts");
var BmiSandPModule = (function () {
    function BmiSandPModule() {
    }
    BmiSandPModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, sAndP_routes_1.BmiSandPRouting
            ],
            declarations: [sAndP_1.BmiSandP],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], BmiSandPModule);
    return BmiSandPModule;
}());
exports.BmiSandPModule = BmiSandPModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/sAndP/sAndP.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var sAndP_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/sAndP/sAndP.ts");
exports.BmiSandPRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/BenchMarkIndex/BmiSandP', component: sAndP_1.BmiSandP, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/sAndP/sAndP.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var sAndP_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/sAndP/sAndP.config.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var BmiSandP = (function () {
    function BmiSandP(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = sAndP_config_1.SandPControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    BmiSandP.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    BmiSandP.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    BmiSandP.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    BmiSandP.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    BmiSandP.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DisplayGrid"; });
        if (this.gridView) {
            this.gridView.ShowDefault = false;
        }
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            var d = new Date();
            d.setDate(d.getDate() - 2);
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val = genericfunctions_1.toDateString(d);
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    BmiSandP.prototype.doActionFromChildTab = function (outputData) {
        this.customMessages = [];
        if (outputData.updatedValue.controlName == "Preview") {
            this.showReport();
        }
    };
    BmiSandP.prototype.showReport = function () {
        var _this = this;
        var selectedDate = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val;
        var spSelected = this.formBuilder.data.find(function (x) { return x.name == "SandPSubIndex"; }).val;
        var sQuery;
        if (spSelected.indexOf("sp_Benchmark_GetSPDJGlobalIndex") != -1 || spSelected.indexOf("sp_Benchmark_GetSPIndexConstituent") != -1) {
            sQuery = spSelected.replace("NULL", " '" + selectedDate + "'");
        }
        else {
            sQuery = spSelected + " '" + selectedDate + "'";
        }
        this.apiService.getArrayFromQuery("GetSPIndex", JSON.stringify({
            Parameters: [
                { Name: "@pSpName", Value: sQuery }]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("GetSPIndex : async error #" + error.status);
        }, function () {
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], BmiSandP.prototype, "tabBuilderControl", void 0);
    BmiSandP = __decorate([
        core_1.Component({
            selector: 'sAndP',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], BmiSandP);
    return BmiSandP;
    var _a, _b, _c, _d;
}());
exports.BmiSandP = BmiSandP;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/scotia/scotia.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "SecurityID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    RowSelectionMode: "None",
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    ShowFooterRow: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "CUSIP",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "CUSIP",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "SEDOL",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "SEDOL",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "ISIN",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ISIN",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "TICKER",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "TICKER",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "MOD",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "MOD",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "number", pattern: "1.1-5" },
            "isTotalVisible": true
        }, {
            "dbColumnName": "Duration",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "MOD Duration",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "columnFormat": { format: "number", pattern: "1.1-2" },
            "regex": undefined,
        }, {
            "dbColumnName": "AverageRating",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Average Rating",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "SourceID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Source ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "SecurityID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Weight",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Weight",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-3" },
        }, {
            "dbColumnName": "MarketCap",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "isTotalVisible": true,
            "displayName": "Market Cap",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "currency", pattern: "CAD:true:1.2-2" }
        }, {
            "dbColumnName": "Share_Cumulative",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Share Cumulative",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-2" },
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" },
        }]
};
var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'Preview',
            value: 'Preview',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "ReportDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Report Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isEmitEvent": true
        }, {
            "dbColumnName": "IndexName",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Index Name",
            "dataSourceAddress": { dbColumnName: "value", displayColumnName: "name", defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "IndexDescription",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Index Description",
            "dataSourceAddress": { dbColumnName: "Acronym", displayColumnName: "Description", defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["ReportDate", "IndexName", "IndexDescription"],
            "apiObject": undefined
        },
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        }]
};
exports.ScotiaControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "DisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: DisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/scotia/scotia.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var scotia_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/scotia/scotia.routes.ts");
var scotia_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/scotia/scotia.ts");
var BmiScotiaModule = (function () {
    function BmiScotiaModule() {
    }
    BmiScotiaModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, scotia_routes_1.BmiScotiaRouting
            ],
            declarations: [scotia_1.BmiScotia],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], BmiScotiaModule);
    return BmiScotiaModule;
}());
exports.BmiScotiaModule = BmiScotiaModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/scotia/scotia.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var scotia_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/scotia/scotia.ts");
exports.BmiScotiaRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/BenchMarkIndex/BmiScotia', component: scotia_1.BmiScotia, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/scotia/scotia.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var scotia_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/scotia/scotia.config.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var BmiScotia = (function () {
    function BmiScotia(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = scotia_config_1.ScotiaControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    BmiScotia.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    BmiScotia.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    BmiScotia.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    BmiScotia.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    BmiScotia.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DisplayGrid"; });
        if (this.gridView) {
            this.gridView.ShowDefault = false;
        }
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            var d = new Date();
            d.setDate(d.getDate() - 2);
            var date = genericfunctions_1.toDateString(d);
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val = date;
            this.getScotiaIndexName(date);
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    BmiScotia.prototype.doActionFromChildTab = function (outputData) {
        var _this = this;
        this.customMessages = [];
        var ReportDate = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; });
        var IndexName = this.formBuilder.data.find(function (x) { return x.name == "IndexName"; });
        var IndexDescription = this.formBuilder.data.find(function (x) { return x.name == "IndexDescription"; });
        switch (outputData.updatedValue.controlName) {
            case "ReportDate":
                var date = outputData.updatedValue.value;
                this.getScotiaIndexName(date);
                break;
            case "IndexName":
                var indexNameSelected = outputData.updatedValue.value;
                if (indexNameSelected == "") {
                    this.vmMatrix.bindCustomDropDown(IndexDescription, null);
                    break;
                }
                this.apiService.getArrayFromQuery("GetScotiaIndexDescription", JSON.stringify({
                    Parameters: [{ Name: "@pName", Value: indexNameSelected },
                        { Name: "@pReportDate", Value: ReportDate.val }]
                })).subscribe(function (res) {
                    _this.vmMatrix.bindCustomDropDown(IndexDescription, res);
                }, function (error) {
                    _this.alert.error("GetScotiaIndexDescription. Error in retrieving drop down info" + error.status);
                }, function () {
                });
                break;
            case "Preview":
                this.showReport();
                break;
        }
    };
    BmiScotia.prototype.getScotiaIndexName = function (date) {
        var _this = this;
        var IndexName = this.formBuilder.data.find(function (x) { return x.name == "IndexName"; });
        var IndexDescription = this.formBuilder.data.find(function (x) { return x.name == "IndexDescription"; });
        this.vmMatrix.bindCustomDropDown(IndexName, null);
        this.vmMatrix.bindCustomDropDown(IndexDescription, null);
        this.apiService.getArrayFromQuery("GetScotiaIndexName", JSON.stringify({
            Parameters: [{ Name: "@pReportDate", Value: date }]
        })).subscribe(function (res) {
            _this.vmMatrix.bindCustomDropDown(IndexName, res);
        }, function (error) {
            _this.alert.error("GetScotiaIndexName. Error in retrieving drop down info" + error.status);
        }, function () {
        });
    };
    BmiScotia.prototype.showReport = function () {
        var _this = this;
        var selectedDate = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val;
        var indexDescription = this.formBuilder.data.find(function (x) { return x.name == "IndexDescription"; }).val;
        this.apiService.getArrayFromQuery("Benchmark_GetScotiaIndex", JSON.stringify({
            Parameters: [{ Name: "@Date", Value: selectedDate },
                { Name: "@IndexName", Value: indexDescription }]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("Benchmark_GetScotiaIndex : async error #" + error.status);
        }, function () {
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], BmiScotia.prototype, "tabBuilderControl", void 0);
    BmiScotia = __decorate([
        core_1.Component({
            selector: 'scotia',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], BmiScotia);
    return BmiScotia;
    var _a, _b, _c, _d;
}());
exports.BmiScotia = BmiScotia;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/tsx/tsx.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "SecurityID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    RowSelectionMode: "None",
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    ShowFooterRow: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "CUSIP",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "CUSIP",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "SEDOL",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "SEDOL",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "ISIN",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ISIN",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "TICKER",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "TICKER",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Duration",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Duration",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "AverageRating",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Average Rating",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Weight",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Weight",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-3" },
        }, {
            "dbColumnName": "Quoted_Market_Value",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Quoted Market Value",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-2" },
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" },
        }]
};
var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'Preview',
            value: 'Preview',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "ReportDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Report Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "TsxSubIndex",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "TSX Sub Index",
            "dataSourceAddress": { dbColumnName: "value", displayColumnName: "name", defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["ReportDate", "TsxSubIndex"],
            "apiObject": undefined
        },
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        }]
};
exports.TsxControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "DisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: DisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/tsx/tsx.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var tsx_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/tsx/tsx.routes.ts");
var tsx_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/tsx/tsx.ts");
var BmiTsxModule = (function () {
    function BmiTsxModule() {
    }
    BmiTsxModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, tsx_routes_1.BmiTsxRouting
            ],
            declarations: [tsx_1.BmiTsx],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], BmiTsxModule);
    return BmiTsxModule;
}());
exports.BmiTsxModule = BmiTsxModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/tsx/tsx.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var tsx_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/tsx/tsx.ts");
exports.BmiTsxRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/BenchMarkIndex/BmiTsx', component: tsx_1.BmiTsx, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/tsx/tsx.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var tsx_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/tsx/tsx.config.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var BmiTsx = (function () {
    function BmiTsx(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = tsx_config_1.TsxControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    BmiTsx.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    BmiTsx.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    BmiTsx.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    BmiTsx.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    BmiTsx.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DisplayGrid"; });
        if (this.gridView) {
            this.gridView.ShowDefault = false;
        }
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            var d = new Date();
            d.setDate(d.getDate() - 2);
            var date = genericfunctions_1.toDateString(d);
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val = date;
            this.getTsxSubIndexLookup();
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    BmiTsx.prototype.doActionFromChildTab = function (outputData) {
        this.customMessages = [];
        switch (outputData.updatedValue.controlName) {
            case "Preview":
                this.showReport();
                break;
        }
    };
    BmiTsx.prototype.getTsxSubIndexLookup = function () {
        var _this = this;
        var tsxSubIndex = this.formBuilder.data.find(function (x) { return x.name == "TsxSubIndex"; });
        var apiParams = [{ url: "GetTSXSubIndexLookup" }, { url: "GetTSXLookup" }];
        this.apiService.getMultipleArrayFromQuery(apiParams).subscribe(function (res) {
            res[0].forEach(function (x) {
                res[1].forEach(function (y) {
                    if (y.value && y.value.indexOf(x.value) > -1) {
                        var tempName = genericfunctions_1.toCamelCase(y.name);
                        x.name = tempName.replace('S&p/tsx', 'S&P/TSX');
                    }
                });
            });
            _this.vmMatrix.bindCustomDropDown(tsxSubIndex, res[0]);
        }, function (error) {
            _this.alert.error("GetTSXSubIndexLookup. Error in retrieving drop down info" + error.status);
        }, function () {
        });
    };
    BmiTsx.prototype.showReport = function () {
        var _this = this;
        var selectedDate = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val;
        var tsxSubIndex = this.formBuilder.data.find(function (x) { return x.name == "TsxSubIndex"; }).val;
        this.apiService.getArrayFromQuery("Benchmark_GetTSXIndex", JSON.stringify({
            Parameters: [{ Name: "@Date", Value: selectedDate },
                { Name: "@Index", Value: tsxSubIndex }]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("Benchmark_GetTSXIndex : async error #" + error.status);
        }, function () {
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], BmiTsx.prototype, "tabBuilderControl", void 0);
    BmiTsx = __decorate([
        core_1.Component({
            selector: 'tsx',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], BmiTsx);
    return BmiTsx;
    var _a, _b, _c, _d;
}());
exports.BmiTsx = BmiTsx;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/wilshireIndex/wilshireIndex.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "SecurityID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    RowSelectionMode: "None",
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    ShowFooterRow: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "CUSIP",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "CUSIP",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "SEDOL",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "SEDOL",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "ISIN",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ISIN",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "TICKER",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "TICKER",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Duration",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Duration",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "AverageRating",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Average Rating",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Weight",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Weight",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-3" },
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" },
        }]
};
var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'Preview',
            value: 'Preview',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "ReportDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Report Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "WilshireSubIndex",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Wilshire Sub Index",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/GetWilshireSubIndexLookup",
                dbColumnName: "value", displayColumnName: "name", defaultValue: [{ Value: "", Name: "" }], dbParameters: { Parameters: [] } },
            "dataSource": undefined,
            "regex": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["ReportDate", "WilshireSubIndex"],
            "apiObject": undefined
        },
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        }]
};
exports.WilshireIndexControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "DisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: DisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/wilshireIndex/wilshireIndex.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var wilshireIndex_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/wilshireIndex/wilshireIndex.ts");
var wilshireIndex_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/wilshireIndex/wilshireIndex.routes.ts");
var BmiWilshireIndexModule = (function () {
    function BmiWilshireIndexModule() {
    }
    BmiWilshireIndexModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, wilshireIndex_routes_1.BmiWilshireIndexRouting
            ],
            declarations: [wilshireIndex_1.BmiWilshireIndex],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], BmiWilshireIndexModule);
    return BmiWilshireIndexModule;
}());
exports.BmiWilshireIndexModule = BmiWilshireIndexModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/wilshireIndex/wilshireIndex.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var wilshireIndex_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/wilshireIndex/wilshireIndex.ts");
exports.BmiWilshireIndexRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/BenchMarkIndex/BmiWilshireIndex', component: wilshireIndex_1.BmiWilshireIndex, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/wilshireIndex/wilshireIndex.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var wilshireIndex_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/wilshireIndex/wilshireIndex.config.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var BmiWilshireIndex = (function () {
    function BmiWilshireIndex(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = wilshireIndex_config_1.WilshireIndexControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    BmiWilshireIndex.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    BmiWilshireIndex.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    BmiWilshireIndex.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    BmiWilshireIndex.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    BmiWilshireIndex.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DisplayGrid"; });
        if (this.gridView) {
            this.gridView.ShowDefault = false;
        }
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            var d = new Date();
            d.setDate(d.getDate() - 2);
            var date = genericfunctions_1.toDateString(d);
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val = date;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    BmiWilshireIndex.prototype.doActionFromChildTab = function (outputData) {
        this.customMessages = [];
        switch (outputData.updatedValue.controlName) {
            case "Preview":
                this.showReport();
                break;
        }
    };
    BmiWilshireIndex.prototype.showReport = function () {
        var _this = this;
        var selectedDate = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val;
        var spSelected = this.formBuilder.data.find(function (x) { return x.name == "WilshireSubIndex"; }).val;
        this.apiService.getArrayFromQuery("Benchmark_GetWilshireIndex", JSON.stringify({
            Parameters: [{ Name: "@pSpName", Value: spSelected }, { Name: "@pDate", Value: selectedDate }]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("Benchmark_GetWilshireIndex : async error #" + error.status);
        }, function () {
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], BmiWilshireIndex.prototype, "tabBuilderControl", void 0);
    BmiWilshireIndex = __decorate([
        core_1.Component({
            selector: 'tsx',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], BmiWilshireIndex);
    return BmiWilshireIndex;
    var _a, _b, _c, _d;
}());
exports.BmiWilshireIndex = BmiWilshireIndex;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/worldGovernmentBondIndex/worldGovernmentBondIndex.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "SecurityID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    RowSelectionMode: "None",
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    ShowFooterRow: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "CUSIP",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "CUSIP",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "SEDOL",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "SEDOL",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "ISIN",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ISIN",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "TICKER",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "TICKER",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Duration",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Duration",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "AverageRating",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Average Rating",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Weight",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Weight",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "isTotalVisible": true,
            "columnFormat": { format: "number", pattern: "1.1-3" },
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" },
        }]
};
var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'Preview',
            value: 'Preview',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "ReportDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Report Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        },
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        }]
};
exports.WorldGovernmentBondIndexControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "DisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: DisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/worldGovernmentBondIndex/worldGovernmentBondIndex.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var worldGovernmentBondIndex_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/worldGovernmentBondIndex/worldGovernmentBondIndex.ts");
var worldGovernmentBondIndex_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/worldGovernmentBondIndex/worldGovernmentBondIndex.routes.ts");
var BmiWorldGovernmentBondIndexModule = (function () {
    function BmiWorldGovernmentBondIndexModule() {
    }
    BmiWorldGovernmentBondIndexModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, worldGovernmentBondIndex_routes_1.BmiWorldGovernmentBondIndexRouting
            ],
            declarations: [worldGovernmentBondIndex_1.BmiWorldGovernmentBondIndex],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], BmiWorldGovernmentBondIndexModule);
    return BmiWorldGovernmentBondIndexModule;
}());
exports.BmiWorldGovernmentBondIndexModule = BmiWorldGovernmentBondIndexModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/worldGovernmentBondIndex/worldGovernmentBondIndex.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var worldGovernmentBondIndex_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/worldGovernmentBondIndex/worldGovernmentBondIndex.ts");
exports.BmiWorldGovernmentBondIndexRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/BenchMarkIndex/BmiWorldGovernmentBondIndex', component: worldGovernmentBondIndex_1.BmiWorldGovernmentBondIndex, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/benchMarkIndex/worldGovernmentBondIndex/worldGovernmentBondIndex.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var worldGovernmentBondIndex_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/worldGovernmentBondIndex/worldGovernmentBondIndex.config.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var BmiWorldGovernmentBondIndex = (function () {
    function BmiWorldGovernmentBondIndex(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = worldGovernmentBondIndex_config_1.WorldGovernmentBondIndexControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    BmiWorldGovernmentBondIndex.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    BmiWorldGovernmentBondIndex.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    BmiWorldGovernmentBondIndex.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    BmiWorldGovernmentBondIndex.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    BmiWorldGovernmentBondIndex.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DisplayGrid"; });
        if (this.gridView) {
            this.gridView.ShowDefault = false;
        }
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            var d = new Date();
            d.setDate(d.getDate() - 2);
            var date = genericfunctions_1.toDateString(d);
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val = date;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    BmiWorldGovernmentBondIndex.prototype.doActionFromChildTab = function (outputData) {
        this.customMessages = [];
        switch (outputData.updatedValue.controlName) {
            case "Preview":
                this.showReport();
                break;
        }
    };
    BmiWorldGovernmentBondIndex.prototype.showReport = function () {
        var _this = this;
        var selectedDate = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val;
        this.apiService.getArrayFromQuery("Benchmark_GetWGBIndex", JSON.stringify({
            Parameters: [{ Name: "@Date", Value: selectedDate }]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("Benchmark_GetWGBIndex : async error #" + error.status);
        }, function () {
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], BmiWorldGovernmentBondIndex.prototype, "tabBuilderControl", void 0);
    BmiWorldGovernmentBondIndex = __decorate([
        core_1.Component({
            selector: 'worldGovernmentBondIndex',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], BmiWorldGovernmentBondIndex);
    return BmiWorldGovernmentBondIndex;
    var _a, _b, _c, _d;
}());
exports.BmiWorldGovernmentBondIndex = BmiWorldGovernmentBondIndex;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/bloombergAIM/bloombergAIM.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var bloombergAIM_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/bloombergAIM/bloombergAIM.ts");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var bloombergAIM_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/bloombergAIM/bloombergAIM.routes.ts");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var BloombergAIMModule = (function () {
    function BloombergAIMModule() {
    }
    BloombergAIMModule = __decorate([
        core_1.NgModule({
            imports: [
                platform_browser_1.BrowserModule, bloombergAIM_routes_1.BloombergAIMRouting, SharedModule_1.SharedModule
            ],
            declarations: [bloombergAIM_1.BloombergAIM],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], BloombergAIMModule);
    return BloombergAIMModule;
}());
exports.BloombergAIMModule = BloombergAIMModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/bloombergAIM/bloombergAIM.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var bloombergAIM_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/bloombergAIM/bloombergAIM.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.BloombergAIMRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/BloombergAIM', component: bloombergAIM_1.BloombergAIM, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/bloombergAIM/bloombergAIM.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var BloombergAIM = (function () {
    function BloombergAIM() {
    }
    BloombergAIM = __decorate([
        core_1.Component({
            selector: 'bloombergAIM',
            template: "<div class=\"container\">\n        <div class=\"row\">\n           Bloomberg AIM\n        </div>\n    </div>"
        }), 
        __metadata('design:paramtypes', [])
    ], BloombergAIM);
    return BloombergAIM;
}());
exports.BloombergAIM = BloombergAIM;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/administration/administration.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var AddUserFormBuilderConfig = {
    CustomButtons: [
        {
            name: 'Add',
            value: 'Add',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "SystemType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "SystemType",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_GetGroupType",
                dbColumnName: "ID", displayColumnName: "Description",
                dbParameters: { Parameters: [{ Name: "@GroupTypeIDs", Value: "18,19,23" }] },
                defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "GroupType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "GroupType",
            "dataSourceAddress": { dbColumnName: "ID", displayColumnName: "Description", defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "User",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "User",
            "dataSourceAddress": { dbColumnName: "ID", displayColumnName: "Name", defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["SystemType", "GroupType", "User"],
            "apiObject": undefined
        }]
};
var AssignCSAListConfig = {
    CustomButtons: [
        {
            name: 'Save',
            value: 'Save',
            disabled: false,
            visible: true,
            formValidate: false
        }
    ],
    ListItemsConfiguration: {
        "inputListDataFields": { dbColumnName: "id", displayColumnName: "name" },
        "inputListTitle": "AvailableUsers",
        "assignedListDataFields": { dbColumnName: "id", displayColumnName: "name" },
        "assignedListTitle": "LinkedUsers",
    }
};
var AssignCSAFormBuilderConfig = {
    ColumnConfiguration: [
        {
            "dbColumnName": "SystemType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "SystemType",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_GetGroupType",
                dbColumnName: "ID", displayColumnName: "Description",
                dbParameters: { Parameters: [{ Name: "@GroupTypeIDs", Value: "18,19,23" }] },
                defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "ProjectManagers",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Project Managers",
            "dataSourceAddress": { dbColumnName: "ID", displayColumnName: "Name", defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["SystemType", "ProjectManagers"],
            "apiObject": undefined
        }]
};
var ChangeSubstitutesListConfig = {
    CustomButtons: [
        {
            name: 'Save',
            value: 'Save',
            disabled: false,
            visible: true,
            formValidate: false
        }
    ],
    ListItemsConfiguration: {
        "inputListDataFields": { dbColumnName: "id", displayColumnName: "model" },
        "inputListTitle": "AllActiveModels",
        "assignedListDataFields": { dbColumnName: "ireplacemodelid", displayColumnName: "model" },
        "assignedListTitle": "Substitution",
    }
};
var ChangeSubstitutesFormBuilderConfig = {
    ColumnConfiguration: [
        {
            "dbColumnName": "Models",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Models",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_FixModels",
                dbColumnName: "imodelid", displayColumnName: "model",
                dbParameters: { Parameters: [] },
                defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["Models"],
            "apiObject": undefined
        }]
};
var EditUserFormBuilderConfig = {
    CustomButtons: [
        {
            name: 'Edit',
            value: 'Edit',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "SystemType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "SystemType",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_GetGroupType",
                dbColumnName: "ID", displayColumnName: "Description",
                dbParameters: { Parameters: [{ Name: "@GroupTypeIDs", Value: "18,19,23" }] },
                defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "GroupType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "GroupType",
            "dataSourceAddress": { dbColumnName: "ID", displayColumnName: "Description", defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "User",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "User",
            "dataSourceAddress": { dbColumnName: "ID", displayColumnName: "Name", defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Portfolios",
            "htmlControlType": "checkboxlist",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "ChangePortfolios",
            "dataSourceAddress": { dbColumnName: "ID", displayColumnName: "Portfolio" },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "ToUser",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "To User",
            "dataSourceAddress": { dbColumnName: "ID", displayColumnName: "Name", defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["SystemType", "GroupType", "User", "Portfolios", "ToUser"],
            "apiObject": undefined
        }]
};
var ModuleUpdateDisplayGridConfig = {
    ChildType: "",
    IsSpreadsheetGrid: true,
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    ShowFooterRow: false,
    UseBusinessValidation: true,
    CustomButtons: [
        {
            name: 'Submit',
            value: 'Submit',
            formValidate: true,
            disabled: false,
            visible: true
        }],
    RulesConfig: [
        /* {
             "ruleType": "AllOf",
             "applyTo": "AllOf",
             "ruleName": ["range"],
             "ruleAssociates":["Mid"],
             "ruleValue": [0, 100],
             "apiObject": undefined
         },*/
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["inputmask"],
            "ruleAssociates": ["Mid"],
            "ruleValue": "^100(.00)?|([1-9]?[0-9])(\.[0-9]{2})?$",
            "apiObject": undefined
        }, {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["Mid"],
            "apiObject": undefined
        }],
    ColumnConfiguration: [{
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Model",
            "htmlControlType": "text",
            "isVisible": true,
            "readOnly": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Model",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "readOnly": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Mid",
            "htmlControlType": "text",
            "isAllowGridLevelEdit": true,
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Mid",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};
var ModuleUpdateFormBuilderConfig = {
    ColumnConfiguration: [
        {
            "dbColumnName": "Module",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Module",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_GetModule", dbColumnName: "ID", displayColumnName: "Name",
                dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["Module"],
            "apiObject": undefined
        }]
};
exports.MpdbAdministrationConfig = {
    TabsList: [
        {
            TabKey: "addUser",
            TabName: "Add User",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "AddUserFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: AddUserFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                }
            ],
        }, {
            TabKey: "AssignCSA",
            TabName: "Assign CSA",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "AssignCSAFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: AssignCSAFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                }, {
                    ShowDefault: true,
                    ComponentName: "AssignCSAList",
                    PageType: "assignablelist",
                    gridSettings: AssignCSAListConfig,
                    PageOperationType: 'dynamicform'
                }
            ],
        }, {
            TabKey: "ChangeSubstitutes",
            TabName: "Change Substitutes",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "ChangeSubstitutesFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: ChangeSubstitutesFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                }, {
                    ShowDefault: true,
                    ComponentName: "ChangeSubstitutesList",
                    PageType: "assignablelist",
                    gridSettings: ChangeSubstitutesListConfig,
                    PageOperationType: 'dynamicform'
                }
            ],
        }, {
            TabKey: "editUser",
            TabName: "Edit User",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "EditUserFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: EditUserFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                }
            ],
        }, {
            TabKey: "ModuleUpdate",
            TabName: "Module Update",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "ModuleUpdateFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: ModuleUpdateFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                }, {
                    ShowDefault: false,
                    ComponentName: "ModuleUpdateDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: ModuleUpdateDisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/administration/administration.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var administration_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/administration/administration.routes.ts");
var administration_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/administration/administration.ts");
var MpdbAdministrationModule = (function () {
    function MpdbAdministrationModule() {
    }
    MpdbAdministrationModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, administration_routes_1.MpdbAdministrationRouting
            ],
            declarations: [administration_1.MpdbAdministration],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], MpdbAdministrationModule);
    return MpdbAdministrationModule;
}());
exports.MpdbAdministrationModule = MpdbAdministrationModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/administration/administration.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var administration_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/administration/administration.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.MpdbAdministrationRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/ManagedProgramDb/MpdbAdministration', component: administration_1.MpdbAdministration, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/administration/administration.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var administration_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/administration/administration.config.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var managedProgramDbService_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDbService.ts");
var MpdbAdministration = (function () {
    function MpdbAdministration(alert, apiService, vmMatrix, mpdbService) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.mpdbService = mpdbService;
        this.tabsListData = [];
        this.tabControlConfig = administration_config_1.MpdbAdministrationConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
        this.assignedListOriginal = [];
    }
    MpdbAdministration.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    MpdbAdministration.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    MpdbAdministration.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    MpdbAdministration.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData, this.mpdbService);
    };
    MpdbAdministration.prototype.displayTabInfo = function (tabInfo) {
        this.formBuilder = null;
        this.customMessages = [];
        switch (tabInfo.TabKey) {
            case 'addUser':
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "AddUserFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                }
                break;
            case 'AssignCSA':
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "AssignCSAFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                }
                this.assignableList = tabInfo.TabControls.find(function (x) { return x.ComponentName == "AssignCSAList"; });
                this.assignableList.gridSettings.CustomButtons.find(function (x) { return x.value == 'Save'; }).disabled = true;
                break;
            case 'ChangeSubstitutes':
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "ChangeSubstitutesFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                }
                this.assignableList = tabInfo.TabControls.find(function (x) { return x.ComponentName == "ChangeSubstitutesList"; });
                this.assignableList.gridSettings.CustomButtons.find(function (x) { return x.value == 'Save'; }).disabled = true;
                break;
            case 'editUser':
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "EditUserFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                }
                break;
            case 'ModuleUpdate':
                this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "ModuleUpdateDisplayGrid"; });
                if (this.gridView) {
                    this.gridView.ShowDefault = false;
                }
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "ModuleUpdateFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                }
                break;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    MpdbAdministration.prototype.doActionFromChildTab = function (outputData) {
        this.updatedControlsList = [];
        this.customMessages = [];
        switch (outputData.TabKey) {
            case 'addUser':
                this.addEditUserAction(outputData, true);
                break;
            case 'AssignCSA':
                this.assignCSAAction(outputData);
                break;
            case 'ChangeSubstitutes':
                this.changeSubstitutesAction(outputData);
                break;
            case 'editUser':
                this.addEditUserAction(outputData, false);
                break;
            case 'ModuleUpdate':
                this.moduleUpdateAction(outputData);
                break;
        }
    };
    MpdbAdministration.prototype.addEditUserAction = function (outputData, addUser) {
        var GroupType = this.formBuilder.data.find(function (x) { return x.name == "GroupType"; });
        var User = this.formBuilder.data.find(function (x) { return x.name == "User"; });
        var Portfolios = this.formBuilder.data.find(function (x) { return x.name == "Portfolios"; });
        var ToUser = this.formBuilder.data.find(function (x) { return x.name == "ToUser"; });
        switch (outputData.updatedValue.controlName) {
            case "SystemType":
                var systemTypeSelected = outputData.updatedValue.value;
                if (systemTypeSelected == "") {
                    this.vmMatrix.bindCustomDropDown(GroupType, null);
                    this.vmMatrix.bindCustomDropDown(User, null);
                    if (!addUser) {
                        this.vmMatrix.bindCustomCheckBoxList(Portfolios, null);
                    }
                    break;
                }
                else {
                    this.populateGroupType(systemTypeSelected, addUser);
                }
                break;
            case "GroupType":
                var groupTypeSelected = outputData.updatedValue.value;
                if (groupTypeSelected == "") {
                    this.vmMatrix.bindCustomDropDown(User, null);
                    if (!addUser) {
                        this.vmMatrix.bindCustomCheckBoxList(Portfolios, null);
                    }
                    break;
                }
                else {
                    this.populateUser(User, groupTypeSelected, addUser);
                }
                break;
            case "User":
                var userSelected = outputData.updatedValue.value;
                if (userSelected == "") {
                    if (!addUser) {
                        this.vmMatrix.bindCustomCheckBoxList(Portfolios, null);
                        this.vmMatrix.bindCustomDropDown(ToUser, null);
                    }
                    break;
                }
                else {
                    if (!addUser) {
                        groupTypeSelected = GroupType.val;
                        this.populatePortfolios(groupTypeSelected, userSelected);
                        this.populateUser(ToUser, groupTypeSelected, addUser);
                    }
                }
                break;
            case "Edit":
                this.editUser(GroupType.val, User.val, Portfolios.val, ToUser.val);
                break;
            case "Add":
                this.addUser(User.val, GroupType.val);
                break;
        }
    };
    MpdbAdministration.prototype.assignCSAAction = function (outputData) {
        var _this = this;
        this.customMessages = [];
        var ProjectManagers = this.formBuilder.data.find(function (x) { return x.name == "ProjectManagers"; });
        switch (outputData.updatedValue.controlName) {
            case "SystemType":
                var systemTypeSelected = outputData.updatedValue.value;
                if (systemTypeSelected == "") {
                    this.vmMatrix.bindCustomDropDown(ProjectManagers, null);
                    this.assignableList.inputList = [];
                    this.assignableList.assignedList = [];
                    break;
                }
                else {
                    this.populateProjectManagers(systemTypeSelected);
                }
                break;
            case "ProjectManagers":
                var projectManagerSelected = outputData.updatedValue.value;
                if (projectManagerSelected == "") {
                    this.assignableList.inputList = [];
                    this.assignableList.assignedList = [];
                    break;
                }
                else {
                    var systemTypeSelected = this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).val;
                    this.displayAssignedCSA(systemTypeSelected, projectManagerSelected);
                }
                break;
            case "Save":
                var assignedListUpdated = outputData.updatedValue.value.map(function (x) { return x.Value; });
                var removedItems = this.assignedListOriginal.filter(function (x) { return !assignedListUpdated.includes(x); });
                var addedItems = assignedListUpdated.filter(function (x) { return !_this.assignedListOriginal.includes(x); });
                if (removedItems.length == 0 && addedItems.length == 0) {
                    this.customMessages.push({ text: ["Please Add/Remove Linked Users"], alert: "alert-danger" });
                }
                else {
                    this.assignCSA(removedItems.join(","), addedItems.join(","));
                }
                break;
        }
    };
    MpdbAdministration.prototype.changeSubstitutesAction = function (outputData) {
        switch (outputData.updatedValue.controlName) {
            case "Models":
                var modelSelected = outputData.updatedValue.value;
                if (modelSelected == "") {
                    this.assignableList.inputList = [];
                    this.assignableList.assignedList = [];
                    break;
                }
                else {
                    this.displaySubstitutes(modelSelected);
                }
                break;
            case "Save":
                var selectedItems = [];
                outputData.updatedValue.value.forEach(function (x) { return selectedItems.push(x.Value); });
                this.saveSubstitutes(selectedItems.join(","));
                break;
        }
    };
    MpdbAdministration.prototype.moduleUpdateAction = function (outputData) {
        this.customMessages = [];
        switch (outputData.updatedValue.controlName) {
            case "Module":
                var moduleSelected = outputData.updatedValue.value;
                if (moduleSelected == "") {
                    this.gridView.ShowDefault = false;
                    this.gridView.data = [];
                    break;
                }
                else {
                    this.displayModule(moduleSelected);
                }
                break;
            case "Submit":
                var data = outputData.updatedValue.masterList;
                var total = data.map(function (data) {
                    var res = data.cells.find(function (y) { return y.name.toLowerCase() == 'mid'; }).val;
                    return Number(res);
                }).reduce(function (sum, current) { return sum + current; }, 0);
                if (total != 100) {
                    this.customMessages.push({ text: ["The sum of all values in the Mid column must be 100"], alert: "alert-danger" });
                }
                else {
                    this.updateModule(data);
                }
                break;
        }
    };
    MpdbAdministration.prototype.populateGroupType = function (systemTypeSelected, addUser) {
        var _this = this;
        var GroupType = this.formBuilder.data.find(function (x) { return x.name == "GroupType"; });
        var User = this.formBuilder.data.find(function (x) { return x.name == "User"; });
        var Portfolios = this.formBuilder.data.find(function (x) { return x.name == "Portfolios"; });
        this.vmMatrix.bindCustomDropDown(GroupType, null);
        this.vmMatrix.bindCustomDropDown(User, null);
        if (!addUser) {
            this.vmMatrix.bindCustomCheckBoxList(Portfolios, null);
        }
        this.apiService.getArrayFromQuery("ManagedProgramDB_GetGroup", JSON.stringify({
            Parameters: [{ Name: "@Type", Value: systemTypeSelected }]
        })).subscribe(function (res) {
            _this.vmMatrix.bindCustomDropDown(GroupType, res);
        }, function (error) {
            _this.alert.error("ManagedProgramDB_GetGroup. Error in retrieving drop down info" + error.status);
        }, function () { });
    };
    MpdbAdministration.prototype.populateProjectManagers = function (systemTypeSelected) {
        var _this = this;
        var ProjectManagers = this.formBuilder.data.find(function (x) { return x.name == "ProjectManagers"; });
        var iPM;
        if (systemTypeSelected == 18) {
            iPM = 237;
            ProjectManagers.label = "Project Managers";
        }
        else if (systemTypeSelected == 19) {
            iPM = 238;
            ProjectManagers.label = "IA Codes";
        }
        else if (systemTypeSelected == 23) {
            iPM = 421;
            ProjectManagers.label = "IA Codes";
        }
        this.apiService.getArrayFromQuery("ManagedProgramDB_GetExistingUser", JSON.stringify({
            Parameters: [{ Name: "@GroupID", Value: iPM }]
        })).subscribe(function (res) {
            _this.vmMatrix.bindCustomDropDown(ProjectManagers, res);
        }, function (error) {
            _this.alert.error("ManagedProgramDB_GetExistingUser. Error in retrieving drop down info" + error.status);
        }, function () { });
    };
    MpdbAdministration.prototype.populateUser = function (userControl, groupTypeSelected, addUser) {
        var _this = this;
        var Portfolios = this.formBuilder.data.find(function (x) { return x.name == "Portfolios"; });
        this.vmMatrix.bindCustomDropDown(userControl, null);
        if (!addUser) {
            this.vmMatrix.bindCustomCheckBoxList(Portfolios, null);
        }
        this.apiService.getArrayFromQuery(addUser ? "ManagedProgramDB_GetNewUser" : "ManagedProgramDB_GetExistingUser", JSON.stringify({ Parameters: [{ Name: "@GroupID", Value: groupTypeSelected }] })).subscribe(function (res) {
            _this.vmMatrix.bindCustomDropDown(userControl, res);
        }, function (error) {
            _this.alert.error("ManagedProgramDB_populateUser. Error in retrieving drop down info" + error.status);
        }, function () { });
    };
    MpdbAdministration.prototype.populatePortfolios = function (groupTypeSelected, userSelected) {
        var _this = this;
        var Portfolios = this.formBuilder.data.find(function (x) { return x.name == "Portfolios"; });
        this.vmMatrix.bindCustomDropDown(Portfolios, null);
        this.apiService.getArrayFromQuery("ManagedProgramDB_GetPortfolios", JSON.stringify({ Parameters: [{ Name: "@GroupID", Value: groupTypeSelected },
                { Name: "@UserID", Value: userSelected }] })).subscribe(function (res) {
            _this.vmMatrix.bindCustomCheckBoxList(Portfolios, res);
        }, function (error) {
            _this.alert.error("ManagedProgramDB_GetPortfolios. Error in retrieving drop down info" + error.status);
        }, function () { });
    };
    MpdbAdministration.prototype.addUser = function (userSelected, groupTypeSelected) {
        var _this = this;
        var User = this.formBuilder.data.find(function (x) { return x.name == "User"; });
        this.apiService.executeNonQuery("UpdateUserGroupUser", JSON.stringify({ Parameters: [
                { Name: "@User", Value: userSelected },
                { Name: "@GroupType", Value: groupTypeSelected }]
        })).subscribe(function (res) {
            _this.populateUser(User, groupTypeSelected, true);
            _this.alert.addAlert("User Added Successfully.");
        }, function (error) {
            _this.alert.error("UpdateUserGroupUser : async error #" + error.status);
        }, function () { });
    };
    MpdbAdministration.prototype.editUser = function (groupTypeSelected, userSelected, portfoliosSelected, toUserSelected) {
        var _this = this;
        this.apiService.executeNonQuery("ManagedProgramDB_Portfolio_EditUser", JSON.stringify({ Parameters: [
                { Name: "@User", Value: userSelected },
                { Name: "@PortfolioNumber", Value: portfoliosSelected.join(",") },
                { Name: "@ToUser", Value: toUserSelected }] })).subscribe(function (res) {
            _this.populatePortfolios(groupTypeSelected, userSelected);
            _this.alert.addAlert("User Edited Successfully.");
        }, function (error) {
            _this.alert.error("ManagedProgramDB_Portfolio_EditUser : async error #" + error.status);
        }, function () { });
    };
    MpdbAdministration.prototype.displayAssignedCSA = function (systemTypeSelected, projectManagerSelected) {
        var _this = this;
        var iCSA;
        if (systemTypeSelected == 18) {
            iCSA = 240;
        }
        else if (systemTypeSelected == 19) {
            iCSA = 243;
        }
        else if (systemTypeSelected == 23) {
            iCSA = 423;
        }
        var apiParams = [
            { url: "ManagedProgramDB_AdminGetAvailableUsers", body: { Parameters: [
                        { Name: "@UserGroupID", Value: iCSA },
                        { Name: "@GroupID", Value: systemTypeSelected },
                        { Name: "@UserID", Value: projectManagerSelected }] } },
            { url: "ManagedProgramDB_AdminGetLinkedUsers", body: { Parameters: [
                        { Name: "@UserGroupID", Value: iCSA },
                        { Name: "@GroupID", Value: systemTypeSelected },
                        { Name: "@UserID", Value: projectManagerSelected }] } }];
        this.apiService.getMultipleArrayFromQuery(apiParams).subscribe(function (res) {
            _this.assignableList.inputList = res[0];
            _this.assignableList.assignedList = res[1];
            _this.assignableList.gridSettings.CustomButtons.find(function (x) { return x.value == 'Save'; }).disabled = false;
            _this.assignedListOriginal = res[1].map(function (x) { return x.id; });
        }, function (error) {
            _this.alert.error("displayAssignedCSA. Error in populating Available/Linked Users" + error.status);
        }, function () { });
    };
    MpdbAdministration.prototype.assignCSA = function (removedItems, addedItems) {
        var _this = this;
        var systemTypeSelected = this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).val;
        var projectManagerSelected = this.formBuilder.data.find(function (x) { return x.name == "ProjectManagers"; }).val;
        var apiParams = [];
        if (removedItems.length > 0) {
            apiParams.push({ url: "ManagedProgramDB_UpdateUserLinkedUser", body: { Parameters: [
                        { Name: "@Type", Value: 1 },
                        { Name: "@UserGroupID", Value: projectManagerSelected },
                        { Name: "@UserID", Value: removedItems },
                        { Name: "@GroupID", Value: systemTypeSelected }] } });
        }
        if (addedItems.length > 0) {
            apiParams.push({ url: "ManagedProgramDB_UpdateUserLinkedUser", body: { Parameters: [
                        { Name: "@Type", Value: 0 },
                        { Name: "@UserGroupID", Value: projectManagerSelected },
                        { Name: "@UserID", Value: addedItems },
                        { Name: "@GroupID", Value: systemTypeSelected }] } });
        }
        this.apiService.executeMultipleNonQuery(apiParams).subscribe(function (res) {
            _this.alert.addAlert("Linked Users Updated Successfully.");
        }, function (error) {
            _this.alert.error("assignCSA. Error in updating Linked Users" + error.status);
        }, function () { });
    };
    MpdbAdministration.prototype.displaySubstitutes = function (modelSelected) {
        var _this = this;
        var apiParams = [{ url: "ManagedProgramDB_ActiveModels" },
            { url: "ManagedProgramDB_SubstituteModels", body: { Parameters: [{ Name: "@ModelID", Value: modelSelected }] } }];
        this.apiService.getMultipleArrayFromQuery(apiParams).subscribe(function (res) {
            _this.assignableList.assignedList = res[1];
            for (var i = res[0].length - 1; i >= 0; i -= 1) {
                res[1].forEach(function (x) {
                    if (res[0][i].model.trim() == x.model.trim()) {
                        res[0].splice(i, 1);
                    }
                });
            }
            _this.assignableList.inputList = res[0].sort(function (a, b) { return (a.model > b.model) ? 1 : ((b.model > a.model) ? -1 : 0); });
            _this.assignableList.gridSettings.CustomButtons.find(function (x) { return x.value == 'Save'; }).disabled = false;
        }, function (error) {
            _this.alert.error("DisplaySubstitutes. Error in populating Active Models/Substitutes lists" + error.status);
        }, function () { });
    };
    MpdbAdministration.prototype.saveSubstitutes = function (selectedItems) {
        var _this = this;
        var Model = this.formBuilder.data.find(function (x) { return x.name == "Models"; });
        this.apiService.executeNonQuery("ManagedProgramDB_ModuleMixPure", JSON.stringify({ Parameters: [
                { Name: "@ModelID", Value: Model.val },
                { Name: "@ReplaceModelID", Value: selectedItems },
                { Name: "@User", Value: this.apiService.CurrentUser.LoginName }]
        })).subscribe(function (res) {
            _this.alert.addAlert("Substitutes items updated.");
        }, function (error) {
            _this.alert.error("ManagedProgramDB_ModuleMixPure : async error #" + error.status);
        }, function () { });
    };
    MpdbAdministration.prototype.displayModule = function (moduleSelected) {
        var _this = this;
        this.apiService.getArrayFromQuery("ManagedProgramDB_GetModel", JSON.stringify({
            Parameters: [{ Name: "@ModuleID", Value: moduleSelected }] })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("ManagedProgramDB_GetModel : async error #" + error.status);
        }, function () { });
    };
    MpdbAdministration.prototype.updateModule = function (data) {
        var _this = this;
        var Module = this.formBuilder.data.find(function (x) { return x.name == "Module"; });
        var apiParams = [];
        data.forEach(function (x) { return apiParams.push({ url: "ManagedProgramDB_UpdateModuleMix",
            body: {
                Parameters: [
                    { Name: "@ModuleID", Value: Module.val },
                    { Name: "@ModelID", Value: x.cells.find(function (y) { return y.name.toLowerCase() == 'id'; }).val },
                    { Name: "@Mid", Value: x.cells.find(function (y) { return y.name.toLowerCase() == 'mid'; }).val },
                ]
            }
        }); });
        this.apiService.executeMultipleNonQuery(apiParams).subscribe(function (res) {
            _this.alert.addAlert("Module Edited Successfully.");
        }, function (error) {
            _this.alert.error("ManagedProgramDB_UpdateModuleMix : async error #" + error.status);
        }, function () { });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], MpdbAdministration.prototype, "tabBuilderControl", void 0);
    MpdbAdministration = __decorate([
        core_1.Component({
            selector: 'administration',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object, (typeof (_e = typeof managedProgramDbService_1.ManagedProgramDbService !== 'undefined' && managedProgramDbService_1.ManagedProgramDbService) === 'function' && _e) || Object])
    ], MpdbAdministration);
    return MpdbAdministration;
    var _a, _b, _c, _d, _e;
}());
exports.MpdbAdministration = MpdbAdministration;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/analysisConstructionTool/analysisConstructionTool.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var AdminFormBuilderConfig = {
    ColumnConfiguration: [],
    RulesConfig: []
};
var LockdownFormBuilderConfig = {
    ColumnConfiguration: [],
    RulesConfig: []
};
var ConstructionToolFormBuilderConfig = {
    ColumnConfiguration: [],
    RulesConfig: []
};
exports.AnalysisConstructionToolConfig = {
    TabsList: [
        {
            TabKey: "Admin",
            TabName: "Administration",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "AdminFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: AdminFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                }
            ],
        }, {
            TabKey: "Lockdown",
            TabName: "Lockdown",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "LockdownFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: LockdownFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                }
            ],
        }, {
            TabKey: "ConstructionTool",
            TabName: "Portfolio Analysis and Construction Tool",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "ConstructionToolFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: ConstructionToolFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/analysisConstructionTool/analysisConstructionTool.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var analysisConstructionTool_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/analysisConstructionTool/analysisConstructionTool.routes.ts");
var analysisConstructionTool_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/analysisConstructionTool/analysisConstructionTool.ts");
var MpdbAnalysisConstructionToolModule = (function () {
    function MpdbAnalysisConstructionToolModule() {
    }
    MpdbAnalysisConstructionToolModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, analysisConstructionTool_routes_1.MpdbAnalysisConstructionToolRouting
            ],
            declarations: [analysisConstructionTool_1.MpdbAnalysisConstructionTool],
        }), 
        __metadata('design:paramtypes', [])
    ], MpdbAnalysisConstructionToolModule);
    return MpdbAnalysisConstructionToolModule;
}());
exports.MpdbAnalysisConstructionToolModule = MpdbAnalysisConstructionToolModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/analysisConstructionTool/analysisConstructionTool.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var analysisConstructionTool_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/analysisConstructionTool/analysisConstructionTool.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.MpdbAnalysisConstructionToolRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/ManagedProgramDb/MpdbAnalysisConstructionTool', component: analysisConstructionTool_1.MpdbAnalysisConstructionTool, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/analysisConstructionTool/analysisConstructionTool.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var analysisConstructionTool_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/analysisConstructionTool/analysisConstructionTool.config.ts");
var managedProgramDbService_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDbService.ts");
var MpdbAnalysisConstructionTool = (function () {
    function MpdbAnalysisConstructionTool(alert, apiService, vmMatrix, mpdbService) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.mpdbService = mpdbService;
        this.tabsListData = [];
        this.tabControlConfig = analysisConstructionTool_config_1.AnalysisConstructionToolConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    MpdbAnalysisConstructionTool.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    MpdbAnalysisConstructionTool.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    MpdbAnalysisConstructionTool.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    MpdbAnalysisConstructionTool.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData, this.mpdbService);
    };
    MpdbAnalysisConstructionTool.prototype.displayTabInfo = function (tabInfo) {
        this.formBuilder = null;
        this.customMessages = [];
        switch (tabInfo.TabKey) {
            case 'Admin':
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "AdminFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                }
                break;
            case 'Lockdown':
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "LockdownFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                }
                break;
            case 'ConstructionTool':
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "ConstructionToolFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                }
                break;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], MpdbAnalysisConstructionTool.prototype, "tabBuilderControl", void 0);
    MpdbAnalysisConstructionTool = __decorate([
        core_1.Component({
            selector: 'analysisConstructionTool',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object, (typeof (_e = typeof managedProgramDbService_1.ManagedProgramDbService !== 'undefined' && managedProgramDbService_1.ManagedProgramDbService) === 'function' && _e) || Object])
    ], MpdbAnalysisConstructionTool);
    return MpdbAnalysisConstructionTool;
    var _a, _b, _c, _d, _e;
}());
exports.MpdbAnalysisConstructionTool = MpdbAnalysisConstructionTool;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/databaseUploadTool/databaseUploadTool.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var RebalEntryReportDisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    UseBusinessValidation: true,
    ColumnConfiguration: [{
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "PortfolioNumber",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" },
        }, {
            "dbColumnName": "Objective",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Objective",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "FMCObjectiveCode",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "FMC Objective Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Action",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Action",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Source",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Source",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Auto",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Auto",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "TradingListName",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Trading List Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "QueueToMPower",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Queue To MPower",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "PortfolioReady",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Portfolio Ready",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "TradingListExecuted",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Trading List Executed",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "Notes",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Notes",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "DoNotSendMail",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Do Not Send Mail",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "AddUser",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Add User",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Reviewed",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Reviewed",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "ReviewUser",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Reviewer Login ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ReviewDateTime",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Audit Pass Date & Time",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMdjms" },
        }]
};
var RebalEntryAuditAndReportFormBuilderConfig = {
    CustomButtons: [
        {
            name: 'ShowReport',
            value: 'Show Report',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "SystemType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "SystemType",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_GetGroupType",
                dbColumnName: "ID", displayColumnName: "Description",
                dbParameters: { Parameters: [{ Name: "@GroupTypeIDs", Value: "18,19,23" }] },
                defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "SearchDateTime",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Date/Time",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "User",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "User",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_RptGetUser", dbColumnName: "AddUser", displayColumnName: "AddUser", dbParameters: { Parameters: [] } },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Type",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Type",
            "dataSourceAddress": { dbColumnName: "ID", displayColumnName: "Description" },
            "dataSource": [{ ID: -1, Description: "" }, { ID: 0, Description: "Manual" }, { ID: 1, Description: "Upload" }],
            "regex": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["SystemType", "SearchDateTime"],
            "apiObject": undefined
        },
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["SearchDateTime"],
            "apiObject": undefined
        }]
};
var RebalEntryAuditDisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    RowSelectionMode: "Multi",
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    UseBusinessValidation: true,
    CustomButtons: [
        {
            name: 'PassAudit',
            value: 'Pass Audit',
            disabled: false,
            visible: true
        }
    ],
    ColumnConfiguration: [{
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Reviewed",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Reviewed",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "PortfolioNumber",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" },
        }, {
            "dbColumnName": "Objective",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Objective",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "FMCObjectiveCode",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "FMC Objective Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Action",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Action",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Source",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Source",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Auto",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Auto",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "TradingListName",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Trading List Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "QueueToMPower",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Queue To MPower",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "PortfolioReady",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Portfolio Ready",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "TradingListExecuted",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Trading List Executed",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "Notes",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Notes",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "DoNotSendMail",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Do Not Send Mail",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }]
};
var RebalEntryAuditReportFormBuilderConfig = {
    CustomButtons: [
        {
            name: 'ShowReport',
            value: 'Show Report',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "SystemType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "SystemType",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_GetGroupType",
                dbColumnName: "ID", displayColumnName: "Description",
                dbParameters: { Parameters: [{ Name: "@GroupTypeIDs", Value: "18,19,23" }] },
                defaultValue: [{ Value: "", Name: "" }] },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "SearchDateTime",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Date/Time",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "User",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "User",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_RptGetUser", dbColumnName: "AddUser", displayColumnName: "AddUser", dbParameters: { Parameters: [] } },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Type",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Type",
            "dataSourceAddress": { dbColumnName: "ID", displayColumnName: "Description" },
            "dataSource": [{ ID: -1, Description: "" }, { ID: 0, Description: "Manual" }, { ID: 1, Description: "Upload" }],
            "regex": undefined,
        }
    ]
};
var RebalEntryUploadDisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    RowSelectionMode: "Multi",
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    UseBusinessValidation: true,
    CustomButtons: [
        {
            name: 'PurgeSelected',
            value: 'Purge Selected',
            disabled: false,
            visible: true
        }, {
            name: 'PurgeAll',
            value: 'Purge All',
            disabled: false,
            visible: true
        }, {
            name: 'StartImport',
            value: 'Start Import',
            disabled: false,
            visible: true
        }
    ],
    ColumnConfiguration: [{
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Missed Account",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Missed Account",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "Existing Instruction",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Existing Instruction",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "Duplicated",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Duplicated",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
        }, {
            "dbColumnName": "Objective",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Objective",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "PortfolioNumber",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" },
        }, {
            "dbColumnName": "Action",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Action",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Source",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Source",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
        }]
};
var RebalEntryUploadFormBuilderConfig = {
    CustomButtons: [
        {
            name: 'PreviewUpload',
            value: 'Preview Upload',
            disabled: false,
            visible: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "SystemType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "SystemType",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_GetGroupType",
                dbColumnName: "ID", displayColumnName: "Description",
                dbParameters: { Parameters: [{ Name: "@GroupTypeIDs", Value: "18,19,23" }] } },
            "dataSource": undefined,
            "regex": undefined,
        }, {
            "dbColumnName": "UploadControl",
            "htmlControlType": "upload",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ChooseFileToUpload",
            "UploadOptions": {
                allowedExtensions: ['csv'],
                maxUploadSize: 200000,
                maxUploads: 1,
                autoUpload: true,
                applicationID: 4
            },
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "readOnly": false,
        }
    ]
};
exports.MainControlConfig = {
    TabsList: [
        {
            TabKey: "RebalEntryAudit",
            TabName: "Rebal Entry Audit",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "RebalEntryAuditFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: RebalEntryAuditAndReportFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "RebalEntryAuditDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: RebalEntryAuditDisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        },
        {
            TabKey: "RebalEntryReport",
            TabName: "Rebal Entry Report",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "RebalEntryReportFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: RebalEntryAuditAndReportFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "RebalEntryReportDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: RebalEntryReportDisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        },
        {
            TabKey: "RebalEntryUpload",
            TabName: "Rebal Entry Upload",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "RebalEntryUploadFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: RebalEntryUploadFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "RebalEntryUploadDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: RebalEntryUploadDisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/databaseUploadTool/databaseUploadTool.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var databaseUploadTool_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/databaseUploadTool/databaseUploadTool.routes.ts");
var databaseUploadTool_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/databaseUploadTool/databaseUploadTool.ts");
var managedProgramDbService_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDbService.ts");
var MpdbDatabaseUploadToolModule = (function () {
    function MpdbDatabaseUploadToolModule() {
    }
    MpdbDatabaseUploadToolModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, databaseUploadTool_routes_1.MpdbDatabaseUploadToolRouting
            ],
            declarations: [databaseUploadTool_1.MpdbDatabaseUploadTool],
            providers: [managedProgramDbService_1.ManagedProgramDbService]
        }), 
        __metadata('design:paramtypes', [])
    ], MpdbDatabaseUploadToolModule);
    return MpdbDatabaseUploadToolModule;
}());
exports.MpdbDatabaseUploadToolModule = MpdbDatabaseUploadToolModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/databaseUploadTool/databaseUploadTool.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var databaseUploadTool_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/databaseUploadTool/databaseUploadTool.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.MpdbDatabaseUploadToolRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/ManagedProgramDb/MpdbDatabaseUploadTool', component: databaseUploadTool_1.MpdbDatabaseUploadTool, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/databaseUploadTool/databaseUploadTool.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var databaseUploadTool_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/databaseUploadTool/databaseUploadTool.config.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var importExportService_1 = __webpack_require__("./src/app/ReusableServices/importExportService.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var managedProgramDbService_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDbService.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var GROUP_TYPE;
(function (GROUP_TYPE) {
    GROUP_TYPE[GROUP_TYPE["PIA"] = 19] = "PIA";
    GROUP_TYPE[GROUP_TYPE["FP"] = 23] = "FP";
    GROUP_TYPE[GROUP_TYPE["PIC"] = 18] = "PIC";
})(GROUP_TYPE || (GROUP_TYPE = {}));
var MpdbDatabaseUploadTool = (function () {
    function MpdbDatabaseUploadTool(alert, mpdbService, importExportService, interFormSvc, apiService, vmMatrix) {
        this.alert = alert;
        this.mpdbService = mpdbService;
        this.importExportService = importExportService;
        this.interFormSvc = interFormSvc;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = databaseUploadTool_config_1.MainControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    MpdbDatabaseUploadTool.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    MpdbDatabaseUploadTool.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    MpdbDatabaseUploadTool.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    MpdbDatabaseUploadTool.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData, this.mpdbService);
    };
    MpdbDatabaseUploadTool.prototype.displayTabInfo = function (tabInfo) {
        this.gridView = null;
        this.formBuilder = null;
        this.customMessages = [];
        switch (tabInfo.TabKey) {
            case 'RebalEntryAudit':
                this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "RebalEntryAuditDisplayGrid"; });
                if (this.gridView) {
                    this.gridView.ShowDefault = false;
                }
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "RebalEntryAuditFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                    this.formBuilder.data.find(function (x) { return x.name == "SearchDateTime"; }).val = genericfunctions_1.toDateString(new Date());
                }
                break;
            case 'RebalEntryReport':
                this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "RebalEntryReportDisplayGrid"; });
                if (this.gridView) {
                    this.gridView.ShowDefault = false;
                }
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "RebalEntryReportFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                    this.formBuilder.data.find(function (x) { return x.name == "SearchDateTime"; }).val = genericfunctions_1.toDateString(new Date());
                }
                break;
            case 'RebalEntryUpload':
                this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "RebalEntryUploadDisplayGrid"; });
                if (this.gridView) {
                    this.gridView.ShowDefault = false;
                }
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "RebalEntryUploadFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                    this.formBuilder.data.find(function (x) { return x.name == "UploadControl"; }).readOnly = true;
                    this.formBuilder.gridSettings.CustomButtons.find(function (x) { return x.name == "PreviewUpload"; }).visible = false;
                }
                break;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    MpdbDatabaseUploadTool.prototype.doActionFromChildTab = function (outputData) {
        this.updatedControlsList = [];
        this.customMessages = [];
        switch (outputData.TabKey) {
            case 'RebalEntryAudit':
                this.rebalEntryAuditAction(outputData);
                break;
            case 'RebalEntryReport':
                this.rebalEntryReportAction(outputData);
                break;
            case 'RebalEntryUpload':
                this.rebalEntryUploadAction(outputData);
                break;
        }
    };
    MpdbDatabaseUploadTool.prototype.rebalEntryAuditAction = function (outputData) {
        var _this = this;
        if (outputData.updatedValue.controlName == "ShowReport") {
            this.showRebalEntryAudit();
        }
        else if (outputData.updatedValue.controlName == "PassAudit") {
            if (outputData.updatedValue.value.length > 0) {
                this.alert.addAlertAndRequestAnswer("Are you sure you want to pass audit for selected rows?");
                var subscription_1 = this.alert.requestConfirmationAnswer$.subscribe(function (answer) {
                    subscription_1.unsubscribe();
                    _this.alert.askConfirmation = false;
                    if (answer == "OK") {
                        var selectedRows_1 = [];
                        outputData.updatedValue.value.forEach(function (x) { return selectedRows_1.push(x.primaryKey.value); });
                        _this.passAudit(selectedRows_1.join(","));
                    }
                    else {
                        return;
                    }
                });
            }
        }
    };
    MpdbDatabaseUploadTool.prototype.rebalEntryReportAction = function (outputData) {
        if (outputData.updatedValue.controlName == "ShowReport") {
            this.showRebalEntryReport();
        }
    };
    MpdbDatabaseUploadTool.prototype.rebalEntryUploadAction = function (outputData) {
        var _this = this;
        this.customMessages = [];
        var groupTypeID = this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).val;
        switch (outputData.updatedValue.controlName) {
            case "SystemType":
                this.formBuilder.gridSettings.CustomButtons.find(function (x) { return x.name == "PreviewUpload"; }).visible = false;
                this.interFormSvc.notifyUploadInit.next();
                if (!outputData.updatedValue.value) {
                    this.formBuilder.data.find(function (x) { return x.name == "UploadControl"; }).readOnly = true;
                    this.gridView.ShowDefault = false;
                }
                else {
                    var fileName = this.getImportType(groupTypeID) + "_Rebal.csv";
                    this.interFormSvc.notifyUploadOptionsChange.next({ fileName: fileName });
                    this.showPendings(groupTypeID, false);
                }
                break;
            case "PreviewUpload":
                var fileID = outputData.updatedValue.value.UploadControl.ID;
                this.previewUpload(groupTypeID, fileID);
                break;
            case "UploadControl":
                this.formBuilder.gridSettings.CustomButtons.find(function (x) { return x.name == "PreviewUpload"; }).visible = (outputData.updatedValue.value.UploadControl);
                break;
            case "PurgeSelected":
                if (outputData.updatedValue.value.length > 0) {
                    this.alert.addAlertAndRequestAnswer("Are you sure you want to purge selected rows?");
                    var subscription_2 = this.alert.requestConfirmationAnswer$.subscribe(function (answer) {
                        subscription_2.unsubscribe();
                        _this.alert.askConfirmation = false;
                        if (answer == "OK") {
                            var selectedRows_2 = [];
                            outputData.updatedValue.value.forEach(function (x) { return selectedRows_2.push(x.primaryKey.value); });
                            _this.purgePendings(groupTypeID, selectedRows_2.join(","), false);
                        }
                        else {
                            return;
                        }
                    });
                }
                break;
            case "PurgeAll":
                this.purgePendings(groupTypeID, null, true);
                break;
            case "StartImport":
                if (outputData.updatedValue.value.length > 0) {
                    this.alert.addAlertAndRequestAnswer("Are you sure you want to import selected rows?");
                    var subscription_3 = this.alert.requestConfirmationAnswer$.subscribe(function (answer) {
                        subscription_3.unsubscribe();
                        _this.alert.askConfirmation = false;
                        if (answer == "OK") {
                            var selectedRows_3 = [];
                            outputData.updatedValue.value.forEach(function (x) { return selectedRows_3.push(x.primaryKey.value); });
                            _this.importInstructions(groupTypeID, selectedRows_3.join(","));
                        }
                        else {
                            return;
                        }
                    });
                }
                break;
        }
    };
    MpdbDatabaseUploadTool.prototype.showRebalEntryAudit = function () {
        var _this = this;
        var groupTypeID = this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).val;
        var selectedUser = this.formBuilder.data.find(function (x) { return x.name == "User"; }).val;
        var typeID = this.formBuilder.data.find(function (x) { return x.name == "Type"; }).val;
        var selectedDate = this.formBuilder.data.find(function (x) { return x.name == "SearchDateTime"; }).val;
        this.apiService.getArrayFromQuery("ManagedProgramDB_RptRebalEntryAudit", JSON.stringify({
            Parameters: [
                { Name: "@GroupTypeID", Value: groupTypeID },
                { Name: "@Date", Value: selectedDate },
                { Name: "@User", Value: selectedUser },
                { Name: "@Type", Value: typeID }]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var rowsReviewed = res.filter(function (x) { return x.Reviewed; }).length;
                var rowsNotReviewed = res.filter(function (x) { return !x.Reviewed; }).length;
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                messageBlock = messageBlock.concat(rowsReviewed + (rowsReviewed > 1 ? " records " : " record ") + "reviewed");
                messageBlock = messageBlock.concat(rowsNotReviewed + (rowsNotReviewed > 1 ? " records " : " record ") + "not reviewed");
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
                _this.gridView.gridSettings.CustomButtons.forEach(function (x) { x.visible = true; });
            }
            else {
                _this.gridView.gridSettings.CustomButtons.forEach(function (x) { x.visible = false; });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("ManagedProgramDB_RptRebalEntryAudit : async error #" + error.status);
        }, function () {
        });
    };
    MpdbDatabaseUploadTool.prototype.passAudit = function (selectedRows) {
        var _this = this;
        this.apiService.executeNonQuery("ManagedProgramDB_PassAudit", JSON.stringify({ Parameters: [
                { Name: "@IDs", Value: selectedRows },
                { Name: "@Auditor", Value: this.apiService.CurrentUser.LoginName }]
        })).subscribe(function (res) {
            _this.showRebalEntryAudit();
            _this.alert.addAlert(res + (res > 1 ? " records " : " record ") + "passed audit.");
        }, function (error) { _this.alert.error("ManagedProgramDB_PassAudit : async error #" + error.status); }, function () {
        });
    };
    MpdbDatabaseUploadTool.prototype.showRebalEntryReport = function () {
        var _this = this;
        var groupTypeID = this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).val;
        var selectedUser = this.formBuilder.data.find(function (x) { return x.name == "User"; }).val;
        var typeID = this.formBuilder.data.find(function (x) { return x.name == "Type"; }).val;
        var selectedDate = this.formBuilder.data.find(function (x) { return x.name == "SearchDateTime"; }).val;
        this.apiService.getArrayFromQuery("ManagedProgramDB_RptRebalEntry", JSON.stringify({
            Parameters: [
                { Name: "@GroupTypeID", Value: groupTypeID },
                { Name: "@Date", Value: selectedDate },
                { Name: "@User", Value: selectedUser },
                { Name: "@Type", Value: typeID }]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var rowsReviewed = res.filter(function (x) { return x.Reviewed; }).length;
                var rowsNotReviewed = res.filter(function (x) { return !x.Reviewed; }).length;
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                messageBlock = messageBlock.concat(rowsReviewed + (rowsReviewed > 1 ? " records " : " record ") + "reviewed");
                messageBlock = messageBlock.concat(rowsNotReviewed + (rowsNotReviewed > 1 ? " records " : " record ") + "not reviewed");
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("ManagedProgramDB_RptRebalEntry : async error #" + error.status);
        }, function () {
        });
    };
    MpdbDatabaseUploadTool.prototype.previewUpload = function (groupTypeID, fileID) {
        var _this = this;
        this.importExportService.importTextFile("XLayerImport_ManagedProgramDB", fileID)
            .subscribe(function (res) {
            _this.apiService.executeNonQuery("Update_ManagedProgramDB_PortfolioChange_Import", JSON.stringify({
                Parameters: [
                    { Name: "@GroupTypeID", Value: groupTypeID },
                    { Name: "@User", Value: _this.apiService.CurrentUser.LoginName }]
            })).subscribe(function (res) {
                _this.showPendings(groupTypeID, true);
                _this.alert.addAlert(res + " records imported.");
            }, function (error) {
                _this.alert.error("Update_ManagedProgramDB_PortfolioChange_Import : async error #" + error.status);
            }, function () {
            });
        }, function (error) {
            _this.alert.error("XLayerImport_ManagedProgramDB : async error #" + error.status);
        }, function () {
        });
    };
    MpdbDatabaseUploadTool.prototype.purgePendings = function (groupTypeID, selectedRows, purgeAll) {
        var _this = this;
        this.apiService.executeNonQuery("ManagedProgramDB_CancelInstruction", JSON.stringify({ Parameters: [
                { Name: "@GroupTypeID", Value: groupTypeID },
                { Name: "@IDs", Value: selectedRows },
                { Name: "@User", Value: this.apiService.CurrentUser.LoginName },
                { Name: "@PurgeAll", Value: purgeAll ? 1 : 0 }]
        })).subscribe(function (res) {
            _this.showPendings(groupTypeID, false);
            _this.alert.addAlert(res + " pending items purged.");
        }, function (error) { _this.alert.error("ManagedProgramDB_CancelInstruction : async error #" + error.status); }, function () {
        });
    };
    MpdbDatabaseUploadTool.prototype.importInstructions = function (groupTypeID, selectedRows) {
        var _this = this;
        var checked = selectedRows.split(",").filter(Number).length;
        this.apiService.executeNonQuery("ManagedProgramDB_AddInstruction", JSON.stringify({ Parameters: [
                { Name: "@GroupTypeID", Value: groupTypeID },
                { Name: "@IDs", Value: selectedRows },
                { Name: "@User", Value: this.apiService.CurrentUser.LoginName }]
        })).subscribe(function (res) {
            if (res <= 0) {
                checked = res;
            }
            _this.showPendings(groupTypeID, false);
            _this.alert.addAlert(checked + " instruction inserted to system.");
        }, function (error) { _this.alert.error("ManagedProgramDB_AddInstruction : async error #" + error.status); }, function () {
        });
    };
    MpdbDatabaseUploadTool.prototype.showPendings = function (groupTypeID, sendMissedAccountAlertMail) {
        var _this = this;
        var uploadControl = this.formBuilder.data.find(function (x) { return x.name == "UploadControl"; });
        uploadControl.readOnly = true;
        this.apiService.getArrayFromQuery("ManagedProgramDB_GetPendings", JSON.stringify({ Parameters: [
                { Name: "@GroupTypeID", Value: groupTypeID },
                { Name: "@User", Value: this.apiService.CurrentUser.LoginName }]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res[0];
            if (res.length > 0 && res[0].length > 0) {
                _this.gridView.gridSettings.CustomButtons.forEach(function (x) { x.visible = true; });
                var messageBlock = [res[0].length + " pending items found."];
                if (res[1].length > 0) {
                    messageBlock = messageBlock.concat(_this.getDuplicatedAccounts(res[1]));
                }
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            else {
                uploadControl.readOnly = false;
                _this.gridView.gridSettings.CustomButtons.forEach(function (x) { x.visible = false; });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) { _this.alert.error("ManagedProgramDB_GetPendings : async error #" + error.status); }, function () {
        });
        this.updatedControlsList.push(this.gridView);
    };
    MpdbDatabaseUploadTool.prototype.getDuplicatedAccounts = function (dt) {
        var duplicatedAccounts = [];
        dt.forEach(function (x) {
            duplicatedAccounts.push(x.PortfolioNumber);
        });
        if (duplicatedAccounts.length > 0) {
            return "Duplicated accounts found and removed (" + duplicatedAccounts.join(", ") + ")";
        }
        else {
            return "";
        }
    };
    /* private getFormBuilderControlSelectedValue(controlName: string): any{
         var returnValue;
         var control = this.formBuilder.data.find(x=> x.name == controlName);
 
         var SelectedItem = control.masterdataSource.find(x=> x.ID == control.val);
         if(SelectedItem) {
             returnValue = SelectedItem.val;
         }
         return returnValue;
     }*/
    MpdbDatabaseUploadTool.prototype.getImportType = function (groupTypeID) {
        switch (groupTypeID) {
            case GROUP_TYPE.PIA:
                return 'PIA';
            case GROUP_TYPE.FP:
                return 'FP';
            case GROUP_TYPE.PIC:
                return 'PIC';
            default:
                return '';
        }
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], MpdbDatabaseUploadTool.prototype, "tabBuilderControl", void 0);
    MpdbDatabaseUploadTool = __decorate([
        core_1.Component({
            selector: 'databaseUploadTool',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof managedProgramDbService_1.ManagedProgramDbService !== 'undefined' && managedProgramDbService_1.ManagedProgramDbService) === 'function' && _c) || Object, (typeof (_d = typeof importExportService_1.ImportExportService !== 'undefined' && importExportService_1.ImportExportService) === 'function' && _d) || Object, (typeof (_e = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _e) || Object, (typeof (_f = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _f) || Object, (typeof (_g = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _g) || Object])
    ], MpdbDatabaseUploadTool);
    return MpdbDatabaseUploadTool;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.MpdbDatabaseUploadTool = MpdbDatabaseUploadTool;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDb.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var managedProgramDb_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDb.routes.ts");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var managedProgramDb_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDb.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var administration_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/administration/administration.module.ts");
var analysisConstructionTool_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/analysisConstructionTool/analysisConstructionTool.module.ts");
var databaseUploadTool_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/databaseUploadTool/databaseUploadTool.module.ts");
var reports_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/reports/reports.module.ts");
var tasks_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/tasks/tasks.module.ts");
var portfolio_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/portfolio/portfolio.module.ts");
var ManagedProgramDbModule = (function () {
    function ManagedProgramDbModule() {
    }
    ManagedProgramDbModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, managedProgramDb_routes_1.ManagedProgramDbRouting,
                administration_module_1.MpdbAdministrationModule, analysisConstructionTool_module_1.MpdbAnalysisConstructionToolModule, databaseUploadTool_module_1.MpdbDatabaseUploadToolModule,
                portfolio_module_1.MpdbPortfolioModule, reports_module_1.MpdbReportsModule, tasks_module_1.MpdbTasksModule
            ],
            declarations: [managedProgramDb_1.ManagedProgramDb],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], ManagedProgramDbModule);
    return ManagedProgramDbModule;
}());
exports.ManagedProgramDbModule = ManagedProgramDbModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDb.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var managedProgramDb_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDb.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ManagedProgramDbRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/ManagedProgramDb', component: managedProgramDb_1.ManagedProgramDb, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDb.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var ManagedProgramDb = (function () {
    function ManagedProgramDb(navigationService, alt, location) {
        this.navigationService = navigationService;
        this.alt = alt;
        this.location = location;
        this.childItems = [];
        this.alert = alt;
        // navigationService.setCurrentPage(location.path(false));
    }
    ManagedProgramDb.prototype.ngOnInit = function () {
        this.childItems = this.navigationService.getChildMenusForTileView('ManagedProgramDb');
    };
    ManagedProgramDb = __decorate([
        core_1.Component({
            selector: 'managedProgramDb',
            template: "\n    <tileView [menuItemsList]=\"childItems\"></tileView>\n"
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _c) || Object])
    ], ManagedProgramDb);
    return ManagedProgramDb;
    var _a, _b, _c;
}());
exports.ManagedProgramDb = ManagedProgramDb;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDbService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var ManagedProgramDbService = (function () {
    function ManagedProgramDbService(apiService) {
        this.apiService = apiService;
    }
    ManagedProgramDbService.prototype.checkBusinessValidations = function (inputRecords, pageName) {
        switch (pageName) {
            case "RebalEntryUploadDisplayGrid":
                inputRecords.forEach(function (x) {
                    var line = x;
                    x.cells.forEach(function (y) {
                        if (y.name.toLowerCase() == 'missed account' && y.val == true) {
                            line.checkBox.disabled = true;
                        }
                        else if (y.name.toLowerCase() == 'existing instruction' && y.val == true) {
                            line.checkBox.disabled = true;
                        }
                    });
                });
                break;
            case "RebalEntryAuditDisplayGrid":
                inputRecords.forEach(function (x) {
                    var line = x;
                    x.cells.forEach(function (y) {
                        if (y.name.toLowerCase() == 'reviewed' && y.val == true) {
                            line.checkBox.disabled = true;
                        }
                    });
                });
                break;
        }
    };
    ManagedProgramDbService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _a) || Object])
    ], ManagedProgramDbService);
    return ManagedProgramDbService;
    var _a;
}());
exports.ManagedProgramDbService = ManagedProgramDbService;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/portfolio/portfolio.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var portfolio_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/portfolio/portfolio.ts");
var portfolio_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/portfolio/portfolio.routes.ts");
var applicationsComponentsModule_1 = __webpack_require__("./src/app/Datahub/routes/applications/aplicationsComponents/applicationsComponentsModule.ts");
var MpdbPortfolioModule = (function () {
    function MpdbPortfolioModule() {
    }
    MpdbPortfolioModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, portfolio_routes_1.MpdbPortfolioRouting, applicationsComponentsModule_1.ApplicationsCommonModule
            ],
            declarations: [portfolio_1.MpdbPortfolio],
        }), 
        __metadata('design:paramtypes', [])
    ], MpdbPortfolioModule);
    return MpdbPortfolioModule;
}());
exports.MpdbPortfolioModule = MpdbPortfolioModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/portfolio/portfolio.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var portfolio_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/portfolio/portfolio.ts");
exports.MpdbPortfolioRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/ManagedProgramDb/MpdbPortfolio', component: portfolio_1.MpdbPortfolio, canActivate: [AuthGuard_1.AuthGuard] },
    { path: 'Datahub/Applications/Tools/ManagedProgramDb/MpdbPortfolio/:id', component: portfolio_1.MpdbPortfolio, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/portfolio/portfolio.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var editPortfolio_1 = __webpack_require__("./src/app/Datahub/routes/applications/aplicationsComponents/editPortfolio/editPortfolio.ts");
var MpdbPortfolio = (function () {
    function MpdbPortfolio(alert, vmMatrix, route) {
        this.alert = alert;
        this.vmMatrix = vmMatrix;
        this.route = route;
        this.updatedControlsList = [];
        this.customMessages = [];
        this.selectedMode = 'edit';
        this.modeSelections = [
            { Value: 'add', Description: 'Add Portfolio' },
            { Value: 'edit', Description: 'Edit Portfolio' }
        ];
    }
    MpdbPortfolio.prototype.ngOnInit = function () {
        var self = this;
        self.route.params.forEach(function (params) {
            self.key = params['key'];
        });
        if (self.key) {
            switch (self.key) {
                case "FP":
                    self.selectedSystemId = 18;
                    break;
                case "PIA":
                    self.selectedSystemId = 19;
                    break;
                case "PIC":
                    self.selectedSystemId = 23;
                    break;
            }
        }
    };
    MpdbPortfolio.prototype.ngOnDestroy = function () {
    };
    MpdbPortfolio.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    MpdbPortfolio.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        switch (tabInfo.TabKey) {
            case 'AddPortfolio':
                break;
            case 'EditPortfolio':
                break;
        }
    };
    __decorate([
        core_1.ViewChild(editPortfolio_1.EditPortfolio), 
        __metadata('design:type', (typeof (_a = typeof editPortfolio_1.EditPortfolio !== 'undefined' && editPortfolio_1.EditPortfolio) === 'function' && _a) || Object)
    ], MpdbPortfolio.prototype, "editPortfolioControl", void 0);
    MpdbPortfolio = __decorate([
        core_1.Component({
            selector: 'portfolio',
            template: "<template ngFor let-itemOption [ngForOf]=\"modeSelections\">\n                <span style=\"margin-right: 20px\"></span><input type=\"radio\" [checked]=\"(itemOption.Value === selectedMode)\"\n                       [value]=\"itemOption.Value\" name=\"modeSelector\" [(ngModel)]=\"selectedMode\">\n                <span>{{itemOption.Description}}</span>\n            </template>\n            <br/>\n        <editPortfolio [SystemId]=\"selectedSystemId\"></editPortfolio>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _c) || Object, (typeof (_d = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _d) || Object])
    ], MpdbPortfolio);
    return MpdbPortfolio;
    var _a, _b, _c, _d;
}());
exports.MpdbPortfolio = MpdbPortfolio;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/reports/reports.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ImplementChangePortfolioFormBuilderConfig = {
    CustomButtons: [
        {
            name: 'RunReport',
            value: 'Run Report',
            disabled: false,
            visible: true,
            formValidate: true
        },
        {
            name: 'Excel',
            value: 'Excel',
            disabled: true,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "SystemType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "System Type",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_GetGroupType", dbColumnName: "ID", displayColumnName: "Description", dbParameters: { Parameters: [{ Name: "@GroupTypeIDs", Value: "18,19,23" }] } },
            "dataSource": undefined,
        }, {
            "dbColumnName": "ReportType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Report to Run",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_Lookup",
                dbColumnName: "iRptPortfolioChangeInstruction", displayColumnName: "sRptPortfolioChangeInstruction",
                dbParameters: { Parameters: [{ Name: "@type", Value: 2 }, { Name: "@GroupId", Value: 0 }, { Name: "@LoginName", Value: "" }] } },
            "dataSource": undefined,
        }, {
            "dbColumnName": "YearToReport",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Year to Report",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_GetYears", dbColumnName: "Year", displayColumnName: "Year", dbParameters: { Parameters: [] } },
            "dataSource": undefined,
        }, {
            "dbColumnName": "FilterColumn",
            "htmlControlType": "customselect",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Filter Column",
            "dataSourceAddress": { dbColumnName: "Value", displayColumnName: "Description" },
            "dataSource": [{ Value: "@sProjectManager", Description: "Portfolio Manager" }, { Value: "@sAction", Description: "Action" }, { Value: "@sSource", Description: "Source" }, { Value: "@sObjectiveTransaction", Description: "Objective Transaction" }, { Value: "@sFMCObjectiveCode", Description: "FMC Objective Code" }, { Value: "@sNotes", Description: "Notes" }],
        }, {
            "dbColumnName": "FilterValue",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Filter Value",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "SelectionRule",
            "htmlControlType": "customselect",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Selection Rule",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_Lookup",
                dbColumnName: "id", displayColumnName: "name",
                dbParameters: { Parameters: [{ Name: "@type", Value: 4 }, { Name: "@GroupId", Value: 0 }, { Name: "@LoginName", Value: "" }] } },
            "dataSource": undefined,
        }, {
            "dbColumnName": "TraderName",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Trader Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "SelectionRuleCreate",
            "htmlControlType": "customselect",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Selection Rule",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_Lookup",
                dbColumnName: "id", displayColumnName: "name",
                dbParameters: { Parameters: [{ Name: "@type", Value: 4 }, { Name: "@GroupId", Value: 0 }, { Name: "@LoginName", Value: "" }] } },
            "dataSource": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["SystemType", "ReportType", "YearToReport"],
            "apiObject": undefined
        }]
};
exports.ImplementChangePortfolioDisplayGridConfig_2 = {
    ChildType: "",
    PrimaryKeyColumn: "Id",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    UseBusinessValidation: true,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Portfolio Number",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Portfolio Manager",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Manager",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Objective",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Objective",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Action",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Action",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Source",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Source",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "FMC Objective Code",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "FMC Objective Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Portfolio Ready",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Ready",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Trading List Executed",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trading List Executed",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Do Not Send Mail",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Do Not Send Mail",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Trading List Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trading List Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Notes",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Notes",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "portfolio_id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }]
};
exports.ImplementChangePortfolioDisplayGridConfig_4 = {
    ChildType: "",
    PrimaryKeyColumn: "Id",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    UseBusinessValidation: true,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Portfolio Number",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Portfolio Manager",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Manager",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Objective",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Objective",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Action",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Action",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Source",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Source",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "FMC Objective Code",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "FMC Objective Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Portfolio Ready",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Ready",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Trading List Executed",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trading List Executed",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Do Not Send Mail",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Do Not Send Mail",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Trading List Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trading List Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Notes",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Notes",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "portfolio_id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Last Change",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Last Change",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Duration (Days)",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Duration (Days)",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }]
};
exports.ImplementChangePortfolioDisplayGridConfig_5 = {
    ChildType: "",
    PrimaryKeyColumn: "Id",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    UseBusinessValidation: true,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Portfolio Number",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Portfolio Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Objective",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Objective",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Action",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Action",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Source",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Source",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Trading List Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trading List Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Notes",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Notes",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }]
};
exports.ImplementChangePortfolioDisplayGridConfig_6 = {
    ChildType: "",
    PrimaryKeyColumn: "Name",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    UseBusinessValidation: true,
    ColumnConfiguration: [{
            "dbColumnName": "Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Portfolio Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }]
};
exports.ImplementChangePortfolioDisplayGridConfig_7 = {
    ChildType: "",
    PrimaryKeyColumn: "Id",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    UseBusinessValidation: true,
    ColumnConfiguration: [{
            "dbColumnName": "Portfolio Number",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Portfolio Manager",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Manager",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Objective",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Objective",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Action",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Action",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Source",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Source",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "FMC Objective Code",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "FMC Objective Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Portfolio Ready",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Ready",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Trading List Executed",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trading List Executed",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Do Not Send Mail",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Do Not Send Mail",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Trading List Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trading List Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Notes",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Notes",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "portfolio_id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Queue to MPOWER",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Queue to MPOWER",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }]
};
exports.ImplementChangePortfolioDisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "Id",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    UseBusinessValidation: true,
    ColumnConfiguration: [{
            "dbColumnName": "Id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Portfolio Number",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Date",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Portfolio Manager",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Manager",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Objective",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Objective",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Action",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Action",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Source",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Source",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "FMC Objective Code",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "FMC Objective Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Portfolio Ready",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Ready",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Trading List Executed",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trading List Executed",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Do Not Send Mail",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Do Not Send Mail",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Trading List Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trading List Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Notes",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Notes",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "id",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }]
};
var ModelHoldingsDisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "PortfolioNumber",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Portfolio Number",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Portfolio Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Model",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Model",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }]
};
var ModulesReportFormBuilderConfig = {
    CustomButtons: [
        {
            name: 'Search',
            value: 'Search',
            disabled: false,
            visible: true,
            formValidate: true
        },
        {
            name: 'Excel',
            value: 'Excel',
            disabled: true,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "EquityModule",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Equity Module",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_GetModules", dbColumnName: "Id", displayColumnName: "Name", dbParameters: { Parameters: [{ Name: "@ModuleType", Value: "1" }] } },
            "dataSource": undefined,
        }, {
            "dbColumnName": "FixedIncomeModule",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Fixed Income Module",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_GetModules", dbColumnName: "Id", displayColumnName: "Name", dbParameters: { Parameters: [{ Name: "@ModuleType", Value: "2" }] } },
            "dataSource": undefined,
        }
    ]
};
var ModulesReportDisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "EquityModule",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Equity Module",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "FixedIncomeModule",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Fixed Income Module",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "PortfolioNumber",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "PortfolioName",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "PortfolioManager",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Manager",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Selected Equity Range",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "ApplyAssetCall",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Apply Asset Call",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "SelectedEquityRange",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Selected Equity Range ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "equitymoduleid",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Equity Module ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "fixedincomemoduleid",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Fixed Income Module ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": false,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }]
};
var PortfolioFormBuilderConfig = {
    CustomButtons: [
        {
            name: 'RunReport',
            value: 'Run Report',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "SystemType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "System Type",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_GetGroupType", dbColumnName: "ID", displayColumnName: "Description", dbParameters: { Parameters: [{ Name: "@GroupTypeIDs", Value: "18,19,23" }] } },
            "dataSource": undefined,
        }, {
            "dbColumnName": "ReportType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Report to Run",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_Lookup",
                dbColumnName: "iRptPortfolio", displayColumnName: "sRptPortfolio",
                dbParameters: { Parameters: [{ Name: "@type", Value: 1 }, { Name: "@GroupId", Value: 0 }, { Name: "@LoginName", Value: "" }] } },
            "dataSource": undefined,
        }, {
            "dbColumnName": "YearToReport",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Year to Report",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ManagedProgramDB_GetYears", dbColumnName: "Year", displayColumnName: "Year", dbParameters: { Parameters: [] } },
            "dataSource": undefined,
        }, {
            "dbColumnName": "PortfolioManager",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Portfolio Manager",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Notes",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Notes",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["SystemType", "ReportType", "YearToReport"],
            "apiObject": undefined
        }]
};
var PortfolioDisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsChildPage: false,
    IsScrollableGrid: true,
    ShowFilterRow: false,
    UseBusinessValidation: true,
    ColumnConfiguration: [{
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Portfolio Number",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Portfolio Manager",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio Manager",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "Projected AUM",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Projected AUM",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }, {
            "dbColumnName": "InceptionDate",
            "htmlControlType": "Date",
            "isVisible": true,
            "isRequired": true,
            "isComplexType": false,
            "displayName": "Inception Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Notes",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Notes",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
        }]
};
exports.MainControlConfig = {
    TabsList: [
        {
            TabKey: "ImplementChangePortfolio",
            TabName: "Implement Change Portfolio",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "ImplementChangePortfolioFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: ImplementChangePortfolioFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "ImplementChangePortfolioDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: exports.ImplementChangePortfolioDisplayGridConfig,
                    PageOperationType: 'view'
                }
            ]
        },
        {
            TabKey: "ModelHoldings",
            TabName: "Model Holdings Outside Modules",
            TabControls: [
                {
                    ShowDefault: false,
                    ComponentName: "ModelHoldingsDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: ModelHoldingsDisplayGridConfig,
                    PageOperationType: 'view'
                }
            ]
        },
        {
            TabKey: "ModulesReport",
            TabName: "Modules Report",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "ModulesReportFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: ModulesReportFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "ModulesReportDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: ModulesReportDisplayGridConfig,
                    PageOperationType: 'view'
                }
            ]
        },
        {
            TabKey: "Portfolio",
            TabName: "Portfolio",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "PortfolioFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: PortfolioFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "PortfolioDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: PortfolioDisplayGridConfig,
                    PageOperationType: 'view'
                }
            ]
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/reports/reports.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var reports_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/reports/reports.routes.ts");
var reports_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/reports/reports.ts");
var managedProgramDbService_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDbService.ts");
var MpdbReportsModule = (function () {
    function MpdbReportsModule() {
    }
    MpdbReportsModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, forms_1.FormsModule, SharedModule_1.SharedModule, reports_routes_1.MpdbReportsRouting
            ],
            declarations: [reports_1.MpdbReports],
            providers: [managedProgramDbService_1.ManagedProgramDbService]
        }), 
        __metadata('design:paramtypes', [])
    ], MpdbReportsModule);
    return MpdbReportsModule;
}());
exports.MpdbReportsModule = MpdbReportsModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/reports/reports.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var reports_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/reports/reports.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.MpdbReportsRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/ManagedProgramDb/MpdbReports', component: reports_1.MpdbReports, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/reports/reports.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var reports_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/reports/reports.config.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var managedProgramDbService_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDbService.ts");
var MpdbReports = (function () {
    function MpdbReports(alert, apiService, vmMatrix, mpdbService) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.mpdbService = mpdbService;
        this.tabsListData = [];
        this.tabControlConfig = reports_config_1.MainControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    MpdbReports.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    MpdbReports.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    MpdbReports.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    MpdbReports.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData, this.mpdbService);
    };
    MpdbReports.prototype.displayTabInfo = function (tabInfo) {
        this.gridView = null;
        this.formBuilder = null;
        this.customMessages = [];
        switch (tabInfo.TabKey) {
            case 'ImplementChangePortfolio':
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "ImplementChangePortfolioFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                    this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).val = this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).dataSource[1].Value;
                    this.formBuilder.data.find(function (x) { return x.name == "ReportType"; }).val = this.formBuilder.data.find(function (x) { return x.name == "ReportType"; }).dataSource[0].Value;
                    this.formBuilder.data.find(function (x) { return x.name == "YearToReport"; }).val = (new Date()).getFullYear().toString();
                    this.formBuilder.data.find(function (x) { return x.name == "FilterColumn"; }).val = "@sProjectManager";
                    this.formBuilder.data.find(function (x) { return x.name == "SelectionRule"; }).val = "0";
                    this.formBuilder.data.find(function (x) { return x.name == "SelectionRuleCreate"; }).val = "0";
                }
                this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "ImplementChangePortfolioDisplayGrid"; });
                if (this.gridView) {
                    this.gridView.ShowDefault = false;
                }
                break;
            case 'ModelHoldings':
                this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "ModelHoldingsDisplayGrid"; });
                if (this.gridView) {
                    this.gridView.ShowDefault = false;
                }
                this.showModelHoldings();
                break;
            case 'ModulesReport':
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "ModulesReportFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                    this.formBuilder.data.find(function (x) { return x.name == "EquityModule"; }).val = -1;
                    this.formBuilder.data.find(function (x) { return x.name == "FixedIncomeModule"; }).val = -1;
                }
                this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "ModulesReportDisplayGrid"; });
                if (this.gridView) {
                    this.gridView.ShowDefault = false;
                }
                break;
            case 'Portfolio':
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "PortfolioFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                    this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).val = this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).dataSource[1].Value;
                    this.formBuilder.data.find(function (x) { return x.name == "ReportType"; }).val = this.formBuilder.data.find(function (x) { return x.name == "ReportType"; }).dataSource[0].Value;
                    this.formBuilder.data.find(function (x) { return x.name == "YearToReport"; }).val = (new Date()).getFullYear().toString();
                }
                this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "PortfolioDisplayGrid"; });
                if (this.gridView) {
                    this.gridView.ShowDefault = false;
                }
                break;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    MpdbReports.prototype.doActionFromChildTab = function (outputData) {
        this.updatedControlsList = [];
        this.customMessages = [];
        switch (outputData.TabKey) {
            case 'ImplementChangePortfolio':
                this.implementChangePortfolioAction(outputData);
                break;
            case 'ModulesReport':
                this.modulesReportAction(outputData);
                break;
            case 'Portfolio':
                this.portfolioAction(outputData);
                break;
        }
    };
    MpdbReports.prototype.implementChangePortfolioAction = function (outputData) {
        switch (outputData.updatedValue.controlName) {
            case "ReportType":
                var reportType = this.formBuilder.data.find(function (x) { return x.name == "ReportType"; }).val;
                this.gridView.ShowDefault = false;
                switch (reportType) {
                    case "1":
                    case "3":
                        this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "ReportType"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "YearToReport"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "FilterColumn"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "FilterValue"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "SelectionRule"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "TraderName"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "SelectionRuleCreate"; }).isVisible = false;
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "ImplementChangePortfolio"; }).TabControls.find(function (c) { return c.ComponentName == "ImplementChangePortfolioDisplayGrid"; }).gridSettings = reports_config_1.ImplementChangePortfolioDisplayGridConfig;
                        break;
                    case "2":
                        this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "ReportType"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "YearToReport"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "FilterColumn"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "FilterValue"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "SelectionRule"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "TraderName"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "SelectionRuleCreate"; }).isVisible = false;
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "ImplementChangePortfolio"; }).TabControls.find(function (c) { return c.ComponentName == "ImplementChangePortfolioDisplayGrid"; }).gridSettings = reports_config_1.ImplementChangePortfolioDisplayGridConfig_2;
                        break;
                    case "4":
                        this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "ReportType"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "YearToReport"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "FilterColumn"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "FilterValue"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "SelectionRule"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "TraderName"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "SelectionRuleCreate"; }).isVisible = false;
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "ImplementChangePortfolio"; }).TabControls.find(function (c) { return c.ComponentName == "ImplementChangePortfolioDisplayGrid"; }).gridSettings = reports_config_1.ImplementChangePortfolioDisplayGridConfig_4;
                        break;
                    case "5":
                        this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "ReportType"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "YearToReport"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "FilterColumn"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "FilterValue"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "SelectionRule"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "TraderName"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "SelectionRuleCreate"; }).isVisible = false;
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "ImplementChangePortfolio"; }).TabControls.find(function (c) { return c.ComponentName == "ImplementChangePortfolioDisplayGrid"; }).gridSettings = reports_config_1.ImplementChangePortfolioDisplayGridConfig_5;
                        break;
                    case "6":
                        this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "ReportType"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "YearToReport"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "FilterColumn"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "FilterValue"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "SelectionRule"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "TraderName"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "SelectionRuleCreate"; }).isVisible = true;
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "ImplementChangePortfolio"; }).TabControls.find(function (c) { return c.ComponentName == "ImplementChangePortfolioDisplayGrid"; }).gridSettings = reports_config_1.ImplementChangePortfolioDisplayGridConfig_6;
                        break;
                    case "7":
                        this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "ReportType"; }).isVisible = true;
                        this.formBuilder.data.find(function (x) { return x.name == "YearToReport"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "FilterColumn"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "FilterValue"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "SelectionRule"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "TraderName"; }).isVisible = false;
                        this.formBuilder.data.find(function (x) { return x.name == "SelectionRuleCreate"; }).isVisible = false;
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "ImplementChangePortfolio"; }).TabControls.find(function (c) { return c.ComponentName == "ImplementChangePortfolioDisplayGrid"; }).gridSettings = reports_config_1.ImplementChangePortfolioDisplayGridConfig_7;
                        break;
                }
                break;
            case "RunReport":
                this.showImplementChangePortfolio();
                break;
        }
    };
    MpdbReports.prototype.modulesReportAction = function (outputData) {
        if (outputData.updatedValue.controlName == "Search") {
            this.showModulesReport();
        }
    };
    MpdbReports.prototype.portfolioAction = function (outputData) {
        if (outputData.updatedValue.controlName == "RunReport") {
            this.showPortfolio();
        }
    };
    MpdbReports.prototype.showImplementChangePortfolio = function () {
        var _this = this;
        var filterValue = this.formBuilder.data.find(function (x) { return x.name == "FilterValue"; }).val.replace('%', '[%]') + '%';
        var reportType = this.formBuilder.data.find(function (x) { return x.name == "ReportType"; }).val;
        var projectManager = this.formBuilder.data.find(function (x) { return x.name == "FilterColumn"; }).val == "@sProjectManager" ? filterValue : "";
        var action = this.formBuilder.data.find(function (x) { return x.name == "FilterColumn"; }).val == "@sAction" ? filterValue : "";
        var source = this.formBuilder.data.find(function (x) { return x.name == "FilterColumn"; }).val == "@sSource" ? filterValue : "";
        var notes = this.formBuilder.data.find(function (x) { return x.name == "FilterColumn"; }).val == "@sNotes" ? filterValue : "";
        var FMCObjectiveCode = this.formBuilder.data.find(function (x) { return x.name == "FilterColumn"; }).val == "@sFMCObjectiveCode" ? filterValue : "";
        var systemId = this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).val;
        var selectionId;
        switch (reportType) {
            case "5":
                selectionId = this.formBuilder.data.find(function (x) { return x.name == "SelectionRule"; }).val;
                break;
            case "6":
            case "7":
                selectionId = this.formBuilder.data.find(function (x) { return x.name == "SelectionRuleCreate"; }).val;
                break;
        }
        var lookupYear = this.formBuilder.data.find(function (x) { return x.name == "YearToReport"; }).val;
        var objectiveTransaction = this.formBuilder.data.find(function (x) { return x.name == "FilterColumn"; }).val == "@sObjectiveTransaction" ? filterValue : "";
        this.apiService.getArrayFromQuery("ManagedProgramDB_Report_PortfolioChangeRequest", JSON.stringify({
            Parameters: [
                { Name: "@type", Value: reportType },
                { Name: "@sProjectManager", Value: projectManager },
                { Name: "@sAction", Value: action },
                { Name: "@sSource", Value: source },
                { Name: "@sNotes", Value: notes },
                { Name: "@sFMCObjectiveCode", Value: FMCObjectiveCode },
                { Name: "@SystemId", Value: systemId },
                { Name: "@iSelectionId", Value: selectionId },
                { Name: "@LookupYear", Value: lookupYear },
                { Name: "@sObjectiveTransaction", Value: objectiveTransaction }]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("ManagedProgramDB_Report_PortfolioChangeRequest : async error #" + error.status);
        }, function () {
        });
    };
    MpdbReports.prototype.showModelHoldings = function () {
        var _this = this;
        this.apiService.getArrayFromQuery("ManagedProgramDb_PACTMissingPureModel").subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("ManagedProgramDb_PACTMissingPureModel : async error #" + error.status);
        }, function () {
        });
    };
    MpdbReports.prototype.showModulesReport = function () {
        var _this = this;
        var equityModuleID = this.formBuilder.data.find(function (x) { return x.name == "EquityModule"; }).val;
        var fixedIncomeModuleID = this.formBuilder.data.find(function (x) { return x.name == "FixedIncomeModule"; }).val;
        this.apiService.getArrayFromQuery("ManagedProgramDb_PACTModels", JSON.stringify({
            Parameters: [
                { Name: "@EquityModuleId", Value: equityModuleID },
                { Name: "@FixedIncomeModuleId", Value: fixedIncomeModuleID }]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("ManagedProgramDb_PACTModels : async error #" + error.status);
        }, function () {
        });
    };
    MpdbReports.prototype.showPortfolio = function () {
        var _this = this;
        var systemId = this.formBuilder.data.find(function (x) { return x.name == "SystemType"; }).val;
        var reportType = this.formBuilder.data.find(function (x) { return x.name == "ReportType"; }).val;
        var lookupYear = this.formBuilder.data.find(function (x) { return x.name == "YearToReport"; }).val;
        var projectManager = this.formBuilder.data.find(function (x) { return x.name == "PortfolioManager"; }).val;
        var notes = this.formBuilder.data.find(function (x) { return x.name == "Notes"; }).val;
        this.apiService.getArrayFromQuery("ManagedProgramDB_Report_Portfolio", JSON.stringify({
            Parameters: [
                { Name: "@type", Value: reportType },
                { Name: "@sProjectManager", Value: projectManager },
                { Name: "@sNotes", Value: notes },
                { Name: "@SystemId", Value: systemId },
                { Name: "@LookupYear", Value: lookupYear },
                { Name: "@LoginName", Value: this.apiService.CurrentUser.LoginName }]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("ManagedProgramDB_Report_Portfolio : async error #" + error.status);
        }, function () {
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], MpdbReports.prototype, "tabBuilderControl", void 0);
    MpdbReports = __decorate([
        core_1.Component({
            selector: 'reports',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object, (typeof (_e = typeof managedProgramDbService_1.ManagedProgramDbService !== 'undefined' && managedProgramDbService_1.ManagedProgramDbService) === 'function' && _e) || Object])
    ], MpdbReports);
    return MpdbReports;
    var _a, _b, _c, _d, _e;
}());
exports.MpdbReports = MpdbReports;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/tasks/tasks.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ImportNewAccountsFormBuilderConfig = {
    ColumnConfiguration: [],
    RulesConfig: []
};
var InitiateAutoUploadFormBuilderConfig = {
    ColumnConfiguration: [],
    RulesConfig: []
};
exports.TasksConfig = {
    TabsList: [
        {
            TabKey: "ImportNewAccounts",
            TabName: "Import New Accounts",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "ImportNewAccountsFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: ImportNewAccountsFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                }
            ],
        }, {
            TabKey: "InitiateAutoUpload",
            TabName: "Initiate Auto Upload",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "InitiateAutoUploadFormBuilder",
                    PageType: "formbuilder",
                    gridSettings: InitiateAutoUploadFormBuilderConfig,
                    PageOperationType: 'dynamicform'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/tasks/tasks.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var tasks_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/tasks/tasks.ts");
var tasks_rotes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/tasks/tasks.rotes.ts");
var MpdbTasksModule = (function () {
    function MpdbTasksModule() {
    }
    MpdbTasksModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, tasks_rotes_1.MpdbTasksRouting
            ],
            declarations: [tasks_1.MpdbTasks],
        }), 
        __metadata('design:paramtypes', [])
    ], MpdbTasksModule);
    return MpdbTasksModule;
}());
exports.MpdbTasksModule = MpdbTasksModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/tasks/tasks.rotes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var tasks_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/tasks/tasks.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.MpdbTasksRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools/ManagedProgramDb/MpdbTasks', component: tasks_1.MpdbTasks, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/managedProgramDb/tasks/tasks.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var managedProgramDbService_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDbService.ts");
var tasks_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/tasks/tasks.config.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var MpdbTasks = (function () {
    function MpdbTasks(alert, apiService, vmMatrix, mpdbService) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.mpdbService = mpdbService;
        this.tabsListData = [];
        this.tabControlConfig = tasks_config_1.TasksConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    MpdbTasks.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    MpdbTasks.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    MpdbTasks.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    MpdbTasks.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData, this.mpdbService);
    };
    MpdbTasks.prototype.displayTabInfo = function (tabInfo) {
        this.formBuilder = null;
        this.customMessages = [];
        switch (tabInfo.TabKey) {
            case 'ImportNewAccounts':
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "ImportNewAccountsFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                }
                break;
            case 'InitiateAutoUpload':
                this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "InitiateAutoUploadFormBuilder"; });
                if (this.formBuilder) {
                    this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
                }
                break;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], MpdbTasks.prototype, "tabBuilderControl", void 0);
    MpdbTasks = __decorate([
        core_1.Component({
            selector: 'tasks',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object, (typeof (_e = typeof managedProgramDbService_1.ManagedProgramDbService !== 'undefined' && managedProgramDbService_1.ManagedProgramDbService) === 'function' && _e) || Object])
    ], MpdbTasks);
    return MpdbTasks;
    var _a, _b, _c, _d, _e;
}());
exports.MpdbTasks = MpdbTasks;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/tools.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var tools_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/tools.ts");
var tools_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/tools.routes.ts");
var bloombergAIM_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/bloombergAIM/bloombergAIM.module.ts");
var managedProgramDb_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/managedProgramDb/managedProgramDb.module.ts");
var benchMarkIndex_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/benchMarkIndex/benchMarkIndex.module.ts");
var ToolsModule = (function () {
    function ToolsModule() {
    }
    ToolsModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, tools_routes_1.ToolsRouting, benchMarkIndex_module_1.BenchMarkIndexModule,
                bloombergAIM_module_1.BloombergAIMModule, managedProgramDb_module_1.ManagedProgramDbModule
            ],
            declarations: [tools_1.Tools],
        }), 
        __metadata('design:paramtypes', [])
    ], ToolsModule);
    return ToolsModule;
}());
exports.ToolsModule = ToolsModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/tools.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var tools_1 = __webpack_require__("./src/app/Datahub/routes/applications/tools/tools.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.ToolsRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/Tools', component: tools_1.Tools, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tools/tools.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var Tools = (function () {
    function Tools(navService, location) {
        this.navService = navService;
        this.location = location;
        /*this.navService.getChildMenu(['Applications','Tools']);
        navService.setCurrentPage(location.path(false));
        let links= this.navService.getLeftMenuRoutes(['Tools']);
        this.navService.NavigateToPage(links,null);*/
    }
    Tools = __decorate([
        core_1.Component({
            selector: 'tools',
            template: ""
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _b) || Object])
    ], Tools);
    return Tools;
    var _a, _b;
}());
exports.Tools = Tools;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/bloombergTrades.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var bloombergTrades_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/bloombergTrades.routes.ts");
var bloombergTrades_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/bloombergTrades.ts");
var postingsByDate_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/postingsByDate/postingsByDate.module.ts");
var BloombergTradesModule = (function () {
    function BloombergTradesModule() {
    }
    BloombergTradesModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, bloombergTrades_routes_1.BloombergTradesRouting, postingsByDate_module_1.PostingsByDateModule
            ],
            declarations: [bloombergTrades_1.BloombergTrades],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], BloombergTradesModule);
    return BloombergTradesModule;
}());
exports.BloombergTradesModule = BloombergTradesModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/bloombergTrades.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var bloombergTrades_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/bloombergTrades.ts");
exports.BloombergTradesRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports/BloombergTrades', component: bloombergTrades_1.BloombergTrades, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/bloombergTrades.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var BloombergTrades = (function () {
    function BloombergTrades(navigationService, alt, location) {
        this.navigationService = navigationService;
        this.alt = alt;
        this.location = location;
        this.childItems = [];
        this.alert = alt;
    }
    BloombergTrades.prototype.ngOnInit = function () {
        this.childItems = this.navigationService.getChildMenusForTileView('BloombergTrades');
    };
    BloombergTrades = __decorate([
        core_1.Component({
            selector: 'bloombergTrades',
            template: "<tileView [menuItemsList]=\"childItems\"></tileView>"
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _c) || Object])
    ], BloombergTrades);
    return BloombergTrades;
    var _a, _b, _c;
}());
exports.BloombergTrades = BloombergTrades;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/postingsByDate/postingsByDate.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'RunReport',
            value: 'Run Report',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "ReportDate",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Report Date",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/BloombergTradesPostDates", dbColumnName: "AddDate", displayColumnName: "AddDate", dbParameters: { Parameters: [] } },
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ProductGroup",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Product Group",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/BloombergProductGroups", dbColumnName: "Name", displayColumnName: "Name", dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "PortfolioType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Portfolio Type",
            "dataSourceAddress": { dbColumnName: "Value", displayColumnName: "Description" },
            "dataSource": [{ Value: "", Description: "All" }, { Value: "1", Description: "IO Active" }],
            "regex": undefined
        }, {
            "dbColumnName": "Portfolio",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Portfolio",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/BloombergPortfolios", dbColumnName: "Bloom", displayColumnName: "Bloom", dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "CustodianAccount",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Custodian Account",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/BloombergCustodianAccounts", dbColumnName: "CustodianAccount", displayColumnName: "CustodianAccount", dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "CustodianBulkAccount",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Custodian Bulk Account",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/BloombergCustodianBulkAccounts", dbColumnName: "CustodianBulkAccount", displayColumnName: "CustodianBulkAccount", dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Status",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Status",
            "dataSourceAddress": { dbColumnName: "Value", displayColumnName: "Description" },
            "dataSource": [{ Value: "0", Description: "All" }, { Value: "1", Description: "Accepted" }, { Value: "2", Description: "Rejected" }],
            "regex": undefined
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        },
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        }]
};
var DetailsDisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Core ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ProductGroup",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Product Group",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TraderName",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "CustodianAccount",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Custodian Account",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "CustodianBulkAccount",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Custodian Bulk Account",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "LongNote",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Long Note",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TransactionNumber",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Transaction Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SecurityId",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "BbId",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Bloomberg Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "BbUniqueId",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Bloomberg Unique Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Currency",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Currency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Side",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Side",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Price",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Price",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IndexRatio",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Index Ratio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Yield",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Yield",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "DiscountRate",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Discount Rate",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeAmount",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Amount",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Account",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Account",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SystemTradeTime",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "System Trade Time",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ExportDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Export Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }]
};
var SummaryDisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Core ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ProductGroup",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Product Group",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TraderName",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "CustodianAccount",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Custodian Account",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "CustodianBulkAccount",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Custodian Bulk Account",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TransactionNumber",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Transaction Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOAccountID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Account ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOSecurityID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Security ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOBrokerID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Broker ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO TranID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOExportDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Export Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "IOStatus",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOMessages",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.PostingsByDateControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ComponentTitle: "Details",
                    ShowDefault: false,
                    ComponentName: "DetailsDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: DetailsDisplayGridConfig,
                    PageOperationType: 'view'
                },
                {
                    ComponentTitle: "Summary",
                    ShowDefault: false,
                    ComponentName: "SummaryDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: SummaryDisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/postingsByDate/postingsByDate.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var postingsByDate_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/postingsByDate/postingsByDate.routes.ts");
var postingsByDate_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/postingsByDate/postingsByDate.ts");
var PostingsByDateModule = (function () {
    function PostingsByDateModule() {
    }
    PostingsByDateModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, postingsByDate_routes_1.PostingsByDateRouting
            ],
            declarations: [postingsByDate_1.PostingsByDate],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], PostingsByDateModule);
    return PostingsByDateModule;
}());
exports.PostingsByDateModule = PostingsByDateModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/postingsByDate/postingsByDate.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var postingsByDate_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/postingsByDate/postingsByDate.ts");
exports.PostingsByDateRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports/BloombergTrades/PostingsByDate', component: postingsByDate_1.PostingsByDate, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/postingsByDate/postingsByDate.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var postingsByDate_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/postingsByDate/postingsByDate.config.ts");
var PostingsByDate = (function () {
    function PostingsByDate(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = postingsByDate_config_1.PostingsByDateControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    PostingsByDate.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    PostingsByDate.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    PostingsByDate.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    PostingsByDate.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    PostingsByDate.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).dataSource[0].Value;
            this.formBuilder.data.find(function (x) { return x.name == "ProductGroup"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "PortfolioType"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "Portfolio"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "CustodianAccount"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "CustodianBulkAccount"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "Status"; }).val = "0";
        }
        this.detailsGridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DetailsDisplayGrid"; });
        if (this.detailsGridView) {
            this.detailsGridView.ShowDefault = false;
        }
        this.summaryGridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "SummaryDisplayGrid"; });
        if (this.summaryGridView) {
            this.summaryGridView.ShowDefault = false;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    PostingsByDate.prototype.doActionFromChildTab = function (outputData) {
        this.updatedControlsList = [];
        this.customMessages = [];
        if (outputData.updatedValue.controlName == "RunReport") {
            this.showReport();
        }
    };
    PostingsByDate.prototype.showReport = function () {
        var _this = this;
        var selectedDate = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val;
        var status = this.formBuilder.data.find(function (x) { return x.name == "Status"; }).val;
        var portfolioType = this.formBuilder.data.find(function (x) { return x.name == "PortfolioType"; }).val;
        var productGroup = this.formBuilder.data.find(function (x) { return x.name == "ProductGroup"; }).val;
        var portfolio = this.formBuilder.data.find(function (x) { return x.name == "Portfolio"; }).val;
        var custodianAccount = this.formBuilder.data.find(function (x) { return x.name == "CustodianAccount"; }).val;
        var custodianBulkAccount = this.formBuilder.data.find(function (x) { return x.name == "CustodianBulkAccount"; }).val;
        var apiParams = [
            { url: "BloombergTradesReportDetails",
                body: {
                    Parameters: [
                        { Name: "@Date", Value: selectedDate },
                        { Name: "@iStatus", Value: status },
                        { Name: "@sPortfolioType", Value: portfolioType },
                        { Name: "@sProductGroup", Value: productGroup },
                        { Name: "@sPortfolio", Value: portfolio },
                        { Name: "@sCustodianAccount", Value: custodianAccount },
                        { Name: "@sCustodianBulkAccount", Value: custodianBulkAccount }
                    ]
                }
            },
            { url: "BloombergTradesReportSummary",
                body: {
                    Parameters: [
                        { Name: "@Date", Value: selectedDate },
                        { Name: "@iStatus", Value: status },
                        { Name: "@sPortfolioType", Value: portfolioType },
                        { Name: "@sProductGroup", Value: productGroup },
                        { Name: "@sPortfolio", Value: portfolio },
                        { Name: "@sCustodianAccount", Value: custodianAccount },
                        { Name: "@sCustodianBulkAccount", Value: custodianBulkAccount }
                    ]
                }
            }
        ];
        this.apiService.getMultipleArrayFromQuery(apiParams).subscribe(function (res) {
            _this.detailsGridView.ShowDefault = true;
            _this.detailsGridView.data = res[0];
            var nAccepted = res[0].filter(function (x) { return x.Status == "[A]"; }).length;
            var nRejected = res[0].filter(function (x) { return x.Status == "[N]"; }).length;
            var nXRefError = res[0].filter(function (x) { return x.Status == "[X]"; }).length;
            if (res[0].length > 0) {
                var messageBlock = ["Total Allocations", "Received: " + res[0].length, "Accepted: " + nAccepted, "Rejected: " + nRejected, "XRef Errors: " + nXRefError];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.summaryGridView.ShowDefault = true;
            _this.summaryGridView.data = res[1];
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("BloombergTradesReportDetails : async error #" + error.status);
        }, function () {
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], PostingsByDate.prototype, "tabBuilderControl", void 0);
    PostingsByDate = __decorate([
        core_1.Component({
            selector: 'postingsByDate',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], PostingsByDate);
    return PostingsByDate;
    var _a, _b, _c, _d;
}());
exports.PostingsByDate = PostingsByDate;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/excelTrades/excelTrades.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var excelTrades_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/excelTrades/excelTrades.routes.ts");
var excelTrades_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/excelTrades/excelTrades.ts");
var postingsByDateTrader_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/excelTrades/postingsByDateTrader/postingsByDateTrader.module.ts");
var ExcelTradesModule = (function () {
    function ExcelTradesModule() {
    }
    ExcelTradesModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, excelTrades_routes_1.ExcelTradesRouting, postingsByDateTrader_module_1.PostingsByDateTraderModule
            ],
            declarations: [excelTrades_1.ExcelTrades],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], ExcelTradesModule);
    return ExcelTradesModule;
}());
exports.ExcelTradesModule = ExcelTradesModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/excelTrades/excelTrades.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var excelTrades_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/excelTrades/excelTrades.ts");
exports.ExcelTradesRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports/ExcelTrades', component: excelTrades_1.ExcelTrades, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/excelTrades/excelTrades.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var ExcelTrades = (function () {
    function ExcelTrades(navigationService, alt, location) {
        this.navigationService = navigationService;
        this.alt = alt;
        this.location = location;
        this.childItems = [];
        this.alert = alt;
    }
    ExcelTrades.prototype.ngOnInit = function () {
        this.childItems = this.navigationService.getChildMenusForTileView('ExcelTrades');
    };
    ExcelTrades = __decorate([
        core_1.Component({
            selector: 'excelTrades',
            template: "<tileView [menuItemsList]=\"childItems\"></tileView>"
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _c) || Object])
    ], ExcelTrades);
    return ExcelTrades;
    var _a, _b, _c;
}());
exports.ExcelTrades = ExcelTrades;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/excelTrades/postingsByDateTrader/postingsByDateTrader.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'RunReport',
            value: 'Run Report',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "TradeType",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Trade Type",
            "dataSourceAddress": { dbColumnName: "Value", displayColumnName: "Description" },
            "dataSource": [{ Value: "B", Description: "Bond" }, { Value: "E", Description: "Equities" }, { Value: "F", Description: "Futures" }, { Value: "FX", Description: "FX" }, { Value: "MF", Description: "Mutual Fund" }, { Value: "CP", Description: "CPR Trades" }],
            "regex": undefined
        }, {
            "dbColumnName": "ReportDate",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Report Date",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/ExcelTradesPostDates", dbColumnName: "PostDate", displayColumnName: "PostDate", dbParameters: { Parameters: [{ Name: "@TraderID", Value: "" }] } },
            "dataSource": undefined,
            "regex": undefined
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        },
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        }]
};
exports.DetailsDisplayGridConfig_B = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOStatus",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Memo No",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SecurityName",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOAcct",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TransType",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trans Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Price",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Price",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Shares",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "# of Shares",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Principal",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Principal",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Interest",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Interest",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SettleAmount",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Amount",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Messages",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOMessages",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.SummaryDisplayGridConfig_B = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOStatus",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TranMode",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Mode",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TransType",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trans Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "CUSIP",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security No",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SEDOL",
            "htmlControlType": "date",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "SEDOL",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "IOAcct",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Memo No",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Core Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.DetailsDisplayGridConfig_E = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOStatus",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Memo No",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SecurityID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOAcct",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TransType",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trans Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleCurrency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Currency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SettleAmount",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Amount",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Price",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Price",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Shares",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "# of Shares",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Principal",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Principal",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Commission",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Commission",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Messages",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOMessages",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.SummaryDisplayGridConfig_E = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOStatus",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TranMode",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Mode",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TransType",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trans Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SecurityID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "IOAcct",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Memo No",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Core Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.DetailsDisplayGridConfig_F = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOStatus",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Memo No",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SecurityID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOAcct",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TransType",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trans Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ClearBroker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Clr. Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Price",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Price",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Shares",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "# of Shares",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Messages",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOMessages",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.SummaryDisplayGridConfig_F = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOStatus",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TranMode",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Mode",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TransType",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trans Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SecurityID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "IOAcct",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Memo No",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Core Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.DetailsDisplayGridConfig_FX = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOStatus",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Memo No",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SecurityID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOAcct",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TransType",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trans Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "BuyCurrency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Buy Currency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "BuyShares",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Buy Qty",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SettleCurrency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Sell Currency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Principal",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Sell Qty",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Messages",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOMessages",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.SummaryDisplayGridConfig_FX = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOStatus",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TranMode",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Mode",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TransType",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trans Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "BuyCurrency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "IOAcct",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Memo No",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Core Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.DetailsDisplayGridConfig_MF = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOStatus",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Memo No",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SecurityID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOAcct",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TransType",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trans Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleCurrency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Currency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SettleAmount",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Amount",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Price",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Price",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Shares",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "# of Shares",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Principal",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Principal",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Commission",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Commission",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Messages",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOMessages",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.SummaryDisplayGridConfig_MF = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": false,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOStatus",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TranMode",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Mode",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TransType",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trans Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SecurityID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "IOAcct",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Memo No",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Core Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.PostingsByDateTraderControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ComponentTitle: "Details",
                    ShowDefault: false,
                    ComponentName: "DetailsDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: exports.DetailsDisplayGridConfig_B,
                    PageOperationType: 'view'
                },
                {
                    ComponentTitle: "Summary",
                    ShowDefault: false,
                    ComponentName: "SummaryDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: exports.SummaryDisplayGridConfig_B,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/excelTrades/postingsByDateTrader/postingsByDateTrader.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var postingsByDateTrader_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/excelTrades/postingsByDateTrader/postingsByDateTrader.routes.ts");
var postingsByDateTrader_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/excelTrades/postingsByDateTrader/postingsByDateTrader.ts");
var PostingsByDateTraderModule = (function () {
    function PostingsByDateTraderModule() {
    }
    PostingsByDateTraderModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, postingsByDateTrader_routes_1.PostingsByDateTraderRouting
            ],
            declarations: [postingsByDateTrader_1.PostingsByDateTrader],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], PostingsByDateTraderModule);
    return PostingsByDateTraderModule;
}());
exports.PostingsByDateTraderModule = PostingsByDateTraderModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/excelTrades/postingsByDateTrader/postingsByDateTrader.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var postingsByDateTrader_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/excelTrades/postingsByDateTrader/postingsByDateTrader.ts");
exports.PostingsByDateTraderRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports/ExcelTrades/PostingsByDateTrader', component: postingsByDateTrader_1.PostingsByDateTrader, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/excelTrades/postingsByDateTrader/postingsByDateTrader.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var postingsByDateTrader_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/excelTrades/postingsByDateTrader/postingsByDateTrader.config.ts");
var PostingsByDateTrader = (function () {
    function PostingsByDateTrader(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = postingsByDateTrader_config_1.PostingsByDateTraderControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    PostingsByDateTrader.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    PostingsByDateTrader.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    PostingsByDateTrader.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    PostingsByDateTrader.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    PostingsByDateTrader.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            this.formBuilder.data.find(function (x) { return x.name == "TradeType"; }).val = "B";
            this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).dataSource[0].Value;
        }
        this.detailsGridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DetailsDisplayGrid"; });
        if (this.detailsGridView) {
            this.detailsGridView.ShowDefault = false;
        }
        this.summaryGridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "SummaryDisplayGrid"; });
        if (this.summaryGridView) {
            this.summaryGridView.ShowDefault = false;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    PostingsByDateTrader.prototype.doActionFromChildTab = function (outputData) {
        this.updatedControlsList = [];
        this.customMessages = [];
        switch (outputData.updatedValue.controlName) {
            case "TradeType":
                var tradeType = this.formBuilder.data.find(function (x) { return x.name == "TradeType"; }).val;
                this.detailsGridView.ShowDefault = false;
                this.summaryGridView.ShowDefault = false;
                switch (tradeType) {
                    case "B":
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "OneTab"; }).TabControls.find(function (c) { return c.ComponentName == "DetailsDisplayGrid"; }).gridSettings = postingsByDateTrader_config_1.DetailsDisplayGridConfig_B;
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "OneTab"; }).TabControls.find(function (c) { return c.ComponentName == "SummaryDisplayGrid"; }).gridSettings = postingsByDateTrader_config_1.SummaryDisplayGridConfig_B;
                        break;
                    case "E":
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "OneTab"; }).TabControls.find(function (c) { return c.ComponentName == "DetailsDisplayGrid"; }).gridSettings = postingsByDateTrader_config_1.DetailsDisplayGridConfig_E;
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "OneTab"; }).TabControls.find(function (c) { return c.ComponentName == "SummaryDisplayGrid"; }).gridSettings = postingsByDateTrader_config_1.SummaryDisplayGridConfig_E;
                        break;
                    case "F":
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "OneTab"; }).TabControls.find(function (c) { return c.ComponentName == "DetailsDisplayGrid"; }).gridSettings = postingsByDateTrader_config_1.DetailsDisplayGridConfig_F;
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "OneTab"; }).TabControls.find(function (c) { return c.ComponentName == "SummaryDisplayGrid"; }).gridSettings = postingsByDateTrader_config_1.SummaryDisplayGridConfig_F;
                        break;
                    case "FX":
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "OneTab"; }).TabControls.find(function (c) { return c.ComponentName == "DetailsDisplayGrid"; }).gridSettings = postingsByDateTrader_config_1.DetailsDisplayGridConfig_FX;
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "OneTab"; }).TabControls.find(function (c) { return c.ComponentName == "SummaryDisplayGrid"; }).gridSettings = postingsByDateTrader_config_1.SummaryDisplayGridConfig_FX;
                        break;
                    case "MF":
                    case "CP":
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "OneTab"; }).TabControls.find(function (c) { return c.ComponentName == "DetailsDisplayGrid"; }).gridSettings = postingsByDateTrader_config_1.DetailsDisplayGridConfig_MF;
                        this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "OneTab"; }).TabControls.find(function (c) { return c.ComponentName == "SummaryDisplayGrid"; }).gridSettings = postingsByDateTrader_config_1.SummaryDisplayGridConfig_MF;
                        break;
                }
                break;
            case "RunReport":
                this.showReport();
                break;
        }
    };
    PostingsByDateTrader.prototype.showReport = function () {
        var _this = this;
        var sDate = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val;
        var sType = this.formBuilder.data.find(function (x) { return x.name == "TradeType"; }).val;
        this.apiService.getArrayFromQuery("ExcelTradesReport", JSON.stringify({
            Parameters: [
                { Name: "@Date", Value: sDate },
                { Name: "@Type", Value: sType },
                { Name: "@User", Value: "" }
            ]
        })).subscribe(function (res) {
            res.forEach(function (x) {
                x.Messages = (x.Messages == null ? "" : x.Messages) + (x.Messages != null && x.IOMessages != null ? " " : "") + (x.IOMessages == null ? "" : x.IOMessages);
                if (x.IOExportDate != null && x.IOTranID != null && x.IOTranID != 0) {
                    x.Status = "[A]";
                    x.IOStatus = "ACCEPTED";
                    x.Messages = "";
                }
                else if (x.ExportDate != null && x.IOExportDate == null && x.IOStatus == null && x.IOMessages == null) {
                    x.Status = "[N]";
                    x.IOStatus = "NOT SENT";
                }
                else if (x.Messages.indexOf("XRef Error") >= 0 || x.IOMessages.indexOf("XRef Error") >= 0) {
                    x.Status = "[X]";
                    x.IOStatus = "XREF ERROR";
                }
                else {
                    x.Status = "[R]";
                    x.IOStatus = "REJECTED";
                }
                switch (x.TranMode) {
                    case 0:
                        x.TranMode = "New Posting";
                        break;
                    case 1:
                        x.TranMode = "Cancellation";
                        break;
                    case 2:
                        x.TranMode = "Update";
                        break;
                    case 3:
                        x.TranMode = "Update Canc.";
                        break;
                    default:
                        x.TranMode = "Unknown Mode";
                        break;
                }
                if (x.CUSIP == null || x.CUSIP == "") {
                    x.CUSIP = x.SEDOL;
                }
                if (sType == "FX") {
                    x.SecurityID = x.BuyCurrency;
                    if (x.BuyCurrency.indexOf("CCT") == 0) {
                        x.BuyCurrency = x.BuyCurrency.substring(3);
                    }
                }
            });
            _this.detailsGridView.ShowDefault = true;
            _this.detailsGridView.data = res;
            var nAccepted = res.filter(function (x) { return x.Status == "[A]"; }).length;
            var nRejected = res.filter(function (x) { return x.Status == "[N]" || x.Status == "[R]"; }).length;
            var nXRefError = res.filter(function (x) { return x.Status == "[X]"; }).length;
            if (res.length > 0) {
                var messageBlock = ["Total Allocations", "Received: " + res.length, "Accepted: " + nAccepted, "Rejected: " + nRejected, "XRef Errors: " + nXRefError];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.summaryGridView.ShowDefault = true;
            _this.summaryGridView.data = res;
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("ExcelTradesReport : async error #" + error.status);
        }, function () {
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], PostingsByDateTrader.prototype, "tabBuilderControl", void 0);
    PostingsByDateTrader = __decorate([
        core_1.Component({
            selector: 'postingsByDateTrader',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], PostingsByDateTrader);
    return PostingsByDateTrader;
    var _a, _b, _c, _d;
}());
exports.PostingsByDateTrader = PostingsByDateTrader;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/globalLink/globalLink.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var globalLink_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/globalLink/globalLink.routes.ts");
var globalLink_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/globalLink/globalLink.ts");
var postingsByDate_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/globalLink/postingsByDate/postingsByDate.module.ts");
var GlobalLinkModule = (function () {
    function GlobalLinkModule() {
    }
    GlobalLinkModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, globalLink_routes_1.GlobalLinkRouting, postingsByDate_module_1.PostingsByDateModule
            ],
            declarations: [globalLink_1.GlobalLink],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], GlobalLinkModule);
    return GlobalLinkModule;
}());
exports.GlobalLinkModule = GlobalLinkModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/globalLink/globalLink.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var globalLink_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/globalLink/globalLink.ts");
exports.GlobalLinkRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports/GlobalLink', component: globalLink_1.GlobalLink, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/globalLink/globalLink.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var GlobalLink = (function () {
    function GlobalLink(navigationService, alt, location) {
        this.navigationService = navigationService;
        this.alt = alt;
        this.location = location;
        this.childItems = [];
        this.alert = alt;
    }
    GlobalLink.prototype.ngOnInit = function () {
        this.childItems = this.navigationService.getChildMenusForTileView('GlobalLink');
    };
    GlobalLink = __decorate([
        core_1.Component({
            selector: 'globalLink',
            template: "<tileView [menuItemsList]=\"childItems\"></tileView>"
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _c) || Object])
    ], GlobalLink);
    return GlobalLink;
    var _a, _b, _c;
}());
exports.GlobalLink = GlobalLink;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/globalLink/postingsByDate/postingsByDate.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'RunReport',
            value: 'Run Report',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "ReportDate",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Report Date",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/GlobalLinkTradeReportDates", dbColumnName: "ImportDate", displayColumnName: "ImportDate", dbParameters: { Parameters: [] } },
            "dataSource": undefined,
            "regex": undefined
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        },
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["ReportDate"],
            "apiObject": undefined
        }]
};
var DisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "AccountNumber",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Acct",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Messages",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ExportDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Export Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "ExternalLayerID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Xtrl Layer ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Core ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TranMode",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Tran Mode",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Principal",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Principal",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ExchangeRate",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Exchange Rate",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "BuyCurrency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Buy Currency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "BuyQuantity",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Buy Quantity",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SellCurrency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Sell Currency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SellQuantity",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Sell Quantity",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO TranID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOExportDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Export Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "IOStatus",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOMessages",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TDAMUSAIOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "TDAM USA IO TranID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TDAMUSAIOExportDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "TDAM USA IO Export Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "TDAMUSAIOStatus",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "TDAM USA IO Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TDAMUSAIOMessages",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "TDAM USA IO Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.PostingsByDateControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "DisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: DisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/globalLink/postingsByDate/postingsByDate.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var postingsByDate_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/globalLink/postingsByDate/postingsByDate.routes.ts");
var postingsByDate_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/globalLink/postingsByDate/postingsByDate.ts");
var PostingsByDateModule = (function () {
    function PostingsByDateModule() {
    }
    PostingsByDateModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, postingsByDate_routes_1.PostingsByDateRouting
            ],
            declarations: [postingsByDate_1.PostingsByDate],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], PostingsByDateModule);
    return PostingsByDateModule;
}());
exports.PostingsByDateModule = PostingsByDateModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/globalLink/postingsByDate/postingsByDate.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var postingsByDate_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/globalLink/postingsByDate/postingsByDate.ts");
exports.PostingsByDateRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports/GlobalLink/PostingsByDate', component: postingsByDate_1.PostingsByDate, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/globalLink/postingsByDate/postingsByDate.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var postingsByDate_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/globalLink/postingsByDate/postingsByDate.config.ts");
var PostingsByDate = (function () {
    function PostingsByDate(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = postingsByDate_config_1.PostingsByDateControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    PostingsByDate.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    PostingsByDate.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    PostingsByDate.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    PostingsByDate.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    PostingsByDate.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).dataSource[0].Value;
        }
        this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DisplayGrid"; });
        if (this.gridView) {
            this.gridView.ShowDefault = false;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    PostingsByDate.prototype.doActionFromChildTab = function (outputData) {
        this.updatedControlsList = [];
        this.customMessages = [];
        if (outputData.updatedValue.controlName == "RunReport") {
            this.showReport();
        }
    };
    PostingsByDate.prototype.showReport = function () {
        var _this = this;
        var selectedDate = this.formBuilder.data.find(function (x) { return x.name == "ReportDate"; }).val;
        this.apiService.getArrayFromQuery("GlobalLinkTradeReport", JSON.stringify({
            Parameters: [{ Name: "@Date", Value: selectedDate }]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("GlobalLinkTradeReport : async error #" + error.status);
        }, function () {
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], PostingsByDate.prototype, "tabBuilderControl", void 0);
    PostingsByDate = __decorate([
        core_1.Component({
            selector: 'postingsByDate',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], PostingsByDate);
    return PostingsByDate;
    var _a, _b, _c, _d;
}());
exports.PostingsByDate = PostingsByDate;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTrades.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var lateTrades_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTrades.routes.ts");
var lateTrades_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTrades.ts");
var lateTradesReport_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTradesReport/lateTradesReport.module.ts");
var LateTradesModule = (function () {
    function LateTradesModule() {
    }
    LateTradesModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, lateTrades_routes_1.LateTradesRouting, lateTradesReport_module_1.LateTradesReportModule
            ],
            declarations: [lateTrades_1.LateTrades],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], LateTradesModule);
    return LateTradesModule;
}());
exports.LateTradesModule = LateTradesModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTrades.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var lateTrades_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTrades.ts");
exports.LateTradesRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports/LateTrades', component: lateTrades_1.LateTrades, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTrades.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var LateTrades = (function () {
    function LateTrades(navigationService, alt, location) {
        this.navigationService = navigationService;
        this.alt = alt;
        this.location = location;
        this.childItems = [];
        this.alert = alt;
    }
    LateTrades.prototype.ngOnInit = function () {
        this.childItems = this.navigationService.getChildMenusForTileView('LateTrades');
    };
    LateTrades = __decorate([
        core_1.Component({
            selector: 'lateTrades',
            template: "<tileView [menuItemsList]=\"childItems\"></tileView>"
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _c) || Object])
    ], LateTrades);
    return LateTrades;
    var _a, _b, _c;
}());
exports.LateTrades = LateTrades;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTradesReport/lateTradesReport.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'RunReport',
            value: 'Run Report',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "FromDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "From",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        },
        {
            "dbColumnName": "ToDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "To",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["FromDate", "ToDate"],
            "apiObject": undefined
        },
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["FromDate", "ToDate"],
            "apiObject": undefined
        }]
};
var DisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "Account_IO",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Account_IO",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Account IO",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Account_Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Account Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Security_IO",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security IO",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Security_Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Trade_Type",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Trader",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trader",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Price",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Price",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Units",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Units",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Postdate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Post Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "EffectiveDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Effective Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }]
};
exports.LateTradesReportControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "DisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: DisplayGridConfig,
                    PageOperationType: 'view'
                }
            ],
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTradesReport/lateTradesReport.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var lateTradesreport_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTradesReport/lateTradesreport.routes.ts");
var lateTradesReport_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTradesReport/lateTradesReport.ts");
var LateTradesReportModule = (function () {
    function LateTradesReportModule() {
    }
    LateTradesReportModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, lateTradesreport_routes_1.LateTradesReportRouting
            ],
            declarations: [lateTradesReport_1.LateTradesReport],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], LateTradesReportModule);
    return LateTradesReportModule;
}());
exports.LateTradesReportModule = LateTradesReportModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTradesReport/lateTradesReport.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var lateTradesReport_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTradesReport/lateTradesReport.config.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var LateTradesReport = (function () {
    function LateTradesReport(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = lateTradesReport_config_1.LateTradesReportControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    LateTradesReport.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    LateTradesReport.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    LateTradesReport.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    LateTradesReport.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    LateTradesReport.prototype.displayTabInfo = function (tabInfo) {
        var _this = this;
        this.customMessages = [];
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            this.apiService.getArrayFromQuery("GetLastBusDay", JSON.stringify({ Parameters: []
            })).subscribe(function (res) {
                if (res.length == 1) {
                    var date = new Date(res[0].LastBusDay);
                    _this.formBuilder.data.find(function (x) { return x.name == "ToDate"; }).val = genericfunctions_1.toDateString(date);
                    date.setDate(date.getDate() - 30);
                    _this.formBuilder.data.find(function (x) { return x.name == "FromDate"; }).val = genericfunctions_1.toDateString(date);
                }
            }, function (error) {
                _this.alert.error("GetLastBusDay. Error in retrieving last business date" + error.status);
            }, function () {
            });
        }
        this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DisplayGrid"; });
        if (this.gridView) {
            this.gridView.ShowDefault = false;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    LateTradesReport.prototype.doActionFromChildTab = function (outputData) {
        this.updatedControlsList = [];
        this.customMessages = [];
        if (outputData.updatedValue.controlName == "RunReport") {
            this.showReport();
        }
    };
    LateTradesReport.prototype.showReport = function () {
        var _this = this;
        var fromDate = this.formBuilder.data.find(function (x) { return x.name == "FromDate"; }).val;
        var toDate = this.formBuilder.data.find(function (x) { return x.name == "ToDate"; }).val;
        this.apiService.getArrayFromQuery("GetComplianceLateTrades", JSON.stringify({
            Parameters: [
                { Name: "@ToDate", Value: toDate },
                { Name: "@FromDate", Value: fromDate }
            ]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("GetComplianceLateTrades : async error #" + error.status);
        }, function () {
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], LateTradesReport.prototype, "tabBuilderControl", void 0);
    LateTradesReport = __decorate([
        core_1.Component({
            selector: 'lateTradesReport',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], LateTradesReport);
    return LateTradesReport;
    var _a, _b, _c, _d;
}());
exports.LateTradesReport = LateTradesReport;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTradesReport/lateTradesreport.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var lateTradesReport_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTradesReport/lateTradesReport.ts");
exports.LateTradesReportRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports/LateTrades/LateTradesReport', component: lateTradesReport_1.LateTradesReport, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/bondRepoReport/bondRepoReport.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'RunReport',
            value: 'Run Report',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "StartDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Start Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "EndDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "End Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Account",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Account",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/BondReport_GetAccount", dbColumnName: "AccountID", displayColumnName: "IO", dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ShowCancellations",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Cancellation",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["StartDate", "EndDate"],
            "apiObject": undefined
        },
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["StartDate", "EndDate"],
            "apiObject": undefined
        }]
};
var DisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Tran. Mode",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "InvestOneSecCode",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "cusip",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "CUSIP",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "isin",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "ISIN",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "PortfolioName",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "AccountCode",
            "htmlControlType": "numeric",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Port #",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "side",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Side (Tran Code)",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "BrokerName",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "BrokerCode",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "tradedate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "settledate",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Principal",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Amount/Par",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "price",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Price",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Units",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Shares",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "accrInterest",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Accrued Interest",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "RepoRateLN4",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Repo Rate",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "CustodianAccount",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Custodian Account",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "importdate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Tran. Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMdjms" }
        }, {
            "dbColumnName": "DescriptionLong",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security Description Long",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "CouponRate",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Coupon Rate",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "MaturityDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Maturity Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "IndexRatio",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Index Ratio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeCurrency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Currency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Trader",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trader",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "PriceSource",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Price Source",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.BondRepoReportControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "DisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: DisplayGridConfig,
                    PageOperationType: 'view'
                }
            ]
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/bondRepoReport/bondRepoReport.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var bondRepoReport_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/bondRepoReport/bondRepoReport.routes.ts");
var bondRepoReport_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/bondRepoReport/bondRepoReport.ts");
var BondRepoReportModule = (function () {
    function BondRepoReportModule() {
    }
    BondRepoReportModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, bondRepoReport_routes_1.BondRepoReportRouting
            ],
            declarations: [bondRepoReport_1.BondRepoReport],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], BondRepoReportModule);
    return BondRepoReportModule;
}());
exports.BondRepoReportModule = BondRepoReportModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/bondRepoReport/bondRepoReport.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var bondRepoReport_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/bondRepoReport/bondRepoReport.ts");
exports.BondRepoReportRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports/Settlement/BondRepoReport', component: bondRepoReport_1.BondRepoReport, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/bondRepoReport/bondRepoReport.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var bondRepoReport_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/bondRepoReport/bondRepoReport.config.ts");
var BondRepoReport = (function () {
    function BondRepoReport(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = bondRepoReport_config_1.BondRepoReportControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    BondRepoReport.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    BondRepoReport.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    BondRepoReport.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    BondRepoReport.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    BondRepoReport.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            var date = new Date();
            this.formBuilder.data.find(function (x) { return x.name == "EndDate"; }).val = genericfunctions_1.toDateString(date);
            date.setDate(date.getDate() - 15);
            this.formBuilder.data.find(function (x) { return x.name == "StartDate"; }).val = genericfunctions_1.toDateString(date);
            this.formBuilder.data.find(function (x) { return x.name == "Account"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "ShowCancellations"; }).val = false;
        }
        this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DisplayGrid"; });
        if (this.gridView) {
            this.gridView.ShowDefault = false;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    BondRepoReport.prototype.doActionFromChildTab = function (outputData) {
        this.updatedControlsList = [];
        this.customMessages = [];
        if (outputData.updatedValue.controlName == "RunReport") {
            this.showReport();
        }
    };
    BondRepoReport.prototype.showReport = function () {
        var _this = this;
        var dFromP = this.formBuilder.data.find(function (x) { return x.name == "StartDate"; }).val;
        var dToP = this.formBuilder.data.find(function (x) { return x.name == "EndDate"; }).val;
        var showCancells = this.formBuilder.data.find(function (x) { return x.name == "ShowCancellations"; }).val;
        var accountID = this.formBuilder.data.find(function (x) { return x.name == "Account"; }).val;
        if (accountID == "") {
            accountID = 0;
        }
        this.apiService.getArrayFromQuery("BondRepo_Report", JSON.stringify({
            Parameters: [
                { Name: "@dFromP", Value: dFromP },
                { Name: "@dToP", Value: dToP },
                { Name: "@showCancells", Value: showCancells },
                { Name: "@accountID", Value: accountID }
            ]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("BondRepo_Report : async error #" + error.status);
        }, function () {
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], BondRepoReport.prototype, "tabBuilderControl", void 0);
    BondRepoReport = __decorate([
        core_1.Component({
            selector: 'bondRepoReport',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], BondRepoReport);
    return BondRepoReport;
    var _a, _b, _c, _d;
}());
exports.BondRepoReport = BondRepoReport;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/iRSTradeReport/iRSTradeReport.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'RunReport',
            value: 'Run Report',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "StartDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Start Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "EndDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "End Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ShowCancellations",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Cancellation",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["StartDate", "EndDate"],
            "apiObject": undefined
        },
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["StartDate", "EndDate"],
            "apiObject": undefined
        }]
};
var DisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "IO Account Number",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IO Account Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Account Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Account Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Security Number",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security Number",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Effective Date",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Effective Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Tran. ID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Tran. ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Transaction Code",
            "htmlControlType": "numeric",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Transaction Code",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SWAP Type",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "SWAP Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Trade Date",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Contractual Settlement Date",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Contractual Settlement Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Shares or Par Value",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Shares or Par Value",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Custodian Account",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Custodian Account",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Issue Currency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Issue Currency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Accrual Start Date",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Accrual Start Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Expiration Date",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Expiration Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Trading/Clearing Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trading/Clearing Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Trader Name",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trader Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Receivable Leg: First Payment Date",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Receivable Leg: First Payment Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Receivable Leg: Payment Frequency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Receivable Leg: Payment Frequency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Receivable Leg: Interest Rate",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Receivable Leg: Interest Rate",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Receivable Leg: Coupon Currency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Receivable Leg: Coupon Currency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Receivable Leg: Benchmark Security ID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Receivable Leg: Benchmark Security ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Receivable Leg: Rate Change Frequency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Receivable Leg: Rate Change Frequency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Receivable Leg: Next Rate Change Date",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Receivable Leg: Next Rate Change Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Receivable Leg: Annual Rate Type",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Receivable Leg: Annual Rate Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Payable Leg: First Payment Date",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Payable Leg: First Payment Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Payable Leg: Payment Frequency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Payable Leg: Payment Frequency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Payable Leg: Interest Rate",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Payable Leg: Interest Rate",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Payable Leg: Coupon Currency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Payable Leg: Coupon Currency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Payable Leg: Benchmark Security ID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Payable Leg: Benchmark Security ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Payable Leg: Rate Change Frequency",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Payable Leg: Rate Change Frequency",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Payable Leg: Next Rate Change Date",
            "htmlControlType": "date",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Payable Leg: Next Rate Change Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined,
            "columnFormat": { format: "date", pattern: "yMMMd" }
        }, {
            "dbColumnName": "Payable Leg: Annual Rate Type",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Payable Leg: Annual Rate Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.IRSTradeReportControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "DisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: DisplayGridConfig,
                    PageOperationType: 'view'
                }
            ]
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/iRSTradeReport/iRSTradeReport.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var iRSTradeReport_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/iRSTradeReport/iRSTradeReport.routes.ts");
var iRSTradeReport_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/iRSTradeReport/iRSTradeReport.ts");
var IRSTradeReportModule = (function () {
    function IRSTradeReportModule() {
    }
    IRSTradeReportModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, iRSTradeReport_routes_1.IRSTradeReportRouting
            ],
            declarations: [iRSTradeReport_1.IRSTradeReport],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], IRSTradeReportModule);
    return IRSTradeReportModule;
}());
exports.IRSTradeReportModule = IRSTradeReportModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/iRSTradeReport/iRSTradeReport.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var iRSTradeReport_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/iRSTradeReport/iRSTradeReport.ts");
exports.IRSTradeReportRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports/Settlement/IRSTradeReport', component: iRSTradeReport_1.IRSTradeReport, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/iRSTradeReport/iRSTradeReport.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var iRSTradeReport_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/iRSTradeReport/iRSTradeReport.config.ts");
var IRSTradeReport = (function () {
    function IRSTradeReport(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = iRSTradeReport_config_1.IRSTradeReportControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    IRSTradeReport.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    IRSTradeReport.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    IRSTradeReport.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    IRSTradeReport.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    IRSTradeReport.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            var date = new Date();
            this.formBuilder.data.find(function (x) { return x.name == "EndDate"; }).val = genericfunctions_1.toDateString(date);
            date.setDate(date.getDate() - 15);
            this.formBuilder.data.find(function (x) { return x.name == "StartDate"; }).val = genericfunctions_1.toDateString(date);
            this.formBuilder.data.find(function (x) { return x.name == "ShowCancellations"; }).val = false;
        }
        this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DisplayGrid"; });
        if (this.gridView) {
            this.gridView.ShowDefault = false;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    IRSTradeReport.prototype.doActionFromChildTab = function (outputData) {
        this.updatedControlsList = [];
        this.customMessages = [];
        if (outputData.updatedValue.controlName == "RunReport") {
            this.showReport();
        }
    };
    IRSTradeReport.prototype.showReport = function () {
        var _this = this;
        var startDateIn = this.formBuilder.data.find(function (x) { return x.name == "StartDate"; }).val;
        var endDateIn = this.formBuilder.data.find(function (x) { return x.name == "EndDate"; }).val;
        var showCancels = this.formBuilder.data.find(function (x) { return x.name == "ShowCancellations"; }).val;
        this.apiService.getArrayFromQuery("GetIRSTradesReport", JSON.stringify({
            Parameters: [
                { Name: "@StartDateIn", Value: startDateIn },
                { Name: "@EndDateIn", Value: endDateIn },
                { Name: "@ShowCancels", Value: showCancels }
            ]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("GetIRSTradesReport : async error #" + error.status);
        }, function () {
            //   this.apiService.notifySpinner(false);
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], IRSTradeReport.prototype, "tabBuilderControl", void 0);
    IRSTradeReport = __decorate([
        core_1.Component({
            selector: 'iRSTradeReport',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], IRSTradeReport);
    return IRSTradeReport;
    var _a, _b, _c, _d;
}());
exports.IRSTradeReport = IRSTradeReport;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/settlement.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var settlement_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/settlement.routes.ts");
var settlement_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/settlement.ts");
var bondRepoReport_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/bondRepoReport/bondRepoReport.module.ts");
var iRSTradeReport_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/iRSTradeReport/iRSTradeReport.module.ts");
var tradeReportByPM_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/tradeReportByPM/tradeReportByPM.module.ts");
var trades_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/trades/trades.module.ts");
var settlementService_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/settlementService.ts");
var SettlementModule = (function () {
    function SettlementModule() {
    }
    SettlementModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, settlement_routes_1.SettlementRouting, bondRepoReport_module_1.BondRepoReportModule, iRSTradeReport_module_1.IRSTradeReportModule, tradeReportByPM_module_1.TradeReportByPMModule, trades_module_1.TradesModule
            ],
            declarations: [settlement_1.Settlement],
            providers: [settlementService_1.SettlementService]
        }), 
        __metadata('design:paramtypes', [])
    ], SettlementModule);
    return SettlementModule;
}());
exports.SettlementModule = SettlementModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/settlement.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var settlement_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/settlement.ts");
exports.SettlementRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports/Settlement', component: settlement_1.Settlement, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/settlement.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var Settlement = (function () {
    function Settlement(navigationService, alt, location) {
        this.navigationService = navigationService;
        this.alt = alt;
        this.location = location;
        this.childItems = [];
        this.alert = alt;
    }
    Settlement.prototype.ngOnInit = function () {
        this.childItems = this.navigationService.getChildMenusForTileView('Settlement');
    };
    Settlement = __decorate([
        core_1.Component({
            selector: 'settlement',
            template: "<tileView [menuItemsList]=\"childItems\"></tileView>"
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _c) || Object])
    ], Settlement);
    return Settlement;
    var _a, _b, _c;
}());
exports.Settlement = Settlement;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/settlementService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var SettlementService = (function () {
    function SettlementService(apiService) {
        this.apiService = apiService;
    }
    SettlementService.prototype.ExecutePageRefresh = function (pagename, id) {
        if (id === void 0) { id = null; }
        switch (pagename) {
            case "TradesSummaryDisplayGrid_CoreID_child":
            case "TradesDetailsDisplayGrid_CoreID_child":
                return this.settlementTradesReportStatus(id);
            case "TradesSummaryDisplayGrid_Issues_child":
            case "TradesDetailsDisplayGrid_Issues_child":
                return this.settlementGetIssues(id);
        }
    };
    SettlementService.prototype.checkBusinessValidations = function (inputRecords, pageName) {
        switch (pageName) {
            case "TradesSummaryDisplayGrid_Issues_child":
            case "TradesDetailsDisplayGrid_Issues_child":
                inputRecords.forEach(function (x) {
                    x.cells.forEach(function (y) {
                        if (y.name.toLowerCase() == 'closed' && y.val == "Closed") {
                            y.val = 'Yes';
                        }
                    });
                });
                break;
        }
    };
    SettlementService.prototype.settlementTradesReportStatus = function (nID) {
        return this.apiService.getArrayFromQuery("SettlementTradesReportStatus", JSON.stringify({
            Parameters: [
                { Name: "@nID", Value: nID }
            ]
        }));
    };
    SettlementService.prototype.settlementGetIssues = function (nID) {
        return this.apiService.getArrayFromQuery("SettlementGetIssues", JSON.stringify({
            Parameters: [
                { Name: "@nCoreID", Value: nID }
            ]
        }));
    };
    SettlementService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _a) || Object])
    ], SettlementService);
    return SettlementService;
    var _a;
}());
exports.SettlementService = SettlementService;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/tradeReportByPM/tradeReportByPM.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'RunReport',
            value: 'Run Report',
            disabled: false,
            visible: true,
            formValidate: true
        },
        {
            name: 'ResetParameters',
            value: 'Reset Parameters',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "TradeHubID",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Trade Hub IDs",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "System",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "System",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/SettlementGetSystem", dbColumnName: "ID", displayColumnName: "Name", dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Account",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Account",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/GetAccountsByPM", dbColumnName: "AccountID", displayColumnName: "Account", dbParameters: { Parameters: [{ Name: "@sPMLogin", Value: "" }] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "CustodianAccount",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Custodian Account",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/SettlementGetCustodianAccount", dbColumnName: "CustodianAccount", displayColumnName: "CustodianAccount", dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "RIC",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "RIC",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "CUSIP",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "CUSIP",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ISIN",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "ISIN",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SEDOL",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "SEDOL",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Broker",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/SettlementGetBroker", dbColumnName: "io", displayColumnName: "io", dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "NumberOfShares",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Number Of Shares",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "InvestOneMemo",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "InvestOne Memo #",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "StartDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Start Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "EndDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "End Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ProductGroup",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Product Group",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/SettlementGetProductGroups", dbColumnName: "ID", displayColumnName: "Name", dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "ExcludeCancellations",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": false,
            "displayName": "Exclude Cancellations",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["inputmask"],
            "ruleAssociates": ["TradeHubID"],
            "ruleValue": "^([0-9]*,?)*$",
            "apiObject": undefined
        }, {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["inputmask"],
            "ruleAssociates": ["RIC", "CUSIP", "ISIN", "SEDOL"],
            "ruleValue": "[\\w\\s]*",
            "apiObject": undefined
        }, {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["inputmask"],
            "ruleAssociates": ["NumberOfShares"],
            "ruleValue": "^-?\\d*\\.?\\d*$",
            "apiObject": undefined
        }, {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["inputmask"],
            "ruleAssociates": ["InvestOneMemo"],
            "ruleValue": "^-?\\d*$",
            "apiObject": undefined
        }, {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["StartDate", "EndDate"],
            "apiObject": undefined
        }, {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["StartDate", "EndDate"],
            "apiObject": undefined
        }]
};
var DisplayGridConfig = {
    ChildType: "",
    PrimaryKeyColumn: "CoreID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: false,
    ColumnConfiguration: [{
            "dbColumnName": "CoreID",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Tran. Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "System",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "System",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TM",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Tran. Mode",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Security",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Cusip",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Cusip",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "BloomUniqueID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Bloomberg Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SecurityName",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Security Name",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SecurityDesc",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Port",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Port #",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Side",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Side",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "SettleAmount",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Settle Amount",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Price",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Price",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Shares",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Shares",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "AccrInterest",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Accrued Interest",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IndexRatio",
            "htmlControlType": "number",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Index Ratio",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "CustodianAccount",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Custodian Account",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "Trade",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trader",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "TransDate",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "Trans. Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOExportDate",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IOExportDate",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "MemoNumber",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }, {
            "dbColumnName": "IOMessages",
            "htmlControlType": "text",
            "isVisible": true,
            "isRequired": false,
            "isComplexType": false,
            "displayName": "IOMessages",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "regex": undefined
        }]
};
exports.TradeReportByPMControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                },
                {
                    ShowDefault: false,
                    ComponentName: "DisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: DisplayGridConfig,
                    PageOperationType: 'view'
                }
            ]
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/tradeReportByPM/tradeReportByPM.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var tradeReportByPM_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/tradeReportByPM/tradeReportByPM.routes.ts");
var tradeReportByPM_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/tradeReportByPM/tradeReportByPM.ts");
var TradeReportByPMModule = (function () {
    function TradeReportByPMModule() {
    }
    TradeReportByPMModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, tradeReportByPM_routes_1.TradeReportByPMRouting
            ],
            declarations: [tradeReportByPM_1.TradeReportByPM],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], TradeReportByPMModule);
    return TradeReportByPMModule;
}());
exports.TradeReportByPMModule = TradeReportByPMModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/tradeReportByPM/tradeReportByPM.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var tradeReportByPM_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/tradeReportByPM/tradeReportByPM.ts");
exports.TradeReportByPMRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports/Settlement/TradeReportByPM', component: tradeReportByPM_1.TradeReportByPM, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/tradeReportByPM/tradeReportByPM.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var tradeReportByPM_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/tradeReportByPM/tradeReportByPM.config.ts");
var TradeReportByPM = (function () {
    function TradeReportByPM(alert, apiService, vmMatrix) {
        this.alert = alert;
        this.apiService = apiService;
        this.vmMatrix = vmMatrix;
        this.tabsListData = [];
        this.tabControlConfig = tradeReportByPM_config_1.TradeReportByPMControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
    }
    TradeReportByPM.prototype.ngOnInit = function () {
        this.getTabsData();
        var tab = this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "OneTab"; });
        if (tab) {
            var config = tab.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
            if (config) {
                var column = config.gridSettings.ColumnConfiguration.find(function (c) { return c.dbColumnName == "Account"; });
                if (column) {
                    var parameter = column.dataSourceAddress.dbParameters.Parameters.find(function (p) { return p.Name == "@sPMLogin"; });
                    if (parameter) {
                        parameter.Value = this.apiService.CurrentUser.LoginName;
                    }
                }
            }
        }
    };
    TradeReportByPM.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    TradeReportByPM.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    TradeReportByPM.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData);
    };
    TradeReportByPM.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            var date = new Date();
            this.formBuilder.data.find(function (x) { return x.name == "System"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "Account"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "CustodianAccount"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "Broker"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "ProductGroup"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "StartDate"; }).val = genericfunctions_1.toDateString(date);
            this.formBuilder.data.find(function (x) { return x.name == "EndDate"; }).val = genericfunctions_1.toDateString(date);
            this.formBuilder.data.find(function (x) { return x.name == "ExcludeCancellations"; }).val = true;
        }
        this.gridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "DisplayGrid"; });
        if (this.gridView) {
            this.gridView.ShowDefault = false;
        }
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    TradeReportByPM.prototype.doActionFromChildTab = function (outputData) {
        this.updatedControlsList = [];
        this.customMessages = [];
        switch (outputData.updatedValue.controlName) {
            case "RunReport":
                this.showReport();
                break;
            case "ResetParameters":
                this.resetParameters();
                break;
        }
    };
    TradeReportByPM.prototype.showReport = function () {
        var _this = this;
        var sCoreID = this.formBuilder.data.find(function (x) { return x.name == "TradeHubID"; }).val.replace("'", "''");
        var sSystem = this.formBuilder.data.find(function (x) { return x.name == "System"; }).val.replace("'", "''");
        var sAccount = this.formBuilder.data.find(function (x) { return x.name == "Account"; }).val.replace("'", "''");
        var sCustodianAccount = this.formBuilder.data.find(function (x) { return x.name == "CustodianAccount"; }).val.replace("'", "''");
        var sRIC = this.formBuilder.data.find(function (x) { return x.name == "RIC"; }).val.replace("'", "''");
        var sCUSIP = this.formBuilder.data.find(function (x) { return x.name == "CUSIP"; }).val.replace("'", "''");
        var sISIN = this.formBuilder.data.find(function (x) { return x.name == "ISIN"; }).val.replace("'", "''");
        var sSEDOL = this.formBuilder.data.find(function (x) { return x.name == "SEDOL"; }).val.replace("'", "''");
        var sBroker = this.formBuilder.data.find(function (x) { return x.name == "Broker"; }).val.replace("'", "''");
        var dShares = this.formBuilder.data.find(function (x) { return x.name == "NumberOfShares"; }).val.replace("'", "''");
        var nIOMemo = this.formBuilder.data.find(function (x) { return x.name == "InvestOneMemo"; }).val.replace("'", "''");
        var dtStartDate = this.formBuilder.data.find(function (x) { return x.name == "StartDate"; }).val.replace("'", "''");
        var dtEndDate = this.formBuilder.data.find(function (x) { return x.name == "EndDate"; }).val.replace("'", "''");
        var sProductGroup = this.formBuilder.data.find(function (x) { return x.name == "ProductGroup"; }).val.replace("'", "''");
        var bExcludeCancel = this.formBuilder.data.find(function (x) { return x.name == "ExcludeCancellations"; }).val;
        var sPMLogin = this.apiService.CurrentUser.LoginName;
        var MaxLines = 1000;
        if (sCoreID == "") {
            sCoreID = null;
        }
        if (sSystem == "") {
            sSystem = null;
        }
        if (sAccount == "") {
            sAccount = null;
        }
        if (sCustodianAccount == "") {
            sCustodianAccount = null;
        }
        if (sRIC == "") {
            sRIC = null;
        }
        if (sCUSIP == "") {
            sCUSIP = null;
        }
        if (sISIN == "") {
            sISIN = null;
        }
        if (sSEDOL == "") {
            sSEDOL = null;
        }
        if (sBroker == "") {
            sBroker = null;
        }
        if (dShares == "") {
            dShares = null;
        }
        if (nIOMemo == "") {
            nIOMemo = null;
        }
        if (sProductGroup == "") {
            sProductGroup = null;
        }
        this.apiService.getArrayFromQuery("SettlementTradesReportFull", JSON.stringify({
            Parameters: [
                { Name: "@sCoreIDs", Value: sCoreID },
                { Name: "@dShares", Value: dShares },
                { Name: "@nIOMemo", Value: nIOMemo },
                { Name: "@dtStartDate", Value: dtStartDate },
                { Name: "@dtEndDate", Value: dtEndDate },
                { Name: "@sAccount", Value: sAccount },
                { Name: "@sCustodianAccount", Value: sCustodianAccount },
                { Name: "@sRIC", Value: sRIC },
                { Name: "@sIOSecurityCode", Value: null },
                { Name: "@sCUSIP", Value: sCUSIP },
                { Name: "@sISIN", Value: sISIN },
                { Name: "@sSEDOL", Value: sSEDOL },
                { Name: "@sBroker", Value: sBroker },
                { Name: "@sSystem", Value: sSystem },
                { Name: "@sProductGroup", Value: sProductGroup },
                { Name: "@bExcludeCancel", Value: bExcludeCancel },
                { Name: "@sPMLogin", Value: sPMLogin },
                { Name: "@MaxLines", Value: MaxLines }
            ]
        })).subscribe(function (res) {
            _this.gridView.ShowDefault = true;
            _this.gridView.data = res;
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("SettlementTradesReportFull : async error #" + error.status);
        }, function () {
        });
    };
    TradeReportByPM.prototype.resetParameters = function () {
        this.formBuilder.data.forEach(function (x) {
            switch (x.name) {
                case "StartDate":
                case "EndDate":
                    x.val = genericfunctions_1.toDateString(new Date());
                    break;
                case "ExcludeCancellations":
                    x.val = true;
                    break;
                default:
                    x.val = "";
                    break;
            }
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], TradeReportByPM.prototype, "tabBuilderControl", void 0);
    TradeReportByPM = __decorate([
        core_1.Component({
            selector: 'tradeReportByPM',
            template: "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\n            (tabEmitter)=\"showSpecificTab($event)\"\n            (tabContentEmitter)=\"doActionFromChildTab($event)\"></tabBuilder>"
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], TradeReportByPM);
    return TradeReportByPM;
    var _a, _b, _c, _d;
}());
exports.TradeReportByPM = TradeReportByPM;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/trades/trades.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.CustomizeFieldsListConfig = {
    CustomButtons: [
        {
            name: 'Save',
            value: 'Save',
            disabled: false,
            visible: true,
            formValidate: false
        }
    ],
    ListItemsConfiguration: {
        "inputListDataFields": { dbColumnName: "UniqueID", displayColumnName: "DisplayName" },
        "inputListTitle": "Available Fields",
        "assignedListDataFields": { dbColumnName: "UniqueID", displayColumnName: "DisplayName" },
        "assignedListTitle": "Selected Fields"
    }
};
var FormBuilderConfig = {
    CustomButtons: [
        {
            name: 'SummaryReport',
            value: 'Summary Report',
            disabled: false,
            visible: true,
            formValidate: true
        }, {
            name: 'DetailsReport',
            value: 'Details Report',
            disabled: false,
            visible: true,
            formValidate: true
        }, {
            name: 'CustomizeFields',
            value: 'Customize Fields',
            disabled: false,
            visible: true,
            formValidate: true
        }, {
            name: 'CustomReport',
            value: 'Custom Report',
            disabled: false,
            visible: true,
            formValidate: true
        }, {
            name: 'ResetParameters',
            value: 'Reset Parameters',
            disabled: false,
            visible: true,
            formValidate: true
        }, {
            name: 'Excel',
            value: 'Excel',
            disabled: true,
            visible: true,
            formValidate: true
        }
    ],
    ColumnConfiguration: [
        {
            "dbColumnName": "TradeHubID",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Trade Hub IDs",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "System",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "System",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/SettlementGetSystem", dbColumnName: "ID", displayColumnName: "Name", dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined
        }, {
            "dbColumnName": "Account",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Account",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "CustodianAccount",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Custodian Account",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/SettlementGetCustodianAccount", dbColumnName: "CustodianAccount", displayColumnName: "CustodianAccount", dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined
        }, {
            "dbColumnName": "RIC",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "RIC",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "CUSIP",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "CUSIP",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "ISIN",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "ISIN",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "SEDOL",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "SEDOL",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/SettlementGetBroker", dbColumnName: "io", displayColumnName: "io", dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined
        }, {
            "dbColumnName": "NumberOfShares",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Number Of Shares",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "InvestOneMemo",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "InvestOne Memo #",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "StartDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "Start Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "EndDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "isRequired": true,
            "displayName": "End Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "ProductGroup",
            "htmlControlType": "customselect",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Product Group",
            "dataSourceAddress": { tableName: "/Application/SqlStatementDetail/SettlementGetProductGroups", dbColumnName: "ID", displayColumnName: "Name", dbParameters: { Parameters: [] }, defaultValue: [{ Value: "", Name: "All" }] },
            "dataSource": undefined
        }, {
            "dbColumnName": "ExcludeCancellations",
            "htmlControlType": "checkbox",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Exclude Cancellations",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }
    ],
    RulesConfig: [
        {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["inputmask"],
            "ruleAssociates": ["TradeHubID"],
            "ruleValue": "^([0-9]*,?)*$",
            "apiObject": "TradesRules"
        }, {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["inputmask"],
            "ruleAssociates": ["Account", "RIC", "CUSIP", "ISIN", "SEDOL"],
            "ruleValue": "[\\w\\s]*",
            "apiObject": "TradesRules"
        }, {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["inputmask"],
            "ruleAssociates": ["NumberOfShares"],
            "ruleValue": "^-?\\d*\\.?\\d*$",
            "apiObject": "TradesRules"
        }, {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["inputmask"],
            "ruleAssociates": ["InvestOneMemo"],
            "ruleValue": "^-?\\d*$",
            "apiObject": "TradesRules"
        }, {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["required"],
            "ruleAssociates": ["StartDate", "EndDate"],
            "apiObject": "TradesRules"
        }, {
            "ruleType": "AllOf",
            "applyTo": "AllOf",
            "ruleName": ["date"],
            "ruleAssociates": ["StartDate", "EndDate"],
            "apiObject": "TradesRules"
        }]
};
exports.ReportStatusChildGridConfig = {
    Name: "ReportStatusDisplayGridConfig",
    ChildType: "",
    ForeignKeyColumn: "CoreID",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    ServerPagination: false,
    IsScrollableGrid: true,
    "ColumnConfiguration": [
        {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Source Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "sourceId",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Source Tran ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "ExportDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Export Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "columnFormat": { format: "date", pattern: "yMMMdjms" }
        }, {
            "dbColumnName": "Status",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Status",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Messages",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Messages",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }]
};
exports.ViewIssuesChildGridConfig = {
    Name: "ViewIssuesDisplayGridConfig",
    ChildType: "",
    PrimaryKeyColumn: "ID",
    ForeignKeyColumn: "CoreID",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    ServerPagination: false,
    IsScrollableGrid: true,
    UseBusinessValidation: true,
    CustomButtons: [
        {
            name: 'AddIssue',
            value: 'Add Issue',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    CustomRowButtons: [
        {
            name: 'CloseIssue',
            value: 'Close Issue',
            disabled: false,
            visible: true,
            formValidate: true
        }
    ],
    "ColumnConfiguration": [
        {
            "dbColumnName": "ID",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Issue ID",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Description",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Settlement Issue",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "CycleNine",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Cycle 9",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Note",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Settlement Issue Notes",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "IdentificationDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Identification Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "columnFormat": { format: "date", pattern: "yMMMdjms" }
        }, {
            "dbColumnName": "IdentificationUser",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Identified by",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "ClosedDate",
            "htmlControlType": "date",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Closing Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "columnFormat": { format: "date", pattern: "yMMMdjms" }
        }, {
            "dbColumnName": "ClosedUser",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Closed by",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Closed",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Closed",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }]
};
var TradesSummaryDisplayGridConfig = {
    ChildType: "",
    ChildGridType: "displayGrid",
    PrimaryKeyColumn: "CoreID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: true,
    ServerPagination: false,
    ColumnConfiguration: [{
            "dbColumnName": "CoreID",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Tran. Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isToggleable": true,
            "ChildControlConfig": exports.ReportStatusChildGridConfig
        }, {
            "dbColumnName": "Issues",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Issues",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isToggleable": true,
            "ChildControlConfig": exports.ViewIssuesChildGridConfig
        }, {
            "dbColumnName": "System",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "System",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "TM",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Tran. Mode",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Security",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Security",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Cusip",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Cusip",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Portfolio",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Side",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Side",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "SettleAmount",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Settle Amount",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Price",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Price",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Shares",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Shares",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "CustodianAccount",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Custodian Account",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "AddedBy",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Added By",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Trade",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Trader",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }]
};
var TradesDetailsDisplayGridConfig = {
    ChildType: "",
    ChildGridType: "displayGrid",
    PrimaryKeyColumn: "CoreID",
    ForeignKeyColumn: "",
    ShallHideDeleteButton: true,
    ShallHideAddButton: true,
    IsScrollableGrid: true,
    UseBusinessValidation: true,
    ServerPagination: false,
    ColumnConfiguration: [{
            "dbColumnName": "CoreID",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Tran. Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isToggleable": true,
            "ChildControlConfig": exports.ReportStatusChildGridConfig
        }, {
            "dbColumnName": "Issues",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Issues",
            "dataSourceAddress": undefined,
            "dataSource": undefined,
            "isToggleable": true,
            "ChildControlConfig": exports.ViewIssuesChildGridConfig
        }, {
            "dbColumnName": "System",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "System",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "TM",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Tran. Mode",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "SI",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Sec. Id. Type",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Security",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Security",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Cusip",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Cusip",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Sedol",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Sedol",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Isin",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Isin",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "BloomUniqueID",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Bloomberg Id",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Portfolio",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Portfolio",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Port",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Port #",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Side",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Side",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Broker",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Broker",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "TradeDate",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Trade Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "SettleDate",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Settle Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "SettleAmount",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Settle Amount",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Principal",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Principal",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Price",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Price",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Shares",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Shares",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Comission",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Comission",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Fees",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Fees",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Taxes",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Taxes",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Other",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Other Amount",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "AccrInterest",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Accrued Interest",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "IndexRatio",
            "htmlControlType": "number",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Index Ratio",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "CustodianAccount",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Custodian Account",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "CustodianBulkAccount",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Custodian Bulk Account",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "TransDate",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Trans. Date",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "SecurityName",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Security Desc.",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "TradeCurrency",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Trade Currency",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "IOExportDate",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "IOExportDate",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "IOTranID",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "MemoNumber",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "IOMessages",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "IOMessages",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "SecurityDesc",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Description",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "AddedBy",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Added By",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }, {
            "dbColumnName": "Trade",
            "htmlControlType": "text",
            "isVisible": true,
            "isComplexType": false,
            "displayName": "Trader",
            "dataSourceAddress": undefined,
            "dataSource": undefined
        }]
};
exports.TradesControlConfig = {
    TabsList: [
        {
            TabKey: "OneTab",
            TabName: "OneTab",
            TabControls: [
                {
                    ShowDefault: true,
                    ComponentName: "FormBuilder",
                    PageType: "formbuilder",
                    gridSettings: FormBuilderConfig,
                    PageOperationType: 'dynamicform'
                }, {
                    ComponentTitle: "Summary",
                    ShowDefault: false,
                    ComponentName: "TradesSummaryDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: TradesSummaryDisplayGridConfig,
                    PageOperationType: 'view'
                }, {
                    ComponentTitle: "Details",
                    ShowDefault: false,
                    ComponentName: "TradesDetailsDisplayGrid",
                    PageType: "displaygrid",
                    gridSettings: TradesDetailsDisplayGridConfig,
                    PageOperationType: 'view'
                }
            ]
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/trades/trades.html":
/***/ (function(module, exports) {

module.exports = "<tabBuilder [tabsList]=\"tabsListData\" [messages] = \"customMessages\"\r\n            (tabEmitter)=\"showSpecificTab($event)\"\r\n            (tabContentEmitter)=\"doActionFromChildTab($event)\">\r\n</tabBuilder>\r\n<div class=\"modal\" tabindex=\"-1\" role=\"dialog\" style=\"display:block !important;\" *ngIf=\"showCustomizeFields\">\r\n    <div class=\"modal-dialog\" style=\"height: 100%; width: 40%;\">\r\n        <div class=\"modal-content standard-callout-background\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"closeCustomizeFields();\"><span aria-hidden=\"true\">&times;</span></button>\r\n                <h4 class=\"modal-title\">{{customizeFieldsTitle}}</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <b>{{customizeFieldsInstructions}}</b>\r\n                <br/><br/>\r\n                <assignable-list [inputSettings]=\"assignableList.gridSettings\"\r\n                                 [inputList]=\"assignableList.inputList\" [assignedList]=\"assignableList.assignedList\"\r\n                                 [inputTitle]=\"assignableList.inputTitle\" [assignedTitle]=\"assignableList.assignedTitle\"\r\n                                 (listOut)=\"saveSelectedFields($event)\"></assignable-list>\r\n                <br/><br/>\r\n                <b>{{customizeFieldsResult}}</b>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div>\r\n    <div class=\"modal\" tabindex=\"-1\" role=\"dialog\" style=\"display:block !important;\" *ngIf=\"showAddIssue\">\r\n        <div class=\"modal-dialog\" style=\"height: 100%; width: 40%;\">\r\n            <div class=\"modal-content standard-callout-background\">\r\n                <div class=\"modal-header\">\r\n                    <button type=\"button\" class=\"close\" (click)=\"closeAddIssue();\"><span aria-hidden=\"true\">&times;</span></button>\r\n                    <h4 class=\"modal-title\">{{addIssueTitle}}</h4>\r\n                </div>\r\n                <div class=\"modal-body\">\r\n                    <b>{{addIssueInstructions}}</b>\r\n                    <br/><br/>\r\n                    <table border=\"0\">\r\n                        <tr>\r\n                            <td>Settlement Issue</td>\r\n                            <td>Cycle 9</td>\r\n                            <td>Settlement Issue Notes</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <select [(ngModel)]=\"selectedIssueType\">\r\n                                    <option *ngFor=\"let issueType of issueTypesList\" value=\"{{issueType.id}}\">{{issueType.Description}}</option>\r\n                                </select>\r\n                            </td>\r\n                            <td>\r\n                                <input type=\"checkbox\" [(ngModel)]=\"cycleNine\" style=\"width:70px; text-align: center\">\r\n                            </td>\r\n                            <td>\r\n                                <input type=\"text\" [(ngModel)]=\"issueNotes\">\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                    <br/><br/>\r\n                    <b>{{addIssueResult}}</b>\r\n                </div>\r\n                <div class=\"modal-footer\">\r\n                    <button type=\"button\" class=\"button-standard \" (click)=\"addIssue();\"><span class=\"fa fa-save\"></span>Save</button>\r\n                    <button type=\"button\" class=\"button-standard \" (click)=\"closeAddIssue();\"><span class=\"fa fa-check-square-o fa-lg\"></span>Close</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/trades/trades.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var trades_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/trades/trades.routes.ts");
var trades_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/trades/trades.ts");
var TradesModule = (function () {
    function TradesModule() {
    }
    TradesModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, SharedModule_1.SharedModule, forms_1.FormsModule, trades_routes_1.TradesRouting
            ],
            declarations: [trades_1.Trades],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], TradesModule);
    return TradesModule;
}());
exports.TradesModule = TradesModule;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/trades/trades.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var trades_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/trades/trades.ts");
exports.TradesRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports/Settlement/Trades', component: trades_1.Trades, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/settlement/trades/trades.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var trades_config_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/trades/trades.config.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var settlementService_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/settlementService.ts");
var assignableListItems_1 = __webpack_require__("./src/app/ReusableComponents/assignableListItems/assignableListItems.ts");
var Trades = (function () {
    function Trades(alert, apiService, intFormSvc, vmMatrix, settlementService) {
        this.alert = alert;
        this.apiService = apiService;
        this.intFormSvc = intFormSvc;
        this.vmMatrix = vmMatrix;
        this.settlementService = settlementService;
        this.tabsListData = [];
        this.tabControlConfig = trades_config_1.TradesControlConfig;
        this.updatedControlsList = [];
        this.customMessages = [];
        this.assignableList = assignableListItems_1.AssignableListItems;
        this.availableFieldsTitle = "";
        this.selectedFieldsTitle = "";
        this.showCustomizeFields = false;
        this.customizeFieldsTitle = "";
        this.customizeFieldsInstructions = "";
        this.customizeFieldsResult = "";
        this.showAddIssue = false;
        this.addIssueTitle = "";
        this.addIssueInstructions = "";
        this.addIssueResult = "";
        this.issueTypesList = [];
        this.selectedIssueType = 1;
        this.cycleNine = false;
        this.issueNotes = "";
        this.customizeFieldsListConfig = trades_config_1.CustomizeFieldsListConfig;
    }
    Trades.prototype.ngOnInit = function () {
        this.getTabsData();
    };
    Trades.prototype.ngOnDestroy = function () {
        this.tabsListData = [];
    };
    Trades.prototype.getTabsData = function () {
        var _this = this;
        this.tabControlConfig.TabsList.forEach(function (x) {
            _this.tabsListData.push({
                TabKey: x.TabKey,
                TabName: x.TabName
            });
        });
    };
    Trades.prototype.showSpecificTab = function (tabData) {
        this.vmMatrix.showSpecificTab(this, tabData, this.settlementService);
    };
    Trades.prototype.displayTabInfo = function (tabInfo) {
        this.customMessages = [];
        this.formBuilder = tabInfo.TabControls.find(function (x) { return x.ComponentName == "FormBuilder"; });
        if (this.formBuilder) {
            this.formBuilder.data = this.vmMatrix.getFormBuilderControls(this.formBuilder.gridSettings);
            var date = new Date();
            this.formBuilder.data.find(function (x) { return x.name == "System"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "CustodianAccount"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "Broker"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "ProductGroup"; }).val = "";
            this.formBuilder.data.find(function (x) { return x.name == "StartDate"; }).val = genericfunctions_1.toDateString(date);
            this.formBuilder.data.find(function (x) { return x.name == "EndDate"; }).val = genericfunctions_1.toDateString(date);
        }
        this.summaryGridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "TradesSummaryDisplayGrid"; });
        if (this.summaryGridView) {
            this.summaryGridView.ShowDefault = false;
        }
        this.detailsGridView = tabInfo.TabControls.find(function (x) { return x.ComponentName == "TradesDetailsDisplayGrid"; });
        if (this.detailsGridView) {
            this.detailsGridView.ShowDefault = false;
        }
        this.assignableList.gridSettings = this.customizeFieldsListConfig;
        this.assignableList.gridSettings.CustomButtons.find(function (x) { return x.value == 'Save'; }).disabled = true;
        this.tabBuilderControl.displayTabInfo(tabInfo);
    };
    Trades.prototype.doActionFromChildTab = function (outputData) {
        this.updatedControlsList = [];
        this.customMessages = [];
        switch (outputData.updatedValue.controlName) {
            case "DetailsReport":
                this.reportType = "details";
                this.customizeGrid();
                this.showReport();
                break;
            case "SummaryReport":
                this.reportType = "summary";
                this.showReport();
                break;
            case "CustomizeFields":
                this.customizeFields();
                break;
            case "CustomReport":
                this.reportType = "custom";
                this.customizeGrid();
                this.showReport();
                break;
            case "ResetParameters":
                this.resetParameters();
                break;
            case "AddIssue":
                this.parentRow = outputData.updatedValue.parentRow;
                this.nCoreID = outputData.updatedValue.parentRow.primaryKey.value;
                this.startAddIssue();
                break;
            case "CloseIssue":
                this.parentRow = outputData.updatedValue.parentRow;
                this.nIssueID = outputData.updatedValue.value.primaryKey.value;
                this.closeIssue();
                break;
        }
    };
    Trades.prototype.showReport = function () {
        var _this = this;
        var sCoreID = this.formBuilder.data.find(function (x) { return x.name == "TradeHubID"; }).val.replace("'", "''");
        var sSystem = this.formBuilder.data.find(function (x) { return x.name == "System"; }).val.replace("'", "''");
        var sAccount = this.formBuilder.data.find(function (x) { return x.name == "Account"; }).val.replace("'", "''");
        var sCustodianAccount = this.formBuilder.data.find(function (x) { return x.name == "CustodianAccount"; }).val.replace("'", "''");
        var sRIC = this.formBuilder.data.find(function (x) { return x.name == "RIC"; }).val.replace("'", "''");
        var sCUSIP = this.formBuilder.data.find(function (x) { return x.name == "CUSIP"; }).val.replace("'", "''");
        var sISIN = this.formBuilder.data.find(function (x) { return x.name == "ISIN"; }).val.replace("'", "''");
        var sSEDOL = this.formBuilder.data.find(function (x) { return x.name == "SEDOL"; }).val.replace("'", "''");
        var sBroker = this.formBuilder.data.find(function (x) { return x.name == "Broker"; }).val.replace("'", "''");
        var dShares = this.formBuilder.data.find(function (x) { return x.name == "NumberOfShares"; }).val.replace("'", "''");
        var nIOMemo = this.formBuilder.data.find(function (x) { return x.name == "InvestOneMemo"; }).val.replace("'", "''");
        var dtStartDate = this.formBuilder.data.find(function (x) { return x.name == "StartDate"; }).val.replace("'", "''");
        var dtEndDate = this.formBuilder.data.find(function (x) { return x.name == "EndDate"; }).val.replace("'", "''");
        var sProductGroup = this.formBuilder.data.find(function (x) { return x.name == "ProductGroup"; }).val.replace("'", "''");
        var bExcludeCancel = this.formBuilder.data.find(function (x) { return x.name == "ExcludeCancellations"; }).val;
        var MaxLines = 1000;
        if (sCoreID == "") {
            sCoreID = null;
        }
        if (sSystem == "") {
            sSystem = null;
        }
        if (sAccount == "") {
            sAccount = null;
        }
        if (sCustodianAccount == "") {
            sCustodianAccount = null;
        }
        if (sRIC == "") {
            sRIC = null;
        }
        if (sCUSIP == "") {
            sCUSIP = null;
        }
        if (sISIN == "") {
            sISIN = null;
        }
        if (sSEDOL == "") {
            sSEDOL = null;
        }
        if (sBroker == "") {
            sBroker = null;
        }
        if (dShares == "") {
            dShares = null;
        }
        if (nIOMemo == "") {
            nIOMemo = null;
        }
        if (sProductGroup == "") {
            sProductGroup = null;
        }
        this.apiService.getArrayFromQuery("SettlementTradesReportFull", JSON.stringify({
            Parameters: [
                { Name: "@sCoreIDs", Value: sCoreID },
                { Name: "@dShares", Value: dShares },
                { Name: "@nIOMemo", Value: nIOMemo },
                { Name: "@dtStartDate", Value: dtStartDate },
                { Name: "@dtEndDate", Value: dtEndDate },
                { Name: "@sAccount", Value: sAccount },
                { Name: "@sCustodianAccount", Value: sCustodianAccount },
                { Name: "@sRIC", Value: sRIC },
                { Name: "@sIOSecurityCode", Value: null },
                { Name: "@sCUSIP", Value: sCUSIP },
                { Name: "@sISIN", Value: sISIN },
                { Name: "@sSEDOL", Value: sSEDOL },
                { Name: "@sBroker", Value: sBroker },
                { Name: "@sSystem", Value: sSystem },
                { Name: "@sProductGroup", Value: sProductGroup },
                { Name: "@bExcludeCancel", Value: bExcludeCancel },
                { Name: "@sPMLogin", Value: null },
                { Name: "@MaxLines", Value: MaxLines }
            ]
        })).subscribe(function (res) {
            res.forEach(function (x) {
                x.TradeDate = x.TradeDate.substring(0, x.TradeDate.lastIndexOf(" "));
                x.SettleDate = x.SettleDate.substring(0, x.SettleDate.lastIndexOf(" "));
            });
            switch (_this.reportType) {
                case "summary":
                    _this.summaryGridView.ShowDefault = true;
                    _this.detailsGridView.ShowDefault = false;
                    _this.summaryGridView.data = res;
                    break;
                case "details":
                case "custom":
                    _this.summaryGridView.ShowDefault = false;
                    _this.detailsGridView.ShowDefault = true;
                    _this.detailsGridView.data = res;
                    break;
            }
            if (res.length > 0) {
                var messageBlock = [res.length + (res.length > 1 ? " records " : " record ") + "found"];
                _this.customMessages.push({ text: messageBlock, alert: "alert-info" });
            }
            _this.tabBuilderControl.LoadSpecificTabsByUpdate(_this.updatedControlsList);
        }, function (error) {
            _this.alert.error("SettlementTradesReportFull : async error #" + error.status);
        }, function () {
        });
    };
    Trades.prototype.resetParameters = function () {
        this.formBuilder.data.forEach(function (x) {
            switch (x.name) {
                case "StartDate":
                case "EndDate":
                    x.val = genericfunctions_1.toDateString(new Date());
                    break;
                case "ExcludeCancellations":
                    x.val = false;
                    break;
                default:
                    x.val = "";
                    break;
            }
        });
    };
    Trades.prototype.customizeFields = function () {
        var _this = this;
        this.showCustomizeFields = true;
        this.customizeFieldsTitle = "Customize Fields";
        this.customizeFieldsInstructions = "Please choose from the available fields to produce a custom report";
        this.availableFieldsTitle = "Available Fields";
        this.selectedFieldsTitle = "Selected Fields";
        var subscription = this.apiService.getArrayFromQuery("SettlementGetTableFields", JSON.stringify({
            Parameters: [
                { Name: "@sLoginName", Value: this.apiService.CurrentUser.LoginName }
            ]
        })).subscribe(function (res) {
            _this.assignableList.inputList = res.filter(function (x) { return x.CustomField == "No"; });
            _this.assignableList.assignedList = res.filter(function (x) { return x.CustomField == "Yes"; });
            _this.assignableList.gridSettings.CustomButtons.find(function (x) { return x.value == 'Save'; }).disabled = false;
            subscription.unsubscribe();
        }, function (error) {
            _this.customizeFieldsResult = "Error :" + error.status;
            subscription.unsubscribe();
        }, function () {
            //   this.apiService.notifySpinner(false);
        });
    };
    Trades.prototype.customizeGrid = function () {
        var _this = this;
        var tab = this.tabControlConfig.TabsList.find(function (t) { return t.TabKey == "OneTab"; });
        var config = tab.TabControls.find(function (x) { return x.ComponentName == "TradesDetailsDisplayGrid"; });
        var column;
        this.apiService.getArrayFromQuery("SettlementGetTableFields", JSON.stringify({
            Parameters: [
                { Name: "@sLoginName", Value: this.apiService.CurrentUser.LoginName }
            ]
        })).subscribe(function (res) {
            res.forEach(function (x) {
                column = config.gridSettings.ColumnConfiguration.find(function (c) { return c.dbColumnName == x.DBName; });
                if (column) {
                    column.isVisible = (_this.reportType == "details" || x.CustomField == "Yes") ? true : false;
                }
            });
        }, function (error) {
            _this.alert.error("SettlementGetTableFields : async error #" + error.status);
        }, function () {
            //   this.apiService.notifySpinner(false);
        });
    };
    Trades.prototype.closeCustomizeFields = function () {
        this.showCustomizeFields = false;
        this.customizeFieldsResult = "";
    };
    Trades.prototype.saveSelectedFields = function (outputdata) {
        var _this = this;
        var sCustomFields = "";
        outputdata.value.forEach(function (x) {
            sCustomFields += "," + x.Value;
        });
        var subscription = this.apiService.executeNonQuery("SettlementUpdateTableFields", JSON.stringify({
            Parameters: [
                { Name: "@sLoginName", Value: this.apiService.CurrentUser.LoginName },
                { Name: "@sCustomFields", Value: sCustomFields }
            ]
        })).subscribe(function (res) {
            _this.customizeFieldsResult = "Custom fields saved successfully";
            subscription.unsubscribe();
        }, function (error) {
            _this.customizeFieldsResult = "Error :" + error.status;
            subscription.unsubscribe();
        }, function () {
            //   this.apiService.notifySpinner(false);
        });
    };
    Trades.prototype.startAddIssue = function () {
        var _this = this;
        this.showAddIssue = true;
        this.addIssueTitle = "Add Settlement Issue";
        this.selectedIssueType = 1;
        this.cycleNine = false;
        this.issueNotes = "";
        this.apiService.getArrayFromQuery("SettlementGetSecurityInfo", JSON.stringify({
            Parameters: [
                { Name: "@nCoreID", Value: this.nCoreID },
            ]
        })).subscribe(function (res) {
            _this.addIssueInstructions = res[0].Info.replace(/<b>/gi, "").replace(/<\/b>/gi, "");
        }, function (error) {
            _this.addIssueResult = "Error :" + error.status;
        }, function () {
            //   this.apiService.notifySpinner(false);
        });
        this.apiService.getArrayFromQuery("SettlementGetIssueTypes", JSON.stringify({
            Parameters: []
        })).subscribe(function (res) {
            _this.issueTypesList = res;
        }, function (error) {
            _this.addIssueResult = "Error :" + error.status;
        }, function () {
            //   this.apiService.notifySpinner(false);
        });
    };
    Trades.prototype.closeAddIssue = function () {
        this.showAddIssue = false;
        this.addIssueResult = "";
        this.parentRow.collapsed = true;
        this.showReport();
        //        this.parentRow.collapsed = false;
    };
    Trades.prototype.addIssue = function () {
        var _this = this;
        var subscription = this.apiService.executeNonQuery("SettlementAddIssue", JSON.stringify({
            Parameters: [
                { Name: "@nCoreID", Value: this.nCoreID },
                { Name: "@nSettlementIssue", Value: this.selectedIssueType },
                { Name: "@nCycleNine", Value: this.cycleNine },
                { Name: "@sNote", Value: this.issueNotes },
                { Name: "@sUserID", Value: this.apiService.CurrentUser.LoginName }
            ]
        })).subscribe(function (res) {
            _this.addIssueResult = "New Issue saved successfully";
            subscription.unsubscribe();
        }, function (error) {
            _this.addIssueResult = "Error :" + error.status;
            subscription.unsubscribe();
        }, function () {
            //   this.apiService.notifySpinner(false);
        });
    };
    Trades.prototype.closeIssue = function () {
        var _this = this;
        this.apiService.executeNonQuery("SettlementCloseIssue", JSON.stringify({
            Parameters: [
                { Name: "@nIssueID", Value: this.nIssueID },
                { Name: "@sLoginName", Value: this.apiService.CurrentUser.LoginName }
            ]
        })).subscribe(function (res) {
            _this.alert.addAlert("Issue closed successfully");
        }, function (error) {
            _this.alert.error("SettlementCloseIssue : async error #" + error.status);
        }, function () {
            _this.parentRow.collapsed = true;
            //                this.parentRow.collapsed = false;
        });
    };
    __decorate([
        core_1.ViewChild(tabBuilder_1.TabBuilder), 
        __metadata('design:type', (typeof (_a = typeof tabBuilder_1.TabBuilder !== 'undefined' && tabBuilder_1.TabBuilder) === 'function' && _a) || Object)
    ], Trades.prototype, "tabBuilderControl", void 0);
    Trades = __decorate([
        core_1.Component({
            selector: 'trades',
            template: __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/trades/trades.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _d) || Object, (typeof (_e = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _e) || Object, (typeof (_f = typeof settlementService_1.SettlementService !== 'undefined' && settlementService_1.SettlementService) === 'function' && _f) || Object])
    ], Trades);
    return Trades;
    var _a, _b, _c, _d, _e, _f;
}());
exports.Trades = Trades;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/tradeReports.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var tradeReports_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/tradeReports.ts");
exports.TradeReportsRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Applications/TradeReports', component: tradeReports_1.TradeReports, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/tradeReports.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var TradeReports = (function () {
    function TradeReports(navService, location) {
        this.navService = navService;
        this.location = location;
    }
    TradeReports = __decorate([
        core_1.Component({
            selector: 'tradeReports',
            template: ""
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _b) || Object])
    ], TradeReports);
    return TradeReports;
    var _a, _b;
}());
exports.TradeReports = TradeReports;


/***/ }),

/***/ "./src/app/Datahub/routes/applications/tradeReports/tradesReports.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var tradeReports_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/tradeReports.ts");
var tradeReports_routes_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/tradeReports.routes.ts");
var bloombergTrades_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/bloombergTrades/bloombergTrades.module.ts");
var excelTrades_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/excelTrades/excelTrades.module.ts");
var globalLink_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/globalLink/globalLink.module.ts");
var lateTrades_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/lateTrades/lateTrades.module.ts");
var settlement_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/tradeReports/settlement/settlement.module.ts");
var TradeReportsModule = (function () {
    function TradeReportsModule() {
    }
    TradeReportsModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, tradeReports_routes_1.TradeReportsRouting, bloombergTrades_module_1.BloombergTradesModule, excelTrades_module_1.ExcelTradesModule, globalLink_module_1.GlobalLinkModule, lateTrades_module_1.LateTradesModule, settlement_module_1.SettlementModule
            ],
            declarations: [tradeReports_1.TradeReports]
        }), 
        __metadata('design:paramtypes', [])
    ], TradeReportsModule);
    return TradeReportsModule;
}());
exports.TradeReportsModule = TradeReportsModule;


/***/ }),

/***/ "./src/app/Datahub/routes/charts/components/chartistJs/chartistJs.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var chartistJs_service_1 = __webpack_require__("./src/app/Datahub/routes/charts/components/chartistJs/chartistJs.service.ts");
var displayGridFilterService_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGridFilterService.ts");
var ChartistJs = (function () {
    function ChartistJs(_chartistJsService, filterService) {
        this._chartistJsService = _chartistJsService;
        this.filterService = filterService;
    }
    ChartistJs.prototype.ngOnInit = function () {
        this.data = this._chartistJsService.getAll();
    };
    ChartistJs.prototype.getResponsive = function (padding, offset) {
        return this._chartistJsService.getResponsive(padding, offset);
    };
    ChartistJs.prototype.doFilterBy = function (strFilter) {
        // alert('You filetered by:' + strFilter);
        if (strFilter === 'ALL') {
            this.filterService.doFilterBy.next({ filterName: 'Status', filterValue: '' });
        }
        else {
            this.filterService.doFilterBy.next({ filterName: 'Status', filterValue: strFilter });
        }
    };
    ChartistJs = __decorate([
        core_1.Component({
            selector: 'chartist-js',
            encapsulation: core_1.ViewEncapsulation.None,
            styles: [__webpack_require__("./node_modules/chartist/dist/chartist.css"), __webpack_require__("./src/app/Datahub/routes/charts/components/chartistJs/chartistJs.scss")],
            template: __webpack_require__("./src/app/Datahub/routes/charts/components/chartistJs/chartistJs.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof chartistJs_service_1.ChartistJsService !== 'undefined' && chartistJs_service_1.ChartistJsService) === 'function' && _a) || Object, (typeof (_b = typeof displayGridFilterService_1.DisplayGridFilterService !== 'undefined' && displayGridFilterService_1.DisplayGridFilterService) === 'function' && _b) || Object])
    ], ChartistJs);
    return ChartistJs;
    var _a, _b;
}());
exports.ChartistJs = ChartistJs;


/***/ }),

/***/ "./src/app/Datahub/routes/charts/components/chartistJs/chartistJs.html":
/***/ (function(module, exports) {

module.exports = "<section class=\"chartist\">\r\n    <div class=\"row\">\r\n        <h1>Pipeline and schematics</h1>\r\n        <ba-chartist-chart baChartistChartClass=\"ct-chart\"\r\n                           baChartistChartType=\"Pie\"\r\n                           [baChartistChartData]=\"data['simpleDonutData']\"\r\n                           [baChartistChartOptions]=\"data['simpleDonutOptions']\"\r\n                           [baChartistChartResponsive]=\"getResponsive(5, 40)\">\r\n        </ba-chartist-chart>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"channels-info-item\" *ngFor=\"let item of data['simpleDonutData'].legendItems\">\r\n            <div class=\"legend-color\" [ngStyle]=\"{'background-color': item.color}\"></div>\r\n            <p><label (click)=\"doFilterBy(item.label)\">{{ item.label }}</label><span class=\"channel-number\">{{ item.percentage }}</span></p>\r\n            <div class=\"progress progress-sm channel-progress\">\r\n                <progress class=\"progress\" value=\"{{item.percentage}}\" max=\"100\"></progress>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>\r\n\r\n<!--\r\n<section class=\"chartist\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-6 \">\r\n      <ba-card title=\"Lines\" baCardClass=\"with-scroll\">\r\n        <h5>Simple line chart</h5>\r\n        <ba-chartist-chart baChartistChartClass=\"ct-chart\"\r\n                           baChartistChartType=\"Line\"\r\n                           [baChartistChartData]=\"data['simpleLineData']\"\r\n                           [baChartistChartOptions]=\"data['simpleLineOptions']\">\r\n        </ba-chartist-chart>\r\n\r\n        <h5>Line chart with area</h5>\r\n        <ba-chartist-chart baChartistChartClass=\"ct-chart\"\r\n                           baChartistChartType=\"Line\"\r\n                           [baChartistChartData]=\"data['areaLineData']\"\r\n                           [baChartistChartOptions]=\"data['areaLineOptions']\">\r\n        </ba-chartist-chart>\r\n\r\n        <h5>Bi-polar line chart with area only</h5>\r\n        <ba-chartist-chart baChartistChartClass=\"ct-chart\"\r\n                           baChartistChartType=\"Line\"\r\n                           [baChartistChartData]=\"data['biLineData']\"\r\n                           [baChartistChartOptions]=\"data['biLineOptions']\">\r\n        </ba-chartist-chart>\r\n      </ba-card>\r\n    </div>\r\n\r\n    <div class=\"col-md-6 \">\r\n      <ba-card title=\"Bars\" baCardClass=\"with-scroll\">\r\n        <h5>Simple bar chart</h5>\r\n        <ba-chartist-chart baChartistChartClass=\"ct-chart\"\r\n                           baChartistChartType=\"Bar\"\r\n                           [baChartistChartData]=\"data['simpleBarData']\"\r\n                           [baChartistChartOptions]=\"data['simpleBarOptions']\">\r\n        </ba-chartist-chart>\r\n\r\n        <h5>Multi-line labels bar chart</h5>\r\n        <ba-chartist-chart baChartistChartClass=\"ct-chart\"\r\n                           baChartistChartType=\"Bar\"\r\n                           [baChartistChartData]=\"data['multiBarData']\"\r\n                           [baChartistChartOptions]=\"data['multiBarOptions']\"\r\n                           [baChartistChartResponsive]=\"data['multiBarResponsive']\">\r\n        </ba-chartist-chart>\r\n\r\n        <h5>Stacked bar chart</h5>\r\n        <ba-chartist-chart baChartistChartClass=\"ct-chart stacked-bar\"\r\n                           baChartistChartType=\"Bar\"\r\n                           [baChartistChartData]=\"data['stackedBarData']\"\r\n                           [baChartistChartOptions]=\"data['stackedBarOptions']\">\r\n        </ba-chartist-chart>\r\n      </ba-card>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n      <ba-card title=\"Pies & Donuts\" baCardClass=\"with-scroll\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-12 col-lg-4\"><h5>Simple Pie</h5>\r\n            <ba-chartist-chart baChartistChartClass=\"ct-chart stacked-bar\"\r\n                               baChartistChartType=\"Pie\"\r\n                               [baChartistChartData]=\"data['simplePieData']\"\r\n                               [baChartistChartOptions]=\"data['simplePieOptions']\"\r\n                               [baChartistChartResponsive]=\"getResponsive(20, 80)\">\r\n            </ba-chartist-chart>\r\n          </div>\r\n          <div class=\"col-md-12 col-lg-4\"><h5>Pie with labels</h5>\r\n            <ba-chartist-chart baChartistChartClass=\"ct-chart stacked-bar\"\r\n                               baChartistChartType=\"Pie\"\r\n                               [baChartistChartData]=\"data['labelsPieData']\"\r\n                               [baChartistChartOptions]=\"data['labelsPieOptions']\">\r\n            </ba-chartist-chart>\r\n          </div>\r\n          <div class=\"col-md-12 col-lg-4\"><h5>Donut</h5>\r\n            <ba-chartist-chart baChartistChartClass=\"ct-chart stacked-bar\"\r\n                               baChartistChartType=\"Pie\"\r\n                               [baChartistChartData]=\"data['simpleDonutData']\"\r\n                               [baChartistChartOptions]=\"data['simpleDonutOptions']\"\r\n                               [baChartistChartResponsive]=\"getResponsive(5, 40)\">\r\n            </ba-chartist-chart>\r\n          </div>\r\n        </div>\r\n      </ba-card>\r\n    </div>\r\n  </div>\r\n</section>\r\n-->"

/***/ }),

/***/ "./src/app/Datahub/routes/charts/components/chartistJs/chartistJs.scss":
/***/ (function(module, exports) {

module.exports = ".ct-area {\n  fill-opacity: .5; }\n\n.ct-label {\n  color: #000000;\n  opacity: 0.9;\n  fill: #000000; }\n\n.ct-chart .ct-label {\n  font-size: 1em;\n  color: #000000; }\n\n.ct-chart svg {\n  width: 100%;\n  display: block; }\n\n.ct-series-a .ct-bar, .ct-series-a .ct-line, .ct-series-a .ct-point, .ct-series-a .ct-slice-donut, .ct-series-a .ct-slice-pie {\n  stroke: #00abff !important; }\n\n.ct-series-a .ct-slice-pie, .ct-series-a .ct-area {\n  fill: #00abff !important; }\n\n.ct-series-b .ct-bar, .ct-series-b .ct-line, .ct-series-b .ct-point, .ct-series-b .ct-slice-donut, .ct-series-b .ct-slice-pie {\n  stroke: #8bd22f !important; }\n\n.ct-series-b .ct-slice-pie, .ct-series-b .ct-area {\n  fill: #8bd22f !important; }\n\n.ct-series-c .ct-bar, .ct-series-c .ct-line, .ct-series-c .ct-point, .ct-series-c .ct-slice-donut, .ct-series-c .ct-slice-pie {\n  stroke: #f95372 !important; }\n\n.ct-series-c .ct-slice-pie, .ct-series-c .ct-area {\n  fill: #f95372 !important; }\n\n.ct-series-d .ct-bar, .ct-series-d .ct-line, .ct-series-d .ct-point, .ct-series-d .ct-slice-donut, .ct-series-d .ct-slice-pie {\n  stroke: #e7ba08 !important; }\n\n.ct-series-d .ct-slice-pie, .ct-series-d .ct-area {\n  fill: #e7ba08 !important; }\n\n.ct-series-e .ct-bar, .ct-series-e .ct-line, .ct-series-e .ct-point, .ct-series-e .ct-slice-donut, .ct-series-e .ct-slice-pie {\n  stroke: #40daf1 !important; }\n\n.ct-series-e .ct-slice-pie, .ct-series-e .ct-area {\n  fill: #40daf1 !important; }\n\n.stacked-bar .ct-bar {\n  stroke-width: 30px; }\n\n.legend-color {\n  width: 30px;\n  height: 30px;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.25);\n  position: relative;\n  top: 27px;\n  border-radius: 15px;\n  left: -45px; }\n\n.channels-info {\n  display: inline-block;\n  width: calc(50% - 88px);\n  margin-left: 70px; }\n\n.channels-info-item p {\n  margin-bottom: 9px;\n  font-size: 1.28571em;\n  opacity: 0.9;\n  color: black; }\n\n.channels-info-item .channel-number {\n  display: inline-block;\n  float: right;\n  color: black; }\n\n.channel-progress {\n  height: 4px;\n  border-radius: 0;\n  width: 100%;\n  margin-bottom: 0;\n  background-color: rgba(0, 0, 0, 0.15);\n  box-shadow: none; }\n\n.channel-progress .progress {\n  height: 4px;\n  background-color: rgba(0, 0, 0, 0.15);\n  box-shadow: none; }\n"

/***/ }),

/***/ "./src/app/Datahub/routes/charts/components/chartistJs/chartistJs.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var theme_configProvider_1 = __webpack_require__("./src/app/Datahub/theme/theme.configProvider.ts");
var ChartistJsService = (function () {
    function ChartistJsService(_baConfig) {
        this._baConfig = _baConfig;
        this._data = {
            simpleDonutData: {
                labels: ['ALL', 'Aborted', 'Completed', 'Initialized'],
                series: [25, 25, 25, 25],
                legendItems: [
                    {
                        value: 2000,
                        color: 'black',
                        label: 'ALL',
                        percentage: 25,
                        order: 1,
                    }, {
                        value: 2000,
                        color: 'black',
                        label: 'Aborted',
                        percentage: 25,
                        order: 4,
                    }, {
                        value: 2000,
                        color: 'black',
                        label: 'Initialized',
                        percentage: 25,
                        order: 3,
                    }, {
                        value: 2000,
                        color: 'black',
                        label: 'Completed',
                        percentage: 25,
                        order: 3,
                    }
                ]
            },
            simpleDonutOptions: {
                fullWidth: true,
                donut: true,
                height: '300px',
                weight: '300px',
                labelDirection: 'explode',
                labelInterpolationFnc: function (value) {
                    return value[0];
                }
            },
            simpleLineOptions: {
                color: this._baConfig.get().colors.defaultText,
                fullWidth: true,
                height: '300px',
                chartPadding: {
                    right: 40
                }
            },
            simpleLineData: {
                labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
                series: [
                    [20, 20, 12, 45, 50],
                    [10, 45, 30, 14, 12],
                    [34, 12, 12, 40, 50],
                    [10, 43, 25, 22, 16],
                    [3, 6, 30, 33, 43]
                ]
            },
            areaLineData: {
                labels: [1, 2, 3, 4, 5, 6, 7, 8],
                series: [
                    [5, 9, 7, 8, 5, 3, 5, 4]
                ]
            },
            areaLineOptions: {
                fullWidth: true,
                height: '300px',
                low: 0,
                showArea: true
            },
            biLineData: {
                labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                series: [
                    [1, 2, 3, 1, -2, 0, 1],
                    [-2, -1, -2, -1, -2.5, -1, -2],
                    [0, 0, 0, 1, 2, 2.5, 2],
                    [2.5, 2, 1, 0.5, 1, 0.5, -1]
                ]
            },
            biLineOptions: {
                height: '300px',
                high: 3,
                low: -3,
                showArea: true,
                showLine: false,
                showPoint: false,
                fullWidth: true,
                axisX: {
                    showGrid: false
                }
            },
            simpleBarData: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                series: [
                    [15, 24, 43, 27, 5, 10, 23, 44, 68, 50, 26, 8],
                    [13, 22, 49, 22, 4, 6, 24, 46, 57, 48, 22, 4]
                ]
            },
            simpleBarOptions: {
                fullWidth: true,
                height: '300px'
            },
            multiBarData: {
                labels: ['Quarter 1', 'Quarter 2', 'Quarter 3', 'Quarter 4'],
                series: [
                    [5, 4, 3, 7],
                    [3, 2, 9, 5],
                    [1, 5, 8, 4],
                    [2, 3, 4, 6],
                    [4, 1, 2, 1]
                ]
            },
            multiBarOptions: {
                fullWidth: true,
                height: '300px',
                stackBars: true,
                axisX: {
                    labelInterpolationFnc: function (value) {
                        return value.split(/\s+/).map(function (word) {
                            return word[0];
                        }).join('');
                    }
                },
                axisY: {
                    offset: 20
                }
            },
            multiBarResponsive: [
                ['screen and (min-width: 400px)', {
                        reverseData: true,
                        horizontalBars: true,
                        axisX: {
                            labelInterpolationFnc: function (n) { return n; }
                        },
                        axisY: {
                            offset: 60
                        }
                    }],
                ['screen and (min-width: 700px)', {
                        stackBars: false,
                        reverseData: false,
                        horizontalBars: false,
                        seriesBarDistance: 15
                    }]
            ],
            stackedBarData: {
                labels: ['Quarter 1', 'Quarter 2', 'Quarter 3', 'Quarter 4'],
                series: [
                    [800000, 1200000, 1400000, 1300000],
                    [200000, 400000, 500000, 300000],
                    [100000, 200000, 400000, 600000]
                ]
            },
            stackedBarOptions: {
                fullWidth: true,
                height: '300px',
                stackBars: true,
                axisY: {
                    labelInterpolationFnc: function (value) {
                        return (value / 1000) + 'k';
                    }
                }
            },
            simplePieData: {
                series: [5, 3, 4]
            },
            simplePieOptions: {
                fullWidth: true,
                height: '300px',
                weight: '300px',
                labelInterpolationFnc: function (value) {
                    return Math.round(value / 12 * 100) + '%';
                }
            },
            labelsPieData: {
                labels: ['Bananas', 'Apples', 'Grapes'],
                series: [20, 15, 40]
            },
            labelsPieOptions: {
                fullWidth: true,
                height: '300px',
                weight: '300px',
                labelDirection: 'explode',
                labelInterpolationFnc: function (value) {
                    return value[0];
                }
            }
        };
    }
    ChartistJsService.prototype.getAll = function () {
        return this._data;
    };
    ChartistJsService.prototype.getResponsive = function (padding, offset) {
        return [
            ['screen and (min-width: 1550px)', {
                    chartPadding: padding,
                    labelOffset: offset,
                    labelDirection: 'explode',
                    labelInterpolationFnc: function (value) {
                        return value;
                    }
                }],
            ['screen and (max-width: 1200px)', {
                    chartPadding: padding,
                    labelOffset: offset,
                    labelDirection: 'explode',
                    labelInterpolationFnc: function (value) {
                        return value;
                    }
                }],
            ['screen and (max-width: 600px)', {
                    chartPadding: 0,
                    labelOffset: 0,
                    labelInterpolationFnc: function (value) {
                        return value[0];
                    }
                }]
        ];
    };
    ChartistJsService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof theme_configProvider_1.BaThemeConfigProvider !== 'undefined' && theme_configProvider_1.BaThemeConfigProvider) === 'function' && _a) || Object])
    ], ChartistJsService);
    return ChartistJsService;
    var _a;
}());
exports.ChartistJsService = ChartistJsService;


/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/dashboard.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var logsControlConfig_1 = __webpack_require__("./src/app/Datahub/routes/admin/logs/logsControlConfig.ts");
var adminApiService_1 = __webpack_require__("./src/app/Datahub/routes/admin/adminApiService.ts");
var Dashboard = (function () {
    function Dashboard(apiService) {
        this.apiService = apiService;
        this.controlConfig = logsControlConfig_1.LogsControlConfig;
    }
    Dashboard.prototype.ngAfterViewInit = function () {
        this.refreshLogs();
    };
    Dashboard.prototype.refreshLogs = function () {
        this.dataTable.GetParentPageDetails(this.controlConfig, this.apiService, "logs");
    };
    __decorate([
        core_1.ViewChild(displayGrid_1.DisplayGridComponent), 
        __metadata('design:type', (typeof (_a = typeof displayGrid_1.DisplayGridComponent !== 'undefined' && displayGrid_1.DisplayGridComponent) === 'function' && _a) || Object)
    ], Dashboard.prototype, "dataTable", void 0);
    Dashboard = __decorate([
        core_1.Component({
            selector: 'dashboard',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/Datahub/routes/dashboard/dashboard.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof adminApiService_1.AdminApiService !== 'undefined' && adminApiService_1.AdminApiService) === 'function' && _b) || Object])
    ], Dashboard);
    return Dashboard;
    var _a, _b;
}());
exports.Dashboard = Dashboard;


/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/dashboard.html":
/***/ (function(module, exports) {

module.exports = "<!-- Nav tabs -->\r\n<ul class=\"nav nav-tabs\" role=\"tablist\">\r\n    <li class=\"nav-item\">\r\n        <a class=\"nav-link active\" data-toggle=\"tab\" href=\"#processes\" role=\"tab\">Processes status</a>\r\n    </li>\r\n    <li class=\"nav-item\">\r\n        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#systemInfo\" role=\"tab\">System information</a>\r\n    </li>\r\n</ul>\r\n\r\n<!-- Tab panes -->\r\n<div class=\"tab-content\">\r\n    <div class=\"tab-pane active\" id=\"processes\" role=\"tabpanel\">\r\n        <div class=\"card-block\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-12 col-lg-4\">\r\n                    <accordion [title]=\"'Pipeline and Schematics'\">\r\n                        <accordionBodyContent>\r\n                            <pipelineSchematics-chart></pipelineSchematics-chart>\r\n                        </accordionBodyContent>\r\n                    </accordion>\r\n                </div>\r\n                <div class=\"col-sm-12 col-lg-8\">\r\n                    <accordion [title]=\"'Running Processes'\">\r\n                        <accordionBodyContent>\r\n                            <running-list></running-list>\r\n                        </accordionBodyContent>\r\n                    </accordion>\r\n                </div>\r\n                <div class=\"col-sm-12\">\r\n                    <displayGrid></displayGrid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"tab-pane\" id=\"systemInfo\" role=\"tabpanel\">\r\n            <system-info></system-info>\r\n    </div>\r\n</div>\r\n\r\n\r\n<!--\r\n\r\n<div class=\"row\">\r\n   <div class=\"col-md-4\">\r\n       <pipelineSchematics-chart></pipelineSchematics-chart>\r\n   </div>\r\n   <div class=\"col-md-8\">\r\n       <running-list></running-list>\r\n       <hr>\r\n       <displayGrid></displayGrid>\r\n   </div>\r\n\r\n</div>\r\n\r\n\r\n    <system-info></system-info>\r\n\r\n<div class=\"row\">\r\n    <chartist-js></chartist-js>\r\n</div>\r\n\r\n\r\n<div class=\"row\">\r\n    <pie-chart></pie-chart>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"row\">\r\n    <ba-card class=\"col-xlg-8 col-xl-12 col-lg-12 col-md-7 col-sm-12 col-xs-12\"\r\n             title=\"Pipelines and schematics\" baCardClass=\"medium-card\">\r\n        <traffic-chart></traffic-chart>\r\n    </ba-card>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"row\">\r\n    <ba-card class=\"col-xlg-8 col-xl-12 col-lg-12 col-md-7 col-sm-12 col-xs-12\"\r\n             title=\"Revenue\" baCardClass=\"medium-card\">\r\n        <traffic-chart></traffic-chart>\r\n    </ba-card>\r\n</div>\r\n<div class=\"row\">\r\n    <chartist-js></chartist-js>\r\n</div>\r\n\r\n\r\n\r\n\r\n<div class=\"row\">\r\n    <chartist-js></chartist-js>\r\n</div>\r\n\r\n\r\n<div class=\"row\">\r\n    <pie-chart></pie-chart>\r\n</div>\r\n\r\n\r\n<div class=\"row\">\r\n    <ba-card class=\"col-xlg-8 col-xl-12 col-lg-12 col-md-7 col-sm-12 col-xs-12\"\r\n             title=\"Revenue\" baCardClass=\"medium-card\">\r\n        <traffic-chart></traffic-chart>\r\n    </ba-card>\r\n</div>\r\n\r\n\r\n<div class=\"row\">\r\n    <pie-chart></pie-chart>\r\n</div>\r\n\r\n<div class=\"row\">\r\n    <chartist-js></chartist-js>\r\n</div>\r\n\r\n\r\n<div class=\"row\">\r\n    <ba-card class=\"col-xlg-8 col-xl-12 col-lg-12 col-md-7 col-sm-12 col-xs-12\"\r\n             title=\"Revenue\" baCardClass=\"medium-card\">\r\n        <traffic-chart></traffic-chart>\r\n    </ba-card>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"row\">\r\n    <ba-card class=\"col-xlg-8 col-xl-12 col-lg-12 col-md-7 col-sm-12 col-xs-12\"\r\n             title=\"Revenue\" baCardClass=\"medium-card\">\r\n        <traffic-chart></traffic-chart>\r\n    </ba-card>\r\n</div>\r\n\r\n<div class=\"row\">\r\n    <chartist-js></chartist-js>\r\n</div>\r\n\r\n\r\n<div class=\"row\">\r\n<pie-chart></pie-chart>\r\n</div>\r\n\r\n------------------\r\n\r\n<div class=\"row\">\r\n    <ba-card class=\"col-xlg-8 col-xl-12 col-lg-12 col-md-7 col-sm-12 col-xs-12\"\r\n             title=\"Revenue\" baCardClass=\"medium-card\">\r\n        <traffic-chart></traffic-chart>\r\n    </ba-card>\r\n</div>\r\n\r\n<div class=\"row\">\r\n    <ba-card class=\"col-xlg-8 col-xl-12 col-lg-12 col-md-7 col-sm-12 col-xs-12\"\r\n             title=\"Revenue\" baCardClass=\"medium-card\">\r\n        <traffic-chart></traffic-chart>\r\n    </ba-card>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"row\">\r\n    <chartist-js></chartist-js>\r\n</div>\r\n\r\n<!--\r\n<chartist-js></chartist-js>\r\n\r\n\r\n<line-chart></line-chart>\r\n\r\n<div class=\"row\">\r\n         <ba-card class=\"col-xlg-6 col-xl-6 col-lg-12 col-sm-12 col-xs-12\"\r\n                 title=\"Pipelines and schematics running status\" baCardClass=\"traffic-panel medium-card\">\r\n\r\n        </ba-card>\r\n</div>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\nPie Chart :\r\n    <pie-chart></pie-chart>\r\n\r\n  </div>\r\n</div>\r\n<hr>\r\n\r\n-->\r\n\r\n\r\n<!--   code form source\r\n\r\n\r\n<div class=\"row\">\r\n  <ba-card class=\"col-xlg-6 col-xl-6 col-lg-12 col-sm-12 col-xs-12\"\r\n                     title=\"Acquisition Channels\" baCardClass=\"traffic-panel medium-card\">\r\n    <traffic-chart></traffic-chart>\r\n  </ba-card>\r\n\r\n  <ba-card class=\"col-xlg-6 col-xl-6 col-lg-12 col-sm-12 col-xs-12\"\r\n           title=\"Users by Country\" baCardClass=\"medium-card\">\r\n    <users-map></users-map>\r\n  </ba-card>\r\n</div>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-xlg-9 col-xl-6 col-lg-6  col-md-12 col-sm-12 col-xs-12\">\r\n    <div class=\"row\">\r\n      <ba-card class=\"col-xlg-8 col-xl-12 col-lg-12 col-md-7 col-sm-12 col-xs-12\"\r\n               title=\"Revenue\" baCardClass=\"medium-card\">\r\n        <line-chart></line-chart>\r\n      </ba-card>\r\n      <ba-card class=\"col-xlg-4 col-xl-12 col-lg-12 col-md-5 col-sm-12 col-xs-12\"\r\n               baCardClass=\"popular-app medium-card\">\r\n        <popular-app></popular-app>\r\n      </ba-card>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"col-xlg-3 col-xl-6 col-lg-6 col-md-12 col-sm-12 col-xs-12\">\r\n    <ba-card title=\"Feed\"\r\n             baCardClass=\"large-card with-scroll feed-panel\">\r\n      <feed></feed>\r\n    </ba-card>\r\n  </div>\r\n\r\n</div>\r\n\r\n<div class=\"row shift-up\">\r\n  <ba-card class=\"col-xlg-3 col-lg-6 col-md-12 col-sm-12 col-xs-12\" title=\"To Do List\"\r\n           baCardClass=\"xmedium-card feed-comply-panel with-scroll todo-panel\">\r\n    <todo></todo>\r\n  </ba-card>\r\n  <ba-card class=\"col-xlg-6 col-lg-6 col-md-12 col-sm-12 col-xs-12\" title=\"Calendar\"\r\n           baCardClass=\"xmedium-card feed-comply-panel with-scroll calendar-panel\">\r\n    <calendar></calendar>\r\n  </ba-card>\r\n</div>\r\n--->\r\n"

/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/dashboard.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var dashboard_routes_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/dashboard.routes.ts");
var dashboard_component_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/dashboard.component.ts");
var pieChart_service_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/pieChart/pieChart.service.ts");
var pieChart_component_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/pieChart/pieChart.component.ts");
var theme_configProvider_1 = __webpack_require__("./src/app/Datahub/theme/theme.configProvider.ts");
var nga_module_1 = __webpack_require__("./src/app/Datahub/theme/nga.module.ts");
var trafficChart_component_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/trafficChart/trafficChart.component.ts");
var trafficChart_service_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/trafficChart/trafficChart.service.ts");
var chartistJs_component_1 = __webpack_require__("./src/app/Datahub/routes/charts/components/chartistJs/chartistJs.component.ts");
var chartistJs_service_1 = __webpack_require__("./src/app/Datahub/routes/charts/components/chartistJs/chartistJs.service.ts");
var pipelineSchematicsChart_component_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/pipelineSchematicsChart/pipelineSchematicsChart.component.ts");
var pipelineSchematicsChart_service_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/pipelineSchematicsChart/pipelineSchematicsChart.service.ts");
var runningProcesses_component_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/runningProcesses/runningProcesses.component.ts");
var highlightRunningProcess_directive_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/runningProcesses/highlightRunningProcess.directive.ts");
var systemInfo_component_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/systemInfo/systemInfo.component.ts");
var systemInfo_service_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/systemInfo/systemInfo.service.ts");
var ng2_charts_1 = __webpack_require__("./node_modules/ng2-charts/ng2-charts.js");
var DashboardModule = (function () {
    function DashboardModule() {
    }
    DashboardModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                forms_1.FormsModule,
                SharedModule_1.SharedModule,
                dashboard_routes_1.DashboardRouting,
                nga_module_1.NgaModule,
                ng2_charts_1.ChartsModule
            ],
            declarations: [
                pieChart_component_1.PieChart,
                trafficChart_component_1.TrafficChart,
                dashboard_component_1.Dashboard,
                pipelineSchematicsChart_component_1.PipeLinesSchematicsChartComponent,
                runningProcesses_component_1.RunningProcessesComponent,
                highlightRunningProcess_directive_1.ProcessHighlightDirective,
                systemInfo_component_1.SystemInfoComponent,
                chartistJs_component_1.ChartistJs
            ],
            providers: [pieChart_service_1.PieChartService, trafficChart_service_1.TrafficChartService, theme_configProvider_1.BaThemeConfigProvider,
                chartistJs_service_1.ChartistJsService, pipelineSchematicsChart_service_1.PipelinesSchematicsChartService,
                systemInfo_service_1.SystemInformationService]
        }), 
        __metadata('design:paramtypes', [])
    ], DashboardModule);
    return DashboardModule;
}());
exports.DashboardModule = DashboardModule;


/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/dashboard.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var dashboard_component_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/dashboard.component.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.DashboardRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Dashboard', component: dashboard_component_1.Dashboard, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/pieChart/pieChart.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var pieChart_service_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/pieChart/pieChart.service.ts");
__webpack_require__("./src/app/Datahub/routes/dashboard/pieChart/pieChart.loader.ts");
var PieChart = (function () {
    function PieChart(_pieChartService) {
        this._pieChartService = _pieChartService;
        this._init = false;
        this.charts = this._pieChartService.getData();
    }
    PieChart.prototype.ngAfterViewInit = function () {
        if (!this._init) {
            this._loadPieCharts();
            this._updatePieCharts();
            this._init = true;
        }
    };
    PieChart.prototype._loadPieCharts = function () {
        jQuery('.chart').each(function () {
            var chart = jQuery(this);
            chart['easyPieChart']({
                easing: 'easeOutBounce',
                onStep: function (from, to, percent) {
                    jQuery(this.el).find('.percent').text(Math.round(percent));
                },
                barColor: jQuery(this).attr('data-rel'),
                trackColor: 'rgba(0,0,0,0)',
                size: 84,
                scaleLength: 0,
                animation: 2000,
                lineWidth: 9,
                lineCap: 'round',
            });
        });
    };
    PieChart.prototype._updatePieCharts = function () {
        var getRandomArbitrary = function (min, max) { return Math.random() * (max - min) + min; };
        jQuery('.pie-charts .chart').each(function (index, chart) {
            jQuery(chart).data('easyPieChart').update(getRandomArbitrary(55, 90));
        });
    };
    PieChart = __decorate([
        core_1.Component({
            selector: 'pie-chart',
            encapsulation: core_1.ViewEncapsulation.None,
            styles: [__webpack_require__("./src/app/Datahub/routes/dashboard/pieChart/pieChart.scss")],
            template: __webpack_require__("./src/app/Datahub/routes/dashboard/pieChart/pieChart.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof pieChart_service_1.PieChartService !== 'undefined' && pieChart_service_1.PieChartService) === 'function' && _a) || Object])
    ], PieChart);
    return PieChart;
    var _a;
}());
exports.PieChart = PieChart;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/pieChart/pieChart.html":
/***/ (function(module, exports) {

module.exports = "\r\n<div class=\"row pie-charts\">\r\n\r\n  <ba-card *ngFor=\"let chart of charts\" class=\"pie-chart-item-container col-xlg-3 col-lg-3 col-md-6 col-sm-12 col-xs-12\"  >\r\n\r\n    <div class=\"pie-chart-item\">\r\n      <div class=\"chart\" [attr.data-rel]=\"chart.color\" data-percent=\"60\">\r\n        <span class=\"percent\"></span>\r\n      </div>\r\n      <div class=\"description\" style=\"color:black !important\">\r\n        <div>{{ chart.description }}</div>\r\n        <div class=\"description-stats\">{{ chart.stats }}</div>\r\n      </div>\r\n      <span class=\"chart-icon i-{{ chart.icon }}\"></span>\r\n    </div>\r\n\r\n  </ba-card>\r\n</div>\r\n\r\n<!--\r\n<span>Pie Chart here</span>\r\n-->"

/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/pieChart/pieChart.loader.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__("./node_modules/easy-pie-chart/dist/jquery.easypiechart.js");


/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/pieChart/pieChart.scss":
/***/ (function(module, exports) {

module.exports = ".pie-charts {\n  color: black; }\n\n.pie-chart-item-container {\n  position: relative;\n  padding: 0 15px;\n  float: left;\n  box-sizing: border-box; }\n\n.card {\n  height: 114px; }\n\n@media screen and (min-width: 1325px) {\n  .pie-chart-item-container {\n    width: 25%;\n    flex: 0 0 25%; } }\n\n@media screen and (min-width: 700px) and (max-width: 1325px) {\n  .pie-chart-item-container {\n    width: 50%;\n    flex: 0 0 50%; } }\n\n@media screen and (max-width: 700px) {\n  .pie-chart-item-container {\n    width: 100%;\n    flex: 0 0 100%; } }\n\n.pie-chart-item {\n  position: relative; }\n\n.chart-icon {\n  position: absolute;\n  right: 0;\n  top: 3px;\n  background-color: green !important; }\n\n@media screen and (min-width: 1325px) and (max-width: 1650px), (min-width: 700px) and (max-width: 830px), (max-width: 400px) {\n  .chart-icon {\n    display: none; } }\n\n.chart {\n  position: relative;\n  display: inline-block;\n  width: 84px;\n  height: 84px;\n  text-align: center;\n  float: left; }\n\n.chart canvas {\n  position: absolute;\n  top: 0;\n  left: 0; }\n\n.percent {\n  display: inline-block;\n  line-height: 84px;\n  z-index: 2;\n  font-size: 1.14286em;\n  color: black; }\n\n.percent:after {\n  content: '%';\n  margin-left: 0.1em;\n  font-size: .8em; }\n\n.description {\n  display: inline-block;\n  padding: 20px 0 0 20px;\n  font-size: 1.28571em;\n  opacity: 0.9; }\n\n.description-stats {\n  padding-top: 8px;\n  font-size: 1.71429em; }\n\n.angular {\n  margin-top: 100px; }\n\n.angular .chart {\n  margin-top: 0; }\n"

/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/pieChart/pieChart.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var theme_configProvider_1 = __webpack_require__("./src/app/Datahub/theme/theme.configProvider.ts");
var PieChartService = (function () {
    function PieChartService(_baConfig) {
        this._baConfig = _baConfig;
    }
    PieChartService.prototype.getData = function () {
        var pieColor = this._baConfig.get().colors.custom.dashboardPieChart;
        pieColor = "red";
        return [
            {
                color: pieColor,
                description: 'New Visits',
                stats: '57,820',
                icon: 'person',
            }, {
                color: pieColor,
                description: 'Purchases',
                stats: '$ 89,745',
                icon: 'money',
            }, {
                color: pieColor,
                description: 'Active Users',
                stats: '178,391',
                icon: 'face',
            }, {
                color: pieColor,
                description: 'Returned',
                stats: '32,592',
                icon: 'refresh',
            }
        ];
    };
    PieChartService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof theme_configProvider_1.BaThemeConfigProvider !== 'undefined' && theme_configProvider_1.BaThemeConfigProvider) === 'function' && _a) || Object])
    ], PieChartService);
    return PieChartService;
    var _a;
}());
exports.PieChartService = PieChartService;


/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/pipelineSchematicsChart/pipelineSchematicsChart.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var pipelineSchematicsChart_service_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/pipelineSchematicsChart/pipelineSchematicsChart.service.ts");
var displayGridFilterService_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGridFilterService.ts");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var _ = __webpack_require__("./node_modules/lodash/lodash.js");
var PipeLinesSchematicsChartComponent = (function () {
    function PipeLinesSchematicsChartComponent(_chartistJsService, filterService) {
        this._chartistJsService = _chartistJsService;
        this.filterService = filterService;
        this.scheduledList = [];
        this.runningList = [];
    }
    PipeLinesSchematicsChartComponent.prototype.ngOnInit = function () {
        var self = this;
        self.data = _.cloneDeep(self._chartistJsService.getAll());
        Observable_1.Observable.forkJoin(self._chartistJsService.getHistoryProcesses(), self._chartistJsService.getScheduledProcesses(), self._chartistJsService.getRunningProcesses()).subscribe(function (res) {
            // keep data here in the class for any posible usage later on
            self.historyData = res[0];
            self.scheduledList = res[1];
            self.runningList = res[2];
            // get aborted and completed
            self.historyData.Counts.forEach(function (item) {
                self.data.processesData.labels.push(item.Status);
                // if the bandwith is to small <5 there is no room to write te label
                // so we add few units to avoid overlap
                self.data.processesData.series.push(item.Count > 5 ? item.Count : item.Count + 4);
                // put ABORTED second in a list ( for color purpose, to be red : it is setted in  coresponding .scss file )
                if (item.Status.toUpperCase() === 'ABORTED' && self.data.processesData.labels.length >= 2) {
                    var lblsArray = self.data.processesData.labels;
                    self.swapArryElems(lblsArray, 1, self.data.processesData.labels.length - 1);
                    var lblsSeries = self.data.processesData.series;
                    self.swapArryElems(lblsSeries, 1, self.data.processesData.series.length - 1);
                }
                //put completed first in the list ( for color purpose )
                if (item.Status.toUpperCase() === 'COMPLETED') {
                    var lblsArray = self.data.processesData.labels;
                    self.swapArryElems(lblsArray, 0, self.data.processesData.labels.length - 1);
                    var lblsSeries = self.data.processesData.series;
                    self.swapArryElems(lblsSeries, 0, self.data.processesData.series.length - 1);
                }
                var legendItem = new pipelineSchematicsChart_service_1.LegendItem(item.Status, item.Count, self.historyData.Counts.indexOf(item) + 1, 'black');
                self.data.processesData.legendItems.push(legendItem);
            });
            //for Aborted to be on second position even when Completed are not coming and aborted is inserted  first
            var abortedIndex = self.data.processesData.labels.indexOf('Aborted');
            self.swapArryElems(self.data.processesData.labels, 1, abortedIndex);
            self.swapArryElems(self.data.processesData.series, 1, abortedIndex);
            //get running/initialized
            self.data.processesData.labels.push('Initialized');
            self.data.processesData.series.push(self.runningList.length > 5 ? self.runningList.length : self.runningList.length + 4);
            self.data.processesData.legendItems.push(new pipelineSchematicsChart_service_1.LegendItem('Initialized', self.runningList.length, self.data.processesData.legendItems.length + 1, 'black'));
            //get scheduled information
            self.data.processesData.labels.push('Scheduled');
            self.data.processesData.series.push(self.scheduledList.length > 5 ? self.scheduledList.length : self.scheduledList.length + 4);
            self.data.processesData.legendItems.push(new pipelineSchematicsChart_service_1.LegendItem('Scheduled', self.scheduledList.length, self.data.processesData.legendItems.length + 1, 'black'));
        });
    };
    PipeLinesSchematicsChartComponent.prototype.ngAfterContentChecked = function () {
        //      this.doFilterBy('Aborted');
    };
    PipeLinesSchematicsChartComponent.prototype.getResponsive = function (padding, offset) {
        return this._chartistJsService.getResponsive(padding, offset);
    };
    PipeLinesSchematicsChartComponent.prototype.doFilterBy = function (strFilter) {
        if (strFilter === 'Scheduled') {
            return;
        }
        if (strFilter === 'ALL') {
            this.filterService.doFilterBy.next({ filterName: 'Status', filterValue: '' });
        }
        else {
            this.filterService.doFilterBy.next({ filterName: 'Status', filterValue: strFilter });
        }
    };
    PipeLinesSchematicsChartComponent.prototype.swapArryElems = function (inputArray, j, k) {
        if (j < 0 || k < 0 || j > inputArray.length - 1 || k > inputArray.length - 1) {
            return;
        }
        inputArray[j] = [inputArray[k], inputArray[k] = inputArray[j]][0];
    };
    PipeLinesSchematicsChartComponent = __decorate([
        core_1.Component({
            selector: 'pipelineSchematics-chart',
            encapsulation: core_1.ViewEncapsulation.None,
            styles: [__webpack_require__("./node_modules/chartist/dist/chartist.css"), __webpack_require__("./src/app/Datahub/routes/dashboard/pipelineSchematicsChart/pipelineSchematicsChart.scss")],
            template: __webpack_require__("./src/app/Datahub/routes/dashboard/pipelineSchematicsChart/pipelineSchematicsChart.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof pipelineSchematicsChart_service_1.PipelinesSchematicsChartService !== 'undefined' && pipelineSchematicsChart_service_1.PipelinesSchematicsChartService) === 'function' && _a) || Object, (typeof (_b = typeof displayGridFilterService_1.DisplayGridFilterService !== 'undefined' && displayGridFilterService_1.DisplayGridFilterService) === 'function' && _b) || Object])
    ], PipeLinesSchematicsChartComponent);
    return PipeLinesSchematicsChartComponent;
    var _a, _b;
}());
exports.PipeLinesSchematicsChartComponent = PipeLinesSchematicsChartComponent;


/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/pipelineSchematicsChart/pipelineSchematicsChart.html":
/***/ (function(module, exports) {

module.exports = "<section class=\"chartist\">\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-12\">\r\n            <ba-chartist-chart baChartistChartClass=\"ct-chart\"\r\n                               baChartistChartType=\"Pie\"\r\n                               [baChartistChartData]=\"data['processesData']\"\r\n                               [baChartistChartOptions]=\"data['processesOptions']\"\r\n                               [baChartistChartResponsive]=\"getResponsive(40, 35)\"\r\n                               (onChartClick)=\"doFilterBy($event)\">\r\n            </ba-chartist-chart>\r\n        </div>\r\n    </div>\r\n    <div class=\"row legendItems\">\r\n        <div class=\"col-sm-12\">\r\n            <div class=\"channels-info-item\" *ngFor=\"let item of data['processesData'].legendItems\">\r\n                <div class=\"legend-color\" [ngStyle]=\"{'background-color': item.color}\"></div>\r\n                <p><label (click)=\"doFilterBy(item.label)\">{{ item.label }}</label><span class=\"channel-number\">{{ item.percentage }}</span></p>\r\n                <div class=\"progress progress-sm channel-progress\">\r\n                    <progress class=\"progress channel-progress\" value=\"{{item.percentage}}\" max=\"100\"></progress>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>"

/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/pipelineSchematicsChart/pipelineSchematicsChart.scss":
/***/ (function(module, exports) {

module.exports = ".ct-area {\n  fill-opacity: .5; }\n\n.ct-label {\n  color: #000000;\n  opacity: 0.9;\n  fill: #000000; }\n\n.ct-chart .ct-label {\n  font-size: 1em;\n  color: #000000; }\n\n.ct-chart svg {\n  width: 100%;\n  display: block; }\n\n.ct-series-a .ct-bar, .ct-series-a .ct-line, .ct-series-a .ct-point, .ct-series-a .ct-slice-donut, .ct-series-a .ct-slice-pie {\n  stroke: #4caf50 !important; }\n\n.ct-series-a .ct-slice-pie, .ct-series-a .ct-area {\n  fill: #4caf50 !important; }\n\n.ct-series-b .ct-bar, .ct-series-b .ct-line, .ct-series-b .ct-point, .ct-series-b .ct-slice-donut, .ct-series-b .ct-slice-pie {\n  stroke: #d20929 !important; }\n\n.ct-series-b .ct-slice-pie, .ct-series-b .ct-area {\n  fill: #d20929 !important; }\n\n.ct-series-c .ct-bar, .ct-series-c .ct-line, .ct-series-c .ct-point, .ct-series-c .ct-slice-donut, .ct-series-c .ct-slice-pie {\n  stroke: #1d18ff !important; }\n\n.ct-series-c .ct-slice-pie, .ct-series-c .ct-area {\n  fill: #1d18ff !important; }\n\n.ct-series-d .ct-bar, .ct-series-d .ct-line, .ct-series-d .ct-point, .ct-series-d .ct-slice-donut, .ct-series-d .ct-slice-pie {\n  stroke: #e7ba08 !important; }\n\n.ct-series-d .ct-slice-pie, .ct-series-d .ct-area {\n  fill: #e7ba08 !important; }\n\n.ct-series-e .ct-bar, .ct-series-e .ct-line, .ct-series-e .ct-point, .ct-series-e .ct-slice-donut, .ct-series-e .ct-slice-pie {\n  stroke: #40daf1 !important; }\n\n.ct-series-e .ct-slice-pie, .ct-series-e .ct-area {\n  fill: #40daf1 !important; }\n\n.stacked-bar .ct-bar {\n  stroke-width: 30px; }\n\n.legendItems {\n  width: 90%;\n  margin-left: 30px;\n  height: 200px; }\n\n.legend-color {\n  width: 10px;\n  height: 10px;\n  position: relative;\n  top: 12px;\n  border-radius: 15px;\n  left: -15px; }\n\n.channels-info {\n  display: inline-block;\n  width: calc(50% - 88px);\n  margin-left: 70px; }\n\n.channels-info-item p {\n  margin-bottom: 0px;\n  font-size: 15px;\n  opacity: 0.9;\n  color: black; }\n\n.channels-info-item .channel-number {\n  display: inline-block;\n  float: right;\n  color: black; }\n\n.channel-progress {\n  height: 8px;\n  border-radius: 0;\n  width: 100%;\n  margin-bottom: 0;\n  margin-top: 0 !important;\n  background-color: rgba(0, 0, 0, 0.15);\n  box-shadow: none; }\n\n.channel-progress .progress {\n  height: 4px;\n  background-color: rgba(0, 0, 0, 0.15);\n  box-shadow: none; }\n"

/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/pipelineSchematicsChart/pipelineSchematicsChart.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var theme_configProvider_1 = __webpack_require__("./src/app/Datahub/theme/theme.configProvider.ts");
var PipelinesSchematicsChartService = (function () {
    function PipelinesSchematicsChartService(_baConfig, httpServ) {
        this._baConfig = _baConfig;
        this.httpServ = httpServ;
        this.dashBoardURL = '/dashboard';
        this._data = {
            processesData: {
                labels: [],
                series: [],
                legendItems: []
            },
            processesOptions: {
                fullWidth: true,
                donut: true,
                showLabel: true,
                height: '300px',
                weight: '300px',
                labelDirection: 'explode',
                labelInterpolationFnc: function (value) {
                    return value[0];
                }
            },
        };
    }
    PipelinesSchematicsChartService.prototype.getAll = function () {
        return this._data;
    };
    PipelinesSchematicsChartService.prototype.getScheduledProcesses = function () {
        return this.httpServ.fetch(this.dashBoardURL + '/scheduled');
    };
    PipelinesSchematicsChartService.prototype.getRunningProcesses = function () {
        return this.httpServ.fetch(this.dashBoardURL + '/running');
    };
    PipelinesSchematicsChartService.prototype.getColorThresholds = function () {
        return this.httpServ.fetch('/application/configuration/SchematicThresholds');
    };
    PipelinesSchematicsChartService.prototype.getHistoryProcesses = function () {
        return this.httpServ.fetch(this.dashBoardURL + '/history');
    };
    PipelinesSchematicsChartService.prototype.getResponsive = function (padding, offset) {
        return [
            ['screen and (min-width: 1550px)', {
                    chartPadding: padding,
                    labelOffset: offset,
                    labelDirection: 'explode',
                    labelInterpolationFnc: function (value) {
                        return value;
                    }
                }],
            ['screen and (max-width: 1200px)', {
                    chartPadding: padding,
                    labelOffset: offset,
                    labelDirection: 'explode',
                    labelInterpolationFnc: function (value) {
                        return value;
                    }
                }],
            ['screen and (max-width: 600px)', {
                    chartPadding: 0,
                    labelOffset: 0,
                    labelInterpolationFnc: function (value) {
                        return value[0];
                    }
                }]
        ];
    };
    PipelinesSchematicsChartService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof theme_configProvider_1.BaThemeConfigProvider !== 'undefined' && theme_configProvider_1.BaThemeConfigProvider) === 'function' && _a) || Object, (typeof (_b = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _b) || Object])
    ], PipelinesSchematicsChartService);
    return PipelinesSchematicsChartService;
    var _a, _b;
}());
exports.PipelinesSchematicsChartService = PipelinesSchematicsChartService;
var LegendItem = (function () {
    function LegendItem(label, percentage, order, color, value) {
        this.label = label;
        this.percentage = percentage;
        this.order = order;
        this.color = color;
        this.value = value;
    }
    return LegendItem;
}());
exports.LegendItem = LegendItem;
/*
 simpleDonutData: {
 labels: ['Aborted', 'Completed', 'Scheduled'],
 series: [30, 60, 70],
 legendItems: [
 {
 value: 2000,
 color: 'black',
 label: 'Aborted',
 percentage: 50,
 order: 1,
 }, {
 value: 2000,
 color: 'black',
 label: 'Completed',
 percentage: 40,
 order: 4,
 }, {
 value: 2000,
 color: 'black',
 label: 'Scheduled',
 percentage: 95,
 order: 3,
 }
 ]
 }

 */ 


/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/runningProcesses/highlightRunningProcess.directive.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var ProcessHighlightDirective = (function () {
    function ProcessHighlightDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this._defaultColor = 'white';
    }
    ProcessHighlightDirective.prototype.ngAfterViewInit = function () {
        if (this.highlightColor)
            this.renderer.setElementStyle(this.el.nativeElement, 'backgroundColor', this.highlightColor || this._defaultColor);
    };
    __decorate([
        core_1.Input('processHighlight'), 
        __metadata('design:type', String)
    ], ProcessHighlightDirective.prototype, "highlightColor", void 0);
    ProcessHighlightDirective = __decorate([
        core_1.Directive({
            selector: '[processHighlight]'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _a) || Object, (typeof (_b = typeof core_1.Renderer !== 'undefined' && core_1.Renderer) === 'function' && _b) || Object])
    ], ProcessHighlightDirective);
    return ProcessHighlightDirective;
    var _a, _b;
}());
exports.ProcessHighlightDirective = ProcessHighlightDirective;


/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/runningProcesses/runningProcesses.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var pipelineSchematicsChart_service_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/pipelineSchematicsChart/pipelineSchematicsChart.service.ts");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var _ = __webpack_require__("./node_modules/lodash/lodash.js");
var RunningProcessesComponent = (function () {
    function RunningProcessesComponent(httpService) {
        this.httpService = httpService;
        this.runningList = [];
        this.countsSinceLastRefresh = 0;
        this.startRefresh$ = new Subject_1.Subject();
        this.stopRefresh$ = new Subject_1.Subject();
        this.lblAutoUpdate = "Automatic update is ON";
        this.autoUpdate = true;
        this.colorThresholdList = [];
    }
    RunningProcessesComponent.prototype.ngOnInit = function () {
        var self = this;
        var interval$ = Observable_1.Observable.interval(30000).startWith(0);
        var intervalThatStops$ = interval$.takeUntil(self.stopRefresh$);
        self.refreshListSubscript = self.startRefresh$.switchMapTo(intervalThatStops$).switchMapTo(self.httpService.getRunningProcesses()).subscribe(function (res) {
            self.countsSinceLastRefresh = 0;
            self.buildTheListForUi(res);
        });
        self.httpService.getColorThresholds().subscribe(function (res) {
            self.colorThresholdList = _.sortBy(JSON.parse(res), ['TimeInMinute']);
            self.startRefresh$.next();
        });
        self.countSubscription = Observable_1.Observable.interval(1000).subscribe(function (x) { return self.countsSinceLastRefresh++; });
    };
    RunningProcessesComponent.prototype.buildTheListForUi = function (theList) {
        var self = this;
        self.runningList = theList;
        var today = new Date();
        self.runningList.forEach(function (x) {
            var StartDate = new Date(x.StartDate);
            var diffMs = today.getTime() - StartDate.getTime();
            var minutesDuration = Math.round(diffMs / 60000);
            var notFoundColor = 'Red';
            var thresholdObjColor = self.colorThresholdList.find(function (item) { return minutesDuration <= item.TimeInMinute; });
            if (thresholdObjColor) {
                x.Color = thresholdObjColor.Color;
            }
            else {
                x.Color = notFoundColor;
            }
        });
    };
    RunningProcessesComponent.prototype.toggleAutoUpdate = function () {
        var self = this;
        self.autoUpdate = !self.autoUpdate;
        if (self.autoUpdate) {
            self.countsSinceLastRefresh = 0;
            self.lblAutoUpdate = "Automatic update is ON";
            self.startRefresh$.next();
        }
        else {
            self.lblAutoUpdate = "Automatic update is OFF";
            self.stopRefresh$.next();
        }
    };
    RunningProcessesComponent.prototype.ngOnDestroy = function () {
        this.countSubscription.unsubscribe();
        this.refreshListSubscript.unsubscribe();
        this.startRefresh$.unsubscribe();
        this.stopRefresh$.unsubscribe();
    };
    RunningProcessesComponent = __decorate([
        core_1.Component({
            selector: 'running-list',
            encapsulation: core_1.ViewEncapsulation.None,
            template: __webpack_require__("./src/app/Datahub/routes/dashboard/runningProcesses/runningProcesses.html"),
            styles: [__webpack_require__("./src/app/Datahub/routes/dashboard/runningProcesses/runningProcesses.scss")]
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof pipelineSchematicsChart_service_1.PipelinesSchematicsChartService !== 'undefined' && pipelineSchematicsChart_service_1.PipelinesSchematicsChartService) === 'function' && _a) || Object])
    ], RunningProcessesComponent);
    return RunningProcessesComponent;
    var _a;
}());
exports.RunningProcessesComponent = RunningProcessesComponent;


/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/runningProcesses/runningProcesses.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"form-group row\">\r\n    <div class=\"col-sm-12\">\r\n        <div class=\"col-md-8\">\r\n            <h4>{{runningList.length}} RESULTS ( {{countsSinceLastRefresh}} seconds ago)</h4>\r\n        </div>\r\n        <div class=\"col-md-4\">\r\n            <button class=\"button-standard\" id=\"autoUpdate\" (click)=\"toggleAutoUpdate()\">{{lblAutoUpdate}}</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        <table class=\"table table-bordered table-hover table-striped\">\r\n            <thead class=\"thead-inverse\">\r\n                <th>Entity</th>\r\n                <th>Start</th>\r\n                <th>Status</th>\r\n            </thead>\r\n            <tbody>\r\n            <tr *ngFor=\"let item of runningList\" [processHighlight]=\"item?.Color\">\r\n                <td>{{item?.Entity}}</td>\r\n                <td>{{item?.StartDate}}</td>\r\n                <td>{{item?.Status}}</td>\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/runningProcesses/runningProcesses.scss":
/***/ (function(module, exports) {

module.exports = "table {\n  font-size: 14px; }\n"

/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/systemInfo/systemInfo.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var systemInfo_service_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/systemInfo/systemInfo.service.ts");
//import {Chart} from './systemInfo.loader.ts';
var _ = __webpack_require__("./node_modules/lodash/lodash.js");
__webpack_require__("./node_modules/Chart.js/src/chart.js");
var SystemInfoComponent = (function () {
    function SystemInfoComponent(systemInfo) {
        this.systemInfo = systemInfo;
        // lineChart
        this.lineChartData = [
            [65, 59, 80, 81, 56, 55, 40],
            [28, 48, 40, 19, 86, 27, 90]
        ];
        this.lineChartLabels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'];
        this.lineChartType = 'line';
        this.lineChartOptions = {
            legend: {
                display: true,
                labels: {
                    fontColor: 'rgb(255, 99, 132)'
                }
            },
            animation: false,
            responsive: true
        };
        //  public monitorInfoData: any;
        this.SystemInfo = new SystemInfo();
        this.currentDrive = new Drive();
        this.allDrives = [];
        this.MemoryChart = { 'Data': { 'labels': ['Free'], 'datasets': [{ 'data': [0], 'label': 'Memory status' }] },
            'ChartType': 'line'
        };
        this.CPUChart = { 'Data': { 'labels': ['Usage'], 'datasets': [{ 'data': [0], 'label': 'CPU Usage' }] },
            'ChartType': 'bar'
        };
    }
    SystemInfoComponent.prototype.ngOnInit = function () {
        var self = this;
        self.getSystemInformation();
    };
    SystemInfoComponent.prototype.getSystemInformation = function () {
        var self = this;
        var subscription = self.systemInfo.getSystemMonitoringInfo().subscribe(function (resp) {
            self.SystemInfo = resp;
            self.buildMemoryChartInfo();
            self.buildCPUChartInfo();
            self.allDrives = _.cloneDeep(self.SystemInfo.DriveInfo);
            self.allDrives.forEach(function (x) {
                self.makeDriveChartReady(x);
            });
            self.currentDrive = self.allDrives[0];
            subscription.unsubscribe();
        });
    };
    // chart is expecting 2 arrays of info to build the chart based on
    SystemInfoComponent.prototype.makeDriveChartReady = function (drive) {
        drive.ChartType = 'pie';
        drive.ChartLabels = ['UsedDiskSpaceInGB', 'FreeDiskSpaceInGB'];
        drive.ChartData = [drive.UsedDiskSpaceInGB, drive.FreeDiskSpaceInGB];
        drive.ChartOptions = {
            legend: {
                display: true,
                labels: {
                    fontColor: 'rgb(255, 99, 132)'
                }
            },
            animation: false,
            responsive: true
        };
    };
    SystemInfoComponent.prototype.driveChanged = function (driveLetter) {
        this.currentDrive = this.allDrives.find(function (x) { return x.DriveLetter === driveLetter; });
    };
    SystemInfoComponent.prototype.randomizeType = function () {
        this.lineChartType = this.lineChartType === 'line' ? 'bar' : 'line';
        this.currentDrive.ChartType = this.currentDrive.ChartType === 'doughnut' ? 'pie' : 'doughnut';
        this.MemoryChart.ChartType = this.MemoryChart.ChartType === 'line' ? 'bar' : 'line';
        this.CPUChart.ChartType = this.CPUChart.ChartType === 'line' ? 'bar' : 'line';
    };
    SystemInfoComponent.prototype.chartClicked = function (e) {
        console.log(e);
    };
    SystemInfoComponent.prototype.chartHovered = function (e) {
        console.log(e);
    };
    SystemInfoComponent.prototype.buildMemoryChartInfo = function () {
        var self = this;
        self.MemoryChart.Data = {
            'labels': ['Free RAM(GB)', 'Used RAM(GB)', 'Total RAM(GB)'],
            'datasets': [{ 'label': 'Memory Status',
                    'data': [self.SystemInfo.FreeRAMInMB / 1000, self.SystemInfo.TotalRAMInGB - self.SystemInfo.FreeRAMInMB / 1000, self.SystemInfo.TotalRAMInGB]
                }]
        };
    };
    SystemInfoComponent.prototype.buildCPUChartInfo = function () {
        var self = this;
        self.CPUChart.Data = {
            'labels': ['In Use', 'Total'],
            'datasets': [{ 'label': 'CPU Usage for: ' + self.SystemInfo.HostName,
                    'data': [self.SystemInfo.CPUUsage, 100]
                }]
        };
    };
    SystemInfoComponent = __decorate([
        core_1.Component({
            selector: 'system-info',
            template: __webpack_require__("./src/app/Datahub/routes/dashboard/systemInfo/systemInfo.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof systemInfo_service_1.SystemInformationService !== 'undefined' && systemInfo_service_1.SystemInformationService) === 'function' && _a) || Object])
    ], SystemInfoComponent);
    return SystemInfoComponent;
    var _a;
}());
exports.SystemInfoComponent = SystemInfoComponent;
var Drive = (function () {
    function Drive() {
        //properties for UI usage
        this.ChartType = 'pie';
        this.ChartLabels = [];
        this.ChartData = [];
        this.ChartOptions = {
            legend: {
                display: true,
                labels: {
                    fontColor: 'rgb(255, 99, 132)'
                }
            },
            animation: false,
            responsive: true
        };
    }
    return Drive;
}());
exports.Drive = Drive;
var SystemInfo = (function () {
    function SystemInfo() {
        this.CPUUsage = 0;
        this.FreeRAMInMB = 0;
        this.TotalRAMInMB = 0;
        this.TotalRAMInGB = 0;
        this.DriveInfo = [];
        this.HostName = '';
    }
    return SystemInfo;
}());
exports.SystemInfo = SystemInfo;


/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/systemInfo/systemInfo.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"card-block row\">\r\n    <div class=\"col-sm-12 col-md-6 col-lg-4 col-xl-3\">\r\n        <accordion [title]=\"'Base Chart'\">\r\n            <accordionBodyContent>\r\n                <!-- <div> must surround <canvas> in order to render their content -->\r\n                <div>\r\n                    <canvas baseChart\r\n                            [data]=\"lineChartData\"\r\n                            [labels]=\"lineChartLabels\"\r\n                            [options]=\"lineChartOptions\"\r\n                            [chartType]=\"lineChartType\"\r\n                            (chartHover)=\"chartHovered($event)\"\r\n                            (chartClick)=\"chartClicked($event)\"></canvas>\r\n                </div>\r\n            </accordionBodyContent>\r\n        </accordion>\r\n    </div>\r\n    <!--- CPU usage -->\r\n    <div class=\"col-sm-12 col-md-6 col-lg-4 col-xl-3\">\r\n        <accordion [title]=\"'CPU Usage'\">\r\n            <accordionBodyContent>\r\n                <div>\r\n                    <canvas baseChart\r\n                            [datasets]=\"CPUChart.Data.datasets\"\r\n                            [labels]=\"CPUChart.Data.labels\"\r\n                            [chartType]=\"CPUChart.ChartType\"\r\n                            (chartHover)=\"chartHovered($event)\"\r\n                            (chartClick)=\"chartClicked($event)\"></canvas>\r\n                </div>\r\n            </accordionBodyContent>\r\n        </accordion>\r\n    </div>\r\n    <div class=\"col-sm-12 col-md-6 col-lg-4 col-xl-3\">\r\n        <accordion [title]=\"'Memory Status'\">\r\n            <accordionBodyContent>\r\n                <div>\r\n                    <canvas baseChart\r\n                            [datasets]=\"MemoryChart.Data.datasets\"\r\n                            [labels]=\"MemoryChart.Data.labels\"\r\n                            [chartType]=\"MemoryChart.ChartType\"\r\n                            (chartHover)=\"chartHovered($event)\"\r\n                            (chartClick)=\"chartClicked($event)\"></canvas>\r\n                </div>\r\n            </accordionBodyContent>\r\n        </accordion>\r\n    </div>\r\n    <div class=\"col-sm-12 col-md-6 col-lg-4 col-xl-3\">\r\n        <accordion [title]=\"'Disk Usage'\">\r\n            <accordionBodyContent>\r\n                <div>\r\n                    <select #objDrive (change)=\"driveChanged(objDrive.value)\">\r\n                        <option *ngFor=\"let drive of allDrives\">{{drive.DriveLetter}}</option>\r\n                    </select>&nbsp;&nbsp;<span>Total disk size: </span><strong>{{currentDrive?.TotalDiskSpaceInGB}}</strong>\r\n                    <canvas baseChart\r\n                            [data]=\"currentDrive.ChartData\"\r\n                            [labels]=\"currentDrive.ChartLabels\"\r\n                            [options]=\"currentDrive.ChartOptions\"\r\n                            [chartType]=\"currentDrive.ChartType\"\r\n                            (chartHover)=\"chartHovered($event)\"\r\n                            (chartClick)=\"chartClicked($event)\">\r\n                    </canvas>\r\n                </div>\r\n            </accordionBodyContent>\r\n        </accordion>\r\n    </div>\r\n    <div class=\"col-xs-12 col-md-12 text-center\">\r\n        <button class=\"button-standard\" (click)=\"randomizeType()\"><span class=\"fa fa-refresh\"></span> Toggle chart format</button>\r\n    </div>\r\n</div>\r\n    <!--\r\n    <div class=\"col-md-6\">\r\n    <canvas baseChart\r\n                [data]=\"lineChartData\"\r\n                [labels]=\"lineChartLabels\"\r\n                [options]=\"lineChartOptions\"\r\n                [chartType]=\"lineChartType\"\r\n                (chartHover)=\"chartHovered($event)\"\r\n                (chartClick)=\"chartClicked($event)\"></canvas>\r\n    </div>\r\n    <div class=\"col-md-6\">\r\n        <div style=\"width:500px; height:600px\">\r\n        <canvas baseChart\r\n                [data]=\"pieChartData\"\r\n                [labels]=\"pieChartLabels\"\r\n                [chartType]=\"pieChartType\"\r\n                (chartHover)=\"chartHovered($event)\"\r\n                (chartClick)=\"chartClicked($event)\"></canvas>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-md-12 text-center\" style=\"margin-top: 10px;height: 50%\">\r\n        <button (click)=\"randomizeType()\" style=\"display: inline-block\">Toggle</button>\r\n    </div>\r\n    -->\r\n"

/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/systemInfo/systemInfo.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var SystemInformationService = (function () {
    function SystemInformationService(httpServ) {
        this.httpServ = httpServ;
        this.systemMonitoring = '/monitoring';
    }
    SystemInformationService.prototype.getSystemMonitoringInfo = function () {
        return this.httpServ.fetch(this.systemMonitoring);
    };
    SystemInformationService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _a) || Object])
    ], SystemInformationService);
    return SystemInformationService;
    var _a;
}());
exports.SystemInformationService = SystemInformationService;


/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/trafficChart/trafficChart.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var trafficChart_service_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/trafficChart/trafficChart.service.ts");
var TrafficChart = (function () {
    function TrafficChart(trafficChartService) {
        this.trafficChartService = trafficChartService;
        this.doughnutData = trafficChartService.getData();
    }
    TrafficChart.prototype.ngAfterViewInit = function () {
        this._loadDoughnutCharts();
    };
    TrafficChart.prototype._loadDoughnutCharts = function () {
        var el = jQuery('.chart-area').get(0);
        /*
            new Chart(el.getContext('2d')).Doughnut(this.doughnutData, {
              segmentShowStroke: false,
              percentageInnerCutout : 64,
              responsive: true
            });
        */
    };
    TrafficChart = __decorate([
        core_1.Component({
            selector: 'traffic-chart',
            encapsulation: core_1.ViewEncapsulation.None,
            styles: [__webpack_require__("./src/app/Datahub/routes/dashboard/trafficChart/trafficChart.scss")],
            template: __webpack_require__("./src/app/Datahub/routes/dashboard/trafficChart/trafficChart.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof trafficChart_service_1.TrafficChartService !== 'undefined' && trafficChart_service_1.TrafficChartService) === 'function' && _a) || Object])
    ], TrafficChart);
    return TrafficChart;
    var _a;
}());
exports.TrafficChart = TrafficChart;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/trafficChart/trafficChart.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"channels-block\">\r\n    <div class=\"chart-bg\"></div>\r\n    <div class=\"traffic-chart\" id=\"trafficChart\" style=\"width: 400px; height:300px\">\r\n        <div class=\"canvas-holder\" style=\"color:black !important\">\r\n            <canvas class=\"chart-area\" width=\"300px\" height=\"300px\"></canvas>\r\n            <div class=\"traffic-text\">\r\n                1,900,128\r\n                <span>Views Total</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"traffic-legend\"></div>\r\n    </div>\r\n    <div class=\"channels-info\">\r\n        <div>\r\n            <div class=\"channels-info-item\" *ngFor=\"let item of doughnutData\">\r\n                <div class=\"legend-color\" [ngStyle]=\"{'background-color': item.color }\"></div>\r\n                <p>{{ item.label }}<span class=\"channel-number\">+{{ item.percentage }}%</span></p>\r\n                <div class=\"progress progress-sm channel-progress\">\r\n                    <progress class=\"progress\" value=\"{{item.percentage}}\" max=\"100\"></progress>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n"

/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/trafficChart/trafficChart.scss":
/***/ (function(module, exports) {

module.exports = ".channels-block {\n  width: 100%;\n  position: relative; }\n\n.chart-bg {\n  position: absolute;\n  width: 180px;\n  height: 180px;\n  left: 60px;\n  top: 60px;\n  background-color: transparent;\n  border-radius: 100px; }\n\n.ng2, .blur .traffic-chart .canvas-holder {\n  border: 15px solid rgba(0, 0, 0, 0.2);\n  border-radius: 150px; }\n\n.ng2, .blur .chart-bg {\n  background-color: rgba(0, 0, 0, 0.2); }\n\n.channels-info {\n  display: inline-block;\n  width: calc(100% - 370px);\n  margin-left: 70px;\n  margin-top: -20px; }\n\n.small-container .channels-info {\n  display: none; }\n\n.channels-info-item p {\n  margin-bottom: 9px;\n  font-size: 1.28571em;\n  opacity: 0.9;\n  color: black; }\n\n.channels-info-item .channel-number {\n  display: inline-block;\n  float: right;\n  color: black; }\n\n.traffic-chart {\n  width: 300px;\n  position: relative;\n  min-height: 300px;\n  float: left; }\n\n.traffic-legend {\n  display: inline-block;\n  padding: 70px 0 0 0;\n  width: 160px; }\n\n.traffic-legend ul.doughnut-legend li {\n  list-style: none;\n  font-size: 0.85714em;\n  margin-bottom: 12px;\n  line-height: 16px;\n  position: relative;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 120px; }\n\n.traffic-legend ul.doughnut-legend li span {\n  float: left;\n  display: inline-block;\n  width: 16px;\n  height: 16px;\n  margin-right: 10px; }\n\n.canvas-holder {\n  display: inline-block;\n  width: 300px;\n  height: 300px;\n  position: relative;\n  float: left; }\n\n.traffic-text {\n  width: 100%;\n  height: 40px;\n  position: absolute;\n  top: 50%;\n  left: 0;\n  margin-top: -24px;\n  line-height: 24px;\n  text-align: center;\n  font-size: 1.28571em; }\n\n.traffic-text span {\n  display: block;\n  font-size: 1.28571em;\n  color: black; }\n\n.channel-change {\n  display: block;\n  margin-bottom: 12px; }\n\n.channel-progress {\n  height: 4px;\n  border-radius: 0;\n  width: 100%;\n  margin-bottom: 0;\n  background-color: rgba(0, 0, 0, 0.15);\n  box-shadow: none; }\n\n.channel-progress .progress {\n  height: 4px;\n  background-color: rgba(0, 0, 0, 0.15);\n  box-shadow: none; }\n\n.legend-color {\n  width: 30px;\n  height: 30px;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.25);\n  position: relative;\n  top: 27px;\n  border-radius: 15px;\n  left: -45px; }\n\n@media (max-width: 768px) {\n  .card.medium-card.traffic-panel {\n    height: auto; }\n  div.channels-info {\n    display: block;\n    width: calc(100% - 88px);\n    margin-top: -65px;\n    margin-bottom: 10px; }\n  .traffic-chart {\n    position: inherit;\n    float: none;\n    margin: 0 auto; }\n  .chart-bg {\n    left: calc(50% - 90px); } }\n\n@media (max-width: 1465px) and (min-width: 1199px) {\n  .channels-info {\n    display: none; }\n  .traffic-chart {\n    position: inherit;\n    float: none;\n    margin: 0 auto; }\n  .chart-bg {\n    left: calc(50% - 90px); } }\n\n@media (max-width: 380px) {\n  .traffic-chart {\n    width: 240px; }\n  .canvas-holder {\n    width: 240px;\n    height: 240px; }\n  .chart-bg {\n    top: 30px; } }\n\n@media (max-width: 320px) {\n  .chart-bg {\n    left: 50px;\n    top: 50px;\n    width: 142px;\n    height: 142px; } }\n"

/***/ }),

/***/ "./src/app/Datahub/routes/dashboard/trafficChart/trafficChart.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
//import {BaThemeConfigProvider, colorHelper} from '../../../theme';
var theme_configProvider_1 = __webpack_require__("./src/app/Datahub/theme/theme.configProvider.ts");
var theme_constants_1 = __webpack_require__("./src/app/Datahub/theme/theme.constants.ts");
var TrafficChartService = (function () {
    function TrafficChartService(_baConfig) {
        this._baConfig = _baConfig;
    }
    TrafficChartService.prototype.getData = function () {
        var dashboardColors = this._baConfig.get().colors.dashboard;
        return [
            {
                value: 2000,
                color: dashboardColors.red,
                highlight: theme_constants_1.colorHelper.shade(dashboardColors.surfieGreen, 15),
                label: 'Scheduled but not run yet',
                percentage: 87,
                order: 1,
            }, {
                value: 1500,
                color: dashboardColors.gossip,
                highlight: theme_constants_1.colorHelper.shade(dashboardColors.gossip, 15),
                label: 'Finished',
                percentage: 22,
                order: 4,
            }, {
                value: 1000,
                color: dashboardColors.silverTree,
                highlight: theme_constants_1.colorHelper.shade(dashboardColors.silverTree, 15),
                label: 'Pipelines',
                percentage: 70,
                order: 3,
            }, {
                value: 1200,
                color: dashboardColors.surfieGreen,
                highlight: theme_constants_1.colorHelper.shade(dashboardColors.surfieGreen, 15),
                label: 'Schematics',
                percentage: 38,
                order: 2,
            }, {
                value: 400,
                color: dashboardColors.blueStone,
                highlight: theme_constants_1.colorHelper.shade(dashboardColors.blueStone, 15),
                label: 'Finished with warnings',
                percentage: 17,
                order: 0,
            },
        ];
    };
    TrafficChartService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof theme_configProvider_1.BaThemeConfigProvider !== 'undefined' && theme_configProvider_1.BaThemeConfigProvider) === 'function' && _a) || Object])
    ], TrafficChartService);
    return TrafficChartService;
    var _a;
}());
exports.TrafficChartService = TrafficChartService;


/***/ }),

/***/ "./src/app/Datahub/routes/home/calendarutils.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fns_1 = __webpack_require__("./src/app/Datahub/routes/home/fns.ts");
var calendarService_1 = __webpack_require__("./src/app/ReusableServices/calendarService.ts");
var calendarutils = (function () {
    function calendarutils() {
    }
    calendarutils.getWeekViewEventSpan = function (event, offset, startOfWeek) {
        var span = 1;
        if (event.end) {
            var begin = event.start < startOfWeek ? startOfWeek : event.start;
            span = fns_1.fns.differenceInDays(fns_1.fns.addMinutes(fns_1.fns.endOfDay(event.end), 1), fns_1.fns.startOfDay(begin));
            if (span > calendarutils.DAYS_IN_WEEK) {
                span = calendarutils.DAYS_IN_WEEK;
            }
        }
        var totalLength = offset + span;
        if (totalLength > calendarutils.DAYS_IN_WEEK) {
            span -= (totalLength - calendarutils.DAYS_IN_WEEK);
        }
        return span;
    };
    calendarutils.getWeekViewEventOffset = function (event, startOfWeek) {
        var offset = 0;
        if (fns_1.fns.startOfDay(event.start) > startOfWeek) {
            offset = fns_1.fns.differenceInDays(fns_1.fns.startOfDay(event.start), startOfWeek);
        }
        return offset;
    };
    calendarutils.isEventIsPeriod = function (_a) {
        var event = _a.event, periodStart = _a.periodStart, periodEnd = _a.periodEnd;
        var eventStart = event.start;
        var eventEnd = event.end || event.start;
        if (eventStart > periodStart && eventStart < periodEnd) {
            return true;
        }
        if (eventEnd > periodStart && eventEnd < periodEnd) {
            return true;
        }
        if (eventStart < periodStart && eventEnd > periodEnd) {
            return true;
        }
        if (fns_1.fns.isSameSecond(eventStart, periodStart) || fns_1.fns.isSameSecond(eventStart, periodEnd)) {
            return true;
        }
        if (fns_1.fns.isSameSecond(eventEnd, periodStart) || fns_1.fns.isSameSecond(eventEnd, periodEnd)) {
            return true;
        }
        return false;
    };
    calendarutils.getEventsInPeriod = function (_a) {
        var events = _a.events, periodStart = _a.periodStart, periodEnd = _a.periodEnd;
        if (events) {
            return events.filter(function (event) {
                return calendarutils.isEventIsPeriod({ event: event, periodStart: periodStart, periodEnd: periodEnd });
            });
        }
        else {
            return [];
        }
    };
    calendarutils.getWeekDay = function (_a) {
        var date = _a.date;
        var today = fns_1.fns.startOfDay(new Date());
        return {
            date: date,
            isPast: date < today,
            isToday: fns_1.fns.isSameDay(date, today),
            isFuture: date > today,
            isWeekend: calendarutils.WEEKEND_DAY_NUMBERS.indexOf(fns_1.fns.getDay(date)) > -1
        };
    };
    calendarutils.getWeekViewHeader = function (_a) {
        var viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn;
        var start = fns_1.fns.startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
        var days = [];
        for (var i = 0; i < calendarutils.DAYS_IN_WEEK; i++) {
            var date = fns_1.fns.addDays(start, i);
            days.push(calendarutils.getWeekDay({ date: date }));
        }
        return days;
    };
    calendarutils.getWeekView = function (_a) {
        var events = _a.events, viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn;
        var startOfViewWeek = fns_1.fns.startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
        var endOfViewWeek = fns_1.fns.endOfWeek(viewDate, { weekStartsOn: weekStartsOn });
        var eventsMapped = calendarutils.getEventsInPeriod({ events: events, periodStart: startOfViewWeek, periodEnd: endOfViewWeek }).map(function (event) {
            var offset = calendarutils.getWeekViewEventOffset(event, startOfViewWeek);
            var span = calendarutils.getWeekViewEventSpan(event, offset, startOfViewWeek);
            return {
                event: event,
                offset: offset,
                span: span,
                startsBeforeWeek: event.start < startOfViewWeek,
                endsAfterWeek: (event.end || event.start) > endOfViewWeek
            };
        }).sort(function (itemA, itemB) {
            var startSecondsDiff = fns_1.fns.differenceInSeconds(itemA.event.start, itemB.event.start);
            if (startSecondsDiff === 0) {
                return fns_1.fns.differenceInSeconds(itemB.event.end || itemB.event.start, itemA.event.end || itemA.event.start);
            }
            return startSecondsDiff;
        });
        var eventRows = [];
        var allocatedEvents = [];
        eventsMapped.forEach(function (event, index) {
            if (allocatedEvents.indexOf(event) === -1) {
                allocatedEvents.push(event);
                var rowSpan_1 = event.span + event.offset;
                var otherRowEvents = eventsMapped.slice(index + 1).filter(function (nextEvent) {
                    if (nextEvent.offset >= rowSpan_1 &&
                        rowSpan_1 + nextEvent.span <= calendarutils.DAYS_IN_WEEK &&
                        allocatedEvents.indexOf(nextEvent) === -1) {
                        nextEvent.offset -= rowSpan_1;
                        rowSpan_1 += nextEvent.span + nextEvent.offset;
                        allocatedEvents.push(nextEvent);
                        return true;
                    }
                });
                eventRows.push({
                    row: [
                        event
                    ].concat(otherRowEvents)
                });
            }
        });
        return eventRows;
    };
    calendarutils.getMonthView = function (_a) {
        var type = calendarutils.eventType;
        if (calendarService_1.CalendarService.calEvents[type]) {
            var events = calendarService_1.CalendarService.calEvents[type], viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn;
        }
        else {
            var events = _a.events, viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn;
        }
        var originalDate = viewDate;
        var start;
        var end;
        switch (calendarService_1.CalendarService.selectedSalendarMode) {
            case calendarService_1.calendarMode.fourWeeks:
                start = fns_1.fns.startOfWeek(fns_1.fns.removeWeeks(originalDate, 2), { weekStartsOn: weekStartsOn });
                end = fns_1.fns.endOfWeek(fns_1.fns.addWeeks(originalDate, 2), { weekStartsOn: weekStartsOn });
                break;
            case calendarService_1.calendarMode.standard:
                start = fns_1.fns.startOfWeek(fns_1.fns.startOfMonth(viewDate), { weekStartsOn: weekStartsOn });
                end = fns_1.fns.endOfWeek(fns_1.fns.endOfMonth(viewDate), { weekStartsOn: weekStartsOn });
                break;
        }
        var eventsInMonth = calendarutils.getEventsInPeriod({
            events: events,
            periodStart: start,
            periodEnd: end
        });
        var days = [];
        for (var i = 0; i < fns_1.fns.differenceInDays(end, start) + 1; i++) {
            var date = fns_1.fns.addDays(start, i);
            var day = calendarutils.getWeekDay({ date: date });
            var events_1 = calendarutils.getEventsInPeriod({
                events: eventsInMonth,
                periodStart: fns_1.fns.startOfDay(date),
                periodEnd: fns_1.fns.endOfDay(date)
            });
            day.inMonth = fns_1.fns.isSameMonth(date, viewDate);
            day.events = events_1;
            day.badgeTotal = events_1.length;
            days.push(day);
        }
        var rows = Math.floor(days.length / 7);
        var rowOffsets = [];
        for (var i = 0; i < rows; i++) {
            rowOffsets.push(i * 7);
        }
        return {
            rowOffsets: rowOffsets,
            days: days
        };
    };
    calendarutils.getDayView = function (_a) {
        var events = _a.events, viewDate = _a.viewDate, hourSegments = _a.hourSegments, dayStart = _a.dayStart, dayEnd = _a.dayEnd, eventWidth = _a.eventWidth, segmentHeight = _a.segmentHeight;
        var startOfView = fns_1.fns.setMinutes(fns_1.fns.setHours(fns_1.fns.startOfDay(viewDate), dayStart.hour), dayStart.minute);
        var endOfView = fns_1.fns.setMinutes(fns_1.fns.setHours(fns_1.fns.startOfMinute(fns_1.fns.endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
        var previousDayEvents = [];
        var dayViewEvents = calendarutils.getEventsInPeriod({
            events: events.filter(function (event) { return !event.allDay; }),
            periodStart: startOfView,
            periodEnd: endOfView
        }).sort(function (eventA, eventB) {
            return eventA.start.valueOf() - eventB.start.valueOf();
        }).map(function (event) {
            var eventStart = event.start;
            var eventEnd = event.end || eventStart;
            var startsBeforeDay = eventStart < startOfView;
            var endsAfterDay = eventEnd > endOfView;
            var hourHeightModifier = (hourSegments * segmentHeight) / calendarutils.MINUTES_IN_HOUR;
            var top = 0;
            if (eventStart > startOfView) {
                top += fns_1.fns.differenceInMinutes(eventStart, startOfView);
            }
            top *= hourHeightModifier;
            var startDate = startsBeforeDay ? startOfView : eventStart;
            var endDate = endsAfterDay ? endOfView : eventEnd;
            var height = fns_1.fns.differenceInMinutes(endDate, startDate);
            if (!event.end) {
                height = segmentHeight;
            }
            else {
                height *= hourHeightModifier;
            }
            var bottom = top + height;
            var overlappingPreviousEvents = previousDayEvents.filter(function (previousEvent) {
                var previousEventTop = previousEvent.top;
                var previousEventBottom = previousEvent.top + previousEvent.height;
                if (top < previousEventBottom && previousEventBottom < bottom) {
                    return true;
                }
                else if (previousEventTop <= top && bottom <= previousEventBottom) {
                    return true;
                }
                return false;
            });
            var dayEvent = {
                event: event,
                height: height,
                width: eventWidth,
                top: top,
                left: overlappingPreviousEvents.length * eventWidth,
                startsBeforeDay: startsBeforeDay,
                endsAfterDay: endsAfterDay
            };
            if (height > 0) {
                previousDayEvents.push(dayEvent);
            }
            return dayEvent;
        }).filter(function (dayEvent) { return dayEvent.height > 0; });
        var width = Math.max.apply(Math, dayViewEvents.map(function (event) { return event.left + event.width; }));
        var allDayEvents = calendarutils.getEventsInPeriod({
            events: events.filter(function (event) { return event.allDay; }),
            periodStart: startOfView,
            periodEnd: endOfView
        });
        return {
            events: dayViewEvents,
            width: width,
            allDayEvents: allDayEvents
        };
    };
    calendarutils.getDayViewHourGrid = function (_a) {
        var viewDate = _a.viewDate, hourSegments = _a.hourSegments, dayStart = _a.dayStart, dayEnd = _a.dayEnd;
        var hours = [];
        var startOfView = fns_1.fns.setMinutes(fns_1.fns.setHours(fns_1.fns.startOfDay(viewDate), dayStart.hour), dayStart.minute);
        var endOfView = fns_1.fns.setMinutes(fns_1.fns.setHours(fns_1.fns.startOfMinute(fns_1.fns.endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
        var segmentDuration = calendarutils.MINUTES_IN_HOUR / hourSegments;
        var startOfViewDay = fns_1.fns.startOfDay(viewDate);
        for (var i = 0; i < calendarutils.HOURS_IN_DAY; i++) {
            var segments = [];
            for (var j = 0; j < hourSegments; j++) {
                var date = fns_1.fns.addMinutes(fns_1.fns.addHours(startOfViewDay, i), j * segmentDuration);
                if (date >= startOfView && date < endOfView) {
                    segments.push({
                        date: date,
                        isStart: j === 0
                    });
                }
            }
            if (segments.length > 0) {
                hours.push({ segments: segments });
            }
        }
        return hours;
    };
    calendarutils.WEEKEND_DAY_NUMBERS = [0, 6];
    calendarutils.DAYS_IN_WEEK = 7;
    calendarutils.HOURS_IN_DAY = 24;
    calendarutils.MINUTES_IN_HOUR = 60;
    calendarutils.eventType = "Äll";
    return calendarutils;
}());
exports.calendarutils = calendarutils;


/***/ }),

/***/ "./src/app/Datahub/routes/home/fns.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fns = (function () {
    function fns() {
    }
    fns.setCurrentDate = function (date) {
        fns.currentDate = date;
    };
    fns.getCurrentDate = function () {
        return fns.currentDate;
    };
    fns.addDays = function (dirtyDate, amount) {
        var date = fns.parse(dirtyDate);
        date.setDate(date.getDate() + amount);
        return date;
    };
    fns.removeDays = function (dirtyDate, amount) {
        var date = fns.parse(dirtyDate);
        date.setDate(date.getDate() - amount);
        return date;
    };
    fns.isDate = function (argument) {
        return argument instanceof Date;
    };
    fns.parse = function (dateString) {
        if (this.isDate(dateString)) {
            // Prevent the date to lose the milliseconds when passed to new Date() in IE10
            return new Date(dateString.getTime());
        }
        else if (typeof dateString !== 'string') {
            return new Date(dateString);
        }
        var dateStrings = fns.splitDateString(dateString);
        var date = fns.parseDate(dateStrings.date);
        if (date) {
            var timestamp = date.getTime();
            var time = 0;
            var offset;
            if (dateStrings.time) {
                time = fns.parseTime(dateStrings.time);
            }
            if (dateStrings.timezone) {
                offset = fns.parseTimezone(dateStrings.timezone);
            }
            else {
                // get offset accurate to hour in timezones that change offset
                offset = new Date(timestamp + time).getTimezoneOffset();
                offset = new Date(timestamp + time + offset * fns.MILLISECONDS_IN_MINUTE).getTimezoneOffset();
            }
            return new Date(timestamp + time + offset * fns.MILLISECONDS_IN_MINUTE);
        }
        else {
            return new Date(dateString);
        }
    };
    fns.splitDateString = function (dateString) {
        var dateStrings = {};
        var array = dateString.split(fns.parseTokenDateTimeDelimeter);
        var timeString;
        if (fns.parseTokenPlainTime.test(array[0])) {
            dateStrings.date = null;
            timeString = array[0];
        }
        else {
            dateStrings.date = array[0];
            timeString = array[1];
        }
        if (timeString) {
            var token = fns.parseTokenTimezone.exec(timeString);
            if (token) {
                dateStrings.time = timeString.replace(token[1], '');
                dateStrings.timezone = token[1];
            }
            else {
                dateStrings.time = timeString;
            }
        }
        return dateStrings;
    };
    fns.parseDate = function (dateString) {
        var year;
        var yearToken;
        // YYYY or ±YYYYY
        yearToken = fns.parseTokenYYYY.exec(dateString) ||
            fns.parseTokenYYYYY.exec(dateString);
        if (yearToken) {
            var yearString = yearToken[1];
            year = parseInt(yearString, 10);
            dateString = dateString.slice(yearString.length);
        }
        else {
            return null;
        }
        var token;
        var date;
        var month;
        var week;
        // YYYY
        if (dateString.length === 0) {
            date = new Date(0);
            date.setUTCFullYear(year);
            return date;
        }
        // YYYY-MM
        token = fns.parseTokenMM.exec(dateString);
        if (token) {
            date = new Date(0);
            month = parseInt(token[1], 10) - 1;
            date.setUTCFullYear(year, month);
            return date;
        }
        // YYYY-DDD or YYYYDDD
        token = fns.parseTokenDDD.exec(dateString);
        if (token) {
            date = new Date(0);
            var dayOfYear = parseInt(token[1], 10);
            date.setUTCFullYear(year, 0, dayOfYear);
            return date;
        }
        // YYYY-MM-DD or YYYYMMDD
        token = fns.parseTokenMMDD.exec(dateString);
        if (token) {
            var date_1 = new Date(0);
            month = parseInt(token[1], 10) - 1;
            var day = parseInt(token[2], 10);
            date_1.setUTCFullYear(year, month, day);
            return date_1;
        }
        // YYYY-Www or YYYYWww
        token = fns.parseTokenWww.exec(dateString);
        if (token) {
            var week_1 = parseInt(token[1], 10) - 1;
            return fns.dayOfISOYear(year, week_1, null);
        }
        // YYYY-Www-D or YYYYWwwD
        token = fns.parseTokenWwwD.exec(dateString);
        if (token) {
            week = parseInt(token[1], 10) - 1;
            var dayOfWeek = parseInt(token[2], 10) - 1;
            return fns.dayOfISOYear(year, week, dayOfWeek);
        }
        // Invalid ISO-formatted date
        return null;
    };
    fns.parseTime = function (timeString) {
        var token;
        var hours;
        var minutes;
        // hh
        token = fns.parseTokenHH.exec(timeString);
        if (token) {
            hours = parseFloat(token[1].replace(',', '.'));
            return (hours % 24) * fns.MILLISECONDS_IN_HOUR;
        }
        // hh:mm or hhmm
        token = fns.parseTokenHHMM.exec(timeString);
        if (token) {
            hours = parseInt(token[1], 10);
            minutes = parseFloat(token[2].replace(',', '.'));
            return (hours % 24) * fns.MILLISECONDS_IN_HOUR +
                minutes * fns.MILLISECONDS_IN_MINUTE;
        }
        // hh:mm:ss or hhmmss
        token = fns.parseTokenHHMMSS.exec(timeString);
        if (token) {
            hours = parseInt(token[1], 10);
            minutes = parseInt(token[2], 10);
            var seconds = parseFloat(token[3].replace(',', '.'));
            return (hours % 24) * fns.MILLISECONDS_IN_HOUR +
                minutes * fns.MILLISECONDS_IN_MINUTE +
                seconds * 1000;
        }
        // Invalid ISO-formatted time
        return null;
    };
    fns.parseTimezone = function (timezoneString) {
        var token;
        var absoluteOffset;
        // Z
        token = fns.parseTokenTimezoneZ.exec(timezoneString);
        if (token) {
            return 0;
        }
        // ±hh
        token = fns.parseTokenTimezoneHH.exec(timezoneString);
        if (token) {
            absoluteOffset = parseInt(token[2], 10) * 60;
            return (token[1] === '+') ? -absoluteOffset : absoluteOffset;
        }
        // ±hh:mm or ±hhmm
        token = fns.parseTokenTimezoneHHMM.exec(timezoneString);
        if (token) {
            absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10);
            return (token[1] === '+') ? -absoluteOffset : absoluteOffset;
        }
        return 0;
    };
    fns.dayOfISOYear = function (isoYear, week, day) {
        week = week || 0;
        day = day || 0;
        var date = new Date(0);
        date.setUTCFullYear(isoYear, 0, 4);
        var diff = week * 7 + day + 1 - date.getUTCDay();
        date.setUTCDate(date.getUTCDate() + diff);
        return date;
    };
    fns.getISOWeek = function (dirtyDate) {
        var date = fns.parse(dirtyDate);
        var diff = fns.startOfISOWeek(date).getTime() - fns.startOfISOYear(date).getTime();
        // Round the number of days to the nearest integer
        // because the number of milliseconds in a week is not constant
        // (e.g. it's different in the week of the daylight saving time clock shift)
        return Math.round(diff / fns.MILLISECONDS_IN_WEEK) + 1;
    };
    fns.isSameDay = function (dirtyDateLeft, dirtyDateRight) {
        var dateLeftStartOfDay = fns.startOfDay(dirtyDateLeft);
        var dateRightStartOfDay = fns.startOfDay(dirtyDateRight);
        return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
    };
    fns.getISOWeeksInYear = function (dirtyDate) {
        var thisYear = fns.startOfISOYear(dirtyDate);
        var nextYear = fns.startOfISOYear(fns.addWeeks(thisYear, 60));
        var diff = nextYear.valueOf() - thisYear.valueOf();
        // Round the number of weeks to the nearest integer
        // because the number of milliseconds in a week is not constant
        // (e.g. it's different in the week of the daylight saving time clock shift)
        return Math.round(diff / fns.MILLISECONDS_IN_WEEK);
    };
    fns.startOfISOYear = function (dirtyDate) {
        var year = fns.getISOYear(dirtyDate);
        var date = fns.startOfISOWeek(new Date(year, 0, 4));
        return date;
    };
    fns.getISOYear = function (dirtyDate) {
        var date = fns.parse(dirtyDate);
        var year = date.getFullYear();
        var startOfNextYear = fns.startOfISOWeek(new Date(year + 1, 0, 4));
        var startOfThisYear = fns.startOfISOWeek(new Date(year, 0, 4));
        if (date.getTime() >= startOfNextYear.getTime()) {
            return year + 1;
        }
        else if (date.getTime() >= startOfThisYear.getTime()) {
            return year;
        }
        else {
            return year - 1;
        }
    };
    fns.startOfISOWeek = function (dirtyDate) {
        return fns.startOfWeek(dirtyDate, { weekStartsOn: 1 });
    };
    fns.startOfWeek = function (dirtyDate, options) {
        var weekStartsOn = options ? (options.weekStartsOn || 0) : 0;
        var date = fns.parse(dirtyDate);
        var day = date.getDay();
        var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
        date.setDate(date.getDate() - diff);
        date.setHours(0, 0, 0, 0);
        return date;
    };
    fns.startOfDay = function (dirtyDate) {
        var date = fns.parse(dirtyDate);
        date.setHours(0, 0, 0, 0);
        return date;
    };
    fns.addWeeks = function (dirtyDate, amount) {
        var days = amount * 7;
        return fns.addDays(dirtyDate, days);
    };
    fns.removeWeeks = function (dirtyDate, amount) {
        var days = amount * 7;
        return fns.removeDays(dirtyDate, days);
    };
    fns.addMonths = function (dirtyDate, amount) {
        var date = fns.parse(dirtyDate);
        var desiredMonth = date.getMonth() + amount;
        var daysInMonth = fns.getDaysInMonth(new Date(date.getFullYear(), desiredMonth, 1));
        // Set the last day of the new month
        // if the original date was the last day of the longer month
        date.setMonth(desiredMonth, Math.min(daysInMonth, date.getDate()));
        return date;
    };
    fns.getDaysInMonth = function (dirtyDate) {
        var date = fns.parse(dirtyDate);
        var year = date.getFullYear();
        var monthIndex = date.getMonth();
        return new Date(year, monthIndex + 1, 0).getDate();
    };
    fns.setMinutes = function (dirtyDate, minutes) {
        var date = fns.parse(dirtyDate);
        date.setMinutes(minutes);
        return date;
    };
    fns.setHours = function (dirtyDate, hours) {
        var date = fns.parse(dirtyDate);
        date.setHours(hours);
        return date;
    };
    fns.differenceInMinutes = function (dirtyDateLeft, dirtyDateRight) {
        var diff = fns.differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / fns.MILLISECONDS_IN_MINUTE;
        return diff >= 1 ? Math.floor(diff) : Math.ceil(diff);
    };
    fns.differenceInMilliseconds = function (dirtyDateLeft, dirtyDateRight) {
        var dateLeft = fns.parse(dirtyDateLeft);
        var dateRight = fns.parse(dirtyDateRight);
        return dateLeft.getTime() - dateRight.getTime();
    };
    fns.addMinutes = function (dirtyDate, amount) {
        var date = fns.parse(dirtyDate);
        date.setMinutes(date.getMinutes() + amount);
        return date;
    };
    fns.addHours = function (dirtyDate, amount) {
        var date = fns.parse(dirtyDate);
        date.setHours(date.getHours() + amount);
        return date;
    };
    fns.endOfDay = function (dirtyDate) {
        var date = fns.parse(dirtyDate);
        date.setHours(23, 59, 59, 999);
        return date;
    };
    fns.startOfMinute = function (dirtyDate) {
        var date = fns.parse(dirtyDate);
        date.setSeconds(0, 0);
        return date;
    };
    fns.differenceInSeconds = function (dirtyDateLeft, dirtyDateRight) {
        var diff = fns.differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;
        return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
    };
    fns.endOfMonth = function (dirtyDate) {
        var date = fns.parse(dirtyDate);
        var month = date.getMonth();
        date.setFullYear(date.getFullYear(), month + 1, 0);
        date.setHours(23, 59, 59, 999);
        return date;
    };
    fns.endOfWeek = function (dirtyDate, options) {
        var weekStartsOn = options ? (options.weekStartsOn || 0) : 0;
        var date = fns.parse(dirtyDate);
        var day = date.getDay();
        var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
        date.setDate(date.getDate() + diff);
        date.setHours(23, 59, 59, 999);
        return date;
    };
    fns.isSameMonth = function (dirtyDateLeft, dirtyDateRight) {
        var dateLeft = fns.parse(dirtyDateLeft);
        var dateRight = fns.parse(dirtyDateRight);
        return dateLeft.getFullYear() === dateRight.getFullYear() &&
            dateLeft.getMonth() === dateRight.getMonth();
    };
    fns.getDay = function (dirtyDate) {
        var date = fns.parse(dirtyDate);
        var day = date.getDay();
        return day;
    };
    fns.isSameSecond = function (dirtyDateLeft, dirtyDateRight) {
        var dateLeftStartOfSecond = fns.startOfSecond(dirtyDateLeft);
        var dateRightStartOfSecond = fns.startOfSecond(dirtyDateRight);
        return dateLeftStartOfSecond.getTime() === dateRightStartOfSecond.getTime();
    };
    fns.startOfMonth = function (dirtyDate) {
        var date = fns.parse(dirtyDate);
        date.setDate(1);
        date.setHours(0, 0, 0, 0);
        return date;
    };
    fns.startOfSecond = function (dirtyDate) {
        var date = fns.parse(dirtyDate);
        date.setMilliseconds(0);
        return date;
    };
    fns.differenceInDays = function (dirtyDateLeft, dirtyDateRight) {
        var dateLeft = fns.parse(dirtyDateLeft);
        var dateRight = fns.parse(dirtyDateRight);
        var sign = fns.compareAsc(dateLeft, dateRight);
        var difference = Math.abs(fns.differenceInCalendarDays(dateLeft, dateRight));
        dateLeft.setDate(dateLeft.getDate() - sign * difference);
        // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
        // If so, result must be decreased by 1 in absolute value
        var isLastDayNotFull = fns.compareAsc(dateLeft, dateRight) === -sign;
        return sign * (difference - isLastDayNotFull);
    };
    fns.differenceInCalendarDays = function (dirtyDateLeft, dirtyDateRight) {
        var startOfDayLeft = fns.startOfDay(dirtyDateLeft);
        var startOfDayRight = fns.startOfDay(dirtyDateRight);
        var timestampLeft = startOfDayLeft.getTime() -
            startOfDayLeft.getTimezoneOffset() * fns.MILLISECONDS_IN_MINUTE;
        var timestampRight = startOfDayRight.getTime() -
            startOfDayRight.getTimezoneOffset() * fns.MILLISECONDS_IN_MINUTE;
        // Round the number of days to the nearest integer
        // because the number of milliseconds in a day is not constant
        // (e.g. it's different in the day of the daylight saving time clock shift)
        return Math.round((timestampLeft - timestampRight) / fns.MILLISECONDS_IN_DAY);
    };
    fns.compareAsc = function (dirtyDateLeft, dirtyDateRight) {
        var dateLeft = fns.parse(dirtyDateLeft);
        var timeLeft = dateLeft.getTime();
        var dateRight = fns.parse(dirtyDateRight);
        var timeRight = dateRight.getTime();
        if (timeLeft < timeRight) {
            return -1;
        }
        else if (timeLeft > timeRight) {
            return 1;
        }
        else {
            return 0;
        }
    };
    fns.subDays = function (dirtyDate, amount) {
        return fns.addDays(dirtyDate, -amount);
    };
    fns.subHours = function (dirtyDate, amount) {
        return fns.addHours(dirtyDate, -amount);
    };
    fns.subWeeks = function (dirtyDate, amount) {
        return fns.addWeeks(dirtyDate, -amount);
    };
    fns.subMonths = function (dirtyDate, amount) {
        return fns.addMonths(dirtyDate, -amount);
    };
    fns.MILLISECONDS_IN_HOUR = 3600000;
    fns.MILLISECONDS_IN_MINUTE = 60000;
    fns.MILLISECONDS_IN_DAY = 86400000;
    fns.MILLISECONDS_IN_WEEK = 604800000;
    fns.parseTokenDateTimeDelimeter = /[T ];/;
    fns.parseTokenPlainTime = /:/;
    fns.parseTokenYYYY = /^(\d{4})-?/;
    fns.parseTokenYYYYY = /^([+-]\d{4,6})-/;
    fns.parseTokenMM = /^-(\d{2})$/;
    fns.parseTokenDDD = /^-?(\d{3})$/;
    fns.parseTokenMMDD = /^-?(\d{2})-?(\d{2})$/;
    fns.parseTokenWww = /^-?W(\d{2})$/;
    fns.parseTokenWwwD = /^-?W(\d{2})-?(\d{1})$/;
    fns.parseTokenHH = /^(\d{2}([.,]\d*)?)$/;
    fns.parseTokenHHMM = /^(\d{2}):?(\d{2}([.,]\d*)?)$/;
    fns.parseTokenHHMMSS = /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/;
    fns.parseTokenTimezone = /([Z+-].*)$/;
    fns.parseTokenTimezoneZ = /^(Z)$/;
    fns.parseTokenTimezoneHH = /^([+-])(\d{2})$/;
    fns.parseTokenTimezoneHHMM = /^([+-])(\d{2}):?(\d{2})$/;
    return fns;
}());
exports.fns = fns;


/***/ }),

/***/ "./src/app/Datahub/routes/home/home.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var home_1 = __webpack_require__("./src/app/Datahub/routes/home/home.ts");
var home_routing_1 = __webpack_require__("./src/app/Datahub/routes/home/home.routing.ts");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var calendar_Module_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/calendar.Module.ts");
var AuxComponenetsModule_1 = __webpack_require__("./src/app/ReusableComponents/AuxComponenetsModule.ts");
var HomeModule = (function () {
    function HomeModule() {
    }
    HomeModule = __decorate([
        core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, home_routing_1.HomeRouting, SharedModule_1.SharedModule, calendar_Module_1.CalendarModule, AuxComponenetsModule_1.AuxComponentsModule],
            declarations: [home_1.Home]
        }), 
        __metadata('design:paramtypes', [])
    ], HomeModule);
    return HomeModule;
}());
exports.HomeModule = HomeModule;


/***/ }),

/***/ "./src/app/Datahub/routes/home/home.html":
/***/ (function(module, exports) {

module.exports = "<div Id=\"CalendatArea\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-3 col-lg-4 text-md-left text-lg-right\">\r\n            <div class=\"pagination\">\r\n                <div class=\"page-item\" (click)=\"decrement()\">\r\n                    <span class=\"page-link\">Previous</span>\r\n                </div>\r\n                <div class=\"page-item\" (click)=\"today()\">\r\n                    <span class=\"page-link\">Today</span>\r\n                </div>\r\n                <div class=\"page-item\" (click)=\"increment()\">\r\n                    <span class=\"page-link\">Next</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-md-6 col-lg-4 text-md-center\">\r\n            <br>\r\n            <h4>{{ viewDate | calendarDate:(view + 'ViewTitle'):'en' }}</h4>\r\n        </div>\r\n        <div class=\"col-md-3 col-lg-4 text-md-right text-lg-left\">\r\n            <div class=\"pagination\">\r\n                <div class=\"page-item\" (click)=\"view = 'month'\" [class.active]=\"view === 'month'\">\r\n                    <span class=\"page-link\">Month</span>\r\n                </div>\r\n                <div class=\"page-item\" (click)=\"view = 'week'\" [class.active]=\"view === 'week'\">\r\n                    <span class=\"page-link\">Week</span>\r\n                </div>\r\n                <div class=\"page-item\" (click)=\"view = 'day'\" [class.active]=\"view === 'day'\">\r\n                    <span class=\"page-link\">Day</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"text-md-center\">\r\n        <!--<select (change)=\"eventTypeSelected($event)\">-->\r\n        <select (change)=\"eventTypeSelected($event.target.value)\">\r\n            <option *ngFor=\"let o  of eventTypes\" [value]=\"o.value\">{{o.name}}\r\n        </select>\r\n    </div>\r\n    <br>\r\n    <div [ngSwitch]=\"view\">\r\n        <mwl-calendar-month-view\r\n                *ngSwitchCase=\"'month'\"\r\n                [viewDate]=\"viewDate\"\r\n                [events]=\"events\"\r\n                [activeDayIsOpen]=\"activeDayIsOpen\"\r\n                (dayClicked)=\"dayClicked($event.day)\">\r\n        </mwl-calendar-month-view>\r\n        <mwl-calendar-week-view\r\n                *ngSwitchCase=\"'week'\"\r\n                [viewDate]=\"viewDate\"\r\n                [events]=\"events\">\r\n        </mwl-calendar-week-view>\r\n        <mwl-calendar-day-view\r\n                *ngSwitchCase=\"'day'\"\r\n                [viewDate]=\"viewDate\"\r\n                [events]=\"events\">\r\n        </mwl-calendar-day-view>\r\n    </div>\r\n</div>\r\n<div Id=\"EventDetailArea\">\r\n    <calendar-toasty [position]=\"position\"></calendar-toasty>\r\n</div>"

/***/ }),

/***/ "./src/app/Datahub/routes/home/home.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var home_1 = __webpack_require__("./src/app/Datahub/routes/home/home.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.HomeRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/Home', component: home_1.Home, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/home/home.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var fns_1 = __webpack_require__("./src/app/Datahub/routes/home/fns.ts");
var calendarService_1 = __webpack_require__("./src/app/ReusableServices/calendarService.ts");
var calendar_toast_service_1 = __webpack_require__("./src/app/ReusableServices/calendar.toast.service.ts");
var calendarutils_1 = __webpack_require__("./src/app/Datahub/routes/home/calendarutils.ts");
var Home = (function () {
    function Home(navigation, location, calService, toastServ) {
        var _this = this;
        this.eventTypes = new Array();
        this.view = 'month';
        this.viewDate = new Date();
        this.actions = [{
                label: '<i class="fa fa-fw fa-pencil"></i>',
                onClick: function (_a) {
                    var event = _a.event;
                    console.log('Edit event', event);
                }
            }, {
                label: '<i class="fa fa-fw fa-times"></i>',
                onClick: function (_a) {
                    var event = _a.event;
                    _this.events = _this.events.filter(function (iEvent) { return iEvent !== event; });
                }
            }];
        this.events = new Array();
        this.activeDayIsOpen = true;
        this.toastyService = toastServ;
        this.options = {
            title: 'Toast It!',
            msg: 'Mmmm, tasties...',
            showClose: true,
            timeout: 5000,
            theme: this.toastyService.themes[1].code,
            type: this.toastyService.types[1].code
        };
        this.eventArrivalSubscription = this.toastyService.eventsArrival.subscribe(function (x) {
            x.forEach(function (xx) {
                _this.showEventDetail(xx.title);
            });
        });
        //navigation.setCurrentPage(location.path(false));
        this.calendarService = calService;
        this.calendarService.eventsArrived.subscribe(function () {
            _this.changeTracker = !_this.changeTracker;
            _this.eventTypes = [];
            _this.eventTypes.push({ value: "All", name: "All" });
            _this.events = calendarService_1.CalendarService.calEvents["All"];
            if (_this.events) {
                _this.extractEvents();
            }
        });
        this.calendarService.getEvents(Date.now());
    }
    Home.prototype.extractEvents = function () {
        var _this = this;
        this.events.forEach(function (x) {
            var lookup = _this.eventTypes.find(function (xx) { return xx.value === x.status; });
            if (!lookup) {
                _this.eventTypes.push({ value: x.status, name: x.status });
            }
        });
    };
    Home.prototype.eventTypeSelected = function (opt) {
        this.toastyService.eventTypeChanged.emit(opt);
        calendarutils_1.calendarutils.eventType = opt;
        this.events = calendarService_1.CalendarService.calEvents[opt];
    };
    Home.prototype.ngOnDestroy = function () {
        if (this.eventListener) {
            this.eventListener.unsubscribe();
        }
        if (this.eventArrivalSubscription) {
            this.eventArrivalSubscription.unsubscribe();
        }
    };
    Home.prototype.increment = function () {
        var addFn = {
            day: fns_1.fns.addDays,
            week: fns_1.fns.addWeeks,
            month: fns_1.fns.addMonths
        }[this.view];
        this.viewDate = addFn(this.viewDate, 1);
        this.calendarService.getEvents(this.viewDate);
    };
    Home.prototype.decrement = function () {
        var subFn = {
            day: fns_1.fns.subDays,
            week: fns_1.fns.subWeeks,
            month: fns_1.fns.subMonths
        }[this.view];
        this.viewDate = subFn(this.viewDate, 1);
        this.calendarService.getEvents(this.viewDate);
    };
    Home.prototype.today = function () {
        this.viewDate = new Date();
        this.calendarService.getEvents(this.viewDate);
    };
    Home.prototype.dayClicked = function (_a) {
        var date = _a.date, events = _a.events;
        //this.toastyService.clearAll();
        //events.forEach(x=>{this.showEventDetail(x.title)})
        if (fns_1.fns.isSameMonth(date, this.viewDate)) {
            if ((fns_1.fns.isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||
                events.length === 0) {
                this.activeDayIsOpen = false;
            }
            else {
                this.activeDayIsOpen = true;
                this.viewDate = date;
            }
        }
    };
    Home.prototype.showEventDetail = function (text) {
        var toastOptions = {
            title: this.options.title,
            msg: text,
            showClose: this.options.showClose,
            timeout: this.options.timeout,
            theme: this.options.theme,
            position: this.options.position,
            onAdd: function (toast) {
                console.log('Toast ' + toast.id + ' has been added!');
            },
            onRemove: function (toast) {
                console.log('Toast ' + toast.id + ' has been removed!');
            }
        };
        this.options.type = 'wait';
        switch (this.options.type) {
            case 'default':
                this.toastyService.default(toastOptions);
                break;
            case 'info':
                this.toastyService.info(toastOptions);
                break;
            case 'success':
                this.toastyService.success(toastOptions);
                break;
            case 'wait':
                this.toastyService.wait(toastOptions);
                break;
            case 'error':
                this.toastyService.error(toastOptions);
                break;
            case 'warning':
                this.toastyService.warning(toastOptions);
                break;
        }
    };
    Home = __decorate([
        core_1.Component({
            selector: 'home',
            template: __webpack_require__("./src/app/Datahub/routes/home/home.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _b) || Object, (typeof (_c = typeof calendarService_1.CalendarService !== 'undefined' && calendarService_1.CalendarService) === 'function' && _c) || Object, (typeof (_d = typeof calendar_toast_service_1.CalendarToastyService !== 'undefined' && calendar_toast_service_1.CalendarToastyService) === 'function' && _d) || Object])
    ], Home);
    return Home;
    var _a, _b, _c, _d;
}());
exports.Home = Home;


/***/ }),

/***/ "./src/app/Datahub/routes/pageRedirect/pageRedirect.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var pageRedirect_1 = __webpack_require__("./src/app/Datahub/routes/pageRedirect/pageRedirect.ts");
var pageredirect_routes_1 = __webpack_require__("./src/app/Datahub/routes/pageRedirect/pageredirect.routes.ts");
var PageRedirectModule = (function () {
    function PageRedirectModule() {
    }
    PageRedirectModule = __decorate([
        core_1.NgModule({
            imports: [pageredirect_routes_1.PageRedirectRouting
            ],
            declarations: [pageRedirect_1.PageRedirect]
        }), 
        __metadata('design:paramtypes', [])
    ], PageRedirectModule);
    return PageRedirectModule;
}());
exports.PageRedirectModule = PageRedirectModule;


/***/ }),

/***/ "./src/app/Datahub/routes/pageRedirect/pageRedirect.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var PageRedirect = (function () {
    function PageRedirect(router, activatedRoute) {
        var _this = this;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.activatedRoute.params.forEach(function (params) {
            var path = params['path'];
            _this.router.navigateByUrl(path);
        });
    }
    PageRedirect = __decorate([
        core_1.Component({
            selector: 'pageRedirect',
            template: ''
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _a) || Object, (typeof (_b = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _b) || Object])
    ], PageRedirect);
    return PageRedirect;
    var _a, _b;
}());
exports.PageRedirect = PageRedirect;


/***/ }),

/***/ "./src/app/Datahub/routes/pageRedirect/pageredirect.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var pageRedirect_1 = __webpack_require__("./src/app/Datahub/routes/pageRedirect/pageRedirect.ts");
exports.PageRedirectRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/PageRedirect', component: pageRedirect_1.PageRedirect }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/pagenotfound/pagenotfound.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var pagenotfound_routing_1 = __webpack_require__("./src/app/Datahub/routes/pagenotfound/pagenotfound.routing.ts");
var pagenotfound_1 = __webpack_require__("./src/app/Datahub/routes/pagenotfound/pagenotfound.ts");
var PageNotFoundModule = (function () {
    function PageNotFoundModule() {
    }
    PageNotFoundModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, router_1.RouterModule, pagenotfound_routing_1.PageNotFoundRouting
            ],
            declarations: [pagenotfound_1.PageNotFound],
        }), 
        __metadata('design:paramtypes', [])
    ], PageNotFoundModule);
    return PageNotFoundModule;
}());
exports.PageNotFoundModule = PageNotFoundModule;


/***/ }),

/***/ "./src/app/Datahub/routes/pagenotfound/pagenotfound.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var pagenotfound_1 = __webpack_require__("./src/app/Datahub/routes/pagenotfound/pagenotfound.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.PageNotFoundRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/PageNotFound', component: pagenotfound_1.PageNotFound, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/pagenotfound/pagenotfound.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var PageNotFound = (function () {
    function PageNotFound() {
    }
    PageNotFound = __decorate([
        core_1.Component({
            selector: 'pageNotFound',
            template: 'Page Not Found'
        }), 
        __metadata('design:paramtypes', [])
    ], PageNotFound);
    return PageNotFound;
}());
exports.PageNotFound = PageNotFound;


/***/ }),

/***/ "./src/app/Datahub/routes/userProfile/userProfile.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Created by vikhnv2 on 11/29/2016.
 */
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var userProfile_config_1 = __webpack_require__("./src/app/Datahub/routes/userProfile/userProfile.config.ts");
var userProfile_service_1 = __webpack_require__("./src/app/Datahub/routes/userProfile/userProfile.service.ts");
var collapsePanel_component_1 = __webpack_require__("./src/app/ReusableComponents/collapsePanel/collapsePanel.component.ts");
var UserProfile = (function () {
    function UserProfile(_apiService, _upService) {
        var _this = this;
        this._apiService = _apiService;
        this._upService = _upService;
        this.panelsConfigSection = userProfile_config_1.CollapsePanelConfig.Panels;
        this.panelsConfigInfo = [];
        // read and load panels' configuration.
        this.panelsConfigSection.forEach(function (x) {
            _this.panelsConfigInfo.push({
                Key: x.DataSetKey,
                DataGrid: x.GridConfiguration,
                Title: x.Title
            });
        });
    }
    UserProfile.prototype.ngOnInit = function () {
        var _this = this;
        // load current user' base profile information.
        this.user = new apiService_1.AuthUser();
        var subscription = this._apiService.getAuthCurrentUser().subscribe(function (res) {
            subscription.unsubscribe();
            _this.user.CostCentre = res.CostCentre;
            _this.user.Id = res.Id;
            _this.user.Login = res.Login;
            _this.user.Name = res.Name;
            // load profile details.
            _this.populateUserProfile();
        }, function (err) {
            subscription.unsubscribe();
            console.log(err);
            // this.alert.error(AppNotificationsMSG.apiMsg.apiGetUserInfo + '   ' + error.status);
        });
    };
    UserProfile.prototype.populateUserProfile = function () {
        var _this = this;
        var subscription = this._upService.getAuthUserProfile().subscribe(function (res) {
            // console.log(res);
            subscription.unsubscribe();
            // re-build panels' data based based on columns defined in the configuration.
            var panelsData = [];
            _this.panelsConfigInfo.forEach(function (section) {
                var ds = res[section.Key]; //gets a key-based DataSet.
                if (ds && ds.length > 0) {
                    panelsData.push({
                        Key: section.Key,
                        DataGridConfig: section.DataGrid,
                        Data: ds
                    });
                }
            });
            // load data content into a target panel.
            panelsData.forEach(function (item) {
                _this.collapsePanels.find(function (pnl) { return pnl.key === item.Key; }).setPanelContent(item.DataGridConfig, item.Data);
            });
        }, function (err) {
            subscription.unsubscribe();
            console.log(err);
            // this.alert.error(AppNotificationsMSG.apiMsg.apiGetUserInfo + '   ' + error.status);
        });
    };
    UserProfile.prototype.expandCollapseAll = function (collapse) {
        this.collapsePanels.forEach(function (p) { return p.collapsePanel(collapse); });
    };
    __decorate([
        core_1.ViewChildren(collapsePanel_component_1.CollapsePanel), 
        __metadata('design:type', (typeof (_a = typeof core_1.QueryList !== 'undefined' && core_1.QueryList) === 'function' && _a) || Object)
    ], UserProfile.prototype, "collapsePanels", void 0);
    UserProfile = __decorate([
        core_1.Component({
            selector: 'user-profile',
            template: __webpack_require__("./src/app/Datahub/routes/userProfile/userProfile.html"),
            styles: [__webpack_require__("./src/app/Datahub/routes/userProfile/userProfile.scss")]
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _b) || Object, (typeof (_c = typeof userProfile_service_1.UserProfileService !== 'undefined' && userProfile_service_1.UserProfileService) === 'function' && _c) || Object])
    ], UserProfile);
    return UserProfile;
    var _a, _b, _c;
}());
exports.UserProfile = UserProfile;


/***/ }),

/***/ "./src/app/Datahub/routes/userProfile/userProfile.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Created by vikhnv2 on 11/30/2016.
 */
exports.ComponentSettings = {
    'Api': { "BaseUrl": "http://localhost:17752/api/tdam/datahub/ae/" }
};
exports.CollapsePanelConfig = {
    Panels: [
        {
            Title: "My Roles",
            DataSetKey: "Roles",
            GridConfiguration: {
                ChildType: "",
                IsSpreadsheetGrid: false,
                ShallHideDeleteButton: true,
                ShallHideAddButton: true,
                ColumnConfiguration: [
                    {
                        "dbColumnName": "Id",
                        "htmlControlType": "text",
                        "isVisible": false,
                        "isRequired": false,
                        "isComplexType": false,
                        "displayName": "Id",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined
                    },
                    {
                        "dbColumnName": "Name",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Name",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined
                    },
                    {
                        "dbColumnName": "Description",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Description",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined
                    }
                ]
            }
        },
        {
            Title: "My Applications",
            DataSetKey: "Applications",
            GridConfiguration: {
                ChildType: "",
                IsSpreadsheetGrid: false,
                ShallHideDeleteButton: true,
                ShallHideAddButton: true,
                ColumnConfiguration: [
                    {
                        "dbColumnName": "Id",
                        "htmlControlType": "text",
                        "isVisible": false,
                        "isRequired": false,
                        "isComplexType": false,
                        "displayName": "Id",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined
                    },
                    {
                        "dbColumnName": "Name",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Name",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined
                    },
                    {
                        "dbColumnName": "Description",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Description",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined
                    }
                ]
            }
        },
        {
            Title: "My Menu Items",
            DataSetKey: "MenuItems",
            GridConfiguration: {
                ChildType: "",
                IsSpreadsheetGrid: false,
                ShallHideDeleteButton: true,
                ShallHideAddButton: true,
                ColumnConfiguration: [
                    {
                        "dbColumnName": "Id",
                        "htmlControlType": "text",
                        "isVisible": false,
                        "isRequired": false,
                        "isComplexType": false,
                        "displayName": "Id",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined
                    },
                    {
                        "dbColumnName": "Title",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Title",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined
                    },
                    {
                        "dbColumnName": "Create",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Create",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined,
                        "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
                    },
                    {
                        "dbColumnName": "Delete",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Delete",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined,
                        "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
                    },
                    {
                        "dbColumnName": "Read",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Read",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined,
                        "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
                    },
                    {
                        "dbColumnName": "Update",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Update",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined,
                        "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
                    }
                ]
            }
        },
        {
            Title: "My Resources",
            DataSetKey: "Resources",
            GridConfiguration: {
                ChildType: "",
                IsSpreadsheetGrid: false,
                ShallHideDeleteButton: true,
                ShallHideAddButton: true,
                ColumnConfiguration: [
                    {
                        "dbColumnName": "Id",
                        "htmlControlType": "text",
                        "isVisible": false,
                        "isRequired": false,
                        "isComplexType": false,
                        "displayName": "Id",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined
                    },
                    {
                        "dbColumnName": "Name",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Name",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined
                    },
                    {
                        "dbColumnName": "Description",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Description",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined
                    },
                    {
                        "dbColumnName": "Create",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Create",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined,
                        "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
                    },
                    {
                        "dbColumnName": "Delete",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Delete",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined,
                        "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
                    },
                    {
                        "dbColumnName": "Read",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Read",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined,
                        "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
                    },
                    {
                        "dbColumnName": "Update",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": true,
                        "isComplexType": false,
                        "displayName": "Update",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": undefined,
                        "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
                    }
                ]
            }
        }
    ]
};


/***/ }),

/***/ "./src/app/Datahub/routes/userProfile/userProfile.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"card-block\">\r\n    <!-- User profile image -->\r\n    <!--<img class=\"card-img-top\" src=\"\" alt=\"Image Placeholder\">-->\r\n    <h3 class=\"card-title\">{{ user.Name }}</h3>\r\n    <hr>\r\n    <div class=\"form-group row\">\r\n        <div class=\"col-sm-2 col-xl-1\">\r\n            <strong>User Login:</strong>\r\n        </div>\r\n        <div class=\"col-sm-10 col-xl-11\">\r\n            {{ user.Id }}\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group row\">\r\n        <div class=\"col-sm-2 col-xl-1\">\r\n            <strong>System ID:</strong>\r\n        </div>\r\n        <div class=\"col-sm-10 col-xl-11\">\r\n            {{ user.Login }}\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group row\">\r\n        <div class=\"col-sm-2 col-xl-1\">\r\n            <strong>Cost Centre:</strong>\r\n        </div>\r\n        <div class=\"col-sm-10 col-xl-11\">\r\n            {{ user.CostCentre }}\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"card-block\">\r\n    <div class=\"ec-controls\">\r\n        <label (click)=\"expandCollapseAll(false)\"><span class=\"fa fa-plus\"></span> Expand All</label> |\r\n        <label (click)=\"expandCollapseAll(true)\"><span class=\"fa fa-minus\"></span> Collapse All</label>\r\n    </div>\r\n    <template ngFor let-panel [ngForOf]=\"panelsConfigInfo\">\r\n        <div class=\"col-md-12 col-lg-6 col-xl-4\">\r\n            <collapse-panel [key]=\"panel.Key\" [title]=\"panel.Title\"></collapse-panel>\r\n        </div>\r\n    </template>\r\n</div>"

/***/ }),

/***/ "./src/app/Datahub/routes/userProfile/userProfile.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Created by vikhnv2 on 11/30/2016.
 */
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
// import {TreeViewModule} from '../../../ReusableComponents/treeView/TreeViewModule';
var userProfile_component_1 = __webpack_require__("./src/app/Datahub/routes/userProfile/userProfile.component.ts");
var userProfile_routes_1 = __webpack_require__("./src/app/Datahub/routes/userProfile/userProfile.routes.ts");
var userProfile_service_1 = __webpack_require__("./src/app/Datahub/routes/userProfile/userProfile.service.ts");
var collapsePanel_component_1 = __webpack_require__("./src/app/ReusableComponents/collapsePanel/collapsePanel.component.ts");
var UserProfileModule = (function () {
    function UserProfileModule() {
    }
    UserProfileModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                forms_1.FormsModule,
                SharedModule_1.SharedModule,
                // TreeViewModule,
                userProfile_routes_1.UserProfileRouting
            ],
            declarations: [
                userProfile_component_1.UserProfile,
                collapsePanel_component_1.CollapsePanel
            ],
            providers: [userProfile_service_1.UserProfileService]
        }), 
        __metadata('design:paramtypes', [])
    ], UserProfileModule);
    return UserProfileModule;
}());
exports.UserProfileModule = UserProfileModule;


/***/ }),

/***/ "./src/app/Datahub/routes/userProfile/userProfile.routes.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var userProfile_component_1 = __webpack_require__("./src/app/Datahub/routes/userProfile/userProfile.component.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
exports.UserProfileRouting = router_1.RouterModule.forChild([
    { path: 'Datahub/UserProfile', component: userProfile_component_1.UserProfile, canActivate: [AuthGuard_1.AuthGuard] }
]);


/***/ }),

/***/ "./src/app/Datahub/routes/userProfile/userProfile.scss":
/***/ (function(module, exports) {

module.exports = ".ec-controls {\n  color: royalblue; }\n  .ec-controls label:hover {\n    cursor: pointer;\n    text-decoration: underline; }\n"

/***/ }),

/***/ "./src/app/Datahub/routes/userProfile/userProfile.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Created by vikhnv2 on 12/5/2016.
 */
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var userProfile_config_1 = __webpack_require__("./src/app/Datahub/routes/userProfile/userProfile.config.ts");
var UserProfileService = (function () {
    function UserProfileService(httpBase) {
        this.httpBase = httpBase;
        this.baseUrl = userProfile_config_1.ComponentSettings.Api.BaseUrl;
        //
    }
    UserProfileService.prototype.getAuthUserProfile = function () {
        this.httpBase.setBaseAddress(this.baseUrl);
        return this.httpBase.fetch('profile');
    };
    UserProfileService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _a) || Object])
    ], UserProfileService);
    return UserProfileService;
    var _a;
}());
exports.UserProfileService = UserProfileService;


/***/ }),

/***/ "./src/app/Datahub/services/signalr.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery) {
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var connectionMsg = (function () {
    function connectionMsg(connectionID, message) {
        this.connectionID = connectionID;
        this.message = message;
    }
    return connectionMsg;
}());
exports.connectionMsg = connectionMsg;
var signalr = (function () {
    function signalr() {
        this.proxyName = 'TaskHub';
        this.hubUrl = 'http://localhost:15421/signalr'; //server @local
        this.stopConnection = false;
        this.connectionEstablished = new core_1.EventEmitter();
        this.connection = jQuery.hubConnection(this.hubUrl);
        this.proxy = this.connection.createHubProxy(this.proxyName);
        this.msgReceived = new core_1.EventEmitter();
        this.registerOnServerEvents();
        this.startConnection();
        this.keepConnected();
    }
    ;
    signalr.prototype.ngOnDestroy = function () {
        this.stopConnection = true;
        console.log('Cleaning up SignalR service...');
        this.connection.stop();
    };
    signalr.prototype.executeSchematic = function (id, userRuntimeValues) {
        if (userRuntimeValues === void 0) { userRuntimeValues = ""; }
        if (!this.connectionExists) {
            console.log('Reconnting...');
            this.startConnection();
        }
        console.log('Request to execute schematic id ' + id);
        this.proxy.invoke('Publish', 1, id, userRuntimeValues);
    };
    signalr.prototype.executePipeline = function (id, userRuntimeValues) {
        if (userRuntimeValues === void 0) { userRuntimeValues = ""; }
        if (!this.connectionExists) {
            console.log('Reconnting...');
            this.startConnection();
        }
        console.log('Request to execute pipleine id ' + id);
        this.proxy.invoke('Publish', 2, id, userRuntimeValues);
    };
    signalr.prototype.registerOnServerEvents = function () {
        var _this = this;
        this.proxy.on('broadcastMessage', function (data) {
            console.log('Message from SignalR server: ' + data);
            _this.msgReceived.emit(data);
        });
    };
    signalr.prototype.startConnection = function () {
        var _this = this;
        this.connection.start().done(function (data) {
            console.log(_this.getTime() + ' Now connected ' + data.transport.name + ', connection ID = ' + data.id);
            _this.tryingToReconnect = false;
            _this.connectionID = data.id;
            _this.connectionExists = true;
            _this.connectionEstablished.emit(new connectionMsg(_this.connectionID, ""));
            _this.proxy.invoke('RegisterExecPage');
            console.log('ExecPage registered...');
        }).fail(function (error) {
            console.log(_this.getTime() + ' Could not connect ' + error);
            _this.tryingToReconnect = false;
            _this.connectionID = "";
            _this.connectionExists = false;
            _this.connectionEstablished.emit(new connectionMsg(_this.connectionID, error));
        });
    };
    signalr.prototype.keepConnected = function () {
        var _this = this;
        this.connection.stateChanged(function (state) {
            //connection status changed
            var stateConversion = { 0: 'connecting', 1: 'connected', 2: 'reconnecting', 4: 'disconnected' };
            console.log('SignalR state changed from ' + stateConversion[state.oldState] + ' to ' + stateConversion[state.newState]);
            //if not connected, try to connect
            if (state.newState != 1 && !_this.tryingToReconnect && _this.stopConnection === false) {
                _this.connectionID = "";
                _this.connectionExists = false;
                _this.connectionEstablished.emit(new connectionMsg(_this.connectionID, "reconnecting ... " + new Date().toLocaleTimeString()));
                _this.tryingToReconnect = true;
                setTimeout(function () {
                    console.log(_this.getTime() + " reconnecting ...");
                    console.log(_this.getTime() + " stopConncton = " + _this.stopConnection);
                    _this.startConnection();
                }, 1000);
            }
        });
    };
    signalr.prototype.getTime = function () {
        return new Date().toLocaleTimeString();
    };
    signalr = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], signalr);
    return signalr;
}());
exports.signalr = signalr;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/app/Datahub/theme/components/baCard/baCard.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var BaCard = (function () {
    function BaCard() {
    }
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], BaCard.prototype, "title", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], BaCard.prototype, "baCardClass", void 0);
    BaCard = __decorate([
        core_1.Component({
            selector: 'ba-card',
            styles: [__webpack_require__("./src/app/Datahub/theme/components/baCard/baCard.scss")],
            template: __webpack_require__("./src/app/Datahub/theme/components/baCard/baCard.html"),
            encapsulation: core_1.ViewEncapsulation.None
        }), 
        __metadata('design:paramtypes', [])
    ], BaCard);
    return BaCard;
}());
exports.BaCard = BaCard;


/***/ }),

/***/ "./src/app/Datahub/theme/components/baCard/baCard.html":
/***/ (function(module, exports) {

module.exports = "<div baCardBlur class=\"animated fadeIn card {{cardType}} {{baCardClass || ''}}\" zoom-in>\r\n    <div *ngIf=\"title\" class=\"card-header clearfix\">\r\n        <h3 class=\"card-title\">{{title}}</h3>\r\n    </div>\r\n    <div class=\"card-body\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/Datahub/theme/components/baCard/baCard.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/Datahub/theme/components/baCard/baCardBlur.directive.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var theme_configProvider_1 = __webpack_require__("./src/app/Datahub/theme/theme.configProvider.ts");
var baCardBlurHelper_service_1 = __webpack_require__("./src/app/Datahub/theme/components/baCard/baCardBlurHelper.service.ts");
var BaCardBlur = (function () {
    function BaCardBlur(_baConfig, _baCardBlurHelper, _el) {
        this._baConfig = _baConfig;
        this._baCardBlurHelper = _baCardBlurHelper;
        this._el = _el;
        this.isEnabled = false;
        if (this._isEnabled()) {
            this._baCardBlurHelper.init();
            this._getBodyImageSizesOnBgLoad();
            this._recalculateCardStylesOnBgLoad();
            this.isEnabled = true;
        }
    }
    BaCardBlur.prototype._onWindowResize = function () {
        if (this._isEnabled()) {
            this._bodyBgSize = this._baCardBlurHelper.getBodyBgImageSizes();
            this._recalculateCardStyle();
        }
    };
    BaCardBlur.prototype._getBodyImageSizesOnBgLoad = function () {
        var _this = this;
        this._baCardBlurHelper.bodyBgLoad().subscribe(function () {
            _this._bodyBgSize = _this._baCardBlurHelper.getBodyBgImageSizes();
        });
    };
    BaCardBlur.prototype._recalculateCardStylesOnBgLoad = function () {
        var _this = this;
        this._baCardBlurHelper.bodyBgLoad().subscribe(function (event) {
            setTimeout(_this._recalculateCardStyle.bind(_this));
        });
    };
    BaCardBlur.prototype._recalculateCardStyle = function () {
        if (!this._bodyBgSize) {
            return;
        }
        this._el.nativeElement.style.backgroundSize = Math.round(this._bodyBgSize.width) + 'px ' + Math.round(this._bodyBgSize.height) + 'px';
        this._el.nativeElement.style.backgroundPosition = Math.floor(this._bodyBgSize.positionX) + 'px ' + Math.floor(this._bodyBgSize.positionY) + 'px';
    };
    BaCardBlur.prototype._isEnabled = function () {
        return this._baConfig.get().theme.name == 'blur';
    };
    __decorate([
        core_1.HostBinding('class.card-blur'), 
        __metadata('design:type', Boolean)
    ], BaCardBlur.prototype, "isEnabled", void 0);
    __decorate([
        core_1.HostListener('window:resize'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], BaCardBlur.prototype, "_onWindowResize", null);
    BaCardBlur = __decorate([
        core_1.Directive({
            selector: '[baCardBlur]',
            providers: [baCardBlurHelper_service_1.BaCardBlurHelper]
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof theme_configProvider_1.BaThemeConfigProvider !== 'undefined' && theme_configProvider_1.BaThemeConfigProvider) === 'function' && _a) || Object, (typeof (_b = typeof baCardBlurHelper_service_1.BaCardBlurHelper !== 'undefined' && baCardBlurHelper_service_1.BaCardBlurHelper) === 'function' && _b) || Object, (typeof (_c = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _c) || Object])
    ], BaCardBlur);
    return BaCardBlur;
    var _a, _b, _c;
}());
exports.BaCardBlur = BaCardBlur;


/***/ }),

/***/ "./src/app/Datahub/theme/components/baCard/baCardBlurHelper.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var BaCardBlurHelper = (function () {
    function BaCardBlurHelper() {
    }
    BaCardBlurHelper.prototype.init = function () {
        this._genBgImage();
        this._genImageLoadSubject();
    };
    BaCardBlurHelper.prototype.bodyBgLoad = function () {
        return this.imageLoadSubject;
    };
    BaCardBlurHelper.prototype.getBodyBgImageSizes = function () {
        var elemW = document.documentElement.clientWidth;
        var elemH = document.documentElement.clientHeight;
        if (elemW <= 640)
            return;
        var imgRatio = (this.image.height / this.image.width); // original img ratio
        var containerRatio = (elemH / elemW); // container ratio
        var finalHeight, finalWidth;
        if (containerRatio > imgRatio) {
            finalHeight = elemH;
            finalWidth = (elemH / imgRatio);
        }
        else {
            finalWidth = elemW;
            finalHeight = (elemW * imgRatio);
        }
        return { width: finalWidth, height: finalHeight, positionX: (elemW - finalWidth) / 2, positionY: (elemH - finalHeight) / 2 };
    };
    BaCardBlurHelper.prototype._genBgImage = function () {
        this.image = new Image();
        var computedStyle = getComputedStyle(document.body.querySelector('main'), ':before');
        this.image.src = computedStyle.backgroundImage.replace(/url\((['"])?(.*?)\1\)/gi, '$2');
    };
    BaCardBlurHelper.prototype._genImageLoadSubject = function () {
        var _this = this;
        this.imageLoadSubject = new Subject_1.Subject();
        this.image.onerror = function (err) {
            _this.imageLoadSubject.complete();
        };
        this.image.onload = function () {
            _this.imageLoadSubject.next(null);
            _this.imageLoadSubject.complete();
        };
    };
    BaCardBlurHelper = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], BaCardBlurHelper);
    return BaCardBlurHelper;
}());
exports.BaCardBlurHelper = BaCardBlurHelper;


/***/ }),

/***/ "./src/app/Datahub/theme/components/baChartistChart/baChartistChart.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var baChartistChart_loader_ts_1 = __webpack_require__("./src/app/Datahub/theme/components/baChartistChart/baChartistChart.loader.ts");
var BaChartistChart = (function () {
    function BaChartistChart() {
        this.onChartReady = new core_1.EventEmitter();
        this.onChartClick = new core_1.EventEmitter();
    }
    BaChartistChart.prototype.ngAfterViewInit = function () {
        this.chart = new baChartistChart_loader_ts_1.Chartist[this.baChartistChartType](this._selector.nativeElement, this.baChartistChartData, this.baChartistChartOptions, this.baChartistChartResponsive);
        this.onChartReady.emit(this.chart);
    };
    BaChartistChart.prototype.ngOnChanges = function () {
        var self = this;
        if (self.chart) {
            this.chart.update(this.baChartistChartData, this.baChartistChartOptions);
            if (self.chart.svg && self.chart.svg._node) {
                var nodeChildLength = self.chart.svg._node.children.length;
                // put onclick for labels
                var _loop_1 = function(i, j) {
                    self.chart.svg._node.childNodes[nodeChildLength - 1].childNodes[i].onclick = function () {
                        self.onChartClick.emit(self.chart.data.labels[i]);
                    };
                };
                for (var i = 0, j = self.chart.svg._node.childNodes[nodeChildLength - 1].childNodes.length; i < j; i++) {
                    _loop_1(i, j);
                }
                // put on click for disk sectors
                var _loop_2 = function(i, j) {
                    self.chart.svg._node.childNodes[i].onclick = function () {
                        self.onChartClick.emit(self.chart.data.labels[self.chart.data.labels.length - 1 - i]);
                    };
                };
                for (var i = 0, j = self.chart.svg._node.childNodes.length - 1; i < j; i++) {
                    _loop_2(i, j);
                }
            }
        }
    };
    BaChartistChart.prototype.ngOnDestroy = function () {
        if (this.chart) {
            this.chart.detach();
        }
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], BaChartistChart.prototype, "baChartistChartType", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], BaChartistChart.prototype, "baChartistChartData", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], BaChartistChart.prototype, "baChartistChartOptions", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], BaChartistChart.prototype, "baChartistChartResponsive", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], BaChartistChart.prototype, "baChartistChartClass", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], BaChartistChart.prototype, "onChartReady", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], BaChartistChart.prototype, "onChartClick", void 0);
    __decorate([
        core_1.ViewChild('baChartistChart'), 
        __metadata('design:type', (typeof (_a = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _a) || Object)
    ], BaChartistChart.prototype, "_selector", void 0);
    BaChartistChart = __decorate([
        core_1.Component({
            selector: 'ba-chartist-chart',
            encapsulation: core_1.ViewEncapsulation.None,
            styles: [__webpack_require__("./node_modules/chartist/dist/chartist.css")],
            template: __webpack_require__("./src/app/Datahub/theme/components/baChartistChart/baChartistChart.html"),
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], BaChartistChart);
    return BaChartistChart;
    var _a;
}());
exports.BaChartistChart = BaChartistChart;


/***/ }),

/***/ "./src/app/Datahub/theme/components/baChartistChart/baChartistChart.html":
/***/ (function(module, exports) {

module.exports = "<div #baChartistChart class=\"ba-chartist-chart {{baChartistChartClass || ''}}\"></div>\r\n"

/***/ }),

/***/ "./src/app/Datahub/theme/components/baChartistChart/baChartistChart.loader.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.Chartist = __webpack_require__("./node_modules/chartist/dist/chartist.js");


/***/ }),

/***/ "./src/app/Datahub/theme/nga.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var baCard_component_1 = __webpack_require__("./src/app/Datahub/theme/components/baCard/baCard.component.ts");
var baChartistChart_component_1 = __webpack_require__("./src/app/Datahub/theme/components/baChartistChart/baChartistChart.component.ts");
var baAppPicture_pipe_1 = __webpack_require__("./src/app/Datahub/theme/pipes/baAppPicture/baAppPicture.pipe.ts");
var baKameleonPicture_pipe_1 = __webpack_require__("./src/app/Datahub/theme/pipes/baKameleonPicture/baKameleonPicture.pipe.ts");
var baProfilePicture_pipe_1 = __webpack_require__("./src/app/Datahub/theme/pipes/baProfilePicture/baProfilePicture.pipe.ts");
var baImageLoader_service_1 = __webpack_require__("./src/app/Datahub/theme/services/baImageLoader/baImageLoader.service.ts");
var baThemePreloader_service_1 = __webpack_require__("./src/app/Datahub/theme/services/baThemePreloader/baThemePreloader.service.ts");
var baThemeSpinner_service_1 = __webpack_require__("./src/app/Datahub/theme/services/baThemeSpinner/baThemeSpinner.service.ts");
var theme_config_1 = __webpack_require__("./src/app/Datahub/theme/theme.config.ts");
var theme_configProvider_1 = __webpack_require__("./src/app/Datahub/theme/theme.configProvider.ts");
var baCardBlur_directive_1 = __webpack_require__("./src/app/Datahub/theme/components/baCard/baCardBlur.directive.ts");
var NGA_COMPONENTS = [
    baCard_component_1.BaCard,
    baChartistChart_component_1.BaChartistChart
];
var NGA_DIRECTIVES = [
    baCardBlur_directive_1.BaCardBlur
];
var NGA_PIPES = [
    baAppPicture_pipe_1.BaAppPicturePipe,
    baKameleonPicture_pipe_1.BaKameleonPicturePipe,
    baProfilePicture_pipe_1.BaProfilePicturePipe
];
var NGA_SERVICES = [
    baImageLoader_service_1.BaImageLoaderService,
    baThemePreloader_service_1.BaThemePreloader,
    baThemeSpinner_service_1.BaThemeSpinner
];
var NgaModule = (function () {
    function NgaModule() {
    }
    NgaModule = __decorate([
        core_1.NgModule({
            declarations: NGA_DIRECTIVES.concat(NGA_PIPES, NGA_COMPONENTS),
            imports: [
                common_1.CommonModule,
                router_1.RouterModule,
                forms_1.FormsModule,
                forms_1.ReactiveFormsModule,
            ],
            exports: NGA_PIPES.concat(NGA_DIRECTIVES, NGA_COMPONENTS),
            providers: [
                theme_configProvider_1.BaThemeConfigProvider,
                theme_config_1.BaThemeConfig
            ].concat(NGA_SERVICES)
        }), 
        __metadata('design:paramtypes', [])
    ], NgaModule);
    return NgaModule;
}());
exports.NgaModule = NgaModule;


/***/ }),

/***/ "./src/app/Datahub/theme/pipes/baAppPicture/baAppPicture.pipe.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var theme_constants_1 = __webpack_require__("./src/app/Datahub/theme/theme.constants.ts");
var BaAppPicturePipe = (function () {
    function BaAppPicturePipe() {
    }
    BaAppPicturePipe.prototype.transform = function (input) {
        return theme_constants_1.layoutPaths.images.root + input;
    };
    BaAppPicturePipe = __decorate([
        core_1.Pipe({ name: 'baAppPicture' }), 
        __metadata('design:paramtypes', [])
    ], BaAppPicturePipe);
    return BaAppPicturePipe;
}());
exports.BaAppPicturePipe = BaAppPicturePipe;


/***/ }),

/***/ "./src/app/Datahub/theme/pipes/baKameleonPicture/baKameleonPicture.pipe.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var theme_constants_1 = __webpack_require__("./src/app/Datahub/theme/theme.constants.ts");
var BaKameleonPicturePipe = (function () {
    function BaKameleonPicturePipe() {
    }
    BaKameleonPicturePipe.prototype.transform = function (input) {
        return theme_constants_1.layoutPaths.images.root + 'theme/icon/kameleon/' + input + '.svg';
    };
    BaKameleonPicturePipe = __decorate([
        core_1.Pipe({ name: 'baKameleonPicture' }), 
        __metadata('design:paramtypes', [])
    ], BaKameleonPicturePipe);
    return BaKameleonPicturePipe;
}());
exports.BaKameleonPicturePipe = BaKameleonPicturePipe;


/***/ }),

/***/ "./src/app/Datahub/theme/pipes/baProfilePicture/baProfilePicture.pipe.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var theme_constants_1 = __webpack_require__("./src/app/Datahub/theme/theme.constants.ts");
var BaProfilePicturePipe = (function () {
    function BaProfilePicturePipe() {
    }
    BaProfilePicturePipe.prototype.transform = function (input, ext) {
        if (ext === void 0) { ext = 'png'; }
        return theme_constants_1.layoutPaths.images.profile + input + '.' + ext;
    };
    BaProfilePicturePipe = __decorate([
        core_1.Pipe({ name: 'baProfilePicture' }), 
        __metadata('design:paramtypes', [])
    ], BaProfilePicturePipe);
    return BaProfilePicturePipe;
}());
exports.BaProfilePicturePipe = BaProfilePicturePipe;


/***/ }),

/***/ "./src/app/Datahub/theme/services/baImageLoader/baImageLoader.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var BaImageLoaderService = (function () {
    function BaImageLoaderService() {
    }
    BaImageLoaderService.prototype.load = function (src) {
        return new Promise(function (resolve, reject) {
            var img = new Image();
            img.src = src;
            img.onload = function () {
                resolve('Image with src ' + src + ' loaded successfully.');
            };
        });
    };
    BaImageLoaderService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], BaImageLoaderService);
    return BaImageLoaderService;
}());
exports.BaImageLoaderService = BaImageLoaderService;


/***/ }),

/***/ "./src/app/Datahub/theme/services/baThemePreloader/baThemePreloader.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var BaThemePreloader = (function () {
    function BaThemePreloader() {
    }
    BaThemePreloader.registerLoader = function (method) {
        BaThemePreloader._loaders.push(method);
    };
    BaThemePreloader.clear = function () {
        BaThemePreloader._loaders = [];
    };
    BaThemePreloader.load = function () {
        return new Promise(function (resolve, reject) {
            BaThemePreloader._executeAll(resolve);
        });
    };
    BaThemePreloader._executeAll = function (done) {
        setTimeout(function () {
            Promise.all(BaThemePreloader._loaders).then(function (values) {
                done.call(null, values);
            }).catch(function (error) {
                console.error(error);
            });
        });
    };
    BaThemePreloader._loaders = [];
    BaThemePreloader = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], BaThemePreloader);
    return BaThemePreloader;
}());
exports.BaThemePreloader = BaThemePreloader;


/***/ }),

/***/ "./src/app/Datahub/theme/services/baThemeSpinner/baThemeSpinner.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var BaThemeSpinner = (function () {
    function BaThemeSpinner() {
        this._selector = 'preloader';
        this._element = document.getElementById(this._selector);
    }
    BaThemeSpinner.prototype.show = function () {
        this._element.style['display'] = 'block';
    };
    BaThemeSpinner.prototype.hide = function (delay) {
        var _this = this;
        if (delay === void 0) { delay = 0; }
        setTimeout(function () {
            _this._element.style['display'] = 'none';
        }, delay);
    };
    BaThemeSpinner = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], BaThemeSpinner);
    return BaThemeSpinner;
}());
exports.BaThemeSpinner = BaThemeSpinner;


/***/ }),

/***/ "./src/app/Datahub/theme/theme.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var theme_configProvider_1 = __webpack_require__("./src/app/Datahub/theme/theme.configProvider.ts");
var BaThemeConfig = (function () {
    function BaThemeConfig(_baConfig) {
        this._baConfig = _baConfig;
        this._config();
    }
    BaThemeConfig.prototype._config = function () {
    };
    BaThemeConfig = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof theme_configProvider_1.BaThemeConfigProvider !== 'undefined' && theme_configProvider_1.BaThemeConfigProvider) === 'function' && _a) || Object])
    ], BaThemeConfig);
    return BaThemeConfig;
    var _a;
}());
exports.BaThemeConfig = BaThemeConfig;


/***/ }),

/***/ "./src/app/Datahub/theme/theme.configProvider.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var theme_constants_1 = __webpack_require__("./src/app/Datahub/theme/theme.constants.ts");
var _ = __webpack_require__("./node_modules/lodash/lodash.js");
var BaThemeConfigProvider = (function () {
    function BaThemeConfigProvider() {
        this.basic = {
            default: '#ffffff',
            defaultText: '#ffffff',
            border: '#dddddd',
            borderDark: '#aaaaaa',
        };
        // main functional color scheme
        this.colorScheme = {
            primary: '#00abff',
            info: '#40daf1',
            success: '#8bd22f',
            warning: '#e7ba08',
            danger: '#f95372',
        };
        // dashboard colors for charts
        this.dashboardColors = {
            blueStone: '#40daf1',
            surfieGreen: '#00abff',
            silverTree: '#1b70ef',
            gossip: '#3c4eb9',
            white: '#ffffff',
            black: '#0e0e0f',
            red: '#e50615'
        };
        this.conf = {
            theme: {
                name: 'ng2',
            },
            colors: {
                default: this.basic.default,
                defaultText: this.basic.defaultText,
                border: this.basic.border,
                borderDark: this.basic.borderDark,
                primary: this.colorScheme.primary,
                info: this.colorScheme.info,
                success: this.colorScheme.success,
                warning: this.colorScheme.warning,
                danger: this.colorScheme.danger,
                primaryLight: theme_constants_1.colorHelper.tint(this.colorScheme.primary, 30),
                infoLight: theme_constants_1.colorHelper.tint(this.colorScheme.info, 30),
                successLight: theme_constants_1.colorHelper.tint(this.colorScheme.success, 30),
                warningLight: theme_constants_1.colorHelper.tint(this.colorScheme.warning, 30),
                dangerLight: theme_constants_1.colorHelper.tint(this.colorScheme.danger, 30),
                primaryDark: theme_constants_1.colorHelper.shade(this.colorScheme.primary, 15),
                infoDark: theme_constants_1.colorHelper.shade(this.colorScheme.info, 15),
                successDark: theme_constants_1.colorHelper.shade(this.colorScheme.success, 15),
                warningDark: theme_constants_1.colorHelper.shade(this.colorScheme.warning, 15),
                dangerDark: theme_constants_1.colorHelper.shade(this.colorScheme.danger, 15),
                dashboard: {
                    blueStone: this.dashboardColors.blueStone,
                    surfieGreen: this.dashboardColors.surfieGreen,
                    silverTree: this.dashboardColors.silverTree,
                    gossip: this.dashboardColors.gossip,
                    white: this.dashboardColors.white,
                    black: this.dashboardColors.black,
                    red: this.dashboardColors.red
                },
                custom: {
                    dashboardLineChart: this.basic.defaultText,
                    dashboardPieChart: theme_constants_1.colorHelper.hexToRgbA(this.basic.defaultText, 0.8)
                }
            }
        };
    }
    BaThemeConfigProvider.prototype.get = function () {
        return this.conf;
    };
    BaThemeConfigProvider.prototype.changeTheme = function (theme) {
        _.merge(this.get().theme, theme);
    };
    BaThemeConfigProvider.prototype.changeColors = function (colors) {
        _.merge(this.get().colors, colors);
    };
    BaThemeConfigProvider = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], BaThemeConfigProvider);
    return BaThemeConfigProvider;
}());
exports.BaThemeConfigProvider = BaThemeConfigProvider;


/***/ }),

/***/ "./src/app/Datahub/theme/theme.constants.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.IMAGES_ROOT = 'assets/img/';
exports.layoutSizes = {
    resWidthCollapseSidebar: 1200,
    resWidthHideSidebar: 500
};
exports.layoutPaths = {
    images: {
        root: exports.IMAGES_ROOT,
        profile: exports.IMAGES_ROOT + 'app/profile/',
        amMap: 'assets/img/theme/vendor/ammap/',
        amChart: 'assets/img/theme/vendor/amcharts/dist/amcharts/images/'
    }
};
var colorHelper = (function () {
    function colorHelper() {
    }
    colorHelper.shade = function (color, weight) {
        return colorHelper.mix('#000000', color, weight);
    };
    colorHelper.tint = function (color, weight) {
        return colorHelper.mix('#ffffff', color, weight);
    };
    colorHelper.hexToRgbA = function (hex, alpha) {
        var c;
        if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {
            c = hex.substring(1).split('');
            if (c.length == 3) {
                c = [c[0], c[0], c[1], c[1], c[2], c[2]];
            }
            c = '0x' + c.join('');
            return 'rgba(' + [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + ',' + alpha + ')';
        }
        throw new Error('Bad Hex');
    };
    colorHelper.mix = function (color1, color2, weight) {
        var d2h = function (d) { return d.toString(16); };
        var h2d = function (h) { return parseInt(h, 16); };
        var result = "#";
        for (var i = 1; i < 7; i += 2) {
            var color1Part = h2d(color1.substr(i, 2));
            var color2Part = h2d(color2.substr(i, 2));
            var resultPart = d2h(Math.floor(color2Part + (color1Part - color2Part) * (weight / 100.0)));
            result += ('0' + resultPart).slice(-2);
        }
        return result;
    };
    return colorHelper;
}());
exports.colorHelper = colorHelper;
exports.isMobile = function () { return (/android|webos|iphone|ipad|ipod|blackberry|windows phone/).test(navigator.userAgent.toLowerCase()); };


/***/ }),

/***/ "./src/app/ReusableComponents/AuxComponenetsModule.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/index.js");
var draggable_component_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/draggable.component.ts");
var droppable_component_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/droppable.component.ts");
var sortable_component_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/sortable.component.ts");
var dnd_config_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/dnd.config.ts");
var dnd_service_1 = __webpack_require__("./src/app/ReusableServices/dnd.service.ts");
var toasty_component_1 = __webpack_require__("./src/app/ReusableComponents/standardToasty/toasty.component.ts");
var toasty_service_1 = __webpack_require__("./src/app/ReusableServices/toasty.service.ts");
var toast_component_1 = __webpack_require__("./src/app/ReusableComponents/standardToasty/toast.component.ts");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var slimLoadingBarService_1 = __webpack_require__("./src/app/ReusableServices/slimLoadingBarService.ts");
var SlimSlider_1 = __webpack_require__("./src/app/ReusableComponents/slimSlider/SlimSlider.ts");
var toast_communication_service_1 = __webpack_require__("./src/app/Datahub/routes/admin/Demo/toastDemo/toast.communication.service.ts");
var toast_component_2 = __webpack_require__("./src/app/ReusableComponents/Calendar/ToasterForCalendar/toast.component.ts");
var toasty_component_2 = __webpack_require__("./src/app/ReusableComponents/Calendar/ToasterForCalendar/toasty.component.ts");
var calendar_toast_service_1 = __webpack_require__("./src/app/ReusableServices/calendar.toast.service.ts");
var AuxComponentsModule = (function () {
    function AuxComponentsModule() {
    }
    AuxComponentsModule = __decorate([
        core_1.NgModule({
            imports: [
                platform_browser_1.BrowserModule, common_1.CommonModule, forms_1.FormsModule, router_1.RouterModule, http_1.HttpModule
            ],
            exports: [
                draggable_component_1.DraggableComponent, droppable_component_1.DroppableComponent, sortable_component_1.SortableContainer, toast_component_1.ToastComponent, toasty_component_1.ToastyComponent, SlimSlider_1.SlimSliderComponent, toast_component_2.CalendarToastComponent, toasty_component_2.CalendarToastyComponent
            ],
            declarations: [
                draggable_component_1.DraggableComponent, droppable_component_1.DroppableComponent, sortable_component_1.SortableContainer, toast_component_1.ToastComponent, toasty_component_1.ToastyComponent, SlimSlider_1.SlimSliderComponent, toast_component_2.CalendarToastComponent, toasty_component_2.CalendarToastyComponent
            ],
            providers: [dnd_config_1.DataTransferEffect, dnd_config_1.DragImage, dnd_config_1.DragDropConfig, dnd_service_1.DragDropService, toasty_service_1.ToastyService, toasty_service_1.ToastyConfig, calendar_toast_service_1.CalendarToastyService, calendar_toast_service_1.CalendarToastyConfig, toast_communication_service_1.ToastCommunicationService, slimLoadingBarService_1.SlimLoadingBarService
            ],
        }), 
        __metadata('design:paramtypes', [])
    ], AuxComponentsModule);
    return AuxComponentsModule;
}());
exports.AuxComponentsModule = AuxComponentsModule;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/calendarTooltip.directive.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var positioning_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/positioning.ts");
var CalendarTooltipWindowComponent = (function () {
    function CalendarTooltipWindowComponent() {
    }
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CalendarTooltipWindowComponent.prototype, "contents", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CalendarTooltipWindowComponent.prototype, "placement", void 0);
    CalendarTooltipWindowComponent = __decorate([
        core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            styles: ["\n    .cal-tooltip {\n      position: absolute;\n      z-index: 1070;\n      display: block;\n      font-style: normal;\n      font-weight: normal;\n      letter-spacing: normal;\n      line-break: auto;\n      line-height: 1.5;\n      text-align: start;\n      text-decoration: none;\n      text-shadow: none;\n      text-transform: none;\n      white-space: normal;\n      word-break: normal;\n      word-spacing: normal;\n      font-size: 11px;\n      word-wrap: break-word;\n      opacity: 0.9;\n    }\n\n    .cal-tooltip.cal-tooltip-top {\n      padding: 5px 0;\n      margin-top: -3px;\n    }\n\n    .cal-tooltip.cal-tooltip-top .cal-tooltip-arrow {\n      bottom: 0;\n      left: 50%;\n      margin-left: -5px;\n      border-width: 5px 5px 0;\n      border-top-color: #000;\n    }\n\n    .cal-tooltip.cal-tooltip-right {\n      padding: 0 5px;\n      margin-left: 3px;\n    }\n\n    .cal-tooltip.cal-tooltip-right .cal-tooltip-arrow {\n      top: 50%;\n      left: 0;\n      margin-top: -5px;\n      border-width: 5px 5px 5px 0;\n      border-right-color: #000;\n    }\n\n    .cal-tooltip.cal-tooltip-bottom {\n      padding: 5px 0;\n      margin-top: 3px;\n    }\n\n    .cal-tooltip.cal-tooltip-bottom .cal-tooltip-arrow {\n      top: 0;\n      left: 50%;\n      margin-left: -5px;\n      border-width: 0 5px 5px;\n      border-bottom-color: #000;\n    }\n\n    .cal-tooltip.cal-tooltip-left {\n      padding: 0 5px;\n      margin-left: -3px;\n    }\n\n    .cal-tooltip.cal-tooltip-left .cal-tooltip-arrow {\n      top: 50%;\n      right: 0;\n      margin-top: -5px;\n      border-width: 5px 0 5px 5px;\n      border-left-color: #000;\n    }\n\n    .cal-tooltip-inner {\n      max-width: 200px;\n      padding: 3px 8px;\n      color: #fff;\n      text-align: center;\n      background-color: #000;\n      border-radius: 0.25rem;\n    }\n\n    .cal-tooltip-arrow {\n      position: absolute;\n      width: 0;\n      height: 0;\n      border-color: transparent;\n      border-style: solid;\n    }\n  "],
            template: "\n    <div class=\"cal-tooltip\" [ngClass]=\"'cal-tooltip-' + placement\">\n      <div class=\"cal-tooltip-arrow\"></div>\n      <div class=\"cal-tooltip-inner\" [innerHtml]=\"contents\"></div>\n    </div>\n  "
        }), 
        __metadata('design:paramtypes', [])
    ], CalendarTooltipWindowComponent);
    return CalendarTooltipWindowComponent;
}());
exports.CalendarTooltipWindowComponent = CalendarTooltipWindowComponent;
var CalendarTooltipDirective = (function () {
    function CalendarTooltipDirective(elementRef, renderer, injector, componentFactoryResolver, viewContainerRef, document //tslint:disable-line
        ) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.injector = injector;
        this.viewContainerRef = viewContainerRef;
        this.document = document;
        this.placement = 'top'; // tslint:disable-line no-input-rename
        this.positioning = new positioning_1.Positioning();
        this.tooltipFactory = componentFactoryResolver.resolveComponentFactory(CalendarTooltipWindowComponent);
    }
    CalendarTooltipDirective.prototype.ngAfterViewChecked = function () {
        this.positionPopover();
    };
    CalendarTooltipDirective.prototype.ngOnDestroy = function () {
        this.hide();
    };
    CalendarTooltipDirective.prototype.onMouseOver = function () {
        this.show();
    };
    CalendarTooltipDirective.prototype.onMouseOut = function () {
        this.hide();
    };
    CalendarTooltipDirective.prototype.show = function () {
        if (!this.tooltipRef && this.contents) {
            this.tooltipRef = this.viewContainerRef.createComponent(this.tooltipFactory, 0, this.injector, []);
            this.tooltipRef.instance.contents = this.contents;
            this.tooltipRef.instance.placement = this.placement;
            this.renderer.invokeElementMethod(this.document.body, 'appendChild', [this.tooltipRef.location.nativeElement]);
        }
    };
    CalendarTooltipDirective.prototype.hide = function () {
        if (this.tooltipRef) {
            this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.tooltipRef.hostView));
            this.tooltipRef = null;
        }
    };
    CalendarTooltipDirective.prototype.positionPopover = function () {
        if (this.tooltipRef) {
            var targetPosition = this.positioning.positionElements(this.elementRef.nativeElement, this.tooltipRef.location.nativeElement.children[0], this.placement, true);
            var targetStyle = this.tooltipRef.location.nativeElement.children[0].style;
            targetStyle.top = targetPosition.top + "px";
            targetStyle.left = targetPosition.left + "px";
        }
    };
    __decorate([
        core_1.Input('mwlCalendarTooltip'), 
        __metadata('design:type', String)
    ], CalendarTooltipDirective.prototype, "contents", void 0);
    __decorate([
        // tslint:disable-line no-input-rename
        core_1.Input('tooltipPlacement'), 
        __metadata('design:type', String)
    ], CalendarTooltipDirective.prototype, "placement", void 0);
    __decorate([
        core_1.HostListener('mouseenter'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], CalendarTooltipDirective.prototype, "onMouseOver", null);
    __decorate([
        core_1.HostListener('mouseleave'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], CalendarTooltipDirective.prototype, "onMouseOut", null);
    CalendarTooltipDirective = __decorate([
        core_1.Directive({
            selector: '[mwlCalendarTooltip]'
        }),
        __param(5, core_1.Inject(platform_browser_1.DOCUMENT)), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _a) || Object, (typeof (_b = typeof core_1.Renderer !== 'undefined' && core_1.Renderer) === 'function' && _b) || Object, (typeof (_c = typeof core_1.Injector !== 'undefined' && core_1.Injector) === 'function' && _c) || Object, (typeof (_d = typeof core_1.ComponentFactoryResolver !== 'undefined' && core_1.ComponentFactoryResolver) === 'function' && _d) || Object, (typeof (_e = typeof core_1.ViewContainerRef !== 'undefined' && core_1.ViewContainerRef) === 'function' && _e) || Object, Object])
    ], CalendarTooltipDirective);
    return CalendarTooltipDirective;
    var _a, _b, _c, _d, _e;
}());
exports.CalendarTooltipDirective = CalendarTooltipDirective;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/common/calendarEventActions.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
//import { CalendarEvent } from 'calendar-utils';
var CalendarEventActionsComponent = (function () {
    function CalendarEventActionsComponent() {
    }
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarEventActionsComponent.prototype, "event", void 0);
    CalendarEventActionsComponent = __decorate([
        core_1.Component({
            selector: 'mwl-calendar-event-actions',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            template: "\n    <span *ngIf=\"event.actions\" class=\"cal-event-actions\">\n      <a\n        class=\"cal-event-action\"\n        href=\"javascript:;\"\n        *ngFor=\"let action of event.actions\"\n        (click)=\"action.onClick({event: event})\"\n        [ngClass]=\"action.cssClass\"\n        [innerHtml]=\"action.label\">\n      </a>\n    </span>\n  "
        }), 
        __metadata('design:paramtypes', [])
    ], CalendarEventActionsComponent);
    return CalendarEventActionsComponent;
}());
exports.CalendarEventActionsComponent = CalendarEventActionsComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/common/calendarEventTitle.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
//import { CalendarEvent } from 'calendar-utils';
var CalendarEventTitleComponent = (function () {
    function CalendarEventTitleComponent() {
    }
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarEventTitleComponent.prototype, "event", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CalendarEventTitleComponent.prototype, "view", void 0);
    CalendarEventTitleComponent = __decorate([
        core_1.Component({
            selector: 'mwl-calendar-event-title',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            template: "\n    <a\n      class=\"cal-event-title\"\n      href=\"test\"\n      [innerHTML]=\"event | calendarEventTitle:view\">\n    </a>\n  "
        }), 
        __metadata('design:paramtypes', [])
    ], CalendarEventTitleComponent);
    return CalendarEventTitleComponent;
}());
exports.CalendarEventTitleComponent = CalendarEventTitleComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/day/calendarAllDayEvent.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
//import { CalendarEvent } from 'calendar-utils';
var CalendarAllDayEventComponent = (function () {
    function CalendarAllDayEventComponent() {
        this.eventClicked = new core_1.EventEmitter();
    }
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarAllDayEventComponent.prototype, "event", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_a = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _a) || Object)
    ], CalendarAllDayEventComponent.prototype, "eventClicked", void 0);
    CalendarAllDayEventComponent = __decorate([
        core_1.Component({
            selector: 'mwl-calendar-all-day-event',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            template: "\n    <div\n      class=\"cal-all-day-event\"\n      [style.backgroundColor]=\"event.color.secondary\"\n      [style.borderColor]=\"event.color.primary\">\n      <mwl-calendar-event-title\n        [event]=\"event\"\n        view=\"day\"\n        (click)=\"eventClicked.emit()\">\n      </mwl-calendar-event-title>\n      <mwl-calendar-event-actions [event]=\"event\"></mwl-calendar-event-actions>\n    </div>\n  "
        }), 
        __metadata('design:paramtypes', [])
    ], CalendarAllDayEventComponent);
    return CalendarAllDayEventComponent;
    var _a;
}());
exports.CalendarAllDayEventComponent = CalendarAllDayEventComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/day/calendarDayView.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var calendarutils_1 = __webpack_require__("./src/app/Datahub/routes/home/calendarutils.ts");
var SEGMENT_HEIGHT = 30;
var CalendarDayViewComponent = (function () {
    function CalendarDayViewComponent(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * The width in pixels of each event on the view
         */
        this.eventWidth = 150;
        /**
         * Called when an event title is clicked
         */
        this.eventClicked = new core_1.EventEmitter();
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new core_1.EventEmitter();
        this.hours = [];
        this.width = 0;
        this.locale = locale;
    }
    CalendarDayViewComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.markForCheck();
            });
        }
    };
    CalendarDayViewComponent.prototype.ngOnDestroy = function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    CalendarDayViewComponent.prototype.ngOnChanges = function (changes) {
        if (changes.viewDate ||
            changes.dayStartHour ||
            changes.dayStartMinute ||
            changes.dayEndHour ||
            changes.dayEndMinute) {
            this.refreshHourGrid();
        }
        if (changes.viewDate ||
            changes.events ||
            changes.dayStartHour ||
            changes.dayStartMinute ||
            changes.dayEndHour ||
            changes.dayEndMinute ||
            changes.eventWidth) {
            this.refreshView();
        }
    };
    CalendarDayViewComponent.prototype.refreshHourGrid = function () {
        var _this = this;
        this.hours = calendarutils_1.calendarutils.getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute
            }
        });
        if (this.hourSegmentModifier) {
            this.hours.forEach(function (hour) {
                hour.segments.forEach(function (segment) { return _this.hourSegmentModifier(segment); });
            });
        }
    };
    CalendarDayViewComponent.prototype.refreshView = function () {
        this.view = calendarutils_1.calendarutils.getDayView({
            events: this.events,
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute
            },
            eventWidth: this.eventWidth,
            segmentHeight: SEGMENT_HEIGHT
        });
    };
    CalendarDayViewComponent.prototype.refreshAll = function () {
        this.refreshHourGrid();
        this.refreshView();
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarDayViewComponent.prototype, "viewDate", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarDayViewComponent.prototype, "events", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], CalendarDayViewComponent.prototype, "hourSegments", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], CalendarDayViewComponent.prototype, "dayStartHour", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], CalendarDayViewComponent.prototype, "dayStartMinute", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], CalendarDayViewComponent.prototype, "dayEndHour", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], CalendarDayViewComponent.prototype, "dayEndMinute", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], CalendarDayViewComponent.prototype, "eventWidth", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', (typeof (_a = typeof Subject_1.Subject !== 'undefined' && Subject_1.Subject) === 'function' && _a) || Object)
    ], CalendarDayViewComponent.prototype, "refresh", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CalendarDayViewComponent.prototype, "locale", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarDayViewComponent.prototype, "hourSegmentModifier", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_b = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _b) || Object)
    ], CalendarDayViewComponent.prototype, "eventClicked", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_c = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _c) || Object)
    ], CalendarDayViewComponent.prototype, "hourSegmentClicked", void 0);
    CalendarDayViewComponent = __decorate([
        core_1.Component({
            selector: 'mwl-calendar-day-view',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            template: __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/day/calendarDayView.html")
        }),
        __param(1, core_1.Inject(core_1.LOCALE_ID)), 
        __metadata('design:paramtypes', [(typeof (_d = typeof core_1.ChangeDetectorRef !== 'undefined' && core_1.ChangeDetectorRef) === 'function' && _d) || Object, String])
    ], CalendarDayViewComponent);
    return CalendarDayViewComponent;
    var _a, _b, _c, _d;
}());
exports.CalendarDayViewComponent = CalendarDayViewComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/day/calendarDayView.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"cal-day-view\">\r\n    <mwl-calendar-all-day-event\r\n            *ngFor=\"let event of view.allDayEvents\"\r\n            [event]=\"event\"\r\n            (eventClicked)=\"eventClicked.emit({event: event})\">\r\n    </mwl-calendar-all-day-event>\r\n    <div class=\"cal-hour-rows\">\r\n        <div class=\"cal-events\">\r\n            <mwl-calendar-day-view-event\r\n                    *ngFor=\"let dayEvent of view?.events\"\r\n                    [dayEvent]=\"dayEvent\"\r\n                    (eventClicked)=\"eventClicked.emit({event: dayEvent.event})\">\r\n            </mwl-calendar-day-view-event>\r\n        </div>\r\n        <div class=\"cal-hour\" *ngFor=\"let hour of hours\" [style.minWidth.px]=\"view?.width + 70\">\r\n            <mwl-calendar-day-view-hour-segment\r\n                    *ngFor=\"let segment of hour.segments\"\r\n                    [segment]=\"segment\"\r\n                    [locale]=\"locale\"\r\n                    (click)=\"hourSegmentClicked.emit({date: segment.date})\">\r\n            </mwl-calendar-day-view-hour-segment>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/day/calendarDayViewEvent.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
//import {DayViewEvent} from "calendar-utils";
//import { DayViewEvent } from 'calendar-utils';
var CalendarDayViewEventComponent = (function () {
    function CalendarDayViewEventComponent() {
        this.eventClicked = new core_1.EventEmitter();
    }
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarDayViewEventComponent.prototype, "dayEvent", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_a = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _a) || Object)
    ], CalendarDayViewEventComponent.prototype, "eventClicked", void 0);
    CalendarDayViewEventComponent = __decorate([
        core_1.Component({
            selector: 'mwl-calendar-day-view-event',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            template: "\n    <div\n      class=\"cal-event\"\n      [style.marginTop.px]=\"dayEvent.top\"\n      [style.marginLeft.px]=\"dayEvent.left + 70\"\n      [style.height.px]=\"dayEvent.height\"\n      [style.width.px]=\"dayEvent.width - 1\"\n      [style.backgroundColor]=\"dayEvent.event.color.secondary\"\n      [style.borderColor]=\"dayEvent.event.color.primary\"\n      [class.cal-starts-within-day]=\"!dayEvent.startsBeforeDay\"\n      [class.cal-ends-within-day]=\"!dayEvent.endsAfterDay\"\n      [ngClass]=\"dayEvent.event.cssClass\">\n      <mwl-calendar-event-title\n        [event]=\"dayEvent.event\"\n        view=\"day\"\n        (click)=\"eventClicked.emit()\">\n      </mwl-calendar-event-title>\n      <mwl-calendar-event-actions [event]=\"dayEvent.event\"></mwl-calendar-event-actions>\n    </div>\n  "
        }), 
        __metadata('design:paramtypes', [])
    ], CalendarDayViewEventComponent);
    return CalendarDayViewEventComponent;
    var _a;
}());
exports.CalendarDayViewEventComponent = CalendarDayViewEventComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/day/calendarDayViewHourSegment.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var CalendarDayViewHourSegmentComponent = (function () {
    function CalendarDayViewHourSegmentComponent() {
    }
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarDayViewHourSegmentComponent.prototype, "segment", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CalendarDayViewHourSegmentComponent.prototype, "locale", void 0);
    CalendarDayViewHourSegmentComponent = __decorate([
        core_1.Component({
            selector: 'mwl-calendar-day-view-hour-segment',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            template: "\n    <div class=\"cal-hour-segment\" [ngClass]=\"segment.cssClass\">\n      <div [hidden]=\"!segment.isStart\" class=\"cal-time\">\n        {{ segment.date | calendarDate:'dayViewHour':locale }}\n      </div>\n      &nbsp;\n    </div>\n  "
        }), 
        __metadata('design:paramtypes', [])
    ], CalendarDayViewHourSegmentComponent);
    return CalendarDayViewHourSegmentComponent;
}());
exports.CalendarDayViewHourSegmentComponent = CalendarDayViewHourSegmentComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/month/calendarMonthCell.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var calendar_toast_service_1 = __webpack_require__("./src/app/ReusableServices/calendar.toast.service.ts");
var CalendarMonthCellComponent = (function () {
    function CalendarMonthCellComponent(toastServ) {
        this.highlightDay = new core_1.EventEmitter();
        this.badgeStyles = Array();
        this.toastyService = toastServ;
    }
    CalendarMonthCellComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        this.fatalBadge = 0;
        this.okBadge = 0;
        this.futureBadge = 0;
        if (changes.day) {
            var test = this.day.badgeTotal;
            if (test > 0) {
                this.badges = new Array();
                this.day.events.forEach(function (x) {
                    var lookup = _this.badges.find(function (xx) { return xx.status === x.status; });
                    if (lookup) {
                        lookup.badgeTotal++;
                        lookup.badgeEvents.push(x);
                    }
                    else {
                        _this.badges.push({
                            status: x.status,
                            badgeEvents: [x],
                            badgeTotal: 1,
                            badgeStyle: "cal-day-badge-" + x.status.toLowerCase()
                        });
                    }
                });
            }
        }
    };
    CalendarMonthCellComponent.prototype.dayEventClicked = function (badge) {
        this.toastyService.eventsArrival.emit(badge.badgeEvents);
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarMonthCellComponent.prototype, "day", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarMonthCellComponent.prototype, "openDay", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CalendarMonthCellComponent.prototype, "locale", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CalendarMonthCellComponent.prototype, "tooltipPlacement", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_a = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _a) || Object)
    ], CalendarMonthCellComponent.prototype, "highlightDay", void 0);
    CalendarMonthCellComponent = __decorate([
        core_1.Component({
            selector: 'mwl-calendar-month-cell',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            template: "\n    <div class=\"cal-cell-top\">\n       <span *ngFor=\"let badge of badges\" class=\"{{badge.badgeStyle}}\" (click)=\"dayEventClicked(badge)\">{{badge.badgeTotal }}</span>\n       <span class=\"cal-day-number\">{{ day.date | calendarDate:'monthViewDayNumber':locale }}</span>      \n    </div>\n    <div class=\"cal-events\">\n    </div>\n  ",
            host: {
                '[class]': '"cal-cell cal-day-cell " + day?.cssClass',
                '[class.cal-past]': 'day.isPast',
                '[class.cal-today]': 'day.isToday',
                '[class.cal-future]': 'day.isFuture',
                '[class.cal-weekend]': 'day.isWeekend',
                '[class.cal-in-month]': 'day.inMonth',
                '[class.cal-out-month]': '!day.inMonth',
                '[class.cal-has-events]': 'day.events.length > 0',
                '[class.cal-open]': 'day === openDay',
                '[style.backgroundColor]': 'day.backgroundColor'
            }
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof calendar_toast_service_1.CalendarToastyService !== 'undefined' && calendar_toast_service_1.CalendarToastyService) === 'function' && _b) || Object])
    ], CalendarMonthCellComponent);
    return CalendarMonthCellComponent;
    var _a, _b;
}());
exports.CalendarMonthCellComponent = CalendarMonthCellComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/month/calendarMonthView.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var fns_1 = __webpack_require__("./src/app/Datahub/routes/home/fns.ts");
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var calendarutils_1 = __webpack_require__("./src/app/Datahub/routes/home/calendarutils.ts");
var CalendarMonthViewComponent = (function () {
    function CalendarMonthViewComponent(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * Whether the events list for the day of the `viewDate` option is visible or not
         */
        this.activeDayIsOpen = false;
        /**
         * The placement of the event tooltip
         */
        this.tooltipPlacement = 'top';
        /**
         * Called when the day cell is clicked
         */
        this.dayClicked = new core_1.EventEmitter();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new core_1.EventEmitter();
        this.locale = locale;
    }
    CalendarMonthViewComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.markForCheck();
            });
        }
    };
    CalendarMonthViewComponent.prototype.ngOnChanges = function (changes) {
        if (changes.viewDate) {
            this.refreshHeader();
        }
        if (changes.viewDate || changes.events) {
            this.refreshBody();
        }
        if (changes.activeDayIsOpen || changes.viewDate || changes.events) {
            this.checkActiveDayIsOpen();
        }
    };
    CalendarMonthViewComponent.prototype.ngOnDestroy = function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    CalendarMonthViewComponent.prototype.refreshHeader = function () {
        this.columnHeaders = calendarutils_1.calendarutils.getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn
        });
    };
    CalendarMonthViewComponent.prototype.refreshBody = function () {
        var _this = this;
        this.view = calendarutils_1.calendarutils.getMonthView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn
        });
        if (this.dayModifier) {
            this.view.days.forEach(function (day) { return _this.dayModifier(day); });
        }
    };
    CalendarMonthViewComponent.prototype.checkActiveDayIsOpen = function () {
        var _this = this;
        if (this.activeDayIsOpen === true) {
            this.openDay = this.view.days.find(function (day) { return fns_1.fns.isSameDay(day.date, _this.viewDate); });
            var index = this.view.days.indexOf(this.openDay);
            this.openRowIndex = Math.floor(index / 7) * 7;
        }
        else {
            this.openRowIndex = null;
            this.openDay = null;
        }
    };
    CalendarMonthViewComponent.prototype.refreshAll = function () {
        this.refreshHeader();
        this.refreshBody();
        this.checkActiveDayIsOpen();
    };
    CalendarMonthViewComponent.prototype.toggleDayHighlight = function (event, isHighlighted) {
        this.view.days.forEach(function (day) {
            if (isHighlighted && day.events.indexOf(event) > -1) {
                day.backgroundColor = event.color.secondary;
            }
            else {
                delete day.backgroundColor;
            }
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarMonthViewComponent.prototype, "viewDate", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarMonthViewComponent.prototype, "events", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], CalendarMonthViewComponent.prototype, "activeDayIsOpen", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarMonthViewComponent.prototype, "dayModifier", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', (typeof (_a = typeof Subject_1.Subject !== 'undefined' && Subject_1.Subject) === 'function' && _a) || Object)
    ], CalendarMonthViewComponent.prototype, "refresh", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CalendarMonthViewComponent.prototype, "locale", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CalendarMonthViewComponent.prototype, "tooltipPlacement", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], CalendarMonthViewComponent.prototype, "weekStartsOn", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_b = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _b) || Object)
    ], CalendarMonthViewComponent.prototype, "dayClicked", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_c = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _c) || Object)
    ], CalendarMonthViewComponent.prototype, "eventClicked", void 0);
    CalendarMonthViewComponent = __decorate([
        core_1.Component({
            selector: 'mwl-calendar-month-view',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            template: __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/month/calendarMonthView.html")
        }),
        __param(1, core_1.Inject(core_1.LOCALE_ID)), 
        __metadata('design:paramtypes', [(typeof (_d = typeof core_1.ChangeDetectorRef !== 'undefined' && core_1.ChangeDetectorRef) === 'function' && _d) || Object, String])
    ], CalendarMonthViewComponent);
    return CalendarMonthViewComponent;
    var _a, _b, _c, _d;
}());
exports.CalendarMonthViewComponent = CalendarMonthViewComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/month/calendarMonthView.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"cal-month-view\">\r\n    <div class=\"cal-cell-row cal-header\">\r\n        <div class=\"cal-cell\" *ngFor=\"let header of columnHeaders\">\r\n            {{ header.date | calendarDate:'monthViewColumnHeader':locale }}\r\n        </div>\r\n    </div>\r\n    <div class=\"cal-days\">\r\n        <div *ngFor=\"let rowIndex of view.rowOffsets\">\r\n            <div class=\"cal-cell-row\">\r\n                <mwl-calendar-month-cell\r\n                        *ngFor=\"let day of view.days | slice : rowIndex : rowIndex + 7\"\r\n                        [day]=\"day\"\r\n                        [openDay]=\"openDay\"\r\n                        [locale]=\"locale\"\r\n                        [tooltipPlacement]=\"tooltipPlacement\"\r\n                        (click)=\"dayClicked.emit({day: day})\"\r\n                        (highlightDay)=\"toggleDayHighlight($event.event, true)\"\r\n                        (unhighlightDay)=\"toggleDayHighlight($event.event, false)\">\r\n                </mwl-calendar-month-cell>\r\n            </div>\r\n            <!--<mwl-calendar-open-day-events\r\n              [isOpen]=\"openRowIndex === rowIndex\"\r\n              [events]=\"openDay?.events\"\r\n              (eventClicked)=\"eventClicked.emit({event: $event.event})\">\r\n            </mwl-calendar-open-day-events>-->\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/month/calendarOpenDayEvents.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var CalendarOpenDayEventsComponent = (function () {
    function CalendarOpenDayEventsComponent() {
        this.isOpen = false;
        this.eventClicked = new core_1.EventEmitter();
    }
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], CalendarOpenDayEventsComponent.prototype, "isOpen", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarOpenDayEventsComponent.prototype, "events", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_a = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _a) || Object)
    ], CalendarOpenDayEventsComponent.prototype, "eventClicked", void 0);
    CalendarOpenDayEventsComponent = __decorate([
        core_1.Component({
            selector: 'mwl-calendar-open-day-events',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            template: "\n    <div class=\"cal-open-day-events\" [@collapse] *ngIf=\"isOpen\">\n      <div\n        *ngFor=\"let event of events\"\n        [ngClass]=\"event?.cssClass\">\n        <span class=\"cal-event\" [style.backgroundColor]=\"event.color.primary\"></span>\n        <mwl-calendar-event-title\n          [event]=\"event\"\n          view=\"month\"\n          (click)=\"eventClicked.emit({event: event})\">\n        </mwl-calendar-event-title>\n        <mwl-calendar-event-actions [event]=\"event\"></mwl-calendar-event-actions>\n      </div>\n    </div>\n  ",
            animations: [
                core_1.trigger('collapse', [
                    core_1.transition('void => *', [
                        core_1.style({ height: 0 }),
                        core_1.animate('150ms linear', core_1.style({ height: '*' }))
                    ]),
                    core_1.transition('* => void', [
                        core_1.style({ height: '*' }),
                        core_1.animate('150ms linear', core_1.style({ height: 0 }))
                    ])
                ])
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], CalendarOpenDayEventsComponent);
    return CalendarOpenDayEventsComponent;
    var _a;
}());
exports.CalendarOpenDayEventsComponent = CalendarOpenDayEventsComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/positioning.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Positioning = (function () {
    function Positioning() {
        this.offset = function (element, round) {
            if (round === void 0) {
                round = true;
            }
            var elBcr = element.getBoundingClientRect();
            var viewportOffset = {
                top: window.pageYOffset - document.documentElement.clientTop,
                left: window.pageXOffset - document.documentElement.clientLeft
            };
            var elOffset = {
                height: elBcr.height || element.offsetHeight,
                width: elBcr.width || element.offsetWidth,
                top: elBcr.top + viewportOffset.top,
                bottom: elBcr.bottom + viewportOffset.top,
                left: elBcr.left + viewportOffset.left,
                right: elBcr.right + viewportOffset.left
            };
            if (round) {
                elOffset.height = Math.round(elOffset.height);
                elOffset.width = Math.round(elOffset.width);
                elOffset.top = Math.round(elOffset.top);
                elOffset.bottom = Math.round(elOffset.bottom);
                elOffset.left = Math.round(elOffset.left);
                elOffset.right = Math.round(elOffset.right);
            }
            return elOffset;
        };
        this.positionElements = function (hostElement, targetElement, placement, appendToBody) {
            var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);
            var shiftWidth = {
                left: hostElPosition.left,
                center: hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2,
                right: hostElPosition.left + hostElPosition.width
            };
            var shiftHeight = {
                top: hostElPosition.top,
                center: hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2,
                bottom: hostElPosition.top + hostElPosition.height
            };
            var targetElBCR = targetElement.getBoundingClientRect();
            var placementPrimary = placement.split('-')[0] || 'top';
            var placementSecondary = placement.split('-')[1] || 'center';
            var targetElPosition = {
                height: targetElBCR.height || targetElement.offsetHeight,
                width: targetElBCR.width || targetElement.offsetWidth,
                top: 0,
                bottom: targetElBCR.height || targetElement.offsetHeight,
                left: 0,
                right: targetElBCR.width || targetElement.offsetWidth
            };
            switch (placementPrimary) {
                case 'top':
                    targetElPosition.top = hostElPosition.top - targetElement.offsetHeight;
                    targetElPosition.bottom += hostElPosition.top - targetElement.offsetHeight;
                    targetElPosition.left = shiftWidth[placementSecondary];
                    targetElPosition.right += shiftWidth[placementSecondary];
                    break;
                case 'bottom':
                    targetElPosition.top = shiftHeight[placementPrimary];
                    targetElPosition.bottom += shiftHeight[placementPrimary];
                    targetElPosition.left = shiftWidth[placementSecondary];
                    targetElPosition.right += shiftWidth[placementSecondary];
                    break;
                case 'left':
                    targetElPosition.top = shiftHeight[placementSecondary];
                    targetElPosition.bottom += shiftHeight[placementSecondary];
                    targetElPosition.left = hostElPosition.left - targetElement.offsetWidth;
                    targetElPosition.right += hostElPosition.left - targetElement.offsetWidth;
                    break;
                case 'right':
                    targetElPosition.top = shiftHeight[placementSecondary];
                    targetElPosition.bottom += shiftHeight[placementSecondary];
                    targetElPosition.left = shiftWidth[placementPrimary];
                    targetElPosition.right += shiftWidth[placementPrimary];
                    break;
            }
            targetElPosition.top = Math.round(targetElPosition.top);
            targetElPosition.bottom = Math.round(targetElPosition.bottom);
            targetElPosition.left = Math.round(targetElPosition.left);
            targetElPosition.right = Math.round(targetElPosition.right);
            return targetElPosition;
        };
    }
    Positioning.prototype.getStyle = function (element, prop) { return window.getComputedStyle(element)[prop]; };
    ;
    Positioning.prototype.isStaticPositioned = function (element) {
        return (this.getStyle(element, 'position') || 'static') === 'static';
    };
    ;
    Positioning.prototype.offsetParent = function (element) {
        var offsetParentEl = element.offsetParent || document.documentElement;
        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {
            offsetParentEl = offsetParentEl.offsetParent;
        }
        return offsetParentEl || document.documentElement;
    };
    ;
    Positioning.prototype.position = function (element, round) {
        if (round === void 0) {
            round = true;
        }
        var elPosition;
        var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };
        if (this.getStyle(element, 'position') === 'fixed') {
            elPosition = element.getBoundingClientRect();
        }
        else {
            var offsetParentEl = this.offsetParent(element);
            elPosition = this.offset(element, false);
            if (offsetParentEl !== document.documentElement) {
                parentOffset = this.offset(offsetParentEl, false);
            }
            parentOffset.top += offsetParentEl.clientTop;
            parentOffset.left += offsetParentEl.clientLeft;
        }
        elPosition.top -= parentOffset.top;
        elPosition.bottom -= parentOffset.top;
        elPosition.left -= parentOffset.left;
        elPosition.right -= parentOffset.left;
        if (round) {
            elPosition.top = Math.round(elPosition.top);
            elPosition.bottom = Math.round(elPosition.bottom);
            elPosition.left = Math.round(elPosition.left);
            elPosition.right = Math.round(elPosition.right);
        }
        return elPosition;
    };
    ;
    return Positioning;
}());
exports.Positioning = Positioning;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/week/calendarWeekView.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var calendarutils_1 = __webpack_require__("./src/app/Datahub/routes/home/calendarutils.ts");
/*import {
 WeekDay,
 CalendarEvent,
 WeekViewEventRow,
 getWeekViewHeader,
 getWeekView
 } from 'calendar-utils';*/
var CalendarWeekViewComponent = (function () {
    function CalendarWeekViewComponent(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * The placement of the event tooltip
         */
        this.tooltipPlacement = 'bottom';
        /**
         * Called when a header week day is clicked
         */
        this.dayClicked = new core_1.EventEmitter();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new core_1.EventEmitter();
        this.eventRows = [];
        this.locale = locale;
    }
    CalendarWeekViewComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.markForCheck();
            });
        }
    };
    CalendarWeekViewComponent.prototype.ngOnChanges = function (changes) {
        if (changes.viewDate) {
            this.refreshHeader();
        }
        if (changes.events || changes.viewDate) {
            this.refreshBody();
        }
    };
    CalendarWeekViewComponent.prototype.ngOnDestroy = function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    CalendarWeekViewComponent.prototype.refreshHeader = function () {
        this.days = calendarutils_1.calendarutils.getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn
        });
    };
    CalendarWeekViewComponent.prototype.refreshBody = function () {
        this.eventRows = calendarutils_1.calendarutils.getWeekView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn
        });
    };
    CalendarWeekViewComponent.prototype.refreshAll = function () {
        this.refreshHeader();
        this.refreshBody();
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarWeekViewComponent.prototype, "viewDate", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarWeekViewComponent.prototype, "events", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', (typeof (_a = typeof Subject_1.Subject !== 'undefined' && Subject_1.Subject) === 'function' && _a) || Object)
    ], CalendarWeekViewComponent.prototype, "refresh", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CalendarWeekViewComponent.prototype, "locale", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CalendarWeekViewComponent.prototype, "tooltipPlacement", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], CalendarWeekViewComponent.prototype, "weekStartsOn", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_b = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _b) || Object)
    ], CalendarWeekViewComponent.prototype, "dayClicked", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_c = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _c) || Object)
    ], CalendarWeekViewComponent.prototype, "eventClicked", void 0);
    CalendarWeekViewComponent = __decorate([
        core_1.Component({
            selector: 'mwl-calendar-week-view',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            template: __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/week/calendarWeekView.html")
        }),
        __param(1, core_1.Inject(core_1.LOCALE_ID)), 
        __metadata('design:paramtypes', [(typeof (_d = typeof core_1.ChangeDetectorRef !== 'undefined' && core_1.ChangeDetectorRef) === 'function' && _d) || Object, String])
    ], CalendarWeekViewComponent);
    return CalendarWeekViewComponent;
    var _a, _b, _c, _d;
}());
exports.CalendarWeekViewComponent = CalendarWeekViewComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/week/calendarWeekView.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"cal-week-view\">\r\n    <div class=\"cal-day-headers\">\r\n        <mwl-calendar-week-view-header\r\n                *ngFor=\"let day of days\"\r\n                [day]=\"day\"\r\n                [locale]=\"locale\"\r\n                (click)=\"dayClicked.emit({date: day.date})\">\r\n        </mwl-calendar-week-view-header>\r\n    </div>\r\n    <div *ngFor=\"let eventRow of eventRows\">\r\n        <div\r\n                class=\"cal-event-container\"\r\n                *ngFor=\"let weekEvent of eventRow.row\"\r\n                [style.width]=\"((100 / 7) * weekEvent.span) + '%'\"\r\n                [style.marginLeft]=\"((100 / 7) * weekEvent.offset) + '%'\">\r\n            <mwl-calendar-week-view-event\r\n                    [weekEvent]=\"weekEvent\"\r\n                    [tooltipPlacement]=\"tooltipPlacement\"\r\n                    (eventClicked)=\"eventClicked.emit({event: weekEvent.event})\">\r\n            </mwl-calendar-week-view-event>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/week/calendarWeekViewEvent.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var CalendarWeekViewEventComponent = (function () {
    function CalendarWeekViewEventComponent() {
        this.eventClicked = new core_1.EventEmitter();
    }
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarWeekViewEventComponent.prototype, "weekEvent", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CalendarWeekViewEventComponent.prototype, "tooltipPlacement", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_a = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _a) || Object)
    ], CalendarWeekViewEventComponent.prototype, "eventClicked", void 0);
    CalendarWeekViewEventComponent = __decorate([
        core_1.Component({
            selector: 'mwl-calendar-week-view-event',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            template: "\n    <div\n      class=\"cal-event\"\n      [class.cal-starts-within-week]=\"!weekEvent.startsBeforeWeek\"\n      [class.cal-ends-within-week]=\"!weekEvent.endsAfterWeek\"\n      [style.backgroundColor]=\"weekEvent.event.color.secondary\"\n      [ngClass]=\"weekEvent.event?.cssClass\"\n      [mwlCalendarTooltip]=\"weekEvent.event | calendarEventTitle:'weekTooltip'\"\n      [tooltipPlacement]=\"tooltipPlacement\">\n      <mwl-calendar-event-title\n        [event]=\"weekEvent.event\"\n        view=\"week\"\n        (click)=\"eventClicked.emit()\">\n      </mwl-calendar-event-title>\n    </div>\n  "
        }), 
        __metadata('design:paramtypes', [])
    ], CalendarWeekViewEventComponent);
    return CalendarWeekViewEventComponent;
    var _a;
}());
exports.CalendarWeekViewEventComponent = CalendarWeekViewEventComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarComponents/week/calendarWeekViewHeader.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
//import { WeekDay } from 'calendar-utils';
var CalendarWeekViewHeaderComponent = (function () {
    function CalendarWeekViewHeaderComponent() {
    }
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CalendarWeekViewHeaderComponent.prototype, "day", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CalendarWeekViewHeaderComponent.prototype, "locale", void 0);
    CalendarWeekViewHeaderComponent = __decorate([
        core_1.Component({
            selector: 'mwl-calendar-week-view-header',
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            template: "\n    <b>{{ day.date | calendarDate:'weekViewColumnHeader':locale }}</b><br>\n    <span>{{ day.date | calendarDate:'weekViewColumnSubHeader':locale }}</span>\n  ",
            host: {
                '[class]': '"cal-header"',
                '[class.cal-past]': 'day.isPast',
                '[class.cal-today]': 'day.isToday',
                '[class.cal-future]': 'day.isFuture',
                '[class.cal-weekend]': 'day.isWeekend'
            }
        }), 
        __metadata('design:paramtypes', [])
    ], CalendarWeekViewHeaderComponent);
    return CalendarWeekViewHeaderComponent;
}());
exports.CalendarWeekViewHeaderComponent = CalendarWeekViewHeaderComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarHelpers/calendarDateFormatter.provider.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var calendarNativeDateFormatter_provider_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarHelpers/calendarNativeDateFormatter.provider.ts");
var CalendarDateFormatter = (function (_super) {
    __extends(CalendarDateFormatter, _super);
    function CalendarDateFormatter() {
        _super.apply(this, arguments);
    }
    return CalendarDateFormatter;
}(calendarNativeDateFormatter_provider_1.CalendarNativeDateFormatter));
exports.CalendarDateFormatter = CalendarDateFormatter;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarHelpers/calendarEventTitle.provider.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var CalendarEventTitle = (function () {
    function CalendarEventTitle() {
    }
    CalendarEventTitle.prototype.month = function (event) {
        return event.title;
    };
    CalendarEventTitle.prototype.monthTooltip = function (event) {
        return event.title;
    };
    CalendarEventTitle.prototype.week = function (event) {
        return event.title;
    };
    CalendarEventTitle.prototype.weekTooltip = function (event) {
        return event.title;
    };
    CalendarEventTitle.prototype.day = function (event) {
        return event.title;
    };
    return CalendarEventTitle;
}());
exports.CalendarEventTitle = CalendarEventTitle;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/CalendarHelpers/calendarNativeDateFormatter.provider.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fns_1 = __webpack_require__("./src/app/Datahub/routes/home/fns.ts");
var CalendarNativeDateFormatter = (function () {
    function CalendarNativeDateFormatter() {
    }
    CalendarNativeDateFormatter.prototype.monthViewColumnHeader = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);
    };
    CalendarNativeDateFormatter.prototype.monthViewDayNumber = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(date);
    };
    CalendarNativeDateFormatter.prototype.monthViewTitle = function (_a) {
        var date = _a.date, locale = _a.locale;
        if (date === undefined) {
            date = fns_1.fns.getCurrentDate();
        }
        return new Intl.DateTimeFormat(locale, { year: 'numeric', month: 'long' }).format(date);
    };
    CalendarNativeDateFormatter.prototype.weekViewColumnHeader = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);
    };
    CalendarNativeDateFormatter.prototype.weekViewColumnSubHeader = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, {
            day: 'numeric',
            month: 'short'
        }).format(date);
    };
    CalendarNativeDateFormatter.prototype.weekViewTitle = function (_a) {
        var date = _a.date, locale = _a.locale;
        var year = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(date);
        var weekNumber = fns_1.fns.getISOWeek(date);
        return "Week " + weekNumber + " of " + year;
    };
    CalendarNativeDateFormatter.prototype.dayViewHour = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);
    };
    CalendarNativeDateFormatter.prototype.dayViewTitle = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, {
            day: 'numeric',
            month: 'long',
            year: 'numeric',
            weekday: 'long'
        }).format(date);
    };
    return CalendarNativeDateFormatter;
}());
exports.CalendarNativeDateFormatter = CalendarNativeDateFormatter;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/ToasterForCalendar/toast.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var toasty_service_1 = __webpack_require__("./src/app/ReusableServices/toasty.service.ts");
var calendar_toast_service_1 = __webpack_require__("./src/app/ReusableServices/calendar.toast.service.ts");
/**
 * A Toast component shows message with title and close button.
 */
var CalendarToastComponent = (function () {
    function CalendarToastComponent(toastSer) {
        this.closeToastEvent = new core_1.EventEmitter();
        this.toastService = toastSer;
    }
    CalendarToastComponent.prototype.close = function ($event) {
        $event.preventDefault();
        this.closeToastEvent.next(this.toast);
    };
    CalendarToastComponent.prototype.eventDetail = function () {
        this.toastService.eventDetailClicked();
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', (typeof (_a = typeof toasty_service_1.ToastData !== 'undefined' && toasty_service_1.ToastData) === 'function' && _a) || Object)
    ], CalendarToastComponent.prototype, "toast", void 0);
    __decorate([
        core_1.Output('closeToast'), 
        __metadata('design:type', Object)
    ], CalendarToastComponent.prototype, "closeToastEvent", void 0);
    CalendarToastComponent = __decorate([
        core_1.Component({
            selector: 'calendar-toast',
            template: __webpack_require__("./src/app/ReusableComponents/Calendar/ToasterForCalendar/toast.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof calendar_toast_service_1.CalendarToastyService !== 'undefined' && calendar_toast_service_1.CalendarToastyService) === 'function' && _b) || Object])
    ], CalendarToastComponent);
    return CalendarToastComponent;
    var _a, _b;
}());
exports.CalendarToastComponent = CalendarToastComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/ToasterForCalendar/toast.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"toast\" [ngClass]=\"[toast.type, toast.theme]\">\r\n    <div *ngIf=\"toast.showClose\" class=\"close-button\" (click)=\"close($event)\"></div>\r\n    <div *ngIf=\"toast.title || toast.msg\" class=\"toast-text\">\r\n        <span *ngIf=\"toast.title\" class=\"toast-title\">{{toast.title}}</span>\r\n        <br *ngIf=\"toast.title && toast.msg\" />\r\n        <a *ngIf=\"toast.msg\" class=\"toast-msg\" (click)=\"eventDetail()\">{{toast.msg}}</a>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/ToasterForCalendar/toasty.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var toasty_utils_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/ToasterForCalendar/toasty.utils.ts");
var toasty_service_1 = __webpack_require__("./src/app/ReusableServices/toasty.service.ts");
var calendar_toast_service_1 = __webpack_require__("./src/app/ReusableServices/calendar.toast.service.ts");
/**
 * Toasty is container for Toast components
 */
var CalendarToastyComponent = (function () {
    function CalendarToastyComponent(config, toastyService) {
        this.config = config;
        this.toastyService = toastyService;
        this._position = '';
        // The storage for toasts.
        this.toasts = [];
        // Initialise position
        this.position = '';
    }
    Object.defineProperty(CalendarToastyComponent.prototype, "position", {
        get: function () {
            return this._position;
        },
        // The window position where the toast pops up. Possible values:
        // - bottom-right (default value from ToastConfig)
        // - bottom-left
        // - top-right
        // - top-left
        // - top-center
        // - bottom-center
        // - center-center
        set: function (value) {
            if (value) {
                var notFound = true;
                for (var i = 0; i < CalendarToastyComponent.POSITIONS.length; i++) {
                    if (CalendarToastyComponent.POSITIONS[i] === value) {
                        notFound = false;
                        break;
                    }
                }
                if (notFound) {
                    // Position was wrong - clear it here to use the one from config.
                    value = this.config.position;
                }
            }
            else {
                value = this.config.position;
            }
            this._position = 'toasty-position-' + value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the
     * first time, and before any of its children have been checked. It is invoked only once when the
     * directive is instantiated.
     */
    CalendarToastyComponent.prototype.ngOnInit = function () {
        var _this = this;
        // We listen our service to recieve new toasts from it
        this.toastyService.getToasts().subscribe(function (toast) {
            // If we've gone over our limit, remove the earliest
            // one from the array
            if (_this.toasts.length >= _this.config.limit) {
                _this.toasts.shift();
            }
            // Add toasty to array
            _this.toasts.push(toast);
            //
            // If there's a timeout individually or globally,
            // set the toast to timeout
            if (toast.timeout) {
                _this._setTimeout(toast);
            }
        });
        // We listen clear all comes from service here.
        this.toastyService.getClear().subscribe(function (id) {
            if (id) {
                _this.clear(id);
            }
            // Lets clear all toasts
            _this.clearAll();
        });
    };
    /**
     * Event listener of 'closeToast' event comes from ToastyComponent.
     * This method removes ToastComponent assosiated with this Toast.
     */
    CalendarToastyComponent.prototype.closeToast = function (toast) {
        this.clear(toast.id);
    };
    /**
     * Clear individual toast by id
     * @param id is unique identifier of Toast
     */
    CalendarToastyComponent.prototype.clear = function (id) {
        var _this = this;
        if (id) {
            this.toasts.forEach(function (value, key) {
                if (value.id === id) {
                    if (value.onRemove && toasty_utils_1.isFunction(value.onRemove)) {
                        value.onRemove.call(_this, value);
                    }
                    _this.toasts.splice(key, 1);
                }
            });
        }
        else {
            throw new Error('Please provide id of Toast to close');
        }
    };
    /**
     * Clear all toasts
     */
    CalendarToastyComponent.prototype.clearAll = function () {
        var _this = this;
        this.toasts.forEach(function (value, key) {
            if (value.onRemove && toasty_utils_1.isFunction(value.onRemove)) {
                value.onRemove.call(_this, value);
            }
        });
        this.toasts = [];
    };
    /**
     * Custom setTimeout function for specific setTimeouts on individual toasts.
     */
    CalendarToastyComponent.prototype._setTimeout = function (toast) {
        var _this = this;
        window.setTimeout(function () {
            _this.clear(toast.id);
        }, toast.timeout);
    };
    /**
     * Set of constants defins position of Toasty on the page.
     */
    CalendarToastyComponent.POSITIONS = ['bottom-right', 'bottom-left', 'top-right', 'top-left', 'top-center', 'bottom-center', 'center-center'];
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], CalendarToastyComponent.prototype, "position", null);
    CalendarToastyComponent = __decorate([
        core_1.Component({
            selector: 'calendar-toasty',
            template: __webpack_require__("./src/app/ReusableComponents/Calendar/ToasterForCalendar/toasty.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof toasty_service_1.ToastyConfig !== 'undefined' && toasty_service_1.ToastyConfig) === 'function' && _a) || Object, (typeof (_b = typeof calendar_toast_service_1.CalendarToastyService !== 'undefined' && calendar_toast_service_1.CalendarToastyService) === 'function' && _b) || Object])
    ], CalendarToastyComponent);
    return CalendarToastyComponent;
    var _a, _b;
}());
exports.CalendarToastyComponent = CalendarToastyComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/ToasterForCalendar/toasty.html":
/***/ (function(module, exports) {

module.exports = "<div id=\"toasty\" [ngClass]=\"[position]\">\r\n    <calendar-toast *ngFor=\"let toast of toasts\" [toast]=\"toast\" (closeToast)=\"closeToast(toast)\"></calendar-toast>\r\n</div>`"

/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/ToasterForCalendar/toasty.utils.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Check and return true if an object is type of string
 */
function isString(obj) {
    return typeof obj === "string";
}
exports.isString = isString;
/**
 * Check and return true if an object is type of number
 */
function isNumber(obj) {
    return typeof obj === "number";
}
exports.isNumber = isNumber;
/**
 * Check and return true if an object is type of Function
 */
function isFunction(obj) {
    return typeof obj === "function";
}
exports.isFunction = isFunction;


/***/ }),

/***/ "./src/app/ReusableComponents/Calendar/calendar.Module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var calendarDayView_component_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/day/calendarDayView.component.ts");
var calendarWeekView_component_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/week/calendarWeekView.component.ts");
var calendarEventTitle_component_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/common/calendarEventTitle.component.ts");
var calendarMonthView_component_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/month/calendarMonthView.component.ts");
var calendarEventActions_component_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/common/calendarEventActions.component.ts");
var calendarMonthCell_component_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/month/calendarMonthCell.component.ts");
var calendarOpenDayEvents_component_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/month/calendarOpenDayEvents.component.ts");
var calendarWeekViewHeader_component_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/week/calendarWeekViewHeader.component.ts");
var calendarWeekViewEvent_component_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/week/calendarWeekViewEvent.component.ts");
var calendarAllDayEvent_component_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/day/calendarAllDayEvent.component.ts");
var calendarDayViewHourSegment_component_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/day/calendarDayViewHourSegment.component.ts");
var calendarDayViewEvent_component_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/day/calendarDayViewEvent.component.ts");
var calendarTooltip_directive_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarComponents/calendarTooltip.directive.ts");
var calendarDate_pipe_1 = __webpack_require__("./src/app/Datahub/pipes/calendarDate.pipe.ts");
var calendarDateFormatter_provider_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarHelpers/calendarDateFormatter.provider.ts");
var calendarEventTitle_pipe_1 = __webpack_require__("./src/app/Datahub/pipes/calendarEventTitle.pipe.ts");
var calendarEventTitle_provider_1 = __webpack_require__("./src/app/ReusableComponents/Calendar/CalendarHelpers/calendarEventTitle.provider.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var calendarService_1 = __webpack_require__("./src/app/ReusableServices/calendarService.ts");
var CalendarModule = (function () {
    function CalendarModule() {
    }
    CalendarModule = __decorate([
        core_1.NgModule({
            imports: [common_1.CommonModule, forms_1.FormsModule],
            declarations: [
                calendarDayView_component_1.CalendarDayViewComponent,
                calendarWeekView_component_1.CalendarWeekViewComponent,
                calendarMonthView_component_1.CalendarMonthViewComponent,
                calendarEventActions_component_1.CalendarEventActionsComponent,
                calendarEventTitle_component_1.CalendarEventTitleComponent,
                calendarMonthCell_component_1.CalendarMonthCellComponent,
                calendarOpenDayEvents_component_1.CalendarOpenDayEventsComponent,
                calendarWeekViewHeader_component_1.CalendarWeekViewHeaderComponent,
                calendarWeekViewEvent_component_1.CalendarWeekViewEventComponent,
                calendarAllDayEvent_component_1.CalendarAllDayEventComponent,
                calendarDayViewHourSegment_component_1.CalendarDayViewHourSegmentComponent,
                calendarDayViewEvent_component_1.CalendarDayViewEventComponent,
                calendarTooltip_directive_1.CalendarTooltipWindowComponent,
                calendarTooltip_directive_1.CalendarTooltipDirective,
                calendarDate_pipe_1.CalendarDate,
                calendarEventTitle_pipe_1.CalendarEventTitle
            ],
            exports: [calendarDayView_component_1.CalendarDayViewComponent,
                calendarWeekView_component_1.CalendarWeekViewComponent,
                calendarMonthView_component_1.CalendarMonthViewComponent,
                calendarEventActions_component_1.CalendarEventActionsComponent,
                calendarEventTitle_component_1.CalendarEventTitleComponent,
                calendarMonthCell_component_1.CalendarMonthCellComponent,
                calendarOpenDayEvents_component_1.CalendarOpenDayEventsComponent,
                calendarWeekViewHeader_component_1.CalendarWeekViewHeaderComponent,
                calendarWeekViewEvent_component_1.CalendarWeekViewEventComponent,
                calendarAllDayEvent_component_1.CalendarAllDayEventComponent,
                calendarDayViewHourSegment_component_1.CalendarDayViewHourSegmentComponent,
                calendarDayViewEvent_component_1.CalendarDayViewEventComponent,
                calendarTooltip_directive_1.CalendarTooltipWindowComponent,
                calendarTooltip_directive_1.CalendarTooltipDirective,
                calendarDate_pipe_1.CalendarDate,
                calendarEventTitle_pipe_1.CalendarEventTitle],
            entryComponents: [calendarTooltip_directive_1.CalendarTooltipWindowComponent],
            providers: [
                calendarEventTitle_provider_1.CalendarEventTitle,
                calendarDateFormatter_provider_1.CalendarDateFormatter, calendarService_1.CalendarService
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], CalendarModule);
    return CalendarModule;
}());
exports.CalendarModule = CalendarModule;


/***/ }),

/***/ "./src/app/ReusableComponents/CustomDropDown/CustomDropDown.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var CustomDropDown = (function () {
    function CustomDropDown() {
        this.DropDownEmitter = new core_1.EventEmitter();
        this.disabled = false;
    }
    Object.defineProperty(CustomDropDown.prototype, "Disabled", {
        set: function (value) {
            this.disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    CustomDropDown.prototype.ngOnInit = function () {
    };
    CustomDropDown.prototype.EmitSelectedValue = function (data) {
        this.DropDownEmitter.emit({ Value: data });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], CustomDropDown.prototype, "Disabled", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CustomDropDown.prototype, "selectedValue", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CustomDropDown.prototype, "DataSource", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_a = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _a) || Object)
    ], CustomDropDown.prototype, "DropDownEmitter", void 0);
    CustomDropDown = __decorate([
        core_1.Component({
            selector: "customDropDown",
            template: "\n                <select name=\"dropdowncontrol\" class=\"form-control\" [disabled]=\"disabled\" [(ngModel)]=\"selectedValue\" (change)=\"EmitSelectedValue($event.target.value)\">\n                    <option *ngFor=\"let itemOption of DataSource\" value=\"{{itemOption.Value}}\" selected = \"itemOption.Value == selectedValue\">{{itemOption.Description}}</option>\n                </select>\n                "
        }), 
        __metadata('design:paramtypes', [])
    ], CustomDropDown);
    return CustomDropDown;
    var _a;
}());
exports.CustomDropDown = CustomDropDown;


/***/ }),

/***/ "./src/app/ReusableComponents/SharedModule.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var crudService_1 = __webpack_require__("./src/app/ReusableServices/crudService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var miniMatrixService_1 = __webpack_require__("./src/app/ReusableServices/miniMatrixService.ts");
var notification_1 = __webpack_require__("./src/app/ReusableComponents/notification/notification.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var sampleService_1 = __webpack_require__("./src/app/ReusableServices/sampleService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var spinner_component_1 = __webpack_require__("./src/app/ReusableComponents/spinner/spinner.component.ts");
var sqlQueryBuilder_1 = __webpack_require__("./src/app/ReusableComponents/sqlQueryBuilder/sqlQueryBuilder.ts");
var navbar_1 = __webpack_require__("./src/app/ReusableComponents/navbar/navbar.ts");
var navbarVert_1 = __webpack_require__("./src/app/ReusableComponents/navbarVert/navbarVert.ts");
var typeahead_1 = __webpack_require__("./src/app/ReusableComponents/typeahead/typeahead.ts");
var expandCollapseTrigger_1 = __webpack_require__("./src/app/ReusableComponents/expandCollapse/expandCollapseTrigger.ts");
var pagination_1 = __webpack_require__("./src/app/ReusableComponents/pagination/pagination.ts");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var displayGridFilterService_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGridFilterService.ts");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var formBuilder_1 = __webpack_require__("./src/app/ReusableComponents/formBuilder/formBuilder.ts");
var formBuilderInline_1 = __webpack_require__("./src/app/ReusableComponents/formBuilderInline/formBuilderInline.ts");
var CustomDropDown_1 = __webpack_require__("./src/app/ReusableComponents/CustomDropDown/CustomDropDown.ts");
var inlineEditForm_1 = __webpack_require__("./src/app/ReusableComponents/inlineEditForm/inlineEditForm.ts");
var json_edit_component_1 = __webpack_require__("./src/app/ReusableComponents/jsonEdit/json.edit.component.ts");
var lastItem_component_1 = __webpack_require__("./src/app/ReusableComponents/jsonEdit/lastItem.component.ts");
var http_1 = __webpack_require__("./node_modules/@angular/http/index.js");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var ruleService_1 = __webpack_require__("./src/app/ReusableServices/ruleService.ts");
var tokenFilter_1 = __webpack_require__("./src/app/Datahub/pipes/tokenFilter.ts");
var tableEdit_1 = __webpack_require__("./src/app/Datahub/routes/admin/schematic/editViaTable/tableEdit.ts");
var uploader_1 = __webpack_require__("./src/app/ReusableComponents/upload/uploader.ts");
var ng_uploader_1 = __webpack_require__("./src/app/ReusableDirectives/upload/ng-uploader.ts");
var uploadService_1 = __webpack_require__("./src/app/ReusableServices/uploadService.ts");
var localizationService_1 = __webpack_require__("./src/app/ReusableServices/localizationService.ts");
var localizationTranslatePipe_1 = __webpack_require__("./src/app/Datahub/pipes/localizationTranslatePipe.ts");
var miniGrid_1 = __webpack_require__("./src/app/ReusableComponents/miniGrid/miniGrid.ts");
var formatGridColumn_1 = __webpack_require__("./src/app/Datahub/pipes/formatGridColumn.ts");
var breadcrumb_1 = __webpack_require__("./src/app/ReusableComponents/breadcrumb/breadcrumb.ts");
var tabBuilder_1 = __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.ts");
var tileView_1 = __webpack_require__("./src/app/ReusableComponents/tileView/tileView.ts");
var importExportService_1 = __webpack_require__("./src/app/ReusableServices/importExportService.ts");
var accordion_component_1 = __webpack_require__("./src/app/ReusableComponents/accordion/accordion.component.ts");
var accordionBodyContent_directive_1 = __webpack_require__("./src/app/ReusableComponents/accordion/accordionBodyContent.directive.ts");
var accordionHeaderContent_directive_1 = __webpack_require__("./src/app/ReusableComponents/accordion/accordionHeaderContent.directive.ts");
var assignableListItems_1 = __webpack_require__("./src/app/ReusableComponents/assignableListItems/assignableListItems.ts");
var checkBoxList_1 = __webpack_require__("./src/app/ReusableComponents/checkBoxList/checkBoxList.ts");
var searchFilterPipe_1 = __webpack_require__("./src/app/Datahub/pipes/searchFilterPipe.ts");
var SharedModule = (function () {
    function SharedModule() {
    }
    SharedModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule, forms_1.FormsModule, router_1.RouterModule, http_1.HttpModule
            ],
            exports: [
                accordion_component_1.Accordion, accordionBodyContent_directive_1.AccordionBodyContent, accordionHeaderContent_directive_1.AccordionHeaderContent, spinner_component_1.SpinnerComponent, sqlQueryBuilder_1.sqlQueryBuilder, navbar_1.navBar, navbarVert_1.NavBarVert, CustomDropDown_1.CustomDropDown, formBuilder_1.FormBuilder, formBuilderInline_1.FormBuilderInline,
                inlineEditForm_1.inlineEditForm, lastItem_component_1.LastItem, json_edit_component_1.JsonEdit, notification_1.Notification, tableEdit_1.TableEditConfig, expandCollapseTrigger_1.ExpandCollapseTrigger, miniGrid_1.MiniGridComponenet,
                typeahead_1.TypeAhead, pagination_1.Pagination, displayGrid_1.DisplayGridComponent, ng_uploader_1.UPLOAD_DIRECTIVES, uploader_1.CustomUploader, breadcrumb_1.BreadCrumb, tabBuilder_1.TabBuilder, tileView_1.TileView,
                formatGridColumn_1.FormatGridColumnPipe, tokenFilter_1.TokenFilterPipe, localizationTranslatePipe_1.LocalizationTranslatePipe, assignableListItems_1.AssignableListItems, checkBoxList_1.CheckBoxListComponent, searchFilterPipe_1.MultiSelectSearchFilter
            ],
            declarations: [
                accordion_component_1.Accordion, accordionBodyContent_directive_1.AccordionBodyContent, accordionHeaderContent_directive_1.AccordionHeaderContent, spinner_component_1.SpinnerComponent, sqlQueryBuilder_1.sqlQueryBuilder, navbar_1.navBar, navbarVert_1.NavBarVert, CustomDropDown_1.CustomDropDown, formBuilder_1.FormBuilder, formBuilderInline_1.FormBuilderInline,
                inlineEditForm_1.inlineEditForm, lastItem_component_1.LastItem, json_edit_component_1.JsonEdit, notification_1.Notification, tableEdit_1.TableEditConfig, expandCollapseTrigger_1.ExpandCollapseTrigger, miniGrid_1.MiniGridComponenet,
                typeahead_1.TypeAhead, pagination_1.Pagination, displayGrid_1.DisplayGridComponent, ng_uploader_1.UPLOAD_DIRECTIVES, uploader_1.CustomUploader, breadcrumb_1.BreadCrumb, tabBuilder_1.TabBuilder, tileView_1.TileView,
                formatGridColumn_1.FormatGridColumnPipe, tokenFilter_1.TokenFilterPipe, localizationTranslatePipe_1.LocalizationTranslatePipe, assignableListItems_1.AssignableListItems, checkBoxList_1.CheckBoxListComponent, searchFilterPipe_1.MultiSelectSearchFilter
            ],
            entryComponents: [sqlQueryBuilder_1.sqlQueryBuilder, displayGrid_1.DisplayGridComponent, formBuilder_1.FormBuilder],
            providers: [httpAbstract_1.HttpAbstract, sampleService_1.SampleService, navigationService_1.NavigationService, notification_1.Notification, appSettingsService_1.AppSettingsService, httpAbstract_1.HttpAbstract, alertService_1.AlertService, apiService_1.ApiService, AuthGuard_1.AuthGuard,
                ruleService_1.RuleService, crudService_1.crudService, matrixService_1.matrixService, miniMatrixService_1.MiniMatrixService,
                interFormsService_1.InterFormsService, uploadService_1.Ng2Uploader, localizationService_1.LocalizationService, displayGridFilterService_1.DisplayGridFilterService, importExportService_1.ImportExportService
            ],
        }), 
        __metadata('design:paramtypes', [])
    ], SharedModule);
    return SharedModule;
}());
exports.SharedModule = SharedModule;


/***/ }),

/***/ "./src/app/ReusableComponents/accordion/accordion.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Accordion = (function () {
    function Accordion() {
        this.collapsed = false;
        this.collapsedChange = new core_1.EventEmitter();
    }
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Accordion.prototype, "title", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Accordion.prototype, "collapsed", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_a = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _a) || Object)
    ], Accordion.prototype, "collapsedChange", void 0);
    Accordion = __decorate([
        core_1.Component({
            selector: 'accordion',
            template: __webpack_require__("./src/app/ReusableComponents/accordion/accordion.html"),
        }), 
        __metadata('design:paramtypes', [])
    ], Accordion);
    return Accordion;
    var _a;
}());
exports.Accordion = Accordion;


/***/ }),

/***/ "./src/app/ReusableComponents/accordion/accordion.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\r\n    <div class=\"card\">\r\n        <!-- Header -->\r\n        <div class=\"card-header\" role=\"tab\">\r\n            <h5 class=\"accordion-header mb-0 float-xs-left\" (click)=\"collapsed = !collapsed; collapsedChange.emit(collapsed)\">\r\n                <!-- accordion does not use Bootstrap.js -->\r\n                <a class=\"accordion-header-link\" [attr.aria-expanded]=\"collapsed == false\">\r\n                    <span class=\"fa fa-chevron-down\" [ngClass]=\"collapsed == true ? 'fa-rotate-270' : ''\"></span>\r\n                    <span class=\"title\" aria-hidden=\"true\"><strong>{{ title }}</strong></span>\r\n                </a>\r\n            </h5>\r\n            <ng-content select=\"accordionHeaderContent\"></ng-content>\r\n        </div>\r\n        <!-- Body -->\r\n        <div class=\"collapse\" role=\"tabpanel\" [ngClass]=\"collapsed == false ? 'in' : ''\">\r\n            <div class=\"card-block\">\r\n                <ng-content select=\"accordionBodyContent\"></ng-content>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/ReusableComponents/accordion/accordionBodyContent.directive.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * This empty directive serves as a workaround for the usage of a custom tag that is not HTML.
 * See: https://github.com/angular/angular/issues/11251
 *
 * Author: Michael Ling
 *
 * */

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var AccordionBodyContent = (function () {
    function AccordionBodyContent() {
    }
    AccordionBodyContent = __decorate([
        core_1.Directive({ selector: 'accordionBodyContent' }), 
        __metadata('design:paramtypes', [])
    ], AccordionBodyContent);
    return AccordionBodyContent;
}());
exports.AccordionBodyContent = AccordionBodyContent;


/***/ }),

/***/ "./src/app/ReusableComponents/accordion/accordionHeaderContent.directive.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * This empty directive serves as a workaround for the usage of a custom tag that is not HTML.
 * See: https://github.com/angular/angular/issues/11251
 *
 * Author: Michael Ling
 *
 * */

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var AccordionHeaderContent = (function () {
    function AccordionHeaderContent() {
    }
    AccordionHeaderContent = __decorate([
        core_1.Directive({ selector: 'accordionHeaderContent' }), 
        __metadata('design:paramtypes', [])
    ], AccordionHeaderContent);
    return AccordionHeaderContent;
}());
exports.AccordionHeaderContent = AccordionHeaderContent;


/***/ }),

/***/ "./src/app/ReusableComponents/assignableListItems/assignableListItems.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n    <div class=\"col-md-6\">\r\n        <span>{{inputTitle | LocalizationTranslate}}:</span>\r\n    </div>\r\n    <div class=\"col-xs-12 col-md-6\">\r\n        <span>{{assignedTitle | LocalizationTranslate}}:</span>\r\n    </div>\r\n</div>\r\n<hr>\r\n<div class=\"row\">\r\n    <div class=\"col-md-5\">\r\n        <select #allItems name=\"allItems\" multiple class=\"list\">\r\n            <option #opt *ngFor=\"let item of formattedInputList\" (dblclick)=\"changeItemList(item, formattedInputList, formattedAssignedList)\"  value=\"{{item.Value}}\">{{item.Description}}\r\n            </option>\r\n        </select>\r\n    </div>\r\n    <div class=\"col-md-2\">\r\n        <button (click)=\"switchSelection(allItems, formattedInputList, formattedAssignedList)\" [disabled]=\"formattedInputList?.length===0\"> > </button>\r\n        <br/>\r\n        <button (click)=\"switchSelection(assignedItems, formattedAssignedList, formattedInputList)\" [disabled]=\"formattedAssignedList?.length===0\"> < </button>\r\n        <br/>\r\n        <button (click)=\"moveAllToAssigned()\" [disabled]=\"formattedInputList?.length===0\"> >> </button>\r\n        <br/>\r\n        <button (click)=\"moveAllToInput()\" [disabled]=\"formattedAssignedList?.length===0\"> << </button>\r\n        <br/>\r\n    </div>\r\n    <div class=\"col-xs-12 col-md-5\">\r\n        <select #assignedItems name=\"assignedItems\" multiple class=\"list\">\r\n            <option *ngFor=\"let item of formattedAssignedList\" (dblclick)=\"changeItemList(item, formattedAssignedList, formattedInputList)\"  value=\"{{item.Value}}\">{{item.Description}}</option>\r\n        </select>\r\n    </div>\r\n</div>\r\n<template ngFor let-childButton [ngForOf]=\"customButtonsList\">\r\n    <button *ngIf=\"childButton.visible != undefined ? childButton.visible : true\" type=\"button\" title=\"{{childButton.name | LocalizationTranslate}}\"\r\n            [disabled]=\"childButton.disabled != undefined ? childButton.disabled : false\"\r\n            class=\"button-standard \" (click)=\"assignListOut(childButton)\">\r\n        {{childButton.name | LocalizationTranslate}}\r\n    </button>\r\n</template>\r\n<!--<button (click)=\"assignListOut()\">Apply list</button>-->\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/assignableListItems/assignableListItems.scss":
/***/ (function(module, exports) {

module.exports = ".list {\n  min-width: 100%;\n  height: 20%; }\n"

/***/ }),

/***/ "./src/app/ReusableComponents/assignableListItems/assignableListItems.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var _ = __webpack_require__("./node_modules/lodash/lodash.js");
//usage
// <assignable-list [inputList]="allItems" [assignedList]="assignedItems" [inputTitle]="'Left Title'" [assignedTitle]="'Assigned Title'" (listOut)="getAssignedList($event)"></assignable-list>
var AssignableListItems = (function () {
    function AssignableListItems() {
        this.inputList = [];
        this.assignedList = [];
        this.listOut = new core_1.EventEmitter();
        this.isPageLoaded = false;
        this.formattedInputList = [];
        this.formattedAssignedList = [];
        this.customButtonsList = [];
    }
    AssignableListItems.prototype.ngOnInit = function () {
        if (this.inputSettings && this.inputSettings.ListItemsConfiguration) {
            this.configuration = this.inputSettings.ListItemsConfiguration;
            this.assignedTitle = this.configuration.assignedListTitle;
            this.inputTitle = this.configuration.inputListTitle;
        }
        if (this.inputSettings && this.inputSettings["CustomButtons"]) {
            this.customButtonsList = this.inputSettings["CustomButtons"];
        }
        this.formattedInputList = this.getFormattedListItems(this.inputList, this.configuration.inputListDataFields["dbColumnName"], this.configuration.inputListDataFields["displayColumnName"]);
        this.formattedAssignedList = this.getFormattedListItems(this.assignedList, this.configuration.assignedListDataFields["dbColumnName"], this.configuration.assignedListDataFields["displayColumnName"]);
        this.isPageLoaded = true;
    };
    AssignableListItems.prototype.ngOnChanges = function (changes) {
        if (this.isPageLoaded) {
            if (changes['inputList']) {
                var currentValue = changes['inputList'].currentValue;
                var oldValue = changes['inputList'].previousValue;
                if (currentValue != oldValue) {
                    this.formattedInputList = this.getFormattedListItems(currentValue, this.configuration.inputListDataFields["dbColumnName"], this.configuration.inputListDataFields["displayColumnName"]);
                }
            }
            if (changes['assignedList']) {
                var currentValue = changes['assignedList'].currentValue;
                var oldValue = changes['assignedList'].previousValue;
                if (currentValue != oldValue) {
                    this.formattedAssignedList = this.getFormattedListItems(currentValue, this.configuration.assignedListDataFields["dbColumnName"], this.configuration.assignedListDataFields["displayColumnName"]);
                }
            }
        }
    };
    AssignableListItems.prototype.getFormattedListItems = function (listItems, valueColumn, descriptionColumn) {
        var formattedList = [];
        if (!valueColumn) {
            valueColumn = 'Value';
        }
        if (!descriptionColumn) {
            descriptionColumn = 'Description';
        }
        if (listItems && listItems.length) {
            listItems.forEach(function (x) {
                var formattedItem = new ListItem();
                formattedItem.Value = x[valueColumn];
                formattedItem.Description = x[descriptionColumn];
                formattedList.push(formattedItem);
            });
        }
        return formattedList;
    };
    AssignableListItems.prototype.assignListOut = function (customButton) {
        this.listOut.emit({
            value: this.formattedAssignedList,
            controlName: customButton.name,
            inputList: this.formattedInputList
        });
    };
    AssignableListItems.prototype.switchSelection = function (selection, sourceList, destinationList) {
        var _this = this;
        if (selection.selectedOptions.length === 0) {
            return;
        }
        else {
            var selectedOptions = Array.from(selection.selectedOptions);
            selectedOptions.forEach(function (option) {
                var item = new ListItem();
                item.Value = option['value'];
                item.Description = option['text'];
                _this.changeItemList(item, sourceList, destinationList);
            });
        }
    };
    AssignableListItems.prototype.changeItemList = function (item, sourceList, destinationList) {
        _.remove(sourceList, function (x) { return x.Value == item.Value && x.Description === item.Description; });
        if (destinationList && destinationList.length > 0 && destinationList.find(function (x) { return x.Value == item.Value && x.Description === item.Description; })) {
            return;
        }
        destinationList.push(item);
    };
    AssignableListItems.prototype.moveAllToInput = function () {
        this.formattedInputList = _.uniqWith(_.union(this.formattedInputList, this.formattedAssignedList), function (a, b) {
            return a.Value == b.Value && a.Description === b.Description;
        });
        this.formattedAssignedList = [];
    };
    AssignableListItems.prototype.moveAllToAssigned = function () {
        this.formattedAssignedList = _.uniqWith(_.union(this.formattedInputList, this.formattedAssignedList), function (a, b) {
            return a.Value == b.Value && a.Description === b.Description;
        });
        this.formattedInputList = [];
    };
    __decorate([
        core_1.Input('inputTitle'), 
        __metadata('design:type', String)
    ], AssignableListItems.prototype, "inputTitle", void 0);
    __decorate([
        core_1.Input('assignedTitle'), 
        __metadata('design:type', String)
    ], AssignableListItems.prototype, "assignedTitle", void 0);
    __decorate([
        core_1.Input('inputList'), 
        __metadata('design:type', Object)
    ], AssignableListItems.prototype, "inputList", void 0);
    __decorate([
        core_1.Input('assignedList'), 
        __metadata('design:type', Object)
    ], AssignableListItems.prototype, "assignedList", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], AssignableListItems.prototype, "listOut", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], AssignableListItems.prototype, "inputSettings", void 0);
    AssignableListItems = __decorate([
        core_1.Component({
            selector: "assignable-list",
            template: __webpack_require__("./src/app/ReusableComponents/assignableListItems/assignableListItems.html"),
            styles: [__webpack_require__("./src/app/ReusableComponents/assignableListItems/assignableListItems.scss")]
        }), 
        __metadata('design:paramtypes', [])
    ], AssignableListItems);
    return AssignableListItems;
}());
exports.AssignableListItems = AssignableListItems;
var ListItem = (function () {
    function ListItem() {
    }
    ;
    return ListItem;
}());
exports.ListItem = ListItem;


/***/ }),

/***/ "./src/app/ReusableComponents/breadcrumb/breadcrumb.html":
/***/ (function(module, exports) {

module.exports = "<ol class=\"breadcrumb mb-0\">\r\n    <li class=\"breadcrumb-item\" *ngFor=\"let item of breadCrumbList\">\r\n        <a [routerLink]=\"item.RouteLink\" [routerLinkActive]=\"['active']\">\r\n            {{item.Title}}\r\n        </a>\r\n    </li>\r\n</ol>\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/breadcrumb/breadcrumb.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var BreadCrumb = (function () {
    function BreadCrumb(navigation, loc) {
        var _this = this;
        this.navigation = navigation;
        this.loc = loc;
        this.navigation.bredCrumbEmitter.subscribe(function (data) {
            _this.breadCrumbList = data;
        });
    }
    BreadCrumb = __decorate([
        core_1.Component({
            selector: 'breadcrumb',
            template: __webpack_require__("./src/app/ReusableComponents/breadcrumb/breadcrumb.html"),
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object, (typeof (_b = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _b) || Object])
    ], BreadCrumb);
    return BreadCrumb;
    var _a, _b;
}());
exports.BreadCrumb = BreadCrumb;


/***/ }),

/***/ "./src/app/ReusableComponents/checkBoxList/checkBoxList.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"form-control pl-0 pr-0\">\r\n    <div class=\"dropdown\">\r\n        <button type=\"button\" class=\"dropdown-toggle checkbox-list-toggle-button\" (click)=\"toggleDropdown()\">{{ title }}&nbsp;<span class=\"caret\"></span></button>\r\n        <div class=\"dropdown-menu checkbox-list-dropdown-menu\" [ngClass]=\"isVisible ? 'checkbox-list-dropdown-menu-open' : ''\">\r\n            <a class=\"dropdown-item\">\r\n                <div class=\"input-group input-group-sm\">\r\n                    <span class=\"input-group-addon\" id=\"sizing-addon3\"><i class=\"fa fa-search\"></i></span>\r\n                    <input type=\"text\" class=\"form-control\"\r\n                           aria-describedby=\"sizing-addon3\" [(ngModel)]=\"searchFilterText\">\r\n                    <span class=\"input-group-btn\" *ngIf=\"searchFilterText.length > 0\">\r\n                    <button class=\"btn btn-default\" type=\"button\" (click)=\"clearSearch()\"><i class=\"fa fa-times\"></i></button>\r\n                </span>\r\n                </div>\r\n            </a>\r\n            <div class=\"dropdown-divider\"></div>\r\n            <div class=\"dropdown-contents\">\r\n                <a class=\"dropdown-item\" *ngFor=\"let option of DataSource | searchFilter:searchFilterText\">\r\n                    <a href=\"javascript:;\" role=\"menuitem\" tabindex=\"-1\" (click)=\"setSelected($event, option)\">\r\n                        <input type=\"checkbox\" [checked]=\"isSelected(option)\"/>\r\n                        {{ option.Description }}\r\n                    </a>\r\n                </a>\r\n            </div>\r\n            <div class=\"dropdown-divider\"></div>\r\n            <a class=\"dropdown-item\" href=\"javascript:;\" role=\"menuitem\" tabindex=\"-1\" (click)=\"checkAll()\">\r\n                <span class=\"fa fa-check text-success\"></span>\r\n                Check All\r\n            </a>\r\n            <a class=\"dropdown-item\" href=\"javascript:;\" role=\"menuitem\" tabindex=\"-1\" (click)=\"uncheckAll()\">\r\n                <span class=\"fa fa-times text-danger\"></span>\r\n                Uncheck All\r\n            </a>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/checkBoxList/checkBoxList.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var MULTISELECT_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return CheckBoxListComponent; }),
    multi: true
};
var CheckBoxListComponent = (function () {
    function CheckBoxListComponent(matrixService, element) {
        this.matrixService = matrixService;
        this.element = element;
        //@Output() public CheckBoxListEmitter: EventEmitter<any> = new EventEmitter<any>();
        this.expanded = false;
        this.disabled = false;
        this.model = [];
        this.numSelected = 0;
        this.isVisible = false;
        this.searchFilterText = '';
        this.onModelChange = function (_) { };
        this.onModelTouched = function () { };
    }
    Object.defineProperty(CheckBoxListComponent.prototype, "Disabled", {
        set: function (value) {
            this.disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    CheckBoxListComponent.prototype.ngOnInit = function () {
        /*        this.settings = Object.assign(this.defaultSettings, this.settings);
                this.texts = Object.assign(this.defaultTexts, this.texts);
                this.title = this.texts.defaultTitle;*/
    };
    CheckBoxListComponent.prototype.onClick = function (target) {
        var parentFound = false;
        while (target != null && !parentFound) {
            if (target === this.element.nativeElement) {
                parentFound = true;
            }
            target = target.parentElement;
        }
        // target is null when clicking off of the checkboxlist
        if (!parentFound && typeof target !== 'undefined') {
            this.isVisible = false;
        }
    };
    CheckBoxListComponent.prototype.writeValue = function (value) {
        if (value !== undefined) {
            this.model = value;
        }
    };
    CheckBoxListComponent.prototype.ngDoCheck = function () {
        this.updateNumSelected();
        this.updateTitle();
    };
    CheckBoxListComponent.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    CheckBoxListComponent.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    CheckBoxListComponent.prototype.clearSearch = function () {
        this.searchFilterText = '';
    };
    CheckBoxListComponent.prototype.toggleDropdown = function () {
        this.isVisible = !this.isVisible;
        if (!this.isVisible) {
        }
    };
    CheckBoxListComponent.prototype.isSelected = function (option) {
        return this.model && this.model.indexOf(option.Value) > -1;
    };
    CheckBoxListComponent.prototype.setSelected = function (event, option) {
        if (!this.model) {
            this.model = [];
        }
        var index = this.model.indexOf(option.Value);
        if (index > -1) {
            this.model.splice(index, 1);
        }
        else {
            //if (this.settings.selectionLimit === 0 || this.model.length < this.settings.selectionLimit) {
            this.model.push(option.Value);
        }
        //if (this.settings.closeOnSelect) {
        //     this.toggleDropdown();
        //}
        this.onModelChange(this.model);
    };
    CheckBoxListComponent.prototype.updateNumSelected = function () {
        this.numSelected = this.model && this.model.length || 0;
    };
    CheckBoxListComponent.prototype.updateTitle = function () {
        var _this = this;
        if (this.numSelected === 0) {
            this.title = "Select an option"; //this.texts.defaultTitle;
        }
        else if (3 >= this.numSelected) {
            this.title = this.DataSource
                .filter(function (option) {
                return _this.model && _this.model.indexOf(option.Value) > -1;
            })
                .map(function (option) { return option.Description; })
                .join(', ');
        }
        else {
            this.title = this.numSelected
                + '  selected';
        }
    };
    CheckBoxListComponent.prototype.checkAll = function () {
        this.model = this.DataSource.map(function (option) { return option.Value; });
        this.onModelChange(this.model);
    };
    CheckBoxListComponent.prototype.uncheckAll = function () {
        this.model = [];
        this.onModelChange(this.model);
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CheckBoxListComponent.prototype, "DataSource", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CheckBoxListComponent.prototype, "value", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], CheckBoxListComponent.prototype, "Disabled", null);
    __decorate([
        core_1.HostListener('document: click', ['$event.target']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Object]), 
        __metadata('design:returntype', void 0)
    ], CheckBoxListComponent.prototype, "onClick", null);
    CheckBoxListComponent = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/ReusableComponents/checkBoxList/checkBoxList.html"),
            selector: 'checkBoxList',
            providers: [MULTISELECT_VALUE_ACCESSOR],
            host: {
                '(document:click)': 'onClick($event)',
            }
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _a) || Object, (typeof (_b = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _b) || Object])
    ], CheckBoxListComponent);
    return CheckBoxListComponent;
    var _a, _b;
}());
exports.CheckBoxListComponent = CheckBoxListComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/collapsePanel/collapsePanel.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Created by vikhnv2 on 12/2/2016.
 */
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var displayGrid_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.ts");
var CollapsePanel = (function () {
    function CollapsePanel() {
        this.collapsed = true;
        this.enabled = false;
        //
    }
    CollapsePanel.prototype.collapsePanel = function (collapse) {
        this.collapsed = collapse;
    };
    CollapsePanel.prototype.setPanelContent = function (dataGridConfig, dataContent) {
        this.dataContent = dataContent;
        this.enabled = (dataContent && dataContent.length > 0);
        this.dataTable.injectConfigAndData(dataGridConfig, dataContent, null, null);
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], CollapsePanel.prototype, "key", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CollapsePanel.prototype, "title", void 0);
    __decorate([
        core_1.ViewChild(displayGrid_1.DisplayGridComponent), 
        __metadata('design:type', (typeof (_a = typeof displayGrid_1.DisplayGridComponent !== 'undefined' && displayGrid_1.DisplayGridComponent) === 'function' && _a) || Object)
    ], CollapsePanel.prototype, "dataTable", void 0);
    CollapsePanel = __decorate([
        core_1.Component({
            selector: 'collapse-panel',
            template: __webpack_require__("./src/app/ReusableComponents/collapsePanel/collapsePanel.html"),
        }), 
        __metadata('design:paramtypes', [])
    ], CollapsePanel);
    return CollapsePanel;
    var _a;
}());
exports.CollapsePanel = CollapsePanel;


/***/ }),

/***/ "./src/app/ReusableComponents/collapsePanel/collapsePanel.html":
/***/ (function(module, exports) {

module.exports = "<accordion [title]=\"title\" [collapsed]=\"collapsed\">\r\n    <accordionHeaderContent>\r\n        <span *ngIf=\"dataContent && dataContent !== undefined\" class=\"float-lg-right\"><span class=\"tag tag-pill tag-info\">{{ dataContent.length }}</span></span>\r\n    </accordionHeaderContent>\r\n    <accordionBodyContent>\r\n        <displayGrid></displayGrid>\r\n    </accordionBodyContent>\r\n</accordion>\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/displayGrid/displayGrid.html":
/***/ (function(module, exports) {

module.exports = "<!--Edit Header + lookup boxes-->\r\n<template [ngIf]=\"!(viewDetail||editDetail||addDetail)\">\r\n    <article Id=\"mainConfigPage\">\r\n        <template [ngIf]=\"showFilters\">\r\n            <accordion [title]=\"'Filters'\">\r\n                <accordionBodyContent>\r\n                    <template ngFor let-filterRow [ngForOf]=\"filterForDataTable\">\r\n                        <template [ngIf]=\"filterRow.filterable\">\r\n                            <div class=\"form-group row\">\r\n                                <template [ngIf]=\"filterRow.filterable\">\r\n                                    <div class=\"col-md-12 col-lg-9 col-xl-6\">\r\n                                        <div class=\"col-md-4\">\r\n                                            <strong>{{filterRow.val}}</strong>\r\n                                        </div>\r\n                                        <!--<div class=\"col-md-1\" *ngIf=\"filterRow.htmlControlType.indexOf('date') >= 0\">\r\n                                            From\r\n                                            <br/>\r\n                                            To\r\n                                        </div>-->\r\n                                        <div *ngIf=\"filterRow.htmlControlType == 'text'\" class=\"col-md-8\">\r\n                                            <select [attr.Id]=\"'f' + filterRow.sequence\" [(ngModel)]=\"filterRow.filterValue[0]\" (change)=\"filterSelect($event)\" class=\"full-width form-control-sm\">\r\n                                                <option *ngFor=\"let opt of filterRow.options\" [value]=\"opt.value\">{{opt.label}}</option>\r\n                                            </select>\r\n                                        </div>\r\n                                        <template [ngIf]=\"filterRow.htmlControlType.indexOf('date') >= 0\">\r\n                                            <div class=\"col-md-8\">\r\n                                                <div class=\"row\">\r\n                                                    <div class=\"col-md-2\">\r\n                                                        <!--From-->\r\n                                                        From\r\n                                                    </div>\r\n                                                    <div class=\"col-md-10\">\r\n                                                        <input type=\"date\" class=\"full-width form-control-sm\" [attr.id]=\"'ff' + filterRow.sequence\" [(ngModel)]=\"filterRow.filterValue[0]\" (change)=\"filterDate($event)\"/>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div class=\"row\">\r\n                                                    <!--To-->\r\n                                                    <div class=\"col-md-2\">\r\n                                                        To\r\n                                                    </div>\r\n                                                    <div class=\"col-md-10\">\r\n                                                        <input type=\"date\" class=\"full-width form-control-sm\" [attr.id]=\"'ft' + filterRow.sequence\" [(ngModel)]=\"filterRow.filterValue[1]\" (change)=\"filterDate($event)\"/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </template>\r\n                                    </div>\r\n                                </template>\r\n                            </div>\r\n                        </template>\r\n                    </template>\r\n                </accordionBodyContent>\r\n            </accordion>\r\n        </template>\r\n        <div id=\"dataGridAddButton\" *ngIf=\"showAddButtonOnLoad\">\r\n            <button class=\"button-standard \" (click)=\"AddClicked()\" *ngIf=\"!hideAddBtn && !(viewDetail||editDetail||addDetail)\">\r\n                <span class=\"fa fa-plus-circle fa-lg\"></span>\r\n                Add\r\n            </button>\r\n        </div>\r\n        <div class=\"dataGridBody-pane {{scrollableGridCss}}\">\r\n            <table id=\"dataGridBody\" *ngIf=\"showGridBody\" class=\"table-striped table-hover table-bordered full-width\">\r\n                <section Id=\"dataGridDynamicHeader\" *ngIf=\"hasDynamicHeader\" class=\"text-xs-center\">\r\n                    <div class=\"row\" *ngFor=\"let level of dynamicHeaders\">\r\n                        <!-- dummy column to make room for buttons -->\r\n                        <div class=\"col-md-2\"></div>\r\n                        <template ngFor let-header [ngForOf]=\"level\">\r\n                            <div class=\"{{header.columnCss}}\">\r\n                                <strong>{{header.displayName}}</strong>\r\n                            </div>\r\n                        </template>\r\n                    </div>\r\n                </section>\r\n                <thead Id=\"dataGridHeader\">\r\n                <tr>\r\n                    <th id=\"dataGrid-buttons-header\" class=\"dataGrid-header-cell\" *ngIf=\"!hideLeftButtonsColumn\">\r\n                        <template [ngIf]=\"rowSelectionMode==='Multi'\">\r\n                            <input type=\"checkbox\" (change)=\"AddRemoveAll($event)\"> Select All\r\n                        </template>\r\n                    </th>\r\n                    <template ngFor let-headerRow [ngForOf]=\"headerForDataTable\">\r\n                        <template [ngIf]=\"headerRow.isVisible\">\r\n                            <th>\r\n                                <div (click)=\"sortRequested(headerRow.name, headerRow.sortCss)\">\r\n                                    {{headerRow.val | LocalizationTranslate}}<span class=\"{{headerRow.sortCss}}\"></span>\r\n                                </div>\r\n                            </th>\r\n                        </template>\r\n                    </template>\r\n                </tr>\r\n                </thead>\r\n                <tbody Id=\"dataGridLookups\" *ngIf=\"!showNoData\">\r\n                <template [ngIf]=\"showFilterRow\">\r\n                    <tr>\r\n                        <td class=\"dataGridLookups-buttons\">\r\n                            Filter\r\n                            <span *ngIf=\"rowSelectionMode==='Single' || rowSelectionMode==='Multi'\">\r\n                                        <input type=\"checkbox\" (change)=\"FilterSelectedRows($event)\">\r\n                                    </span>\r\n                        </td>\r\n                        <template ngFor let-headerRow [ngForOf]=\"headerForDataTable\">\r\n                            <template [ngIf]=\"headerRow.isVisible\">\r\n                                <td class=\"dataGridLookups-cell\">\r\n                                    <input [attr.Id]=\"headerRow.sequence\" class=\"form-control-sm full-width\" type=\"text\" [(ngModel)]=\"headerRow.filter\" (keyup)=filterValueEntered($event) (click)=\"filterBoxClicked(headerRow.sequence)\">\r\n                                </td>\r\n                            </template>\r\n                        </template>\r\n                    </tr>\r\n                </template>\r\n                </tbody>\r\n                <template [ngIf]=\"!showNoData\">\r\n                    <tbody Id=\"dataGrid-spreadSheet\">\r\n                    <template ngFor let-row [ngForOf]=\"matrixForDataTable\">\r\n                        <tr class=\"displayGrid-row\">\r\n                            <td id=\"dataGrid-buttons\" *ngIf=\"!hideLeftButtonsColumn\">\r\n                                <template [ngIf]=\"customRowButtonsList.length > 0\">\r\n                                    <template ngFor let-childRowbutton [ngForOf]=\"customRowButtonsList\">\r\n                                        <button *ngIf=\"childRowbutton.visible != undefined ? childRowbutton.visible: true\" type=\"button\" class=\"button-standard \" (click)=\"customRowButtonListClicked(childRowbutton, row)\"\r\n                                                [disabled]=\"childRowbutton.disabled != undefined ? childRowbutton.disabled : false\">\r\n                                            {{childRowbutton.name | LocalizationTranslate}}\r\n                                        </button>\r\n                                    </template>\r\n                                </template>\r\n                                <template [ngIf]=\"rowSelectionMode==='Single' || rowSelectionMode==='Multi'\">\r\n                                    <input type=\"checkbox\" [disabled]=\"row.checkBox.disabled\"  [(ngModel)] = \"row.checkBox.checked\" value=\"row.checkBox.checked\" (change)=\"AddRemoveSelected($event,row)\">\r\n                                </template>\r\n                                <button *ngIf=\"showChildDetail\" (click)=\"showChildViewClicked(row)\" title=\"{{'View' | LocalizationTranslate}}\" class=\"button-standard \">\r\n                                    <span class=\"fa fa-search fa-lg\"></span>\r\n                                </button>\r\n                                <button *ngIf=\"childType === 'view'\" (click)=\"editViewClicked(row)\" title=\"{{'View' | LocalizationTranslate}}\" class=\"button-standard \" title=\"view\">\r\n                                    <span class=\"fa fa-check fa-lg\"></span>\r\n                                </button>\r\n                                <button *ngIf=\"childType.startsWith('edit')\" (click)=\"editViewClicked(row)\" title=\"{{'Edit' | LocalizationTranslate}}\" class=\"button-standard \">\r\n                                    <span class=\"fa fa-pencil-square-o fa-lg\"></span>\r\n                                </button>\r\n                                <button *ngIf=\"!hideDeleteBtn\" (click)=\"DeleteClicked(row)\" title=\"{{'Delete' | LocalizationTranslate}}\" class=\"button-standard \">\r\n                                    <span class=\"fa fa-eraser fa-lg\"></span>\r\n                                </button>\r\n                            </td>\r\n                            <template [ngIf]=\"isSpreadsheetGrid\">\r\n                                <template ngFor let-col [ngForOf]=\"row.cells\">\r\n                                    <template [ngIf]=\"col.isAllowGridLevelEdit\">\r\n                                        <td>\r\n                                            <div class=\"cell-contents\">\r\n                                                <template [ngIf]=\"!(col.htmlControlType ==='select' || col.htmlControlType === 'checkbox')\">\r\n                                                    <template [ngIf]=\"col.isVisible\">\r\n                                                        <ec-trigger *ngIf=\"col.isToggleable\" [collapsed]=\"row.collapsed\" [owner]=\"row\" [columnName]=\"col.name\"></ec-trigger>\r\n                                                        <input class=\"form-control-sm full-width\" [attr.Id]=\"col.sequence\" type={{col.htmlControlType}} [(ngModel)]=\"col.val\" (click)=\"inputClicked(row,col)\">\r\n                                                    </template>\r\n                                                </template>\r\n                                                <template [ngIf]=\"col.htmlControlType ==='checkbox'\">\r\n                                                    <template [ngIf]=\"col.isVisible\">\r\n                                                        <ec-trigger *ngIf=\"col.isToggleable\" [collapsed]=\"row.collapsed\" [owner]=\"row\" [columnName]=\"col.name\" class=\"toggleItem\"></ec-trigger>\r\n                                                        <input class=\"form-control-sm full-width\" [attr.Id]=\"col.sequence\" type='checkbox' [(ngModel)]=\"col.val\" (click)=\"inputClicked(row,col)\">\r\n                                                    </template>\r\n                                                </template>\r\n                                                <template [ngIf]=\"col.htmlControlType === 'select'\">\r\n                                                    <ec-trigger *ngIf=\"col.isToggleable\" [collapsed]=\"row.collapsed\" [owner]=\"row\" [columnName]=\"col.name\"></ec-trigger>\r\n                                                    <select [(ngModel)]=\"col.val\" [attr.Id]=\"col.sequence\">\r\n                                                        <option *ngFor=\"let itemOption of col.dataSource\" value=\"{{itemOption}}\">{{itemOption}}</option>\r\n                                                    </select>\r\n                                                </template>\r\n                                            </div>\r\n                                            <template *ngIf=\"col.isVisible\" ngFor let-er [ngForOf]=\"col.errors\">\r\n                                                <div class=\"alert alert-danger\">\r\n                                                    {{er | LocalizationTranslate}}\r\n                                                </div>\r\n                                            </template>\r\n                                        </td>\r\n                                    </template>\r\n                                    <template [ngIf]=\"!col.isAllowGridLevelEdit\">\r\n                                        <td *ngIf=\"col.isVisible\">\r\n                                            <div class=\"cell-contents\">\r\n                                                {{col.val}}\r\n                                                <ec-trigger *ngIf=\"col.isToggleable\" [collapsed]=\"row.collapsed\" [owner]=\"row\" [columnName]=\"col.name\" class=\"toggleItem\"></ec-trigger>\r\n                                            </div>\r\n                                        </td>\r\n                                    </template>\r\n                                </template>\r\n                            </template>\r\n                            <template [ngIf]=\"!isSpreadsheetGrid\">\r\n                                <template ngFor let-col [ngForOf]=\"row.cells\">\r\n                                    <template [ngIf]=\"col.isVisible\">\r\n                                        <td class=\"{{col.columnCss}}\" [ngClass]=\"{'text-xs-right' : col.htmlControlType == 'number' || col.htmlControlType == 'currency', 'text-xs-center' : col.columnFormat.format == 'font-awesome'}\">\r\n                                            <div class=\"cell-contents\">\r\n                                                <template [ngIf]=\"col.dataSourceAddress != undefined\">\r\n                                                    <ec-trigger *ngIf=\"col.isToggleable\" [collapsed]=\"row.collapsed\" [owner]=\"row\" [columnName]=\"col.name\" class=\"toggleItem\"></ec-trigger>\r\n                                                    {{col.displayDescription | formatGridColumn : col.columnFormat}}\r\n                                                </template>\r\n                                                <template [ngIf]=\"col.dataSourceAddress == undefined\">\r\n                                                    <ec-trigger *ngIf=\"col.isToggleable\" [collapsed]=\"row.collapsed\" [owner]=\"row\" [columnName]=\"col.name\" class=\"toggleItem\"></ec-trigger>\r\n                                                    <span [ngSwitch]=\"col.columnFormat.format\">\r\n                                                        <span *ngSwitchCase=\"'font-awesome'\" class=\"{{col.val | formatGridColumn : col.columnFormat}}\" [ngClass]=\"col.val == true ? 'text-success' : 'text-danger'\"></span>\r\n                                                        <span *ngSwitchDefault>{{col.val | formatGridColumn : col.columnFormat}}</span>\r\n                                                    </span>\r\n                                                </template>\r\n                                            </div>\r\n                                        </td>\r\n                                    </template>\r\n                                </template>\r\n                            </template>\r\n                        </tr>\r\n                        <!-- inline edit -->\r\n                        <template [ngIf]=\"childType==='editInline'\">\r\n                            <template [ngIf]=\"row.inlineEditEnabled\">\r\n                                <tr>\r\n                                    <td colspan=\"100000\">\r\n                                        <inlineEditForm [handler]=\"recordSaveHandler\" [columns]=\"editViewRowDataTable\" [selectedRow]=\"row\" [httpProxy]=\"httpProxy\" [gridSettings]=\"gridSettings\" [pageName]=\"pageName\"></inlineEditForm>\r\n                                    </td>\r\n                                </tr>\r\n                            </template>\r\n                        </template>\r\n                        <template [ngIf]=\"!row.collapsed\">\r\n                            <tr>\r\n                                <td class=\"expanded-cell\" colspan=\"100000\">\r\n                                    <div class=\"expand-content\">\r\n                                        <template [ngIf]=\"childGridType === 'miniGrid'\">\r\n                                            <strong>Expand/Collapse Content</strong>\r\n                                            <br><br>\r\n                                            <miniGrid [selectedRow]=\"row\"></miniGrid>\r\n                                        </template>\r\n                                        <template [ngIf]=\"childGridType === 'displayGrid'\">\r\n                                            <displayGrid [inputPageName]=\"getChildPageName(row)\" [parentRow]=\"row\" [inputGridSettings]=\"getChildGridSettings(row)\"\r\n                                                         [inputHttpProxy]=\"httpProxy\" [pluginInput]=\"row.childData\"\r\n                                                         (displayGridNotifier)=\"customButtonChildGridClicked($event, row)\"></displayGrid>\r\n                                        </template>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </template>\r\n                    </template>\r\n                    <template [ngIf]=\"!showNoData\">\r\n                        <template [ngIf]=\"showFooterRow\">\r\n                            <tr>\r\n                                <template ngFor let-col [ngForOf]=\"footerForDataTable\">\r\n                                    <template [ngIf]=\"col.isVisible\">\r\n                                        <td class=\"{{col.columnCss}}\" [ngClass]=\"col.htmlControlType == 'number' || col.htmlControlType == 'currency' ? 'text-xs-right' : ''\">\r\n                                            <div *ngIf=\"col.isTotalVisible\"><strong>{{col.val | formatGridColumn : col.columnFormat}}</strong></div>\r\n                                        </td>\r\n                                    </template>\r\n                                </template>\r\n                            </tr>\r\n                        </template>\r\n                    </template>\r\n                    </tbody>\r\n                </template>\r\n            </table>\r\n        </div>\r\n        <template [ngIf]=\"showNoData\">\r\n            {{\"NoDataToDisplay\" | LocalizationTranslate}}.\r\n        </template>\r\n        <template [ngIf]=\"IsChildPage\">\r\n            <br/>\r\n            <button (click)=\"ReturnToParent()\" class=\"button-standard \">\r\n                <span class=\"fa fa-arrow-left fa-lg\">\r\n                </span>\r\n                {{\"Back\" | LocalizationTranslate}}\r\n            </button>\r\n        </template>\r\n        <template [ngIf]=\"customButtonsList.length > 0\">\r\n            <template ngFor let-childbutton [ngForOf]=\"customButtonsList\">\r\n                <button *ngIf=\"childbutton.visible != undefined ? childbutton.visible: true\" type=\"button\" class=\"button-standard \" (click)=\"customButtonClicked(childbutton)\"\r\n                        [disabled]=\"childbutton.disabled != undefined ? childbutton.disabled : false\">\r\n                    {{childbutton.name | LocalizationTranslate}}\r\n                </button>\r\n            </template>\r\n        </template>\r\n        <template [ngIf]=\"!showNoData\">\r\n            <div *ngIf=\"IsPagination\" class=\"col-md-12 col-lg-6\">\r\n                <pagination [totalItems]=\"totalItems\"\r\n                            [itemsPerPage]=\"itemsPerPage\"\r\n                            [(ngModel)]=\"currentPage\"\r\n                            [boundaryLinks]=\"true\"\r\n                            [maxSize]=\"5\"\r\n                            [IsChildPage]=\"IsChildPage\"\r\n                            [rotate]=\"false\"\r\n                            (pageChanged)=\"pageChanged($event)\" ngDefaultControl></pagination>\r\n            </div>\r\n        </template>\r\n    </article>\r\n</template>\r\n<template [ngIf]=\"(viewDetail||editDetail||addDetail)\">\r\n    <div class=\"col-sm-12 col-md-6\">\r\n        <div class=\"card card-block\">\r\n            <formBuilder [pluginInput]=\"editViewRowDataTable\" [gridSettings]=\"gridSettings\"\r\n                         [PageType]=\"operationType\" [pageName]=\"pageName\" [httpProxy]=\"httpProxy\" (formBuilderNotifier)=\"RefreshDataFromFormBuilder($event)\"></formBuilder>\r\n        </div>\r\n    </div>\r\n</template>\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/displayGrid/displayGrid.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var crudService_1 = __webpack_require__("./src/app/ReusableServices/crudService.ts");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var displayGridFilterService_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGridFilterService.ts");
var displayGridUtils_1 = __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGridUtils.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var ruleService_1 = __webpack_require__("./src/app/ReusableServices/ruleService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var DisplayGridComponent = (function (_super) {
    __extends(DisplayGridComponent, _super);
    function DisplayGridComponent(intFormSvc, nav, alert, vmMatrix, appSettingsService, crudserv, filterListener, ruleService, apiService) {
        _super.call(this, nav, alert, vmMatrix, appSettingsService, crudserv, filterListener);
        this.intFormSvc = intFormSvc;
        this.appSettingsService = appSettingsService;
        this.filterListener = filterListener;
        this.ruleService = ruleService;
        this.apiService = apiService;
        this.displayGridNotifier = new core_1.EventEmitter();
        this.alert = alert;
        this.vmMatrix = vmMatrix;
        crudserv.setCallerContext(this);
        this.crudService = crudserv;
        this.navService = nav;
    }
    DisplayGridComponent.prototype.ngOnInit = function () {
        var self = this;
        self.filterListenerSubscription = this.filterListener.doFilterBy.subscribe(function (item) {
            self.applyFilterFromListener(item);
        });
        if (this.inputPageName) {
            this.editViewRowDataTable = [];
            this.pageName = this.inputPageName;
            this.gridSettings = this.inputGridSettings;
            this.httpProxy = this.inputHttpProxy;
            this.ForeignKeyColumn = this.gridSettings["ForeignKeyColumn"];
            //defaulting the value
            this.parentKeyId = this.ParentIdInputValue;
            if (this.parentRow) {
                this.parentKeyId = this.getParentKeyId(this.parentRow);
                this.parentDisplayValue = this.getParentDisplayValue(this.parentRow, this.gridSettings);
            }
            if (this.pluginInput) {
                this.injectConfigAndData(this.gridSettings, this.pluginInput, this.httpProxy, this.pageName);
            }
            else {
                this.GetParentPageDetails(this.gridSettings, this.httpProxy, this.pageName, this.parentKeyId);
            }
        }
        this.isPageLoaded = true;
    };
    DisplayGridComponent.prototype.ngOnChanges = function (changes) {
        if (changes['pluginInput']) {
            var currentValue = changes['pluginInput'].currentValue;
            var oldValue = changes['pluginInput'].previousValue;
            if (currentValue != oldValue && this.pluginInput && this.isPageLoaded) {
                this.editViewRowDataTable = [];
                this.injectConfigAndData(this.inputGridSettings, this.pluginInput, this.httpProxy, this.pageName);
            }
        }
        if (changes['ParentIdInputValue'] && this.inputGridSettings) {
            var currentValue = changes['ParentIdInputValue'].currentValue;
            var oldValue = changes['ParentIdInputValue'].previousValue;
            if (currentValue != oldValue) {
                this.parentKeyId = currentValue;
                this.ParentIdValue = currentValue;
                if (this.pluginInput && this.isPageLoaded) {
                    this.GetParentPageDetails(this.inputGridSettings, this.inputHttpProxy, this.inputPageName, currentValue);
                }
            }
        }
    };
    DisplayGridComponent.prototype.refreshCb = function (context, message) {
        if (message === "DeleteSuccess") {
            this.deleteConfirmationObservable.unsubscribe();
            this.crudSuccessObservable.unsubscribe();
            this.DeleteSucceeded();
        }
    };
    DisplayGridComponent.prototype.setDbMatrix = function (databaseRecords, gridSettings) {
        this.masterMatrixForDataTable = this.vmMatrix.extractMatrix(databaseRecords, this.gridSettings);
        //Check for any Business Validations for cells like disabled or css changes for specific rows/columns
        if (this.gridSettings["UseBusinessValidation"]) {
            this.checkBusinessValidations();
        }
        this.matrixForDataTable = this.masterMatrixForDataTable;
        this.lookupsForDataTable = this.headerForDataTable = this.vmMatrix.extractHeader(databaseRecords, this.gridSettings);
        this.footerForDataTable = this.vmMatrix.extractFooter(databaseRecords, this.gridSettings);
        for (var i = 0; i < this.footerForDataTable.length; i++) {
            if (this.footerForDataTable[i].isTotalVisible) {
                this.footerForDataTable[i].val = (this.matrixForDataTable.map(function (a) { return a.cells[i].val; })).reduce(function (a, b) { return a + b; }, 0);
            }
        }
        this.setRightPaddingColumnCSS(this.headerForDataTable);
        var dynamicHeaderSection = this.gridSettings["dynamicHeaderSection"];
        if (dynamicHeaderSection) {
            this.hasDynamicHeader = true;
            this.buildDynamicHeader(dynamicHeaderSection, gridSettings);
        }
        if (!this.filterForDataTable) {
            this.showFilters = false;
            this.filterForDataTable = this.vmMatrix.extractFilter(databaseRecords, this.gridSettings);
            this.initializeFilterOptions();
        }
        if (this.gridSettings["ShowFilterRow"] != undefined) {
            this.showFilterRow = this.gridSettings["ShowFilterRow"];
        }
        else {
            this.showFilterRow = false;
        }
        this.isScrollableGrid = false;
        this.scrollableGridCss = "";
        this.showFooterRow = false;
        if (this.gridSettings["IsScrollableGrid"] && this.gridSettings["IsScrollableGrid"] == true) {
            this.isScrollableGrid = true;
            this.IsPagination = false;
            this.itemsPerPage = 100000;
            this.scrollableGridCss = "scrollableGrid";
            this.matrixForDataTable = this.masterMatrixForDataTable;
            if (this.gridSettings["ShowFooterRow"]) {
                this.showFooterRow = this.gridSettings["ShowFooterRow"];
            }
        }
        else {
            if (this.gridSettings["PaginationPageLimit"]) {
                this.IsPagination = true;
                this.itemsPerPage = this.gridSettings["PaginationPageLimit"];
                if (!this.gridSettings["ServerPagination"]) {
                    this.pageChanged(this.currentPage, true);
                }
            }
            else {
                this.matrixForDataTable = this.masterMatrixForDataTable;
                this.IsPagination = false;
            }
        }
        if (this.childType === "view") {
            this.headerForViewRow = this.vmMatrix.extractViewHeader(databaseRecords, this.gridSettings);
        }
        if (this.vmMatrix.pageIsLoaded) {
            this.showAddButtonOnLoad = true;
        }
    };
    DisplayGridComponent.prototype.injectConfigAndData = function (configuration, databaseRecords, httpProxy, pagename, ischildpage) {
        var _this = this;
        if (ischildpage === void 0) { ischildpage = false; }
        this.ClearSelected();
        this.httpProxy = httpProxy;
        this.controlconfig = configuration;
        this.pageName = pagename;
        this.IsChildPage = ischildpage;
        if (configuration["IsSpreadsheetGrid"]) {
            this.isSpreadsheetGrid = configuration["IsSpreadsheetGrid"];
        }
        if (configuration["ChildGridType"]) {
            this.childGridType = configuration["ChildGridType"];
        }
        this.databaseRecords = databaseRecords;
        var myConfig = configuration;
        this.childType = myConfig["ChildType"];
        var dataSourceAddressTables = new Array();
        this.showGridBody = true;
        //        this.sortColumnName = "";
        for (var key in myConfig.ColumnConfiguration) {
            if (myConfig.ColumnConfiguration[key].dataSourceAddress) {
                dataSourceAddressTables.push(myConfig.ColumnConfiguration[key].dataSourceAddress.tableName);
            }
        }
        if (dataSourceAddressTables.length === 0) {
            this.gridSettings = myConfig;
            this.setChildControlVisibility();
            this.setDbMatrix(databaseRecords, this.gridSettings);
            this.updateSortCssForSequences(this.sortAsc ? "fa fa-arrow-up" : "fa fa-arrow-down");
        }
        else {
            //this.httpAbs.fetchMultiple(dataSourceAddressTables).subscribe(
            this.apiService.fetchMultipleList(dataSourceAddressTables).subscribe(function (res) {
                // check if res in not an Array
                var i = 0;
                for (var key in myConfig.ColumnConfiguration) {
                    if (myConfig.ColumnConfiguration[key].dataSourceAddress) {
                        myConfig.ColumnConfiguration[key].dataSource = res[i];
                        i++;
                    }
                }
                _this.gridSettings = myConfig;
                _this.setChildControlVisibility();
                _this.setDbMatrix(databaseRecords, _this.gridSettings);
                _this.updateSortCssForSequences(_this.sortAsc ? "fa fa-arrow-up" : "fa fa-arrow-down");
            }, function (error) {
                _this.alert.error("InjectConfigAndData: async error #" + error.status);
            }, function () {
            });
        }
        if (myConfig) {
            this.hideAddBtn = myConfig['ShallHideAddButton'];
            this.hideDeleteBtn = myConfig['ShallHideDeleteButton'];
            this.hideLeftButtonsColumn = myConfig['HideLeftButtonsColumn'];
            this.rowSelectionMode = myConfig['RowSelectionMode'];
            if (this.rowSelectionMode != undefined && (this.rowSelectionMode === "Single" || this.rowSelectionMode === "Multi")) {
                this.hideRowCheckBox = false;
            }
            else {
                this.hideRowCheckBox = true;
            }
            if (myConfig["CustomButtons"]) {
                this.customButtonsList = myConfig["CustomButtons"];
            }
            if (myConfig["CustomRowButtons"]) {
                this.customRowButtonsList = myConfig["CustomRowButtons"];
            }
        }
        if (this.databaseRecords.length > 0) {
            this.showNoData = false;
        }
        else if (this.gridSettings) {
            this.headerForDataTable = this.vmMatrix.extractHeader(this.databaseRecords, this.gridSettings);
            this.showNoData = true;
            this.IsPagination = false;
        }
        if (this.sortColumnName == "") {
            this.setDefaultSortColumn();
        }
    };
    DisplayGridComponent.prototype.RefreshDataFromFormBuilder = function (updatedValue) {
        if (updatedValue.value === "cancel") {
            this.cancelClicked();
        }
        else {
            this.PageRefreshFromDynamicComponent(updatedValue.value);
        }
    };
    DisplayGridComponent.prototype.showChildViewClicked = function (selectedRow) {
        if (this.childGridType === 'displayGrid') {
            selectedRow.collapsed = !selectedRow.collapsed;
            return;
        }
        this.parentDisplayValue = this.getParentDisplayValue(selectedRow, this.gridSettings[this.CONST_CHILDCONTROL_CONFIG]);
        this.filterForDataTable = null;
        this.getChildRecords(selectedRow.primaryKey.value);
    };
    DisplayGridComponent.prototype.getChildRecords = function (idValue, overrideMasterData) {
        var _this = this;
        if (overrideMasterData === void 0) { overrideMasterData = true; }
        if (this.httpProxy) {
            if (idValue) {
                if (this.pageName.indexOf("_child") > 0) {
                    this.pageName = this.pageName.replace("_child", "");
                }
            }
            this.sortColumnName = "";
            this.httpProxy.ExecutePageRefresh(this.pageName + "_child", idValue)
                .subscribe(function (res) {
                _this.viewDetail = false;
                _this.editDetail = false;
                _this.addDetail = false;
                _this.childId = idValue;
                if (overrideMasterData) {
                    _this.masterGridSettings = _this.gridSettings;
                    _this.masterPageName = _this.pageName;
                }
                if (_this.gridSettings[_this.CONST_CHILDCONTROL_CONFIG]) {
                    _this.ForeignKeyColumn = _this.gridSettings[_this.CONST_CHILDCONTROL_CONFIG]["ForeignKeyColumn"];
                    _this.injectConfigAndData(_this.gridSettings[_this.CONST_CHILDCONTROL_CONFIG], res, _this.httpProxy, _this.pageName + "_child", true);
                }
                else {
                    _this.injectConfigAndData(_this.gridSettings, res, _this.httpProxy, _this.pageName + "_child", true);
                }
            }, function (error) {
                _this.alert.error("Get Child Records: async error #" + error.status);
            }, function () {
            });
        }
    };
    DisplayGridComponent.prototype.GetParentPageDetails = function (controlconfig, httpProxyObject, pageName, id) {
        if (id === void 0) { id = null; }
        this.httpProxy = httpProxyObject;
        this.pageName = pageName;
        this.controlconfig = controlconfig;
        if (id) {
            this.ParentIdValue = id;
        }
        else {
            this.ParentIdValue = 0;
        }
        this.RefreshPage();
    };
    DisplayGridComponent.prototype.ReturnToParent = function () {
        this.filteredMasterPage = false;
        this.IsChildPage = false;
        this.sortColumnName = "";
        this.filterForDataTable = null;
        this.RefreshPage();
    };
    DisplayGridComponent.prototype.PageRefreshFromDynamicComponent = function (data) {
        var IdValue = 0;
        if (this.IsChildPage) {
            if (data[this.ForeignKeyColumn]) {
                IdValue = data[this.ForeignKeyColumn];
            }
        }
        if (this.httpProxy) {
            if (this.IsChildPage) {
                if (this.masterPageName) {
                    this.pageName = this.masterPageName;
                }
                this.getChildRecords(IdValue, false);
            }
            else {
                this.RefreshPage();
            }
        }
    };
    DisplayGridComponent.prototype.buildJSONObject = function () {
        var data = this.editViewRowDataTable;
        var jsonValue = '{ ';
        for (var i = 0; i < data.length; i++) {
            var dbName = data[i].name;
            var editedValue = JSON.stringify(data[i].val);
            (i + 1) == data.length ? jsonValue += "\"" + dbName + "\" : " + editedValue : jsonValue += "\"" + dbName + "\" : " + editedValue + ",";
        }
        jsonValue += ' }';
        var returndata = JSON.parse(jsonValue);
        return returndata;
    };
    DisplayGridComponent.prototype.DeleteClicked = function (selectedRow) {
        var _this = this;
        this.crudSuccessObservable = this.crudService.OnCrudOperationSuccess.subscribe(function (message) {
            _this.crudSuccessObservable.unsubscribe();
            _this.refreshCb(_this.crudService.getCallerContext(), message);
        });
        this.alert.addAlertAndRequestAnswer(this.appSettingsService.appNotificationsMsg.deletionQuestionMsg);
        this.deleteConfirmationObservable = this.alert.requestConfirmationAnswer$.subscribe(function (item) {
            _this.alert.askConfirmation = false;
            _this.deleteConfirmationObservable.unsubscribe();
            if (item != "OK") {
                _this.crudSuccessObservable.unsubscribe();
                return;
            }
            _this.editViewRowDataTable = _this.vmMatrix.viewMatrix(selectedRow.cells, _this.headerForDataTable, _this.gridSettings, _this.databaseRecords);
            _this.crudService.delete(_this.editViewRowDataTable, _this.pageName, _this.PrimaryKeyColumn, _this.httpProxy);
        });
    };
    DisplayGridComponent.prototype.DeleteSucceeded = function () {
        var _this = this;
        var primaryColumnName = this.vmMatrix.getPrimaryColumnName(this.gridSettings);
        var data = this.vmMatrix.buildJSONObject(this.editViewRowDataTable, primaryColumnName);
        var IdValue = 0;
        if (this.pageName.indexOf("_child") > 0) {
            var column = this.gridSettings.ColumnConfiguration.find(function (p) { return p.dbColumnName == _this.ForeignKeyColumn; });
            var columnDataSource = column.dataSource.find(function (x) { return x[column.dataSourceAddress.dbColumnName] == data[_this.ForeignKeyColumn]; });
            IdValue = columnDataSource[column.dataSourceAddress.dbColumnName];
            if (this.masterPageName) {
                this.pageName = this.masterPageName;
            }
            this.getChildRecords(IdValue, false);
        }
        else {
            this.RefreshPage();
        }
    };
    DisplayGridComponent.prototype.RefreshPage = function () {
        var _this = this;
        if (this.httpProxy) {
            this.intFormSvc.startSpinner('card');
            var pageName = this.pageName;
            if (this.masterGridSettings && !this.IsChildPage) {
                pageName = this.masterPageName;
            }
            if (this.controlconfig["ServerPagination"] == true) {
                this.filterAPI();
            }
            else {
                this.httpProxy.ExecutePageRefresh(pageName, this.ParentIdValue)
                    .subscribe(function (res) {
                    _this.refreshOnSuccess(res, false);
                }, function (error) {
                    _this.alert.error("Refresh Page : async error #" + error.status + "-myerror-" + _this.pageName + "-" + _this.controlconfig + "-" + _this.masterGridSettings + "-" + _this.masterPageName);
                }, function () {
                    _this.intFormSvc.stopSpinner();
                });
            }
        }
    };
    DisplayGridComponent.prototype.refreshOnSuccess = function (res, filtered) {
        this.viewDetail = false;
        this.editDetail = false;
        this.addDetail = false;
        var rowsOfData;
        rowsOfData = res;
        if (filtered) {
            rowsOfData = res.List;
            this.totalItems = res.NumberOfRowsInTable;
        }
        else {
            this.totalItems = rowsOfData.length;
        }
        if (this.masterGridSettings && !this.IsChildPage) {
            this.ForeignKeyColumn = this.masterGridSettings["ForeignKeyColumn"];
            this.injectConfigAndData(this.masterGridSettings, rowsOfData, this.httpProxy, this.masterPageName);
        }
        else {
            this.ForeignKeyColumn = this.controlconfig["ForeignKeyColumn"];
            this.injectConfigAndData(this.controlconfig, rowsOfData, this.httpProxy, this.pageName, this.IsChildPage);
        }
    };
    DisplayGridComponent.prototype.filterValueEntered = function (event) {
        var sequence = this.activeFilterSequence;
        var filterInputValue = event.target.value;
        this.filteredMatrix = this.masterMatrixForDataTable.filter(function (line) {
            var objElement1 = line.cells.find(function (x) {
                return (x.sequence === sequence);
            });
            var cellValue = new String(objElement1.val.toString().toLocaleLowerCase());
            if (cellValue.startsWith(filterInputValue.toString().toLocaleLowerCase())) {
                return line;
            }
        });
        if (filterInputValue.toString() != "") {
            this.filtered = true;
            this.totalItems = this.filteredMatrix.length;
        }
        else {
            this.filtered = false;
            this.totalItems = this.masterMatrixForDataTable.length;
        }
        this.pageChanged(null, true);
    };
    DisplayGridComponent.prototype.filterWithHeaderValues = function () {
        this.matrixForDataTable = this.masterMatrixForDataTable;
        for (var i = 0; i < this.headerForDataTable.length; i++) {
            if (this.headerForDataTable[i].filter.length > 0) {
                var filterValue = this.headerForDataTable[i].filter;
                var filteredMatrix = {};
                filteredMatrix = this.matrixForDataTable.filter(function (line) {
                    var objElement1 = line.cells.find(function (x) {
                        return (x.sequence === i);
                    });
                    if (objElement1.val) {
                        var cellValue = new String(objElement1.val.toString().toLocaleLowerCase());
                        if (cellValue.startsWith(filterValue.toString().toLocaleLowerCase())) {
                            return line;
                        }
                    }
                });
                this.matrixForDataTable = filteredMatrix;
            }
        }
    };
    DisplayGridComponent.prototype.sortRequested = function (clickedColumn, sortCss) {
        this.sortColumnName = clickedColumn.toLowerCase();
        if (sortCss != "fa fa-arrow-up") {
            this.sortAsc = true;
        }
        else {
            this.sortAsc = false;
        }
        var inputArray = [];
        if (this.isScrollableGrid) {
            inputArray = this.masterMatrixForDataTable;
        }
        else {
            if (this.filtered) {
                inputArray = this.filteredMatrix;
            }
            else {
                inputArray = this.masterMatrixForDataTable;
            }
        }
        this.currentPage = 1;
        if (this.gridSettings["ServerPagination"] == undefined || this.gridSettings["ServerPagination"] == false) {
            if (this.sortAsc) {
                this.sortAscending(this.sortColumnName, inputArray);
                this.pageChanged(null, true);
            }
            else {
                this.sortDescending(this.sortColumnName, inputArray);
                this.pageChanged(null, true);
            }
        }
        else {
            this.filterAPI();
        }
    };
    DisplayGridComponent.prototype.initializeFilterOptions = function () {
        var _this = this;
        if (this.gridSettings["ServerPagination"] == undefined || this.gridSettings["ServerPagination"] == false) {
            this.createFilters(this.masterMatrixForDataTable);
        }
        else {
            this.httpProxy.ExecutePageRefresh(this.pageName, this.inputPageName ? this.ParentIdValue : this.childId)
                .subscribe(function (res) {
                _this.createFilters(res);
            }, function (error) {
                _this.alert.error("Refresh Page : async error #" + error.status + "-myerror-" + _this.pageName + "-" + _this.controlconfig + "-" + _this.masterGridSettings + "-" + _this.masterPageName);
            }, function () {
            });
        }
    };
    DisplayGridComponent.prototype.createFilters = function (res) {
        for (var i = 0; i < this.filterForDataTable.length; i++) {
            if (this.filterForDataTable[i].filterable) {
                this.showFilters = true;
                this.filterForDataTable[i].options.push({
                    label: "ALL",
                    value: ""
                });
                //Insert all of the used values from the data into this array (only the values present in the data)
                var usedValues = [];
                for (var j = 0; j < res.length; j++) {
                    var valueToAdd;
                    if (this.gridSettings["ServerPagination"] == undefined || this.gridSettings["ServerPagination"] == false) {
                        valueToAdd = res[j].cells[i].val;
                    }
                    else {
                        valueToAdd = res[j][this.filterForDataTable[i].name];
                    }
                    if (usedValues.indexOf(valueToAdd) == -1) {
                        usedValues.push(valueToAdd);
                    }
                }
                //check if the current column is a FK reference, if so, use those values
                var dbColumnName = this.filterForDataTable[i].name;
                var columnSettings = this.gridSettings.ColumnConfiguration.find(function (z) { return z.dbColumnName === dbColumnName; });
                if (columnSettings.dataSource) {
                    var idCol = columnSettings.dataSourceAddress.dbColumnName;
                    var desCol = columnSettings.dataSourceAddress.displayColumnName;
                    //Loop through the result set and grab the FK column values
                    var optionValues = [];
                    for (var j = 0; j < usedValues.length; j++) {
                        var option = {
                            label: usedValues[j],
                            value: usedValues[j]
                        };
                        var dataSourceToUse;
                        for (var k = 0; k < columnSettings.dataSource.length; k++) {
                            if (columnSettings.dataSource[k][idCol] === usedValues[j]) {
                                dataSourceToUse = columnSettings.dataSource[k];
                                break;
                            }
                        }
                        if (dataSourceToUse) {
                            option.label = dataSourceToUse[desCol];
                            option.value = dataSourceToUse[idCol];
                        }
                        optionValues.push(option);
                    }
                    //Sort the options by ascending order
                    optionValues.sort(function (a, b) {
                        return a.label.toString().localeCompare(b.label);
                    });
                    for (var j = 0; j < optionValues.length; j++) {
                        var option = {
                            label: optionValues[j].label,
                            value: optionValues[j].value
                        };
                        this.filterForDataTable[i].options.push(option);
                    }
                }
                else {
                    usedValues.sort();
                    for (var j = 0; j < usedValues.length; j++) {
                        var option = {
                            label: usedValues[j],
                            value: usedValues[j]
                        };
                        this.filterForDataTable[i].options.push(option);
                    }
                }
            }
        }
    };
    DisplayGridComponent.prototype.pageChanged = function (event, override) {
        if (override === void 0) { override = false; }
        if (event != null && event.page != null)
            this.currentPage = event.page;
        if (this.gridSettings["ServerPagination"] == true && !override) {
            this.filterAPI();
        }
        else {
            if (this.filtered) {
                this.totalItems = this.filteredMatrix.length;
            }
            else {
                this.totalItems = this.masterMatrixForDataTable.length;
            }
            if (this.isScrollableGrid == false) {
                if (this.filtered) {
                    this.matrixForDataTable = this.filteredMatrix.slice((this.currentPage - 1) * this.itemsPerPage, this.currentPage * this.itemsPerPage);
                    this.currentPage = 1;
                }
                else {
                    if (this.masterMatrixForDataTable != null)
                        this.matrixForDataTable = this.masterMatrixForDataTable.slice((this.currentPage - 1) * this.itemsPerPage, this.currentPage * this.itemsPerPage);
                }
            }
            else {
                if (this.filtered) {
                    this.matrixForDataTable = this.filteredMatrix;
                }
                else {
                    this.matrixForDataTable = this.masterMatrixForDataTable;
                }
            }
        }
    };
    ;
    DisplayGridComponent.prototype.filterSelect = function (event) {
        this.filterForDataTable[parseInt(event.target.id.replace('f', ''))].filterValue[0] = event.target.value;
        this.filterAPI();
    };
    ;
    DisplayGridComponent.prototype.applyFilterFromListener = function (incToken) {
        //this.filterForDataTable[parseInt(event.target.id.replace('f',''))].filterValue[0] = event.target.value;
        this.filterForDataTable.find(function (x) { return x.name === incToken.filterName; }).filterValue[0] = incToken.filterValue;
        this.filterAPI();
    };
    ;
    DisplayGridComponent.prototype.filterDate = function (event) {
        if (event.target.id.indexOf('ff') > -1) {
            this.filterForDataTable[parseInt(event.target.id.replace('ff', ''))].filterValue[0] = event.target.value;
        }
        else if (event.target.id.indexOf('ft') > -1) {
            this.filterForDataTable[parseInt(event.target.id.replace('ft', ''))].filterValue[1] = event.target.value;
        }
        this.filterAPI();
    };
    ;
    DisplayGridComponent.prototype.singalRCallback = function () {
        if (this.IsChildPage) {
            this.getChildRecords(this.childId, false);
        }
        else {
            this.filterAPI();
        }
    };
    DisplayGridComponent.prototype.filterAPI = function () {
        var _this = this;
        if (this.httpProxy) {
            var pageName = this.pageName;
            if (this.masterGridSettings && !this.IsChildPage) {
                pageName = this.masterPageName;
            }
            var filterObj = {};
            filterObj.ListOfFilterColumns = [];
            if (this.filterForDataTable) {
                for (var i = 0; i < this.filterForDataTable.length; i++) {
                    if (this.filterForDataTable[i].filterable) {
                        if (this.filterForDataTable[i].htmlControlType == 'text') {
                            if (this.filterForDataTable[i].filterValue.length > 0 && this.filterForDataTable[i].filterValue[0].length > 0) {
                                var filterColObj = {};
                                filterColObj.DBColumnName = this.filterForDataTable[i].name;
                                filterColObj.DBColumnValue = this.filterForDataTable[i].filterValue[0];
                                filterColObj.WhereClauseCondition = "=";
                                filterObj.ListOfFilterColumns.push(filterColObj);
                            }
                        }
                        else if (this.filterForDataTable[i].htmlControlType.indexOf('date') >= 0) {
                            if (this.filterForDataTable[i].filterValue[0] && this.filterForDataTable[i].filterValue[0].length > 0) {
                                var filterColObj = {};
                                filterColObj.DBColumnName = this.filterForDataTable[i].name;
                                filterColObj.DBColumnValue = this.filterForDataTable[i].filterValue[0];
                                filterColObj.WhereClauseCondition = ">=";
                                filterObj.ListOfFilterColumns.push(filterColObj);
                            }
                            if (this.filterForDataTable[i].filterValue[1] && this.filterForDataTable[i].filterValue[1].length > 0) {
                                var filterColObj = {};
                                filterColObj.DBColumnName = this.filterForDataTable[i].name;
                                filterColObj.DBColumnValue = this.filterForDataTable[i].filterValue[1];
                                filterColObj.WhereClauseCondition = "<=";
                                filterObj.ListOfFilterColumns.push(filterColObj);
                            }
                        }
                    }
                }
            }
            if (this.pageName.indexOf("_child") > 0) {
                if (filterObj.ListOfFilterColumns.filter(function (x) { return x.DBColumnName == _this.ForeignKeyColumn; }).length == 0) {
                    var filterColObj = {};
                    filterColObj.DBColumnName = this.ForeignKeyColumn;
                    filterColObj.DBColumnValue = this.inputPageName ? this.ParentIdValue : this.childId;
                    filterColObj.WhereClauseCondition = "=";
                    filterObj.ListOfFilterColumns.push(filterColObj);
                }
            }
            filterObj.ListOfSortingColumns = [];
            if (this.sortColumnName != "") {
                for (var i = 0; i < this.filterForDataTable.length; i++) {
                    if (this.filterForDataTable[i].name.toLowerCase() == this.sortColumnName.toLowerCase()) {
                        var sortObj = {};
                        sortObj.DbColumnName = this.filterForDataTable[i].name;
                        sortObj.ShouldOverrideDefaultAscendingSort = !this.sortAsc;
                        filterObj.ListOfSortingColumns.push(sortObj);
                    }
                }
            }
            filterObj.ListOfProjectionColumns = [];
            filterObj.MaxNumberOfRowsInAPage = this.itemsPerPage;
            filterObj.RequestedPageNumber = this.currentPage;
            var jsonToPass = JSON.stringify(filterObj);
            this.httpProxy.ExecutePageFilter(pageName, jsonToPass)
                .subscribe(function (res) {
                _this.refreshOnSuccess(res, true);
            }, function (error) {
                _this.alert.error("Filter Page : async error #" + error.status + "-myerror-" + _this.pageName + "-" + _this.controlconfig + "-" + _this.masterGridSettings + "-" + _this.masterPageName);
            }, function () {
                _this.intFormSvc.stopSpinner();
            });
        }
    };
    DisplayGridComponent.prototype.setDefaultSortColumn = function () {
        if (this.controlconfig["DefaultSortColumn"]) {
            var defaultSortColumn = this.controlconfig["DefaultSortColumn"];
            var defaultSortCss = "fa fa-lg fa-arrow-down";
            if (this.controlconfig["DefaultSortDirection"]) {
                if (this.controlconfig["DefaultSortDirection"].toLowerCase() == "desc")
                    defaultSortCss = "fa fa-lg fa-arrow-up";
            }
            this.sortRequested(defaultSortColumn, defaultSortCss);
        }
    };
    DisplayGridComponent.prototype.customButtonClicked = function (customButton) {
        var _this = this;
        var result = true;
        if (customButton.formValidate) {
            this.matrixForDataTable.forEach(function (x) {
                var primaryColumnName = _this.vmMatrix.getPrimaryColumnName(_this.gridSettings);
                var plugInValue = _this.vmMatrix.buildJSONObject(x.cells, primaryColumnName);
                var tempResult = _this.ruleService.validateRulesByRulesConfig(plugInValue, _this.gridSettings["RulesConfig"], x.cells);
                if (!tempResult)
                    result = false;
            });
        }
        if (result) {
            this.displayGridNotifier.emit({
                value: this.selectedRows,
                masterList: this.masterMatrixForDataTable,
                controlName: customButton.name
            });
        }
    };
    DisplayGridComponent.prototype.customButtonChildGridClicked = function (outputData, parentRow) {
        this.displayGridNotifier.emit({
            value: outputData.value,
            parentRow: parentRow,
            controlName: outputData.controlName
        });
    };
    DisplayGridComponent.prototype.customRowButtonListClicked = function (customRowButton, selectedRow) {
        var result = true;
        if (customRowButton.formValidate) {
            var primaryColumnName = this.vmMatrix.getPrimaryColumnName(this.gridSettings);
            var plugInValue = this.vmMatrix.buildJSONObject(selectedRow.cells, primaryColumnName);
            var tempResult = this.ruleService.validateRulesByRulesConfig(plugInValue, this.gridSettings["RulesConfig"], selectedRow.cells);
            if (!tempResult)
                result = false;
        }
        if (result) {
            this.displayGridNotifier.emit({
                value: selectedRow,
                controlName: customRowButton.name
            });
        }
    };
    DisplayGridComponent.prototype.checkBusinessValidations = function () {
        if (this.masterMatrixForDataTable.length) {
            //methods to be used in proxy services
            this.httpProxy.checkBusinessValidations(this.masterMatrixForDataTable, this.pageName);
        }
    };
    DisplayGridComponent.prototype.ngOnDestroy = function () {
        this.filterListenerSubscription.unsubscribe();
    };
    DisplayGridComponent.prototype.getChildGridSettings = function (selectedRow) {
        if (selectedRow && selectedRow.selectedColumnName) {
            var tempColumn = this.gridSettings.ColumnConfiguration.find(function (p) { return p.dbColumnName == selectedRow.selectedColumnName; });
            if (tempColumn) {
                return tempColumn.ChildControlConfig;
            }
        }
        else {
            return this.gridSettings['ChildControlConfig'];
        }
    };
    DisplayGridComponent.prototype.getChildPageName = function (selectedRow) {
        if (selectedRow && selectedRow.selectedColumnName) {
            var tempColumn = this.gridSettings.ColumnConfiguration.find(function (p) { return p.dbColumnName == selectedRow.selectedColumnName; });
            if (tempColumn) {
                return this.pageName + '_' + tempColumn.dbColumnName + '_child';
            }
        }
        else {
            return this.pageName + '_child';
        }
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DisplayGridComponent.prototype, "inputPageName", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], DisplayGridComponent.prototype, "parentRow", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DisplayGridComponent.prototype, "inputGridSettings", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], DisplayGridComponent.prototype, "inputHttpProxy", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], DisplayGridComponent.prototype, "pluginInput", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], DisplayGridComponent.prototype, "displayGridNotifier", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], DisplayGridComponent.prototype, "ParentIdInputValue", void 0);
    DisplayGridComponent = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/ReusableComponents/displayGrid/displayGrid.html"),
            selector: 'displayGrid'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _a) || Object, (typeof (_b = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _b) || Object, (typeof (_c = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object, (typeof (_e = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _e) || Object, (typeof (_f = typeof crudService_1.crudService !== 'undefined' && crudService_1.crudService) === 'function' && _f) || Object, (typeof (_g = typeof displayGridFilterService_1.DisplayGridFilterService !== 'undefined' && displayGridFilterService_1.DisplayGridFilterService) === 'function' && _g) || Object, (typeof (_h = typeof ruleService_1.RuleService !== 'undefined' && ruleService_1.RuleService) === 'function' && _h) || Object, (typeof (_j = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _j) || Object])
    ], DisplayGridComponent);
    return DisplayGridComponent;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
}(displayGridUtils_1.BaseDisplayGrid));
exports.DisplayGridComponent = DisplayGridComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/displayGrid/displayGridFilterService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var DisplayGridFilterService = (function () {
    function DisplayGridFilterService() {
        this.doFilterBy = new Subject_1.Subject();
    }
    DisplayGridFilterService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], DisplayGridFilterService);
    return DisplayGridFilterService;
}());
exports.DisplayGridFilterService = DisplayGridFilterService;


/***/ }),

/***/ "./src/app/ReusableComponents/displayGrid/displayGridUtils.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var BaseDisplayGrid = (function () {
    function BaseDisplayGrid(nav, alert, vmMatrix, appSettingsService, crudserv, filterListener) {
        this.viewDetail = false;
        this.editDetail = false;
        this.addDetail = false;
        this.isViewBtnVisible = true;
        this.isEditBtnVisible = true;
        this.childType = "edit";
        this.showFilters = false;
        this.activeFilterSequence = "";
        this.showMultiSelectionDirective = false;
        this.ForeignKeyColumn = "";
        this.PrimaryKeyColumn = "Id";
        this.isDisabled = false;
        this.showChildDetail = false;
        this.CONST_CHILDCONTROL_CONFIG = "ChildControlConfig";
        this.IsChildPage = false;
        //Pagination related variables
        this.IsPagination = false;
        this.totalItems = 0;
        this.itemsPerPage = 10; //Default value
        this.currentMasterPage = 1;
        this.currentChildPage = 1;
        this.hideAddBtn = false;
        this.hideDeleteBtn = false;
        this.hideLeftButtonsColumn = false;
        this.hideRowCheckBox = false;
        //sorting variables
        this.sortColumnName = "";
        this.sortAsc = false;
        this.isSpreadsheetGrid = false;
        this.showGridBody = false;
        this.showNoData = false;
        this.showFilterRow = false;
        this.showFooterRow = false;
        this.showAddButtonOnLoad = false;
        this.selectedRows = [];
        this.rowSelectionMode = "None";
        this.isPageLoaded = false;
        this.customButtonsList = [];
        this.customRowButtonsList = [];
        this.filteredMasterPage = false;
        this.filteredChildPage = false;
        this.scrollableGridCss = "";
        this.isScrollableGrid = false;
        this.childGridType = "miniGrid";
        //  super (nav, alert, httpAbstract, vmMatrix, appSettingsService, crudserv , filterListener );
        this.alert = alert;
        this.vmMatrix = vmMatrix;
        crudserv.setCallerContext(this);
        this.crudService = crudserv;
        this.navService = nav;
    }
    BaseDisplayGrid.prototype.getParentKeyId = function (parentRow) {
        var IdValue = 0;
        if (this.gridSettings["ForeignKeyColumn"]) {
            var keyColumn = this.gridSettings["ForeignKeyColumn"];
            for (var i = 0; i < parentRow.cells.length; i++) {
                if (parentRow.cells[i].name == keyColumn || parentRow.cells[i].name == "Id") {
                    IdValue = parentRow.cells[i].val;
                    break;
                }
            }
        }
        return IdValue;
    };
    BaseDisplayGrid.prototype.getParentDisplayValue = function (parentRow, childGridSettings) {
        var displayValue = "";
        if (childGridSettings["ForeignKeyColumn"]) {
            var keyColumn = childGridSettings.ColumnConfiguration.find(function (p) { return p.dbColumnName == childGridSettings["ForeignKeyColumn"]; });
            if (keyColumn && keyColumn.dataSourceAddress) {
                var dbColumnName = this.vmMatrix.getdbColumnNameForDataSourceAddress(keyColumn.dataSourceAddress);
                for (var i = 0; i < parentRow.cells.length; i++) {
                    if (parentRow.cells[i].name == dbColumnName) {
                        displayValue = parentRow.cells[i].val;
                        break;
                    }
                }
            }
        }
        return displayValue;
    };
    BaseDisplayGrid.prototype.editViewClicked = function (selectedRow) {
        switch (this.childType) {
            case "edit":
                this.editViewRowDataTable = this.vmMatrix.editMatrix(selectedRow.cells, this.headerForDataTable, this.gridSettings);
                this.operationType = this.childType;
                this.operationType = this.childType;
                this.editDetail = true;
                this.viewDetail = false;
                this.addDetail = false;
                break;
            case "view":
                this.editViewRowDataTable = this.vmMatrix.viewMatrix(selectedRow.cells, this.headerForDataTable, this.gridSettings, this.databaseRecords);
                this.operationType = this.childType;
                this.viewDetail = true;
                this.addDetail = false;
                this.editDetail = false;
                break;
            case "editInline":
                this.editViewRowDataTable = this.vmMatrix.editMatrix(selectedRow.cells, this.headerForDataTable, this.gridSettings);
                selectedRow.inlineEditEnabled = !selectedRow.inlineEditEnabled;
                break;
        }
    };
    BaseDisplayGrid.prototype.AddClicked = function () {
        var _this = this;
        this.editViewRowDataTable = this.vmMatrix.getFormBuilderControls(this.gridSettings); //this.getFormBuilderControls(this.headerForDataTable);
        var fkColumn = this.editViewRowDataTable.find(function (p) { return p.name == _this.ForeignKeyColumn; });
        if (this.parentDisplayValue && fkColumn) {
            fkColumn.val = this.parentDisplayValue;
        }
        else if (this.ParentIdValue && fkColumn) {
            fkColumn.val = this.ParentIdValue;
        }
        this.viewDetail = false;
        this.editDetail = false;
        this.addDetail = true;
        this.operationType = "add";
    };
    BaseDisplayGrid.prototype.ClearSelected = function () {
        this.selectedRows.forEach(function (x) {
            x.checkBox.checked = false;
        });
        this.selectedRows = [];
    };
    BaseDisplayGrid.prototype.AddRemoveAll = function (event) {
        var _this = this;
        if (event.target.checked) {
            this.selectedRows = [];
            this.masterMatrixForDataTable.forEach(function (x) {
                if (!x.checkBox.disabled) {
                    x.checkBox.checked = true;
                    _this.selectedRows.push(x);
                }
            });
        }
        else {
            this.selectedRows.forEach(function (x) {
                x.checkBox.checked = false;
            });
            this.selectedRows = [];
        }
    };
    BaseDisplayGrid.prototype.FilterSelectedRows = function (event) {
        if (event.target.checked) {
            var filteredMatrix = this.masterMatrixForDataTable.filter(function (row) {
                if (row.checkBox.checked == true) {
                    return row;
                }
            });
            this.matrixForDataTable = filteredMatrix;
        }
        else if (!event.target.checked) {
            this.matrixForDataTable = this.masterMatrixForDataTable;
        }
    };
    BaseDisplayGrid.prototype.AddRemoveSelected = function (event, selectedRow) {
        if (event.target.checked) {
            if (this.rowSelectionMode === "Single" && this.selectedRows.length > 0) {
                /*for (var i = 0; i < this.masterMatrixForDataTable.length; i++) {
                    let row = this.masterMatrixForDataTable[i];
                    if (row.checkBox.checked == true) {
                        row.checkBox.checked = false;
                        break;
                    }
                }*/
                this.selectedRows = [];
            }
            selectedRow.checkBox.checked = true;
            this.selectedRows.push(selectedRow);
        }
        else if (!event.target.checked) {
            for (var i = 0; i < this.selectedRows.length; i++) {
                var row = this.selectedRows[i];
                var itemSelected = row.cells.find(function (x) { return x.name.toLowerCase() == selectedRow.primaryKey.name.toLowerCase(); });
                if (itemSelected.val == selectedRow.primaryKey.value) {
                    row.checkBox.checked = false;
                    break;
                }
            }
            this.selectedRows.splice(i, 1);
        }
    };
    BaseDisplayGrid.prototype.showGrid = function (show) {
        if (show === void 0) { show = true; }
        this.showAddButtonOnLoad = false;
        this.showNoData = show;
        this.showGridBody = show;
        this.IsPagination = show;
    };
    BaseDisplayGrid.prototype.inputClicked = function (row, col) {
        if (col.htmlControlType === "checkbox") {
            col.val = !col.val;
        }
        this.vmMatrix.inputClicked({ row: row, col: col });
    };
    BaseDisplayGrid.prototype.recordSaveHandler = function (context) {
        context.RefreshPage.call(context);
    };
    BaseDisplayGrid.prototype.sortAscending = function (clickedColumn, inputArray) {
        var sortedArray = inputArray.sort(function (n1, n2) {
            var objElement1 = n1.cells.find(function (x) {
                return x.name.toLowerCase() === clickedColumn.toLowerCase();
            });
            var objElement2 = n2.cells.find(function (x) {
                return x.name.toLowerCase() === clickedColumn.toLowerCase();
            });
            if (objElement1.val > objElement2.val) {
                return 1;
            }
            if (objElement1.val < objElement2.val) {
                return -1;
            }
            return 0;
        });
        this.matrixForDataTable = sortedArray;
        this.updateSortCssForSequences("fa fa-arrow-up");
    };
    BaseDisplayGrid.prototype.sortDescending = function (clickedColumn, inputArray) {
        var sortedArray = inputArray.sort(function (n1, n2) {
            var objElement1 = n1.cells.find(function (x) {
                return x.name.toLowerCase() === clickedColumn.toLowerCase();
            });
            var objElement2 = n2.cells.find(function (x) {
                return x.name.toLowerCase() === clickedColumn.toLowerCase();
            });
            if (objElement1.val < objElement2.val) {
                return 1;
            }
            if (objElement1.val > objElement2.val) {
                return -1;
            }
            return 0;
        });
        this.matrixForDataTable = sortedArray;
        this.updateSortCssForSequences("fa fa-arrow-down");
    };
    BaseDisplayGrid.prototype.updateSortCssForSequences = function (sortCssTobeUpdated) {
        if (this.headerForDataTable) {
            var headerTableLength = this.headerForDataTable.length;
            for (var i = 0; i < headerTableLength; i++) {
                if (this.sortColumnName.toLowerCase() == this.headerForDataTable[i].name.toLowerCase()) {
                    this.headerForDataTable[i].sortCss = sortCssTobeUpdated;
                }
                else {
                    this.headerForDataTable[i].sortCss = "";
                }
            }
        }
    };
    BaseDisplayGrid.prototype.setRightPaddingColumnCSS = function (headerColumns) {
        var columnWidth = 0;
        var dataGridButtonsWidth = 3;
        var maxColumnWidth = 24;
        this.rightPaddingColumnCss = "col-" + (maxColumnWidth - columnWidth - dataGridButtonsWidth);
    };
    Object.defineProperty(BaseDisplayGrid.prototype, "currentPage", {
        get: function () {
            return (this.IsChildPage) ? this.currentChildPage : this.currentMasterPage;
        },
        set: function (value) {
            (this.IsChildPage) ? this.currentChildPage = value : this.currentMasterPage = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseDisplayGrid.prototype, "filtered", {
        get: function () {
            return (this.IsChildPage) ? this.filteredChildPage : this.filteredMasterPage;
        },
        set: function (value) {
            (this.IsChildPage) ? this.filteredChildPage = value : this.filteredMasterPage = value;
        },
        enumerable: true,
        configurable: true
    });
    BaseDisplayGrid.prototype.setChildControlVisibility = function () {
        if (this.gridSettings[this.CONST_CHILDCONTROL_CONFIG]
            && (!this.gridSettings.ColumnConfiguration.find(function (p) { return p.isToggleable == true; }))) {
            this.showChildDetail = true;
        }
        else {
            this.showChildDetail = false;
        }
    };
    BaseDisplayGrid.prototype.cancelClicked = function () {
        this.viewDetail = false;
        this.editDetail = false;
        this.addDetail = false;
    };
    BaseDisplayGrid.prototype.filterBoxClicked = function (clickedSequence) {
        this.activeFilterSequence = clickedSequence;
    };
    BaseDisplayGrid.prototype.buildDynamicHeader = function (dynamicHeaderObject, gridSettings) {
        var result = new Array();
        var columnIndex = 0;
        dynamicHeaderObject.forEach(function (x) {
            var level = x.level;
            var columnWidth = 0;
            var child;
            x.childColumns.forEach(function (y) {
                child = gridSettings.ColumnConfiguration.find(function (z) { return z.dbColumnName === y; });
                // loop through ColumnConfiguration to determine if we are skipping visible or invisible columns
                while (columnIndex < gridSettings.ColumnConfiguration.length && gridSettings.ColumnConfiguration[columnIndex].dbColumnName != y) {
                    // create an empty dynamic header if one is not defined for its child
                    if (gridSettings.ColumnConfiguration[columnIndex].isVisible == true && gridSettings.ColumnConfiguration[columnIndex].dbColumnName != y) {
                        columnWidth = columnWidth + parseInt(gridSettings.ColumnConfiguration[columnIndex].columnCss.split("-")[1]);
                        var headerObj = {
                            displayName: "",
                            columnCss: "col-" + columnWidth
                        };
                        result[level].push(headerObj);
                        columnWidth = 0;
                    }
                    columnIndex++;
                }
                ;
                columnIndex++;
                if (child != undefined) {
                    columnWidth = columnWidth + parseInt(child.columnCss.split("-")[1]);
                }
            });
            var headerObj = {
                displayName: x.displayName,
                columnCss: "col-" + columnWidth,
            };
            if (!result[level]) {
                result[level] = new Array();
            }
            result[level].push(headerObj);
        });
        this.dynamicHeaders = result;
    };
    return BaseDisplayGrid;
}());
exports.BaseDisplayGrid = BaseDisplayGrid;


/***/ }),

/***/ "./src/app/ReusableComponents/dragdrop/abstract.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dnd_utils_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/dnd.utils.ts");
//@Injectable()
var AbstractComponent = (function () {
    function AbstractComponent(elemRef, _dragDropService, _config, _cdr) {
        var _this = this;
        this._dragDropService = _dragDropService;
        this._config = _config;
        this._cdr = _cdr;
        this._dragEnabled = false;
        this.dropEnabled = false;
        this.dropZones = [];
        this.cloneItem = false;
        this._elem = elemRef.nativeElement;
        //
        // DROP events
        //
        this._elem.ondragenter = function (event) {
            _this._onDragEnter(event);
        };
        this._elem.ondragover = function (event) {
            _this._onDragOver(event);
            //
            if (event.dataTransfer != null) {
                event.dataTransfer.dropEffect = _this._config.dropEffect.name;
            }
            return false;
        };
        this._elem.ondragleave = function (event) {
            _this._onDragLeave(event);
        };
        this._elem.ondrop = function (event) {
            _this._onDrop(event);
        };
        //
        // Drag events
        //
        this._elem.ondragstart = function (event) {
            // console.log('ondragstart', event.target);
            _this._onDragStart(event);
            //
            if (event.dataTransfer != null) {
                event.dataTransfer.setData('text', '');
                // Change drag effect
                event.dataTransfer.effectAllowed = _this.effectAllowed || _this._config.dragEffect.name;
                // Change drag image
                if (dnd_utils_1.isPresent(_this.dragImage)) {
                    if (dnd_utils_1.isString(_this.dragImage)) {
                        event.dataTransfer.setDragImage(dnd_utils_1.createImage(_this.dragImage));
                    }
                    else if (dnd_utils_1.isFunction(_this.dragImage)) {
                        event.dataTransfer.setDragImage(dnd_utils_1.callFun(_this.dragImage));
                    }
                    else {
                        var img = _this.dragImage;
                        event.dataTransfer.setDragImage(img.imageElement, img.x_offset, img.y_offset);
                    }
                }
                else if (dnd_utils_1.isPresent(_this._config.dragImage)) {
                    var dragImage = _this._config.dragImage;
                    event.dataTransfer.setDragImage(dragImage.imageElement, dragImage.x_offset, dragImage.y_offset);
                }
                else if (_this.cloneItem) {
                    _this._dragHelper = _this._elem.cloneNode(true);
                    _this._dragHelper.classList.add('dnd-drag-item');
                    _this._dragHelper.style.position = "absolute";
                    _this._dragHelper.style.top = "0px";
                    _this._dragHelper.style.left = "-1000px";
                    _this._elem.parentElement.appendChild(_this._dragHelper);
                    event.dataTransfer.setDragImage(_this._dragHelper, event.offsetX, event.offsetY);
                }
                // Change drag cursor
                if (_this._dragEnabled) {
                    _this._elem.style.cursor = _this.effectCursor ? _this.effectCursor : _this._config.dragCursor;
                }
                else {
                    _this._elem.style.cursor = _this._defaultCursor;
                }
            }
        };
        this._elem.ondragend = function (event) {
            if (_this._elem.parentElement && _this._dragHelper) {
                _this._elem.parentElement.removeChild(_this._dragHelper);
            }
            // console.log('ondragend', event.target);
            _this._onDragEnd(event);
            // Restore style of dragged element
            _this._elem.style.cursor = _this._defaultCursor;
        };
    }
    Object.defineProperty(AbstractComponent.prototype, "dragEnabled", {
        get: function () {
            return this._dragEnabled;
        },
        set: function (enabled) {
            this._dragEnabled = !!enabled;
            this._elem.draggable = this._dragEnabled;
        },
        enumerable: true,
        configurable: true
    });
    AbstractComponent.prototype.detectChanges = function () {
        var _this = this;
        // Programmatically run change detection to fix issue in Safari
        setTimeout(function () {
            _this._cdr.detectChanges();
        }, 250);
    };
    AbstractComponent.prototype._onDragEnter = function (event) {
        // console.log('ondragenter._isDropAllowed', this._isDropAllowed);
        if (this._isDropAllowed) {
            event.preventDefault(); // prevent's default handling for drops; required for IE ondragover
            this._onDragEnterCallback(event);
        }
    };
    AbstractComponent.prototype._onDragOver = function (event) {
        // // console.log('ondragover._isDropAllowed', this._isDropAllowed);
        if (this._isDropAllowed) {
            // The element is over the same source element - do nothing
            if (event.preventDefault) {
                // Necessary. Allows us to drop.
                event.preventDefault();
            }
            this._onDragOverCallback(event);
        }
    };
    AbstractComponent.prototype._onDragLeave = function (event) {
        // console.log('ondragleave._isDropAllowed', this._isDropAllowed);
        if (this._isDropAllowed) {
            // event.preventDefault();
            this._onDragLeaveCallback(event);
        }
    };
    AbstractComponent.prototype._onDrop = function (event) {
        // console.log('ondrop._isDropAllowed', this._isDropAllowed);
        if (this._isDropAllowed) {
            if (event.preventDefault) {
                // Necessary. Allows us to drop.
                event.preventDefault();
            }
            if (event.stopPropagation) {
                // Necessary. Allows us to drop.
                event.stopPropagation();
            }
            this._onDropCallback(event);
            this.detectChanges();
        }
    };
    Object.defineProperty(AbstractComponent.prototype, "_isDropAllowed", {
        get: function () {
            if (this._dragDropService.isDragged && this.dropEnabled) {
                // First, if `allowDrop` is set, call it to determine whether the
                // dragged element can be dropped here.
                if (this.allowDrop) {
                    return this.allowDrop(this._dragDropService.dragData);
                }
                // Otherwise, use dropZones if they are set.
                if (this.dropZones.length === 0 && this._dragDropService.allowedDropZones.length === 0) {
                    return true;
                }
                for (var i = 0; i < this._dragDropService.allowedDropZones.length; i++) {
                    var dragZone = this._dragDropService.allowedDropZones[i];
                    if (this.dropZones.indexOf(dragZone) !== -1) {
                        return true;
                    }
                }
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    AbstractComponent.prototype._onDragStart = function (event) {
        // console.log('ondragstart.dragEnabled', this._dragEnabled);
        if (this._dragEnabled) {
            this._dragDropService.allowedDropZones = this.dropZones;
            // console.log('ondragstart.allowedDropZones', this._dragDropService.allowedDropZones);
            this._onDragStartCallback(event);
        }
    };
    AbstractComponent.prototype._onDragEnd = function (event) {
        this._dragDropService.allowedDropZones = [];
        // console.log('ondragend.allowedDropZones', this._dragDropService.allowedDropZones);
        this._onDragEndCallback(event);
    };
    //**** Drop Callbacks ****//
    AbstractComponent.prototype._onDragEnterCallback = function (event) { };
    AbstractComponent.prototype._onDragOverCallback = function (event) { };
    AbstractComponent.prototype._onDragLeaveCallback = function (event) { };
    AbstractComponent.prototype._onDropCallback = function (event) { };
    AbstractComponent.prototype._onDragStartCallback = function (event) { };
    AbstractComponent.prototype._onDragEndCallback = function (event) { };
    return AbstractComponent;
}());
exports.AbstractComponent = AbstractComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/dragdrop/dnd.config.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var dnd_utils_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/dnd.utils.ts");
var DataTransferEffect = (function () {
    function DataTransferEffect(name) {
        this.name = name;
    }
    DataTransferEffect.COPY = new DataTransferEffect('copy');
    DataTransferEffect.LINK = new DataTransferEffect('link');
    DataTransferEffect.MOVE = new DataTransferEffect('move');
    DataTransferEffect.NONE = new DataTransferEffect('none');
    DataTransferEffect = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [String])
    ], DataTransferEffect);
    return DataTransferEffect;
}());
exports.DataTransferEffect = DataTransferEffect;
var DragImage = (function () {
    function DragImage() {
        this.imageElement = "";
        this.x_offset = 0;
        this.y_offset = 0;
        if (dnd_utils_1.isString(this.imageElement)) {
            // Create real image from string source
            var imgScr = this.imageElement;
            this.imageElement = new HTMLImageElement();
            this.imageElement.src = imgScr;
        }
    }
    DragImage = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], DragImage);
    return DragImage;
}());
exports.DragImage = DragImage;
var DragDropConfig = (function () {
    function DragDropConfig() {
        this.onDragStartClass = "dnd-drag-start";
        this.onDragEnterClass = "dnd-drag-enter";
        this.onDragOverClass = "dnd-drag-over";
        this.onSortableDragClass = "dnd-sortable-drag";
        this.dragEffect = DataTransferEffect.MOVE;
        this.dropEffect = DataTransferEffect.MOVE;
        this.dragCursor = "move";
    }
    DragDropConfig = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], DragDropConfig);
    return DragDropConfig;
}());
exports.DragDropConfig = DragDropConfig;


/***/ }),

/***/ "./src/app/ReusableComponents/dragdrop/dnd.utils.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Check and return true if an object is type of string
 */
function isString(obj) {
    return typeof obj === "string";
}
exports.isString = isString;
/**
 * Check and return true if an object not undefined or null
 */
function isPresent(obj) {
    return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
/**
 * Check and return true if an object is type of Function
 */
function isFunction(obj) {
    return typeof obj === "function";
}
exports.isFunction = isFunction;
/**
 * Create Image element with specified url string
 */
function createImage(src) {
    var img = new HTMLImageElement();
    img.src = src;
    return img;
}
exports.createImage = createImage;
/**
 * Call the function
 */
function callFun(fun) {
    return fun();
}
exports.callFun = callFun;


/***/ }),

/***/ "./src/app/ReusableComponents/dragdrop/draggable.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var core_2 = __webpack_require__("./node_modules/@angular/core/index.js");
var abstract_component_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/abstract.component.ts");
var dnd_config_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/dnd.config.ts");
var dnd_service_1 = __webpack_require__("./src/app/ReusableServices/dnd.service.ts");
var DraggableComponent = (function (_super) {
    __extends(DraggableComponent, _super);
    function DraggableComponent(elemRef, dragDropService, config, cdr) {
        _super.call(this, elemRef, dragDropService, config, cdr);
        /**
         * Callback function called when the drag actions happened.
         */
        this.onDragStart = new core_2.EventEmitter();
        this.onDragEnd = new core_2.EventEmitter();
        /**
         * Callback function called when the drag action ends with a valid drop action.
         * It is activated after the on-drop-success callback
         */
        this.onDragSuccessCallback = new core_2.EventEmitter();
        this._defaultCursor = this._elem.style.cursor;
        this.dragEnabled = true;
    }
    Object.defineProperty(DraggableComponent.prototype, "draggable", {
        set: function (value) {
            this.dragEnabled = !!value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DraggableComponent.prototype, "dropzones", {
        set: function (value) {
            this.dropZones = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DraggableComponent.prototype, "effectallowed", {
        /**
         * Drag allowed effect
         */
        set: function (value) {
            this.effectAllowed = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DraggableComponent.prototype, "effectcursor", {
        /**
         * Drag effect cursor
         */
        set: function (value) {
            this.effectCursor = value;
        },
        enumerable: true,
        configurable: true
    });
    DraggableComponent.prototype._onDragStartCallback = function (event) {
        this._dragDropService.isDragged = true;
        this._dragDropService.dragData = this.dragData;
        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;
        this._elem.classList.add(this._config.onDragStartClass);
        //
        this.onDragStart.emit({ dragData: this.dragData, mouseEvent: event });
    };
    DraggableComponent.prototype._onDragEndCallback = function (event) {
        this._dragDropService.isDragged = false;
        this._dragDropService.dragData = null;
        this._dragDropService.onDragSuccessCallback = null;
        this._elem.classList.remove(this._config.onDragStartClass);
        //
        this.onDragEnd.emit({ dragData: this.dragData, mouseEvent: event });
    };
    __decorate([
        core_2.Input("dragEnabled"), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], DraggableComponent.prototype, "draggable", null);
    __decorate([
        core_2.Output(), 
        __metadata('design:type', (typeof (_a = typeof core_2.EventEmitter !== 'undefined' && core_2.EventEmitter) === 'function' && _a) || Object)
    ], DraggableComponent.prototype, "onDragStart", void 0);
    __decorate([
        core_2.Output(), 
        __metadata('design:type', (typeof (_b = typeof core_2.EventEmitter !== 'undefined' && core_2.EventEmitter) === 'function' && _b) || Object)
    ], DraggableComponent.prototype, "onDragEnd", void 0);
    __decorate([
        core_2.Input(), 
        __metadata('design:type', Object)
    ], DraggableComponent.prototype, "dragData", void 0);
    __decorate([
        core_2.Output("onDragSuccess"), 
        __metadata('design:type', (typeof (_c = typeof core_2.EventEmitter !== 'undefined' && core_2.EventEmitter) === 'function' && _c) || Object)
    ], DraggableComponent.prototype, "onDragSuccessCallback", void 0);
    __decorate([
        core_2.Input("dropZones"), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], DraggableComponent.prototype, "dropzones", null);
    __decorate([
        core_2.Input("effectAllowed"), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], DraggableComponent.prototype, "effectallowed", null);
    __decorate([
        core_2.Input("effectCursor"), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], DraggableComponent.prototype, "effectcursor", null);
    __decorate([
        core_2.Input(), 
        __metadata('design:type', Object)
    ], DraggableComponent.prototype, "dragImage", void 0);
    __decorate([
        core_2.Input(), 
        __metadata('design:type', Boolean)
    ], DraggableComponent.prototype, "cloneItem", void 0);
    DraggableComponent = __decorate([
        core_2.Directive({ selector: '[dnd-draggable]' }), 
        __metadata('design:paramtypes', [(typeof (_d = typeof core_2.ElementRef !== 'undefined' && core_2.ElementRef) === 'function' && _d) || Object, (typeof (_e = typeof dnd_service_1.DragDropService !== 'undefined' && dnd_service_1.DragDropService) === 'function' && _e) || Object, (typeof (_f = typeof dnd_config_1.DragDropConfig !== 'undefined' && dnd_config_1.DragDropConfig) === 'function' && _f) || Object, (typeof (_g = typeof core_1.ChangeDetectorRef !== 'undefined' && core_1.ChangeDetectorRef) === 'function' && _g) || Object])
    ], DraggableComponent);
    return DraggableComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}(abstract_component_1.AbstractComponent));
exports.DraggableComponent = DraggableComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/dragdrop/droppable.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var core_2 = __webpack_require__("./node_modules/@angular/core/index.js");
var abstract_component_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/abstract.component.ts");
var dnd_config_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/dnd.config.ts");
var dnd_service_1 = __webpack_require__("./src/app/ReusableServices/dnd.service.ts");
var DroppableComponent = (function (_super) {
    __extends(DroppableComponent, _super);
    function DroppableComponent(elemRef, dragDropService, config, cdr) {
        _super.call(this, elemRef, dragDropService, config, cdr);
        /**
         * Callback function called when the drop action completes correctly.
         * It is activated before the on-drag-success callback.
         */
        this.onDropSuccess = new core_2.EventEmitter();
        this.onDragEnter = new core_2.EventEmitter();
        this.onDragOver = new core_2.EventEmitter();
        this.onDragLeave = new core_2.EventEmitter();
        this.dropEnabled = true;
    }
    Object.defineProperty(DroppableComponent.prototype, "droppable", {
        set: function (value) {
            this.dropEnabled = !!value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DroppableComponent.prototype, "allowdrop", {
        set: function (value) {
            this.allowDrop = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DroppableComponent.prototype, "dropzones", {
        set: function (value) {
            this.dropZones = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DroppableComponent.prototype, "effectallowed", {
        /**
         * Drag allowed effect
         */
        set: function (value) {
            this.effectAllowed = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DroppableComponent.prototype, "effectcursor", {
        /**
         * Drag effect cursor
         */
        set: function (value) {
            this.effectCursor = value;
        },
        enumerable: true,
        configurable: true
    });
    DroppableComponent.prototype._onDragEnterCallback = function (event) {
        if (this._dragDropService.isDragged) {
            this._elem.classList.add(this._config.onDragEnterClass);
            this.onDragEnter.emit({ dragData: this._dragDropService.dragData, mouseEvent: event });
        }
    };
    DroppableComponent.prototype._onDragOverCallback = function (event) {
        if (this._dragDropService.isDragged) {
            this._elem.classList.add(this._config.onDragOverClass);
            this.onDragOver.emit({ dragData: this._dragDropService.dragData, mouseEvent: event });
        }
    };
    ;
    DroppableComponent.prototype._onDragLeaveCallback = function (event) {
        if (this._dragDropService.isDragged) {
            this._elem.classList.remove(this._config.onDragOverClass);
            this._elem.classList.remove(this._config.onDragEnterClass);
            this.onDragLeave.emit({ dragData: this._dragDropService.dragData, mouseEvent: event });
        }
    };
    ;
    DroppableComponent.prototype._onDropCallback = function (event) {
        if (this._dragDropService.isDragged) {
            this.onDropSuccess.emit({ dragData: this._dragDropService.dragData, mouseEvent: event });
            if (this._dragDropService.onDragSuccessCallback) {
                this._dragDropService.onDragSuccessCallback.emit({ dragData: this._dragDropService.dragData, mouseEvent: event });
            }
            this._elem.classList.remove(this._config.onDragOverClass);
            this._elem.classList.remove(this._config.onDragEnterClass);
        }
    };
    __decorate([
        core_2.Input("dropEnabled"), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], DroppableComponent.prototype, "droppable", null);
    __decorate([
        core_2.Output(), 
        __metadata('design:type', (typeof (_a = typeof core_2.EventEmitter !== 'undefined' && core_2.EventEmitter) === 'function' && _a) || Object)
    ], DroppableComponent.prototype, "onDropSuccess", void 0);
    __decorate([
        core_2.Output(), 
        __metadata('design:type', (typeof (_b = typeof core_2.EventEmitter !== 'undefined' && core_2.EventEmitter) === 'function' && _b) || Object)
    ], DroppableComponent.prototype, "onDragEnter", void 0);
    __decorate([
        core_2.Output(), 
        __metadata('design:type', (typeof (_c = typeof core_2.EventEmitter !== 'undefined' && core_2.EventEmitter) === 'function' && _c) || Object)
    ], DroppableComponent.prototype, "onDragOver", void 0);
    __decorate([
        core_2.Output(), 
        __metadata('design:type', (typeof (_d = typeof core_2.EventEmitter !== 'undefined' && core_2.EventEmitter) === 'function' && _d) || Object)
    ], DroppableComponent.prototype, "onDragLeave", void 0);
    __decorate([
        core_2.Input("allowDrop"), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Function])
    ], DroppableComponent.prototype, "allowdrop", null);
    __decorate([
        core_2.Input("dropZones"), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], DroppableComponent.prototype, "dropzones", null);
    __decorate([
        core_2.Input("effectAllowed"), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], DroppableComponent.prototype, "effectallowed", null);
    __decorate([
        core_2.Input("effectCursor"), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], DroppableComponent.prototype, "effectcursor", null);
    DroppableComponent = __decorate([
        core_2.Directive({ selector: '[dnd-droppable]' }), 
        __metadata('design:paramtypes', [(typeof (_e = typeof core_2.ElementRef !== 'undefined' && core_2.ElementRef) === 'function' && _e) || Object, (typeof (_f = typeof dnd_service_1.DragDropService !== 'undefined' && dnd_service_1.DragDropService) === 'function' && _f) || Object, (typeof (_g = typeof dnd_config_1.DragDropConfig !== 'undefined' && dnd_config_1.DragDropConfig) === 'function' && _g) || Object, (typeof (_h = typeof core_1.ChangeDetectorRef !== 'undefined' && core_1.ChangeDetectorRef) === 'function' && _h) || Object])
    ], DroppableComponent);
    return DroppableComponent;
    var _a, _b, _c, _d, _e, _f, _g, _h;
}(abstract_component_1.AbstractComponent));
exports.DroppableComponent = DroppableComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/dragdrop/sortable.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var core_2 = __webpack_require__("./node_modules/@angular/core/index.js");
var abstract_component_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/abstract.component.ts");
var dnd_config_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/dnd.config.ts");
var dnd_service_1 = __webpack_require__("./src/app/ReusableServices/dnd.service.ts");
var SortableContainer = (function (_super) {
    __extends(SortableContainer, _super);
    function SortableContainer(elemRef, dragDropService, config, cdr, _sortableDataService) {
        _super.call(this, elemRef, dragDropService, config, cdr);
        this._sortableDataService = _sortableDataService;
        this._sortableData = [];
        this.dragEnabled = false;
    }
    Object.defineProperty(SortableContainer.prototype, "draggable", {
        set: function (value) {
            this.dragEnabled = !!value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SortableContainer.prototype, "sortableData", {
        get: function () {
            return this._sortableData;
        },
        set: function (sortableData) {
            this._sortableData = sortableData;
            //
            this.dropEnabled = this._sortableData.length === 0;
            // console.log("collection is changed, drop enabled: " + this.dropEnabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SortableContainer.prototype, "dropzones", {
        set: function (value) {
            this.dropZones = value;
        },
        enumerable: true,
        configurable: true
    });
    SortableContainer.prototype._onDragEnterCallback = function (event) {
        if (this._sortableDataService.isDragged) {
            var item = this._sortableDataService.sortableData[this._sortableDataService.index];
            // Check does element exist in sortableData of this Container
            if (this._sortableData.indexOf(item) === -1) {
                // Let's add it
                // console.log('Container._onDragEnterCallback. drag node [' + this._sortableDataService.index.toString() + '] over parent node');
                // Remove item from previouse list
                this._sortableDataService.sortableData.splice(this._sortableDataService.index, 1);
                // Add item to new list
                this._sortableData.unshift(item);
                this._sortableDataService.sortableData = this._sortableData;
                this._sortableDataService.index = 0;
            }
            // Refresh changes in properties of container component
            this.detectChanges();
        }
    };
    __decorate([
        core_2.Input("dragEnabled"), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], SortableContainer.prototype, "draggable", null);
    __decorate([
        core_2.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], SortableContainer.prototype, "sortableData", null);
    __decorate([
        core_2.Input("dropZones"), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], SortableContainer.prototype, "dropzones", null);
    SortableContainer = __decorate([
        core_2.Directive({ selector: '[dnd-sortable-container]' }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_2.ElementRef !== 'undefined' && core_2.ElementRef) === 'function' && _a) || Object, (typeof (_b = typeof dnd_service_1.DragDropService !== 'undefined' && dnd_service_1.DragDropService) === 'function' && _b) || Object, (typeof (_c = typeof dnd_config_1.DragDropConfig !== 'undefined' && dnd_config_1.DragDropConfig) === 'function' && _c) || Object, (typeof (_d = typeof core_1.ChangeDetectorRef !== 'undefined' && core_1.ChangeDetectorRef) === 'function' && _d) || Object, (typeof (_e = typeof dnd_service_1.DragDropSortableService !== 'undefined' && dnd_service_1.DragDropSortableService) === 'function' && _e) || Object])
    ], SortableContainer);
    return SortableContainer;
    var _a, _b, _c, _d, _e;
}(abstract_component_1.AbstractComponent));
exports.SortableContainer = SortableContainer;
var SortableComponent = (function (_super) {
    __extends(SortableComponent, _super);
    function SortableComponent(elemRef, dragDropService, config, _sortableContainer, _sortableDataService, cdr) {
        _super.call(this, elemRef, dragDropService, config, cdr);
        this._sortableContainer = _sortableContainer;
        this._sortableDataService = _sortableDataService;
        /**
         * Callback function called when the drag action ends with a valid drop action.
         * It is activated after the on-drop-success callback
         */
        this.onDragSuccessCallback = new core_2.EventEmitter();
        this.onDragStartCallback = new core_2.EventEmitter();
        this.onDragOverCallback = new core_2.EventEmitter();
        this.onDragEndCallback = new core_2.EventEmitter();
        this.onDropSuccessCallback = new core_2.EventEmitter();
        this.dropZones = this._sortableContainer.dropZones;
        this.dragEnabled = true;
        this.dropEnabled = true;
    }
    Object.defineProperty(SortableComponent.prototype, "draggable", {
        set: function (value) {
            this.dragEnabled = !!value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SortableComponent.prototype, "droppable", {
        set: function (value) {
            this.dropEnabled = !!value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SortableComponent.prototype, "effectallowed", {
        /**
         * Drag allowed effect
         */
        set: function (value) {
            this.effectAllowed = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SortableComponent.prototype, "effectcursor", {
        /**
         * Drag effect cursor
         */
        set: function (value) {
            this.effectCursor = value;
        },
        enumerable: true,
        configurable: true
    });
    SortableComponent.prototype._onDragStartCallback = function (event) {
        // console.log('_onDragStartCallback. dragging elem with index ' + this.index);
        this._sortableDataService.isDragged = true;
        this._sortableDataService.sortableData = this._sortableContainer.sortableData;
        this._sortableDataService.index = this.index;
        this._sortableDataService.markSortable(this._elem);
        // Add dragData
        this._dragDropService.isDragged = true;
        this._dragDropService.dragData = this.dragData;
        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;
        //
        this.onDragStartCallback.emit(this._dragDropService.dragData);
    };
    SortableComponent.prototype._onDragOverCallback = function (event) {
        if (this._sortableDataService.isDragged && this._elem != this._sortableDataService.elem) {
            // console.log('_onDragOverCallback. dragging elem with index ' + this.index);
            this._sortableDataService.sortableData = this._sortableContainer.sortableData;
            this._sortableDataService.index = this.index;
            this._sortableDataService.markSortable(this._elem);
            this.onDragOverCallback.emit(this._dragDropService.dragData);
        }
    };
    SortableComponent.prototype._onDragEndCallback = function (event) {
        // console.log('_onDragEndCallback. end dragging elem with index ' + this.index);
        this._sortableDataService.isDragged = false;
        this._sortableDataService.sortableData = null;
        this._sortableDataService.index = null;
        this._sortableDataService.markSortable(null);
        // Add dragGata
        this._dragDropService.isDragged = false;
        this._dragDropService.dragData = null;
        this._dragDropService.onDragSuccessCallback = null;
        //
        this.onDragEndCallback.emit(this._dragDropService.dragData);
    };
    SortableComponent.prototype._onDragEnterCallback = function (event) {
        if (this._sortableDataService.isDragged) {
            this._sortableDataService.markSortable(this._elem);
            if ((this.index !== this._sortableDataService.index) ||
                (this._sortableDataService.sortableData != this._sortableContainer.sortableData)) {
                // console.log('Component._onDragEnterCallback. drag node [' + this.index + '] over node [' + this._sortableDataService.index + ']');
                // Get item
                var item = this._sortableDataService.sortableData[this._sortableDataService.index];
                // Remove item from previouse list
                this._sortableDataService.sortableData.splice(this._sortableDataService.index, 1);
                // Add item to new list
                this._sortableContainer.sortableData.splice(this.index, 0, item);
                this._sortableDataService.sortableData = this._sortableContainer.sortableData;
                this._sortableDataService.index = this.index;
            }
        }
    };
    SortableComponent.prototype._onDropCallback = function (event) {
        if (this._sortableDataService.isDragged) {
            // console.log('onDropCallback.onDropSuccessCallback.dragData', this._dragDropService.dragData);
            this.onDropSuccessCallback.emit(this._dragDropService.dragData);
            if (this._dragDropService.onDragSuccessCallback) {
                // console.log('onDropCallback.onDragSuccessCallback.dragData', this._dragDropService.dragData);
                this._dragDropService.onDragSuccessCallback.emit(this._dragDropService.dragData);
            }
            // Refresh changes in properties of container component
            this._sortableContainer.detectChanges();
        }
    };
    __decorate([
        core_2.Input('sortableIndex'), 
        __metadata('design:type', Number)
    ], SortableComponent.prototype, "index", void 0);
    __decorate([
        core_2.Input("dragEnabled"), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], SortableComponent.prototype, "draggable", null);
    __decorate([
        core_2.Input("dropEnabled"), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], SortableComponent.prototype, "droppable", null);
    __decorate([
        core_2.Input(), 
        __metadata('design:type', Object)
    ], SortableComponent.prototype, "dragData", void 0);
    __decorate([
        core_2.Input("effectAllowed"), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], SortableComponent.prototype, "effectallowed", null);
    __decorate([
        core_2.Input("effectCursor"), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], SortableComponent.prototype, "effectcursor", null);
    __decorate([
        core_2.Output("onDragSuccess"), 
        __metadata('design:type', (typeof (_a = typeof core_2.EventEmitter !== 'undefined' && core_2.EventEmitter) === 'function' && _a) || Object)
    ], SortableComponent.prototype, "onDragSuccessCallback", void 0);
    __decorate([
        core_2.Output("onDragStart"), 
        __metadata('design:type', (typeof (_b = typeof core_2.EventEmitter !== 'undefined' && core_2.EventEmitter) === 'function' && _b) || Object)
    ], SortableComponent.prototype, "onDragStartCallback", void 0);
    __decorate([
        core_2.Output("onDragOver"), 
        __metadata('design:type', (typeof (_c = typeof core_2.EventEmitter !== 'undefined' && core_2.EventEmitter) === 'function' && _c) || Object)
    ], SortableComponent.prototype, "onDragOverCallback", void 0);
    __decorate([
        core_2.Output("onDragEnd"), 
        __metadata('design:type', (typeof (_d = typeof core_2.EventEmitter !== 'undefined' && core_2.EventEmitter) === 'function' && _d) || Object)
    ], SortableComponent.prototype, "onDragEndCallback", void 0);
    __decorate([
        core_2.Output("onDropSuccess"), 
        __metadata('design:type', (typeof (_e = typeof core_2.EventEmitter !== 'undefined' && core_2.EventEmitter) === 'function' && _e) || Object)
    ], SortableComponent.prototype, "onDropSuccessCallback", void 0);
    SortableComponent = __decorate([
        core_2.Directive({ selector: '[dnd-sortable]' }), 
        __metadata('design:paramtypes', [(typeof (_f = typeof core_2.ElementRef !== 'undefined' && core_2.ElementRef) === 'function' && _f) || Object, (typeof (_g = typeof dnd_service_1.DragDropService !== 'undefined' && dnd_service_1.DragDropService) === 'function' && _g) || Object, (typeof (_h = typeof dnd_config_1.DragDropConfig !== 'undefined' && dnd_config_1.DragDropConfig) === 'function' && _h) || Object, SortableContainer, (typeof (_j = typeof dnd_service_1.DragDropSortableService !== 'undefined' && dnd_service_1.DragDropSortableService) === 'function' && _j) || Object, (typeof (_k = typeof core_1.ChangeDetectorRef !== 'undefined' && core_1.ChangeDetectorRef) === 'function' && _k) || Object])
    ], SortableComponent);
    return SortableComponent;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
}(abstract_component_1.AbstractComponent));
exports.SortableComponent = SortableComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/expandCollapse/expandCollapseTrigger.html":
/***/ (function(module, exports) {

module.exports = "<style>\r\n    span.fa {\r\n        cursor: pointer;\r\n        margin-right: 5px;\r\n    }\r\n</style>\r\n\r\n<span [class]=\"triggerCss\" (click)=\"toggle()\" aria-hidden=\"true\"></span>"

/***/ }),

/***/ "./src/app/ReusableComponents/expandCollapse/expandCollapseTrigger.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Created by vikhnv2 on 5/19/2016.
 */
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var ExpandCollapseTrigger = (function () {
    function ExpandCollapseTrigger() {
    }
    ExpandCollapseTrigger.prototype.ngOnChanges = function (changes) {
        if (changes['collapsed']) {
            this.setCss();
        }
    };
    ExpandCollapseTrigger.prototype.toggle = function () {
        this.owner.collapsed = this.collapsed = !this.collapsed;
        this.owner['selectedColumnName'] = this.columnName;
        this.setCss();
    };
    ExpandCollapseTrigger.prototype.setCss = function () {
        this.triggerCss = "fa " + (this.collapsed ? "fa-plus-circle" : "fa-minus-circle");
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], ExpandCollapseTrigger.prototype, "collapsed", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], ExpandCollapseTrigger.prototype, "owner", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], ExpandCollapseTrigger.prototype, "columnName", void 0);
    ExpandCollapseTrigger = __decorate([
        core_1.Component({
            selector: 'ec-trigger',
            template: __webpack_require__("./src/app/ReusableComponents/expandCollapse/expandCollapseTrigger.html")
        }), 
        __metadata('design:paramtypes', [])
    ], ExpandCollapseTrigger);
    return ExpandCollapseTrigger;
}());
exports.ExpandCollapseTrigger = ExpandCollapseTrigger;


/***/ }),

/***/ "./src/app/ReusableComponents/formBuilder/formBuilder.html":
/***/ (function(module, exports) {

module.exports = "<article Id=\"editConfigPage\" *ngIf=\"visiblePlugin\">\r\n    <div class=\"{{nodeClass}}\">\r\n        <form #genericForm=\"ngForm\" (ngSubmit)=\"saveClicked()\">\r\n            <template ngFor let-ln [ngForOf]=\"editViewRowDataTable\">\r\n                <div class=\"form-group\">\r\n                    <template [ngIf]=\"(ln.isVisible != undefined ? ln.isVisible : true) && (ln.htmlControlType != 'text' || ln.htmlControlType.indexOf('date') == 0)\">\r\n                        <!-- because of material design inputs, don't show this label if the field is a text, date -->\r\n                        <label [attr.for]=\"ln.sequence\" class=\"mb-0\"><strong>{{ln.label | LocalizationTranslate}}:</strong></label>\r\n                    </template>\r\n                    <template [ngIf]=\"(ln.htmlControlType =='text' || ln.htmlControlType == 'textarea' || ln.htmlControlType.indexOf('date') >= 0 && ((ln.isVisible != undefined ? ln.isVisible : true) || ln.isAlwaysVisibleOn.indexOf('FormBuilder') > -1 ))\">\r\n                        <div class=\"mat-input-wrapper\">\r\n                            <div class=\"mat-input-table\">\r\n                                <div class=\"mat-input-infix\">\r\n                                    <input name={{ln.label}} #name=\"ngModel\" class=\"mat-input-element\" [attr.Id]=\"ln.sequence\" type={{ln.htmlControlType}} [(ngModel)]=\"ln.val\" checked={{ln.val}}\r\n                                           (click)=\"inputClicked(ln);\" (focus)=\"ln.editing = true\" (focusout)=\"ln.editing = false\" (blur)=\"onBlur(ln)\" [disabled]=\"!ln.isVisible || ln.readOnly\" [required]=\"ln.required\"\r\n                                           [pattern]=\"ln.pattern\" [title]=\"ln.title\" [minlength]=\"ln.minlength\" [maxlength]=\"ln.maxlength\">\r\n                                    <label [attr.for]=\"ln.sequence\" class=\"mat-input-placeholder\"\r\n                                           [class.mat-editing]=\"ln.editing == true\" [class.mat-input-placeholder-floating]=\"ln.val != '' || ln.editing == true\">\r\n                                        <strong>{{ln.label | LocalizationTranslate}}</strong>\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"mat-input-underline\" [ngClass]=\"ln.editing == true ? 'mat-editing' : ''\"></div>\r\n                            <br>\r\n                        </div>\r\n                        <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                            {{ln.label}} - {{\"ValidInputRequired\" | LocalizationTranslate}}\r\n                        </div>\r\n                        <template [ngIf]=\"ln.isToggleable\">\r\n                            <formBuilderInline [PageType]='edit' [pluginInput]=\"ln.isComplexTypeInlineTemplate\" [gridSettings]=\"ln.isComplexTypeInlineTemplateConfig\"></formBuilderInline>\r\n                        </template>\r\n                    </template>\r\n                    <template [ngIf]=\"ln.htmlControlType === 'checkbox'\">\r\n                        <input name={{ln.label}} class=\"form-control\" #name=\"ngModel\" [attr.Id]=\"ln.sequence\" type=\"checkbox\" [(ngModel)]=\"ln.val\" [disabled]=\"!ln.isVisible || ln.readOnly\"\r\n                               (click)=\"inputClicked(ln)\">\r\n                        <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                            {{ln.label}} - {{\"ValidInputRequired\" | LocalizationTranslate}}\r\n                        </div>\r\n                    </template>\r\n                    <template [ngIf]=\"ln.htmlControlType === 'select'\">\r\n                        <select name={{ln.label}} class=\"form-control\" #name=\"ngModel\" [(ngModel)]=\"ln.val\" [attr.Id]=\"ln.sequence\" [required]=\"ln.isRequired && !isRulesValidation\"\r\n                                [disabled]=\"!ln.isVisible || ln.readOnly || ln.name == getForeignKeyColumnName()\">\r\n                            <option *ngFor=\"let itemOption of ln.dataSource\" value=\"{{itemOption.Value}}\" selected=\"ln.val == itemOption.Value\">{{itemOption.Description}}</option>\r\n                        </select>\r\n                        <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                            {{ln.label}} - {{\"ValidInputRequired\" | LocalizationTranslate}}\r\n                        </div>\r\n                    </template>\r\n                    <template [ngIf]=\"ln.htmlControlType === 'customselect' && (ln.isVisible != undefined ? ln.isVisible : true)\">\r\n                        <customDropDown [DataSource]=\"ln.customdataSource\" [selectedValue]=\"ln.val\" [Disabled]=\"ln.readOnly != undefined ? ln.readOnly : false\" (DropDownEmitter)=\"getDropDownResult($event,ln)\"></customDropDown>\r\n                    </template>\r\n                    <template [ngIf]=\"ln.htmlControlType === 'checkboxlist' && (ln.isVisible != undefined ? ln.isVisible : true)\">\r\n                        <checkBoxList [DataSource]=\"ln.dataSource\" [(ngModel)]=\"ln.val\" name=\"{{ln.label}}\" #name=\"ngModel\"\r\n                                      [Disabled]=\"ln.readOnly != undefined ? ln.readOnly : false\"></checkBoxList>\r\n                        <!--\r\n                         <checkBoxList [DataSource]=\"ln.dataSource\" [(ngModel)]=\"ln.val\" name=\"{{ln.label}}\" ngDefaultControl (ngModelChange)=\"onChange($event)\"\r\n                                      [Disabled]=\"ln.readOnly != undefined ? ln.readOnly : false\"></checkBoxList>\r\n                        -->\r\n                    </template>\r\n                    <template [ngIf]=\"ln.htmlControlType === 'radio'\">\r\n                        <template ngFor let-itemOption [ngForOf]=\"ln.dataSource\">\r\n                            <br/><input type=\"radio\" [checked]=\"(itemOption.Value === ln.val)\"\r\n                                        [value]=\"itemOption.Value\" name=\"modeSelector\" [(ngModel)]=\"ln.val\"\r\n                                        [disabled]=\"!ln.isVisible || ln.readOnly\" [required]=\"ln.required\">\r\n                            <span>{{itemOption.Description}}</span>\r\n                        </template>\r\n                        <!--<div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                            {{ln.label}} - {{\"ValidInputRequired\" | LocalizationTranslate}}\r\n                        </div>-->\r\n                    </template>\r\n                    <template [ngIf]=\"ln.htmlControlType === 'upload'\">\r\n                        <customUploader [UploadOptions]=\"uploadOptions\" [Disabled]=\"ln.readOnly != undefined ? ln.readOnly : false\"></customUploader>\r\n                    </template>\r\n                    <template *ngIf=\"ln.isVisible\" ngFor let-er [ngForOf]=\"ln.errors\">\r\n                        <div class=\"alert alert-danger\">\r\n                            {{er | LocalizationTranslate}}\r\n                        </div>\r\n                    </template>\r\n                </div>\r\n            </template>\r\n            <div id=\"buttons\">\r\n                <template [ngIf]=\"PageType!='dynamicform'\">\r\n                    <button type=\"submit\" [disabled]=\"!genericForm.form.valid\" title=\"{{'Save' | LocalizationTranslate}}\" class=\"button-standard \" *ngIf=\"PageType != 'view'\">\r\n                        <span class=\"fa fa-floppy-o fa-lg\"></span>\r\n                        {{\"Save\" | LocalizationTranslate}}\r\n                    </button>\r\n                    <button type=\"button\" title=\"{{'Cancel' | LocalizationTranslate}}\" (click)=\"cancelClicked()\" class=\"button-standard \" *ngIf=\"!IsHideCancel\">\r\n                        <span class=\"fa fa-ban fa-lg\"></span>\r\n                        {{\"Cancel\" | LocalizationTranslate}}\r\n                    </button>\r\n                </template>\r\n                <template ngFor let-childButton [ngForOf]=\"customButtonsList\">\r\n                    <button *ngIf=\"childButton.visible != undefined ? childButton.visible : true\" type=\"button\" title=\"{{childButton.name | LocalizationTranslate}}\"\r\n                            [disabled]=\"childButton.disabled != undefined ? childButton.disabled : false\"\r\n                            class=\"button-standard \" (click)=\"customButtonClicked(childButton)\">\r\n                        {{childButton.name | LocalizationTranslate}}\r\n                    </button>\r\n                </template>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</article>\r\n\r\n<article id=\"pluginSection\">\r\n    <div #dynamicplugin></div>\r\n</article>\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/formBuilder/formBuilder.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var sqlQueryBuilder_1 = __webpack_require__("./src/app/ReusableComponents/sqlQueryBuilder/sqlQueryBuilder.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var uploadService_1 = __webpack_require__("./src/app/ReusableServices/uploadService.ts");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var ruleService_1 = __webpack_require__("./src/app/ReusableServices/ruleService.ts");
var FormBuilder = (function () {
    function FormBuilder(alert, elementRef, appSettingsService, apiAbstract, matrixService, intFormSvc, componentFactoryResolver, uploaderSvc, ruleService) {
        this.appSettingsService = appSettingsService;
        this.apiAbstract = apiAbstract;
        this.matrixService = matrixService;
        this.intFormSvc = intFormSvc;
        this.componentFactoryResolver = componentFactoryResolver;
        this.uploaderSvc = uploaderSvc;
        this.ruleService = ruleService;
        this.pluginValue = "";
        this.visiblePlugin = true;
        this.showValidation = false;
        this.enableInsert = false;
        this.formBuilderNotifier = new core_1.EventEmitter();
        this.title = "Form";
        this.pluginInput = [];
        this.isEmptyResult = false;
        this.editViewRowDataTable = [];
        this.PageType = "view";
        this.pageName = "";
        this.IsHideCancel = false;
        this.customButtonsList = [];
        this.isRulesValidation = false;
        this.alert = alert;
        this.elemRef = elementRef;
    }
    FormBuilder.prototype.ngOnInit = function () {
        var self = this;
        this.editViewRowDataTable = this.pluginInput;
        if (this.gridSettings && this.gridSettings["CustomButtons"]) {
            this.customButtonsList = this.gridSettings["CustomButtons"];
        }
        if (this.gridSettings["RulesConfig"]) {
            this.isRulesValidation = true;
        }
        for (var colInd in this.editViewRowDataTable) {
            var column = this.editViewRowDataTable[colInd];
            var uploadControl = this.gridSettings.ColumnConfiguration.find(function (x) {
                return (x.dbColumnName === column.name && column.htmlControlType === "upload");
            });
            if (uploadControl) {
                self.uploadCompleteSubscription = this.uploaderSvc.notifyUploadComplete.subscribe(function (response) {
                    self.uploadCompleteNotifier(uploadControl.dbColumnName, response);
                });
                if (uploadControl.hasOwnProperty("UploadOptions")) {
                    this.uploadOptions = uploadControl.UploadOptions;
                }
            }
        }
    };
    FormBuilder.prototype.ngOnDestroy = function () {
        if (this.cmpRef) {
            this.cmpRef.destroy();
        }
        if (this.uploadCompleteSubscription) {
            this.uploadCompleteSubscription.unsubscribe();
        }
    };
    FormBuilder.prototype.injectDataAndConfig = function (data, config, pageType) {
        this.gridSettings = config;
        this.PageType = pageType;
        this.editViewRowDataTable = data;
    };
    FormBuilder.prototype.updatePluginValue = function () {
        var primaryColumnName = this.matrixService.getPrimaryColumnName(this.gridSettings);
        this.pluginValue = this.matrixService.buildJSONObject(this.editViewRowDataTable, primaryColumnName);
    };
    FormBuilder.prototype.saveClicked = function () {
        this.updatePluginValue();
        if (this.ruleService.validateRulesByRulesConfig(this.pluginValue, this.gridSettings["RulesConfig"], this.editViewRowDataTable)) {
            switch (this.PageType.toLowerCase()) {
                case "edit":
                    this.UpdatePage(this.pluginValue);
                    break;
                case "add":
                    this.InsertPage(this.pluginValue);
                    break;
                case "dynamicform":
                    this.customButtonClicked('save');
                    break;
                default:
                    this.returnCallBack("cancel");
            }
        }
    };
    FormBuilder.prototype.cancelClicked = function () {
        if (this.PageType.toLowerCase() == 'dynamicform') {
            this.customButtonClicked('cancel');
        }
        else {
            this.returnCallBack("cancel");
        }
    };
    FormBuilder.prototype.inputClicked = function (input) {
        var _this = this;
        if (input === undefined) {
            return;
        }
        if (this.cmpRef) {
            // when the `type` input changes we destroy a previously
            // created component before creating the new one
            this.cmpRef.destroy();
        }
        this.selectedInput = input;
        var inputConfig = this.gridSettings.ColumnConfiguration.find(function (z) { return z.dbColumnName === input.name; });
        if (inputConfig.isComplexTypeInline) {
            input.isToggleable = true;
            this.interFormsService.assignControl(input);
        }
        if (inputConfig.isComplexType) {
            this.selectionArray = inputConfig.selections;
            var factory = this.componentFactoryResolver.resolveComponentFactory(sqlQueryBuilder_1.sqlQueryBuilder);
            this.cmpRef = this.target.createComponent(factory);
            this.cmpRef.instance.pluginInput = input.val;
            this.outputNotifierObservable = this.cmpRef.instance.outputNotifier.subscribe(function (updateValue) {
                _this.UpdateLookupDaysPluginValue(input.sequence, updateValue.value);
            });
        }
    };
    FormBuilder.prototype.onBlur = function (input) {
        if (input === undefined) {
            return;
        }
        var inputConfig = this.gridSettings.ColumnConfiguration.find(function (z) { return z.dbColumnName === input.name; });
        if (inputConfig && inputConfig.isEmitEvent) {
            this.updatePluginValue();
            this.formBuilderNotifier.emit({
                value: input.val,
                controlName: input.name
            });
        }
    };
    FormBuilder.prototype.UpdateLookupDaysPluginValue = function (seq, input) {
        var data = this.editViewRowDataTable;
        if (data[seq] != undefined) {
            data[seq].val = input;
        }
        this.outputNotifierObservable.unsubscribe();
    };
    FormBuilder.prototype.daysClicked = function (selectionObj) {
        var selectedTag = selectionObj["val"];
        this.selectedInput.val = this.parseInput(this.selectedInput.val, selectedTag);
    };
    FormBuilder.prototype.parseInput = function (controlInput, uiInput) {
        var controlInputArray = controlInput.split(',');
        var newArray = new Array();
        var exists = controlInputArray.find(function (x) {
            return (x === uiInput);
        });
        if (exists) {
            controlInputArray.forEach(function (x) {
                if (x !== uiInput) {
                    newArray.push(x);
                }
            });
            return newArray.toString();
        }
        else {
            controlInputArray.push(uiInput);
            return controlInputArray.toString();
        }
    };
    FormBuilder.prototype.UpdatePage = function (returnData) {
        var _this = this;
        var PrimaryKeyColumn = undefined;
        if (this.httpProxy != undefined) {
            if (this.gridSettings["PrimaryKeyColumn"] != undefined && this.gridSettings["PrimaryKeyColumn"] != "") {
                PrimaryKeyColumn = this.gridSettings["PrimaryKeyColumn"];
            }
            this.httpProxy.ExecuteUpdate(returnData, this.pageName, PrimaryKeyColumn)
                .subscribe(function (res) {
                _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.saveConfirmedMsg);
                _this.returnCallBack(_this.pluginValue);
            }, function (error) {
                _this.alert.error("async error #" + error.status);
            }, function () {
            });
        }
    };
    FormBuilder.prototype.InsertPage = function (data) {
        var _this = this;
        if (this.httpProxy != undefined) {
            this.httpProxy.ExecuteInsert(data, this.pageName)
                .subscribe(function (res) {
                _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.insertMSG);
                _this.returnCallBack(_this.pluginValue);
            }, function (error) {
                _this.alert.error("async error #" + error.status);
            }, function () {
            });
        }
    };
    FormBuilder.prototype.returnCallBack = function (returnData) {
        this.formBuilderNotifier.emit({
            value: returnData
        });
        this.visiblePlugin = false;
    };
    FormBuilder.prototype.getForeignKeyColumnName = function () {
        var foreignKeyColumn = "";
        if (this.gridSettings["ForeignKeyColumn"] != undefined && this.gridSettings["ForeignKeyColumn"] != "") {
            foreignKeyColumn = this.gridSettings["ForeignKeyColumn"];
        }
        return foreignKeyColumn;
    };
    FormBuilder.prototype.getDropDownResult = function (result, obj) {
        var dropDownId = 0;
        obj.val = result.Value;
        if (obj.name) {
            var tempControl = this.gridSettings.ColumnConfiguration.find(function (c) { return c.dbColumnName == obj.name; });
            dropDownId = obj.val;
            if (tempControl && tempControl.associatedDropdownControl) {
                var x = this.editViewRowDataTable.find(function (p) { return p.name == tempControl.associatedDropdownControl; });
                x["customdataSource"] = [];
                var tempdbColumnName = this.matrixService.getdbColumnNameForDataSourceAddress(x.dataSourceAddress);
                var tempCustomDropdownSource = x.masterdataSource.filter(function (c) { return c[tempdbColumnName] == dropDownId; });
                if (tempCustomDropdownSource) {
                    x["customdataSource"] = this.matrixService.getArrayDataSource(tempCustomDropdownSource, x.dataSourceAddress["displayColumnName"], tempdbColumnName, x.dataSourceAddress["defaultValue"]);
                }
                x.val = "";
            }
            if (this.PageType.toLowerCase() == 'dynamicform') {
                this.customDropDownChanged(obj.name, dropDownId);
            }
        }
    };
    /* getCheckBoxListResult(result, obj) {
         obj.val = result.value.map(opt => opt.value);
         this.updatePluginValue();
     }*/
    FormBuilder.prototype.customDropDownChanged = function (controlName, value) {
        this.updatePluginValue();
        this.formBuilderNotifier.emit({
            value: value,
            controlName: controlName
        });
    };
    FormBuilder.prototype.customButtonClicked = function (customButton) {
        var result = true;
        this.updatePluginValue();
        if (customButton.formValidate) {
            result = this.ruleService.validateRulesByRulesConfig(this.pluginValue, this.gridSettings["RulesConfig"], this.editViewRowDataTable);
        }
        if (result) {
            this.intFormSvc.startSpinner('page', 'Generating report...');
            this.formBuilderNotifier.emit({
                value: this.pluginValue,
                controlName: customButton.name
            });
        }
    };
    FormBuilder.prototype.uploadCompleteNotifier = function (controlName, uploadStatus) {
        if (uploadStatus === void 0) { uploadStatus = null; }
        var uploadControl = this.editViewRowDataTable.find(function (p) { return p.name == controlName; });
        uploadControl.val = uploadStatus;
        this.updatePluginValue();
        this.formBuilderNotifier.emit({
            value: this.pluginValue,
            controlName: controlName
        });
    };
    FormBuilder.prototype.onChange = function (output) {
        console.log(output);
    };
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], FormBuilder.prototype, "formBuilderNotifier", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], FormBuilder.prototype, "title", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FormBuilder.prototype, "pluginInput", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FormBuilder.prototype, "gridSettings", void 0);
    __decorate([
        core_1.Input('PageType'), 
        __metadata('design:type', String)
    ], FormBuilder.prototype, "PageType", void 0);
    __decorate([
        core_1.Input('pageName'), 
        __metadata('design:type', String)
    ], FormBuilder.prototype, "pageName", void 0);
    __decorate([
        core_1.Input('httpProxy'), 
        __metadata('design:type', Object)
    ], FormBuilder.prototype, "httpProxy", void 0);
    __decorate([
        core_1.Input('IsHideCancel'), 
        __metadata('design:type', Boolean)
    ], FormBuilder.prototype, "IsHideCancel", void 0);
    __decorate([
        core_1.Input('NodeClass'), 
        __metadata('design:type', String)
    ], FormBuilder.prototype, "nodeClass", void 0);
    __decorate([
        core_1.ViewChild('dynamicplugin', { read: core_1.ViewContainerRef }), 
        __metadata('design:type', (typeof (_a = typeof core_1.ViewContainerRef !== 'undefined' && core_1.ViewContainerRef) === 'function' && _a) || Object)
    ], FormBuilder.prototype, "target", void 0);
    FormBuilder = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/ReusableComponents/formBuilder/formBuilder.html"),
            selector: 'formBuilder',
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object, (typeof (_c = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _c) || Object, (typeof (_d = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _d) || Object, (typeof (_e = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _e) || Object, (typeof (_f = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _f) || Object, (typeof (_g = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _g) || Object, (typeof (_h = typeof core_1.ComponentFactoryResolver !== 'undefined' && core_1.ComponentFactoryResolver) === 'function' && _h) || Object, (typeof (_j = typeof uploadService_1.Ng2Uploader !== 'undefined' && uploadService_1.Ng2Uploader) === 'function' && _j) || Object, (typeof (_k = typeof ruleService_1.RuleService !== 'undefined' && ruleService_1.RuleService) === 'function' && _k) || Object])
    ], FormBuilder);
    return FormBuilder;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
}());
exports.FormBuilder = FormBuilder;


/***/ }),

/***/ "./src/app/ReusableComponents/formBuilderInline/formBuilderInline.html":
/***/ (function(module, exports) {

module.exports = "<article Id=\"editConfigPage\">\r\n    <div class=\"col-md-12\">\r\n        <section Id=\"editForm\">\r\n            <form #genericformInline=\"ngForm\" (ngSubmit)=\"saveClicked()\">\r\n                <template ngFor let-ln [ngForOf]=\"editViewRowDataTable\">\r\n                    <div class=\"form-group\">\r\n                        <label [attr.for]=\"ln.sequence\">{{ln.label}}:</label>\r\n                        <div *ngIf=\"ln.htmlControlType !== 'select' && ln.htmlControlType !== 'radio' && ln.htmlControlType !== 'checkbox'\">\r\n                            <input name={{ln.label}} #name=\"ngModel\" [attr.Id]=\"ln.sequence\" type={{ln.htmlControlType}} [(ngModel)]=\"ln.val\" checked={{ln.val}}\r\n                                   (click)=\"inputClicked(ln)\" [disabled]=\"!ln.isVisible || ln.readOnly\" [required]=\"ln.isRequired && !gridSettings['RulesConfig']\">\r\n                            <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                                Valid input for {{ln.label}} is required\r\n                            </div>\r\n                            <div>\r\n                                <formBuilder></formBuilder>\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"ln.htmlControlType === 'checkbox'\">\r\n                            <input name={{ln.label}} #name=\"ngModel\" [attr.Id]=\"ln.sequence\" type=\"checkbox\" [(ngModel)]=\"ln.val\" [disabled]=\"!ln.isVisible || ln.readOnly\" (click)=\"inputClicked(ln)\" [required]=\"ln.isRequired\">\r\n                        </div>\r\n                        <div *ngIf=\"ln.htmlControlType === 'select'\">\r\n                            <select name={{ln.label}} #name=\"ngModel\" [(ngModel)]=\"ln.val\" [attr.Id]=\"ln.sequence\" [required]=\"ln.isRequired && !gridSettings['RulesConfig']\" [disabled]=\"!ln.isVisible || ln.readOnly\">\r\n                                <option *ngFor=\"let itemOption of ln.dataSource\" value=\"{{itemOption.Value}}\">{{itemOption.Description}}</option>\r\n                            </select>\r\n                            <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                                Valid input for {{ln.label}} is required\r\n                            </div>\r\n                        </div>\r\n                        <div *ngIf=\"ln.htmlControlType === 'radio'\">\r\n                                <span *ngFor=\"let itemOption of ln.dataSource\">\r\n                                    <div class=\"row\">\r\n                                        <input name=\"ln.objId\" type=\"radio\" [(ngModel)]=\"ln.val\" [disabled]=\"!ln.isVisible || ln.readOnly\" value=\"{{itemOption}}\"><span class=\"float-xs-left\">{{' ' + itemOption + '    '}}</span><br/>\r\n                                    </div>\r\n                                </span>\r\n                                <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                                    Valid input for {{ln.label}} is required\r\n                                </div>\r\n                        </div>\r\n                        <template ngFor let-er [ngForOf]=\"ln.errors\">\r\n                            <div class=\"alert alert-danger\">\r\n                                {{er | LocalizationTranslate}}\r\n                            </div>\r\n                        </template>\r\n                    </div>\r\n                </template>\r\n                <div id=\"buttons\">\r\n                    <!--[disabled]=\"!genericformInline.form.valid\"-->\r\n                    <button type=\"submit\" [disabled]=\"!genericformInline.form.valid\" class=\"button-standard \" *ngIf=\"PageType != 'view'\">\r\n                        <span class=\"fa fa-floppy-o fa-lg\"></span>\r\n                        Save\r\n                    </button>\r\n                    <button type=\"button\" (click)=\"cancelClicked()\" class=\"button-standard \">\r\n                        <span class=\"fa fa-ban fa-lg\"></span>\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n\r\n            </form>\r\n        </section>\r\n    </div>\r\n</article>\r\n<!--\r\n<article id=\"pluginSection\">\r\n    <div #dynamicplugin></div>\r\n</article>-->\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/formBuilderInline/formBuilderInline.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//import {FORM_DIRECTIVES} from "angular2/common";
//import {RadioControlValueAccessor} from "../inputControls/radio_value_accessor";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var ruleService_1 = __webpack_require__("./src/app/ReusableServices/ruleService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var FormBuilderInline = (function () {
    function FormBuilderInline(alt, elementRef, compiler, appSettingsService, matrixService, intFormSer, ruleService) {
        this.alt = alt;
        this.elementRef = elementRef;
        this.compiler = compiler;
        this.appSettingsService = appSettingsService;
        this.matrixService = matrixService;
        this.intFormSer = intFormSer;
        this.ruleService = ruleService;
        this.pluginValue = "";
        this.visiblePlugin = true;
        this.showValidation = false;
        this.enableInsert = false;
        this.formBuilderNotifier = new core_1.EventEmitter();
        this.title = "Form";
        this.isEmptyResult = false;
        this.PageType = "view";
        this.pageName = "";
        this.alert = alt;
        this.elemRef = elementRef;
        //this.dc = dcl;
        this.interFormService = intFormSer;
    }
    FormBuilderInline.prototype.ngOnInit = function () {
        this.editViewRowDataTable = this.pluginInput;
    };
    FormBuilderInline.prototype.saveClicked = function () {
        var primaryColumnName = this.matrixService.getPrimaryColumnName(this.gridSettings);
        this.pluginValue = this.matrixService.buildJSONObject(this.editViewRowDataTable, primaryColumnName);
        if (this.ruleService.validateRulesByRulesConfig(this.pluginValue, this.gridSettings["RulesConfig"], this.editViewRowDataTable)) {
            this.interFormService.saveValueInControl(this.pluginValue);
        }
    };
    FormBuilderInline.prototype.cancelClicked = function () {
        this.returnCallBack("cancel");
    };
    FormBuilderInline.prototype.inputClicked = function (input) {
        if (input === undefined) {
            return;
        }
        this.selectedInput = input;
        var inputConfig = this.gridSettings.ColumnConfiguration.find(function (z) { return z.dbColumnName === input.name; });
        if (inputConfig.isComplexTypeInline) {
            input.isToggleable = true;
        }
        if (inputConfig.isComplexType) {
            this.selectionArray = inputConfig.selections;
            var element = document.getElementById("CustomPlugin");
            if (element === undefined) {
            }
        }
    };
    FormBuilderInline.prototype.UpdateLookupDaysPluginValue = function (seq, inputvalue) {
        var data = this.editViewRowDataTable;
        if (data[seq] != undefined) {
            data[seq].val = inputvalue;
        }
    };
    FormBuilderInline.prototype.daysClicked = function (selectionObj) {
        var selectedTag = selectionObj["val"];
        this.selectedInput.val = this.parseInput(this.selectedInput.val, selectedTag);
    };
    FormBuilderInline.prototype.parseInput = function (controlInput, uiInput) {
        var controlInputArray = controlInput.split(',');
        var newArray = new Array();
        var exists = controlInputArray.find(function (x) {
            return (x === uiInput);
        });
        if (exists) {
            controlInputArray.forEach(function (x) {
                if (x !== uiInput) {
                    newArray.push(x);
                }
            });
            return newArray.toString();
        }
        else {
            controlInputArray.push(uiInput);
            return controlInputArray.toString();
        }
    };
    FormBuilderInline.prototype.UpdatePage = function (returndata) {
        var _this = this;
        var PrimaryKeyColumn = undefined;
        if (this.httpProxy != undefined) {
            if (this.gridSettings["PrimaryKeyColumn"] != undefined && this.gridSettings["PrimaryKeyColumn"] != "") {
                PrimaryKeyColumn = this.gridSettings["PrimaryKeyColumn"];
            }
            this.httpProxy.ExecuteUpdate(returndata, this.pageName, PrimaryKeyColumn)
                .subscribe(function (res) {
                //alert("Record updated successfully");
                _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.saveConfirmedMsg);
                _this.returnCallBack(_this.pluginValue);
            }, function (error) {
                _this.alert.error("async error #" + error.status);
            }, function () { });
        }
    };
    FormBuilderInline.prototype.InsertPage = function (data) {
        var _this = this;
        if (this.httpProxy != undefined) {
            this.httpProxy.ExecuteInsert(data, this.pageName)
                .subscribe(function (res) {
                //  alert("Record inserted successfully");
                _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.insertMSG);
                _this.returnCallBack(_this.pluginValue);
            }, function (error) {
                _this.alert.error("async error #" + error.status);
            }, function () { });
        }
    };
    FormBuilderInline.prototype.returnCallBack = function (returndata) {
        this.formBuilderNotifier.emit({
            value: returndata
        });
        this.visiblePlugin = false;
    };
    FormBuilderInline.prototype.getPrimaryColumnName = function () {
        var primaryKeyColumn = "Id";
        if (this.gridSettings["PrimaryKeyColumn"] != undefined && this.gridSettings["PrimaryKeyColumn"] != "") {
            primaryKeyColumn = this.gridSettings["PrimaryKeyColumn"];
        }
        return primaryKeyColumn;
    };
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], FormBuilderInline.prototype, "formBuilderNotifier", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], FormBuilderInline.prototype, "title", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FormBuilderInline.prototype, "pluginInput", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], FormBuilderInline.prototype, "gridSettings", void 0);
    __decorate([
        core_1.Input('PageType'), 
        __metadata('design:type', String)
    ], FormBuilderInline.prototype, "PageType", void 0);
    __decorate([
        core_1.Input('pageName'), 
        __metadata('design:type', String)
    ], FormBuilderInline.prototype, "pageName", void 0);
    __decorate([
        core_1.Input('httpProxy'), 
        __metadata('design:type', Object)
    ], FormBuilderInline.prototype, "httpProxy", void 0);
    __decorate([
        core_1.ViewChild('placeholder', { read: core_1.ViewContainerRef }), 
        __metadata('design:type', Object)
    ], FormBuilderInline.prototype, "viewContainerRef", void 0);
    FormBuilderInline = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/ReusableComponents/formBuilderInline/formBuilderInline.html"),
            selector: 'formBuilderInline',
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _a) || Object, (typeof (_b = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _b) || Object, (typeof (_c = typeof core_1.Compiler !== 'undefined' && core_1.Compiler) === 'function' && _c) || Object, (typeof (_d = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _d) || Object, (typeof (_e = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _e) || Object, (typeof (_f = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _f) || Object, (typeof (_g = typeof ruleService_1.RuleService !== 'undefined' && ruleService_1.RuleService) === 'function' && _g) || Object])
    ], FormBuilderInline);
    return FormBuilderInline;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.FormBuilderInline = FormBuilderInline;


/***/ }),

/***/ "./src/app/ReusableComponents/inlineEditForm/inlineEditForm.html":
/***/ (function(module, exports) {

module.exports = "<article Id=\"editInlinePage\">\r\n    <div class=\"col-md-12 col-lg-9 col-xl-6\">\r\n        <div class=\"card card-block\">\r\n            <form #genericInlineEditForm=\"ngForm\" (ngSubmit)=\"saveClicked()\">\r\n                <div id=\"buttons\">\r\n                    <button type=\"submit\" [disabled]=\"!genericInlineEditForm.form.valid\" class=\"button-standard \">\r\n                        <span class=\"fa fa-floppy-o fa-lg\"></span>\r\n                    </button>\r\n                    <button type=\"button\" (click)=\"cancelClicked()\" class=\"button-standard \">\r\n                        <span class=\"fa fa-ban fa-lg\"></span>\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <template ngFor let-cellNode [ngForOf]=\"columns\">\r\n                    <template [ngIf]=\"cellNode.isVisible\">\r\n                        <div class=\"form-group\">\r\n                            <label><strong>{{cellNode.label}}</strong></label>\r\n                            <template [ngIf]=\"cellNode.htmlControlType !== 'select' && cellNode.htmlControlType !== 'radio' && cellNode.htmlControlType !== 'checkbox'\">\r\n                                <input name=\"{{cellNode.label}}\" #name=\"ngModel\" class=\"form-control\" [attr.Id]=\"cellNode.sequence\" type={{cellNode.htmlControlType}}\r\n                                       [(ngModel)]=\"cellNode.val\" checked={{cellNode.val}} (click)=\"inputClicked(cellNode)\" [required]=\"cellNode.isRequired && !gridSettings['RulesConfig']\" [disabled]=\"!cellNode.isVisible || cellNode.readOnly\">\r\n                                <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                                    Valid input for {{cellNode.label}} is required\r\n                                </div>\r\n                            </template>\r\n                            <template [ngIf]=\"cellNode.htmlControlType === 'checkbox'\">\r\n                                <input name=\"{{cellNode.label}}\" class=\"form-control\" #name=\"ngModel\" [attr.Id]=\"cellNode.sequence\" type=\"checkbox\"\r\n                                       [(ngModel)]=\"cellNode.val\" [required]=\"cellNode.isRequired\" [disabled]=\"!cellNode.isVisible || cellNode.readOnly\">\r\n                                <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                                    Valid input for {{cellNode.label}} is required\r\n                                </div>\r\n                            </template>\r\n                            <template [ngIf]=\"cellNode.htmlControlType === 'select'\">\r\n                                <select name=\"{{cellNode.label}}\" class=\"form-control\" #name=\"ngModel\" [(ngModel)]=\"cellNode.val\" [attr.Id]=\"cellNode.sequence\" [required]=\"cellNode.isRequired\" [disabled]=\"!cellNode.isVisible || cellNode.readOnly\">\r\n                                    <option *ngFor=\"let itemOption of cellNode.dataSource\" value=\"{{itemOption.Value}}\">\r\n                                        {{itemOption.Description}}\r\n                                    </option>\r\n                                </select>\r\n                                <div [hidden]=\"name.valid || name.pristine\" class=\"alert alert-danger\">\r\n                                    Valid input for {{cellNode.label}} is required\r\n                                </div>\r\n                            </template>\r\n                            <template [ngIf]=\"cellNode.htmlControlType === 'radio'\">\r\n                                <template ngFor let-itemOption [ngForOf]=\"cellNode.dataSource\">\r\n                                    <div class=\"row\">\r\n                                        <input name=\"{{cellNode.label}}\" name=\"cellNode.objId\" class=\"form-control\" type=\"radio\" [(ngModel)]=\"cellNode.val\" [disabled]=\"!cellNode.isVisible || cellNode.readOnly\"\r\n                                               value=\"{{itemOption}}\">{{' ' + itemOption}}<br/>\r\n                                    </div>\r\n                                </template>\r\n                            </template>\r\n                            <template ngFor let-er [ngForOf]=\"cellNode.errors\">\r\n                                <div class=\"alert alert-danger\">\r\n                                    {{er | LocalizationTranslate}}\r\n                                </div>\r\n                            </template>\r\n                        </div>\r\n                    </template>\r\n                </template>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</article>"

/***/ }),

/***/ "./src/app/ReusableComponents/inlineEditForm/inlineEditForm.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
//import {FORM_DIRECTIVES} from "angular2/common";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var crudService_1 = __webpack_require__("./src/app/ReusableServices/crudService.ts");
var inlineEditForm = (function () {
    function inlineEditForm(alt, appSettingsSrv, crudSrv) {
        var _this = this;
        this.alt = alt;
        this.appSettingsSrv = appSettingsSrv;
        this.crudSrv = crudSrv;
        this.refreshRequest = new core_1.EventEmitter();
        this.pageName = "";
        this.alert = alt;
        this.appSettingsService = appSettingsSrv;
        this.localRow = this.columns;
        this.refreshRequest.subscribe(function () { _this.handler(_this.crudService.getCallerContext()); });
        this.crudService = crudSrv;
        this.callerContext = this.crudService.getCallerContext();
        this.crudService.OnCrudOperationSuccess.subscribe(function (message) {
            _this.saveRequested(message);
        });
    }
    inlineEditForm.prototype.saveClicked = function () {
        this.crudService.updateInlineRecord(this.columns, this.gridSettings, this.pageName, this.httpProxy);
    };
    inlineEditForm.prototype.cancelClicked = function () {
        this.selectedRow.inlineEditEnabled = false;
    };
    inlineEditForm.prototype.saveRequested = function (message) {
        this.refreshRequest.emit(message);
        this.selectedRow.inlineEditEnabled = false;
    };
    inlineEditForm.prototype.inputClicked = function () {
    };
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], inlineEditForm.prototype, "refreshRequest", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], inlineEditForm.prototype, "columns", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], inlineEditForm.prototype, "selectedRow", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], inlineEditForm.prototype, "gridSettings", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], inlineEditForm.prototype, "handler", void 0);
    __decorate([
        core_1.Input('httpProxy'), 
        __metadata('design:type', Object)
    ], inlineEditForm.prototype, "httpProxy", void 0);
    __decorate([
        core_1.Input('pageName'), 
        __metadata('design:type', String)
    ], inlineEditForm.prototype, "pageName", void 0);
    inlineEditForm = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/ReusableComponents/inlineEditForm/inlineEditForm.html"),
            selector: 'inlineEditForm',
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _a) || Object, (typeof (_b = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _b) || Object, (typeof (_c = typeof crudService_1.crudService !== 'undefined' && crudService_1.crudService) === 'function' && _c) || Object])
    ], inlineEditForm);
    return inlineEditForm;
    var _a, _b, _c;
}());
exports.inlineEditForm = inlineEditForm;


/***/ }),

/***/ "./src/app/ReusableComponents/jsonEdit/json.edit.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var lastItem_component_1 = __webpack_require__("./src/app/ReusableComponents/jsonEdit/lastItem.component.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var appSettings_1 = __webpack_require__("./src/app/Configuration/appSettings.ts");
var JsonEdit = (function () {
    function JsonEdit(_alert) {
        //alert("In edit constructor");
        this._alert = _alert;
        this.isRoot = true;
        this.out = new core_1.EventEmitter();
        this.cancelChanges = new core_1.EventEmitter();
        this.hierarchyLvl = 1;
        this.visiblePlugin = true;
        this.showSave = true;
        this.isProcess = false;
        this.isOpen = true;
        this.inputType = "JSON";
        this.showTableView = true;
        this.tableViewBttn = "Show table view";
        this.viewList = [];
        this.editList = [];
        this.headerList = [];
    }
    JsonEdit.prototype.ngOnInit = function () {
        var self = this;
        if (this.isRoot) {
            try {
                if (!this.inputJson) {
                    this.inputJson = "{}";
                }
                this.inputJson = JSON.parse(this.inputJson);
                self.nodeTitle = JSON.parse(self.PredefinedJsonValues)['#Title#'];
                if (!(this.inputJson instanceof Array)) {
                    this.inputJson = [this.inputJson];
                    this.isProcess = true;
                    this.Items = this.inputJson;
                }
                else {
                    this.Items = [this.inputJson];
                    this.inputType = "Array";
                }
                this.buildMainArray(this.Items, 0);
            }
            catch (Error) {
                this.isOpen = false;
                this._alert.error(appSettings_1.AppNotificationsMSG.jsonEditPlugin.invalidFormat + Error.message);
                return;
            }
            this.Items.forEach(function (x) {
                if (x.every(function (elem) { return elem.hasSimpleObjects; })) {
                    x.showAddBttn = true;
                }
                else {
                    x.showAddBttn = false;
                }
            });
            this.mainArray = this.inputJson;
        }
        else {
            self.Items = self.inputJson;
        }
        if (self.Items) {
            self.Items[0].expanded = true;
        }
    };
    JsonEdit.prototype.buildMainArray = function (theInput, herarchyLvl) {
        herarchyLvl++;
        for (var i in theInput) {
            var o = theInput[i];
            if (o instanceof Array) {
                this.buildMainArray(o, herarchyLvl);
                if (o.every(function (elem) { return elem.hasSimpleObjects; })) {
                    theInput[i].showAddBttn = true;
                }
                else {
                    theInput[i].showAddBttn = false;
                }
            }
            else {
                theInput[i] = this.buildArrayOfSimpleObjects(o);
                theInput[i].hasSimpleObjects = true;
            }
            theInput[i].currentHierarchyLvl = herarchyLvl;
            this.hierarchyLvl = (this.hierarchyLvl < herarchyLvl ? herarchyLvl : this.hierarchyLvl);
        }
    };
    JsonEdit.prototype.buildArrayOfSimpleObjects = function (theObject) {
        var arrToAdd = [];
        for (var key2 in theObject) {
            if (typeof theObject[key2] != 'function') {
                arrToAdd.push(new lastItem_component_1.simpleObject(key2, theObject[key2]));
            }
        }
        return arrToAdd;
    };
    JsonEdit.prototype.addNewNode = function (Node) {
        var objToAdd = [];
        var theLength = Node.length;
        var hasSimpleObjects = Node[theLength - 1].hasSimpleObjects;
        // we do not add complex nodes for now;
        if (!(hasSimpleObjects))
            return;
        var docPart = '1';
        var orderNbr = 0, startPosition = 0, length = 0;
        if (this.hierarchyLvl === 3) {
            try {
                if (this.PredefinedJsonValues) {
                    Node[theLength - 1].find(function (x) { if (x.label.toUpperCase() === 'DOCPART')
                        docPart = x.value; return x.label.toUpperCase() === 'DOCPART'; });
                    Node[theLength - 1].find(function (x) { if (x.label.toUpperCase() === 'ORDER')
                        orderNbr = x.value; return x.label.toUpperCase() === 'ORDER'; });
                    Node[theLength - 1].find(function (x) { if (x.label.toUpperCase() === 'STARTPOSITION')
                        startPosition = x.value; return x.label.toUpperCase() === 'STARTPOSITION'; });
                    Node[theLength - 1].find(function (x) { if (x.label.toUpperCase() === 'LENGTH')
                        length = x.value; return x.label.toUpperCase() === 'LENGTH'; });
                    this.jsonTemplate = JSON.parse(this.PredefinedJsonValues);
                    for (var key in this.jsonTemplate) {
                        var newSobj = void 0;
                        if (typeof (this.jsonTemplate[key]) === "string") {
                            newSobj = new lastItem_component_1.simpleObject(key, this.jsonTemplate[key]);
                        }
                        else {
                            if (this.jsonTemplate[key].hasOwnProperty('value')) {
                                newSobj = new lastItem_component_1.simpleObject(key, this.jsonTemplate[key].value);
                            }
                            else if (this.jsonTemplate[key].hasOwnProperty('values')) {
                                newSobj = new lastItem_component_1.simpleObject(key, this.jsonTemplate[key].values[0]);
                            }
                            else {
                                newSobj = new lastItem_component_1.simpleObject(key, '');
                            }
                        }
                        if (newSobj.label.toUpperCase() === 'DOCPART')
                            newSobj.value = docPart;
                        if (newSobj.label.toUpperCase() === 'ORDER')
                            newSobj.value = (Number(orderNbr) + 1).toString();
                        if (newSobj.label.toUpperCase() === 'STARTPOSITION')
                            newSobj.value = (Number(startPosition) + Number(length)).toString();
                        if (newSobj.label.toUpperCase() === 'LENGTH')
                            newSobj.value = length.toString();
                        objToAdd.push(newSobj);
                    }
                    // objToAdd.expanded = true;
                    Node.push(objToAdd);
                    Node[theLength].hasSimpleObjects = hasSimpleObjects;
                    Node[theLength].expanded = false;
                }
            }
            catch (Error) {
                this._alert.error("JSON template error:" + appSettings_1.AppNotificationsMSG.jsonEditPlugin.invalidFormat + Error.message);
            }
            return;
        }
        Node[theLength - 1].forEach(function (x) {
            var newSobj = new lastItem_component_1.simpleObject(x.label, x.value);
            objToAdd.push(newSobj);
        });
        // objToAdd.expanded = true;
        Node.push(objToAdd);
        Node[theLength].hasSimpleObjects = hasSimpleObjects;
        Node[theLength].expanded = false;
    };
    JsonEdit.prototype.doSave = function () {
        try {
            //let arrayForSave = JSON.parse(JSON.stringify(this.mainArray));
            var arrayForSave = this.mainArray.slice();
            this.buildToSaveArray(arrayForSave);
            if (this.inputType != "Array") {
                this.out.emit({ value: arrayForSave[0] });
            }
            else {
                var stringOut = this.arrayToString(arrayForSave);
                // let stringOut =   JSON.stringify(arrayForSave) ;
                this.out.emit({ 'value': stringOut });
            }
            this._alert.addAlert(appSettings_1.AppNotificationsMSG.jsonEditPlugin.jsonUpdate);
            //  this.isOpen = false;
            this.visiblePlugin = false;
        }
        catch (Error) {
            this._alert.error("Edited JSON : " + appSettings_1.AppNotificationsMSG.jsonEditPlugin.invalidFormat + Error.message);
            return;
        }
    };
    JsonEdit.prototype.arrayToString = function (inputArray) {
        var result = ",";
        for (var i = 0, j = inputArray.length; i < j; i++) {
            if (inputArray[i] instanceof Array) {
                result += this.arrayToString(inputArray[i]) + ',';
            }
            else {
                result += inputArray[i] + ',';
            }
        }
        result = "[" + result.slice(1, result.length - 1) + "]";
        return result;
    };
    JsonEdit.prototype.buildJsonFromArray = function (theArray) {
        var result = '';
        theArray.map(function (x) {
            var theValue = JSON.stringify(x.value);
            if (x.objType == 'checkbox') {
                theValue = x.value ? JSON.stringify("1") : JSON.stringify("0");
            }
            result += ',"' + x.label + '":' + theValue;
        });
        // return JSON.parse( '{' + result.slice(1) + '}');
        return '{' + result.slice(1) + '}';
    };
    ;
    JsonEdit.prototype.buildToSaveArray = function (theInput) {
        for (var i in theInput) {
            var o = theInput[i];
            if (o instanceof Array) {
                if (o[0] instanceof lastItem_component_1.simpleObject) {
                    theInput[i] = this.buildJsonFromArray(o);
                }
                else {
                    this.buildToSaveArray(o);
                }
            }
        }
    };
    JsonEdit.prototype.getPlaceInArray = function (arrayName, thePath) {
        var result = arrayName;
        thePath.map(function (x) { return result = result + '[' + x + ']'; });
        return result;
    };
    JsonEdit.prototype.toggle = function (item) {
        item.expanded = !item.expanded;
    };
    JsonEdit.prototype.cancelClicked = function () {
        this.isOpen = false;
        this.cancelChanges.emit(true);
        this.visiblePlugin = false;
    };
    JsonEdit.prototype.createTableView = function () {
        var self = this;
        self.tableViewBttn = "Show table view";
        self.showTableView = !self.showTableView;
        if (self.showTableView) {
            self.tableViewBttn = "Hide table view";
            self.viewList = [];
            self.editList = [];
            try {
                self.buildEditList(self.mainArray, self.editList);
            }
            catch (Error) {
                self._alert.error("Edited JSON : " + appSettings_1.AppNotificationsMSG.jsonEditPlugin.invalidFormat + Error.message);
                return;
            }
        }
    };
    JsonEdit.prototype.buildEditList = function (theInput, theOutput) {
        if (theOutput === void 0) { theOutput = []; }
        var headerArray = [];
        for (var i in theInput) {
            var child = theInput[i];
            if (child instanceof Array) {
                if (child[0] instanceof lastItem_component_1.simpleObject) {
                    var lineArray = [];
                    child.forEach(function (x) {
                        lineArray.push(x);
                        if (theOutput.length === 0)
                            headerArray.push(x.label);
                    });
                    theOutput.push(lineArray);
                }
                else {
                    this.buildEditList(child, theOutput);
                }
            }
        }
        if (this.headerList.length === 0)
            this.headerList = headerArray;
    };
    JsonEdit.prototype.jsonInputToMainArray = function (theInput, herarchyLvl) {
        var self = this;
        var result = [];
        herarchyLvl++;
        var _loop_1 = function() {
            Object.defineProperty(result, 'itemName', { value: prop, enumerable: false });
            Object.defineProperty(result, 'expanded', { value: false, enumerable: false });
            Object.defineProperty(result, 'hasSimpleObjects', { value: false, enumerable: false });
            if (!(theInput[prop] instanceof Array)) {
                result.push(self.jsonInputToMainArray(theInput[prop], 0));
            }
            else {
                var lcArray_1 = [];
                Object.defineProperty(lcArray_1, 'itemName', { value: 'LeafNodeName', enumerable: false });
                Object.defineProperty(lcArray_1, 'expanded', { value: false, enumerable: false });
                Object.defineProperty(lcArray_1, 'hasSimpleObjects', { value: false, enumerable: false });
                theInput[prop].forEach(function (x) {
                    var leafArray = self.buildArrayOfSimpleObjects(x);
                    Object.defineProperty(leafArray, 'itemName', { value: 'LeafNodeName', enumerable: false });
                    Object.defineProperty(leafArray, 'expanded', { value: false, enumerable: false });
                    Object.defineProperty(leafArray, 'hasSimpleObjects', { value: false, enumerable: true });
                    lcArray_1.push(leafArray);
                });
                result.push(lcArray_1);
            }
        };
        for (var prop in theInput) {
            _loop_1();
        }
        return result;
    };
    JsonEdit.prototype.buildViewList = function (theInput, theOutput) {
        if (theOutput === void 0) { theOutput = []; }
        var headerArray = [];
        for (var i in theInput) {
            var child = theInput[i];
            if (child instanceof Array) {
                if (child[0] instanceof lastItem_component_1.simpleObject) {
                    var lineArray = [];
                    child.forEach(function (x) {
                        lineArray.push(x.value);
                        if (theOutput.length === 0)
                            headerArray.push(x.label);
                    });
                    theOutput.push(lineArray);
                }
                else {
                    this.buildViewList(child, theOutput);
                }
            }
        }
        ;
        if (headerArray.length != 0)
            theOutput.unshift(headerArray);
    };
    JsonEdit.prototype.itemChanged = function (item) {
        if (item.oldValue !== item.value) {
            item.isChanged = true;
        }
        else {
            item.isChanged = false;
        }
    };
    JsonEdit.prototype.checkIt = function (event, item) {
        if (event.keyCode == 27 && item.oldValue !== item.value) {
            item.value = item.oldValue;
            item.isChanged = false;
        }
    };
    JsonEdit.prototype.removeItem = function (item) {
        var self = this;
        self.Items.splice(self.Items.indexOf(item), 1);
    };
    JsonEdit.prototype.removeEditListItem = function (item) {
        var self = this;
        self.editList.splice(self.editList.indexOf(item), 1);
        self.mainArray[0].splice(self.mainArray[0].indexOf(item), 1);
    };
    JsonEdit.prototype.nodeMove = function (data) {
        var self = this;
        var position = self.Items.indexOf(data.node);
        var direction = data.direction;
        if (direction === 'up' && self.Items[position - 1]) {
            self.Items[position - 1] = [self.Items[position], self.Items[position] = self.Items[position - 1]][0];
        }
        if (direction === 'down' && self.Items[position + 1]) {
            self.Items[position + 1] = [self.Items[position], self.Items[position] = self.Items[position + 1]][0];
        }
    };
    JsonEdit.prototype.rowOfEditListMove = function (item, direction) {
        var self = this;
        self.moveItemInArray(self.editList, item, direction);
        //  self.moveItemInArray(self.mainArray[0],item,direction);
    };
    JsonEdit.prototype.moveItemInArray = function (arr, item, direction) {
        var position = arr.indexOf(item);
        if (direction === 'up' && arr[position - 1]) {
            arr[position - 1] = [arr[position], arr[position] = arr[position - 1]][0];
        }
        if (direction === 'down' && arr[position + 1]) {
            arr[position + 1] = [arr[position], arr[position] = arr[position + 1]][0];
        }
    };
    __decorate([
        core_1.Input('parentStep'), 
        __metadata('design:type', Object)
    ], JsonEdit.prototype, "parentStep", void 0);
    __decorate([
        core_1.Input('inputJson'), 
        __metadata('design:type', Object)
    ], JsonEdit.prototype, "inputJson", void 0);
    __decorate([
        core_1.Input('isRoot'), 
        __metadata('design:type', Boolean)
    ], JsonEdit.prototype, "isRoot", void 0);
    __decorate([
        core_1.Input('PredefinedJsonValues'), 
        __metadata('design:type', Object)
    ], JsonEdit.prototype, "PredefinedJsonValues", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], JsonEdit.prototype, "out", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], JsonEdit.prototype, "cancelChanges", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], JsonEdit.prototype, "hierarchyLvl", void 0);
    JsonEdit = __decorate([
        core_1.Component({
            selector: "json-edit",
            template: __webpack_require__("./src/app/ReusableComponents/jsonEdit/jsonEdit.html"),
            styles: [__webpack_require__("./src/app/ReusableComponents/jsonEdit/jsonEdit.scss")]
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _a) || Object])
    ], JsonEdit);
    return JsonEdit;
    var _a;
}());
exports.JsonEdit = JsonEdit;


/***/ }),

/***/ "./src/app/ReusableComponents/jsonEdit/jsonEdit.html":
/***/ (function(module, exports) {

module.exports = "<template [ngIf]=\"isOpen\">\r\n    <template ngFor let-item [ngForOf]=\"Items\">\r\n        <template [ngIf]=\"!(item.hasSimpleObjects)\">\r\n            <!--<span (click)=\"toggle(item)\" class=\"node\">{{nodeTitle}} {{item.title}}</span>-->\r\n            <!--<img src=\"./app/Datahub/img/collapse_expand.png\" (click)=\"toggle(item)\" class=\"expandCollapseBtn\"><button class=\"button-standard\" (click)=\"addNewNode(item)\">Add New</button>-->\r\n            <!--<template [ngIf]=\"item.expanded && item.showAddBttn\">\r\n                <button class=\"button-standard\" (click)=\"addNewNode(item)\">Add New</button>\r\n            </template>-->\r\n            <!--<template [ngIf]=\"item.expanded\">\r\n                <json-edit [inputJson]='item' [isRoot]='false' [parentStep]=\"parentStep\"\r\n                           [PredefinedJsonValues]=\"PredefinedJsonValues\"\r\n                           [hierarchyLvl]=\"hierarchyLvl\"></json-edit>\r\n            </template>-->\r\n            <!--<accordion [title]=\"nodeTitle + ' ' + item.title\">-->\r\n            <accordion [title]=\"item.title ? nodeTitle + ' ' + item.title : nodeTitle\">\r\n                <accordionBodyContent>\r\n                    <button class=\"button-standard\" (click)=\"addNewNode(item)\">Add New</button>\r\n                    <br><br>\r\n                    <json-edit [inputJson]='item' [isRoot]='false' [parentStep]=\"parentStep\"\r\n                               [PredefinedJsonValues]=\"PredefinedJsonValues\"\r\n                               [hierarchyLvl]=\"hierarchyLvl\"></json-edit>\r\n                </accordionBodyContent>\r\n            </accordion>\r\n        </template>\r\n        <template [ngIf]=\"item.hasSimpleObjects\">\r\n            <last-item [Items]=\"item\" [isProcess]=\"isProcess\"\r\n                       [PredefinedJsonValues]=\"PredefinedJsonValues\" [hierarchyLvl]=\"hierarchyLvl\"\r\n                       [showEdit]=\"false\" (removeThis)=\"removeItem($event)\" (nodeMove)=\"nodeMove($event)\"></last-item>\r\n        </template>\r\n    </template>\r\n    <template [ngIf]=\"isRoot\">\r\n        <div class=\"card-block\">\r\n            <button id=\"saveTop\" class=\"button-standard \" (click)=\"doSave()\" *ngIf=\"showSave\">\r\n                <span class=\"fa fa-floppy-o fa-lg\"></span> Apply Changes\r\n            </button>\r\n            <!--\r\n            <button class=\"tdam-button tdam-button-secondary\" (click)=\"createTableView()\" *ngIf=\"showSave\">\r\n                {{tableViewBttn}}\r\n            </button>\r\n            -->\r\n            <button class=\"button-standard \" (click)=\"cancelClicked()\">\r\n                <span class=\"fa fa-ban fa-lg\"></span> Cancel\r\n            </button>\r\n        </div>\r\n        <!--\r\n        <div *ngIf=\"showTableView\" class=\"listArea\">\r\n            <br>\r\n            <table id=\"tblList\" style=\"border: 1px solid black;\">\r\n                <tr style=\"border: 1px solid black; background-color: #f4f5f3; height: 30px\">\r\n                    <th style=\"border: 1px solid black;text-align: center\" *ngFor=\"let item of headerList\">\r\n                        <span style=\"font-weight:bold\">{{item}}</span>\r\n                    </th>\r\n                    <th>\r\n                        <span style=\"font-weight:bold\">Ops available</span>\r\n                    </th>\r\n                </tr>\r\n                <tr *ngFor=\"let rowArray of editList\"\r\n                    style=\"nth-child(2n) {background-color: #00AA00}; border: 1px solid black\">\r\n\r\n                    <td *ngFor=\"let item of rowArray\"\r\n                        style=\"width:50px; text-align:right;  padding: 5px; border: 1px solid black\">\r\n                        <input size=\"10\" *ngIf=\"item.objType == 'textbox' || item.objType == 'checkbox' \" #theValue readonly=\"{{item.readOnly}}\"\r\n                               type=\"text\" class=\"neutral\"\r\n                               [ngClass]=\"{neutral: !item.isChanged, changed: item.isChanged}\" [(ngModel)]=\"item.value\"\r\n                               (ngModelChange)=\"itemChanged(item)\" (keyup)=\"checkIt($event, item)\">\r\n\r\n                        <select *ngIf=\"item.objType =='dropdown'\" class=\"sizedSelect\" #theValue\r\n                                [ngClass]=\"{neutral: !item.isChanged, changed: item.isChanged}\"\r\n                                [(ngModel)]=\"item.value\">\r\n                            <option *ngFor=\"let itemOption of item.listValues\" value=\"{{itemOption}}\">{{itemOption}}\r\n                            </option>\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <button (click)=\"removeEditListItem(rowArray)\"><span class=\"glyphicon glyphicon-trash\"></span></button>\r\n\r\n                        <button (click)=\"rowOfEditListMove(rowArray, 'up')\"  data-toggle=\"tooltip\" title=\"Move row up.\" style=\"float: right;height: 20px;\">\r\n                            <span class=\"fa fa-arrow-up fa-lg\"></span>\r\n                        </button>\r\n                        <button (click)=\"rowOfEditListMove(rowArray, 'down')\"  data-toggle=\"tooltip\" title=\"Move row down.\" style=\"float: right;height: 20px;\">\r\n                            <span class=\"glyphicon glyphicon-arrow-down\"></span>\r\n                        </button>\r\n\r\n                    </td>\r\n\r\n                </tr>\r\n\r\n            </table>\r\n            <br>\r\n            <button id=\"saveBottom\" class=\"btn tdam-button-secondary\" (click)=\"doSave()\" *ngIf=\"showSave\">Apply Table\r\n                Changes\r\n            </button>\r\n        </div>\r\n        -->\r\n    </template>\r\n</template>\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/jsonEdit/jsonEdit.scss":
/***/ (function(module, exports) {

module.exports = "/********************************************************\r\n * Named colors\r\n *******************************************************/\n.expandCollapseBtn {\n  height: 25px;\n  width: 25px;\n  margin-left: 0.5px;\n  margin-right: 0.5px;\n  margin-top: 0.5px; }\n\n.node {\n  font-weight: bold; }\n\n.changed {\n  background-color: #fff9d9; }\n\n.neutral {\n  background-color: white; }\n\n.addNewSelect {\n  height: 25px;\n  width: 280px; }\n\n.addNewInput {\n  height: 25px;\n  width: 280px; }\n\n.sizedSelect {\n  height: 25px;\n  width: 55%; }\n\n.sizedInput {\n  height: 25px;\n  width: 85% !important; }\n\nbutton {\n  margin: 2px 2px 2px 2px; }\n\n#tblList tr:nth-child(even) {\n  background-color: #E8E8E8; }\n\n#tblList tr:nth-child(odd) {\n  background-color: #ffffff; }\n\n#tblList {\n  border: 1px solid black;\n  width: 100%;\n  /*width: 500px;*/ }\n  #tblList thead {\n    display: block; }\n  #tblList tbody {\n    display: block;\n    overflow-y: auto; }\n\n.listArea {\n  padding: 5px;\n  /* ensures table doesn't fly off panel */\n  overflow-x: auto; }\n\n.bottomBttns {\n  padding-left: 5px; }\n\n.expandable {\n  height: 25px;\n  width: 35px;\n  overflow: hidden;\n  margin: auto; }\n\n.expandable:hover {\n  height: auto;\n  width: auto;\n  margin: auto; }\n"

/***/ }),

/***/ "./src/app/ReusableComponents/jsonEdit/lastItem.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var appSettings_1 = __webpack_require__("./src/app/Configuration/appSettings.ts");
var LastItem = (function () {
    function LastItem(_alert) {
        this._alert = _alert;
        this.PredefinedJsonValues = null;
        this.isProcess = false;
        this.showEdit = false;
        this.hierarchyLvl = 1;
        this.removeThis = new core_1.EventEmitter();
        this.nodeMove = new core_1.EventEmitter();
        this.adding = false;
        this.title = appSettings_1.AppNotificationsMSG.jsonEditPlugin.nodeColumnSettingsTitle;
        this.formIsClean = true;
        this.keyValueTypeObj = "textbox";
        this.keyValueTypeOptions = [];
        this.predefValues = {};
        this.newKeyValue = null;
        this.fromPredefined = false;
        this.preDefinedJsonKeys = [];
        this.hasValidTemplate = false;
        this.specials = [
            // order matters for these
            "-",
            "[",
            "]",
            "/", "{", "}", "(", ")", "*", "+", "?", ".", "^",
            "$", "|", "!", "~", "&", "`", ";", '"', "'", ",", "#"
        ];
        this.regex = RegExp('[' + this.specials.join('\\') + ']', 'g');
    }
    LastItem.prototype.ngOnInit = function () {
        var _this = this;
        var self = this;
        if (!this.PredefinedJsonValues)
            return;
        // get title from Template :
        try {
            self.title = JSON.parse(self.PredefinedJsonValues)['#Title#'];
            //resolve node title
            if (this.hierarchyLvl === 2) {
                try {
                    var arrayForNames_1 = JSON.parse(self.PredefinedJsonValues)['#ArrayForNames#'];
                    if (arrayForNames_1 instanceof Array) {
                        switch (arrayForNames_1.length) {
                            case 1:
                                self.Items.find(function (y) {
                                    if (y.label.toUpperCase() === arrayForNames_1[0].toUpperCase()) {
                                        self.title = y.label + ' ' + y.value;
                                    }
                                    ;
                                    return y.label.toUpperCase() === arrayForNames_1[0].toUpperCase();
                                }, self);
                                break;
                            case 3:
                                self.Items.find(function (y) {
                                    if (y.label.toUpperCase() === arrayForNames_1[0].toUpperCase()) {
                                        self.title = y.value;
                                    }
                                    ;
                                    return y.label.toUpperCase() === arrayForNames_1[0].toUpperCase();
                                }, self);
                                self.Items.find(function (y) {
                                    if (y.label.toUpperCase() === arrayForNames_1[1].toUpperCase()) {
                                        self.title = self.title + arrayForNames_1[2] + y.value;
                                    }
                                    ;
                                    return y.label.toUpperCase() === arrayForNames_1[1].toUpperCase();
                                }, self);
                                break;
                        }
                    }
                }
                catch (Error) {
                    console.log("Not document part type identified");
                }
            }
        }
        catch (Error) {
            console.log("Unable to get title from Template: " + Error.message);
        }
        try {
            this.predefValues = JSON.parse(this.PredefinedJsonValues);
            if (Object.keys(this.predefValues).length === 0 && this.predefValues.constructor === Object)
                return;
            this.fromPredefined = true;
            this.hasValidTemplate = true;
            for (var key in this.predefValues) {
                this.preDefinedJsonKeys.push(key);
            }
            this.Items.forEach(function (x) {
                if (_this.predefValues.hasOwnProperty(x.label)) {
                    var availableOptions = _this.predefValues[x.label];
                    if (availableOptions.hasOwnProperty('values')) {
                        x.objType = "dropdown";
                        x.listValues = availableOptions.values;
                    }
                    if (availableOptions.hasOwnProperty('type') && availableOptions.type == 'boolean') {
                        x.objType = "checkbox";
                        if (x.value == '0') {
                            x.value = false;
                        }
                    }
                    if (availableOptions.hasOwnProperty('readOnly')) {
                        if (availableOptions.readOnly)
                            x.readOnly = true;
                    }
                }
            });
        }
        catch (Error) {
            this.fromPredefined = false;
            this._alert.error("JSON template error:" + appSettings_1.AppNotificationsMSG.jsonEditPlugin.invalidFormat + Error.message);
            return;
        }
    };
    LastItem.prototype.usePredefinedKeys = function () {
        this.fromPredefined = !this.fromPredefined;
        this.newKey = null;
        this.newKeyValue = null;
        this.keyValueTypeOptions = [];
        this.keyValueTypeObj = "textbox";
    };
    LastItem.prototype.saveNewProp = function (key, keyValue) {
        if (key && keyValue) {
            if (this.Items.find(function (x) { return x.label.toUpperCase() === key.toUpperCase(); })) {
                this._alert.error(appSettings_1.AppNotificationsMSG.jsonEditPlugin.propertyExists + key);
                return;
            }
            var newSimpleObj = new simpleObject(key, keyValue);
            if (this.predefValues.hasOwnProperty(key)) {
                var availableOptions = this.predefValues[key];
                if (availableOptions.hasOwnProperty('values')) {
                    newSimpleObj.objType = "dropdown";
                    newSimpleObj.listValues = this.keyValueTypeOptions;
                }
            }
            this.Items.push(newSimpleObj);
        }
        else {
            this._alert.error(appSettings_1.AppNotificationsMSG.jsonEditPlugin.keyValueRequired);
            return;
        }
        this.newKey = null;
        this.adding = false;
        this.keyValueTypeOptions = [];
        this.keyValueTypeObj = "textbox";
        this.newKeyValue = null;
    };
    LastItem.prototype.resetAll = function () {
        this.Items.forEach(function (x) {
            if (x.oldValue != x.value) {
                x.value = x.oldValue;
                x.isChanged = false;
            }
        });
        this.formIsClean = true;
    };
    LastItem.prototype.removeItem = function (item) {
        var _this = this;
        this._alert.addAlertAndRequestAnswer(appSettings_1.AppNotificationsMSG.deletionQuestionMsg);
        var subscription = this._alert.requestConfirmationAnswer$.subscribe(function (answer) {
            _this._alert.askConfirmation = false;
            subscription.unsubscribe();
            if (answer != "OK")
                return;
            _this.Items.splice(_this.Items.indexOf(item), 1);
        });
    };
    LastItem.prototype.itemChanged = function (item) {
        if (item.oldValue !== item.value) {
            item.isChanged = true;
            this.formIsClean = false;
        }
        else {
            item.isChanged = false;
        }
        if (this.Items.findIndex(function (x) { return x.isChanged; }) == -1)
            this.formIsClean = true;
    };
    LastItem.prototype.checkIt = function (event, item) {
        // comment cleaning input for now as the rules are not defined
        //this.cleanIt(item);
        if (event.keyCode == 27 && item.oldValue !== item.value) {
            item.value = item.oldValue;
            item.isChanged = false;
        }
        if (this.Items.findIndex(function (x) { return x.isChanged; }) === -1)
            this.formIsClean = true;
    };
    LastItem.prototype.showOptionsForKeyValue = function (input) {
        if (!input)
            return;
        this.newKeyValue = null;
        this.keyValueTypeObj = "textbox";
        this.keyValueTypeOptions = [];
        if (this.predefValues.hasOwnProperty(input)) {
            var availableOptions = this.predefValues[input];
            if (availableOptions.hasOwnProperty('values')) {
                this.keyValueTypeObj = "dropdown";
                this.keyValueTypeOptions = availableOptions.values;
            }
            else {
                if (typeof (availableOptions) === "string") {
                    this.newKeyValue = availableOptions;
                }
                else {
                    if (availableOptions.hasOwnProperty('value'))
                        this.newKeyValue = availableOptions.value;
                }
            }
        }
        else {
            for (var lvs_prop in this.predefValues) {
                if (input.toLowerCase() === lvs_prop.toLowerCase()) {
                    var availableOptions = this.predefValues[lvs_prop];
                    if (availableOptions.hasOwnProperty('values')) {
                        this.keyValueTypeObj = "dropdown";
                        this.keyValueTypeOptions = availableOptions.values;
                    }
                    else {
                        this.newKeyValue = this.predefValues[lvs_prop];
                    }
                    break;
                }
            }
        }
    };
    LastItem.prototype.cleanIt = function (input) {
        input.value = input.value.replace(this.regex, '');
    };
    LastItem.prototype.removeMe = function () {
        var _this = this;
        var self = this;
        self._alert.addAlertAndRequestAnswer("Dou you want to remove " + self.title + " ?");
        var subscription = self._alert.requestConfirmationAnswer$.subscribe(function (item) {
            self._alert.askConfirmation = false;
            subscription.unsubscribe();
            if (item != "OK") {
                return;
            }
            self.removeThis.emit(_this.Items);
        });
    };
    LastItem.prototype.moveMe = function (direction) {
        var self = this;
        var eventData = { 'node': self.Items, 'direction': direction };
        self.nodeMove.emit(eventData);
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], LastItem.prototype, "Items", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], LastItem.prototype, "PredefinedJsonValues", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], LastItem.prototype, "isProcess", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], LastItem.prototype, "showEdit", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], LastItem.prototype, "hierarchyLvl", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], LastItem.prototype, "removeThis", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], LastItem.prototype, "nodeMove", void 0);
    LastItem = __decorate([
        core_1.Component({
            selector: "last-item",
            template: __webpack_require__("./src/app/ReusableComponents/jsonEdit/lastItem.html"),
            styles: [__webpack_require__("./src/app/ReusableComponents/jsonEdit/jsonEdit.scss")]
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _a) || Object])
    ], LastItem);
    return LastItem;
    var _a;
}());
exports.LastItem = LastItem;
var simpleObject = (function () {
    function simpleObject(label, value) {
        this.label = label;
        this.value = value;
        this.isChanged = false;
        this.objType = "textbox";
        this.oldValue = value;
        this.isChanged = false;
        this.objType = "textbox";
        this.listValues = [];
    }
    return simpleObject;
}());
exports.simpleObject = simpleObject;


/***/ }),

/***/ "./src/app/ReusableComponents/jsonEdit/lastItem.html":
/***/ (function(module, exports) {

module.exports = "<accordion [title]=\"title\">\r\n    <accordionHeaderContent>\r\n        <!--<span (click)=\"expanded = !expanded\" class=\"node\">{{title}}</span>-->\r\n        <!--<img src=\"./app/Datahub/img/collapse_expand.png\" (click)=\"expanded = !expanded\" class=\"expandCollapseBtn\">-->\r\n        <button (click)=\"removeMe()\" class=\"button-standard float-xs-right\"><span class=\"fa fa-trash fa-lg\"></span></button>\r\n    </accordionHeaderContent>\r\n    <!--\r\n    <button (click)=\"moveMe('up')\"  data-toggle=\"tooltip\" title=\"Move node up.\" style=\"float: right;height: 20px;\">\r\n        <span class=\"fa fa-arrow-up fa-lg\"></span>\r\n    </button>\r\n    <button (click)=\"moveMe('down')\"  data-toggle=\"tooltip\" title=\"Move node up.\" style=\"float: right;height: 20px;\">\r\n        <span class=\"glyphicon glyphicon-arrow-down\"></span>\r\n    </button>\r\n-->\r\n    <accordionBodyContent>\r\n        <template ngFor let-item [ngForOf]=\"Items\">\r\n            <div class=\"row\">\r\n                <div class=\"col-md-2 text-md-left\">\r\n                    <label><strong>{{item.label}}</strong></label>\r\n                </div>\r\n                <div class=\"col-md-9 text-md-left\">\r\n                    <input *ngIf=\"item.objType =='textbox'\" #theValue readonly=\"{{item.readOnly}}\" type=\"text\" class=\"neutral sizedInput\" [ngClass]=\"{neutral: !item.isChanged, changed: item.isChanged}\" [(ngModel)]=\"item.value\" (keyup)=\"checkIt($event, item)\" (ngModelChange)=\"itemChanged(item)\">\r\n                    <input *ngIf=\"item.objType =='checkbox'\" #theValue readonly=\"{{item.readOnly}}\" type=\"checkbox\" [(ngModel)]=\"item.value\" (keyup)=\"checkIt($event, item)\" (ngModelChange)=\"itemChanged(item)\">\r\n                    <select *ngIf=\"item.objType =='dropdown'\" class=\"sizedSelect\" #theValue [ngClass]=\"{neutral: !item.isChanged, changed: item.isChanged}\" [(ngModel)]=\"item.value\" (ngModelChange)=\"itemChanged(item)\">\r\n                        <option *ngFor=\"let itemOption of item.listValues\" value=\"{{itemOption}}\">{{itemOption}}</option>\r\n                    </select>\r\n                </div>\r\n                <template [ngIf]=\"showEdit\">\r\n                    <div class=\"col-md-1\">\r\n                        <button *ngIf=\"showEdit\" type=\"button\" class=\"button-standard \" (click)=\"removeItem(item)\">\r\n                            <span class=\"fa fa-trash fa-lg\"></span>\r\n                        </button>\r\n                    </div>\r\n                </template>\r\n            </div>\r\n            <div class=\"row\">\r\n                <button *ngIf=\"showEdit && hierarchyLvl != 3\" class=\"button-standard \" (click)=\"adding = true\"><span class=\"fa fa-plus fa-lg\"></span>New Property</button>\r\n                <button class=\"button-standard \" (click)=\"resetAll()\" *ngIf=\"!formIsClean && showEdit\">Reset All</button>\r\n            </div>\r\n        </template>\r\n        <template [ngIf]=\"adding\">\r\n            <template [ngIf]=\"hasValidTemplate\">\r\n                <input type=\"checkbox\" [(ngModel)]=\"fromPredefined\" value=\"true\" (click)=\"usePredefinedKeys()\"> Use template Values<br>\r\n            </template>\r\n            <template [ngIf]=\"fromPredefined\">\r\n                <select class=\"addNewSelect\" [(ngModel)]=\"newKey\" #objKey (change)=\"showOptionsForKeyValue(objKey.value)\">\r\n                    <option *ngFor=\"let itemOption of preDefinedJsonKeys\" value=\"{{itemOption}}\">{{itemOption}}</option>\r\n                </select>\r\n            </template>\r\n            <input class=\"addNewInput\" *ngIf=\"!fromPredefined\" #objKey placeholder=\"json key\" [(ngModel)]=\"newKey\" (keyup)=\"cleanIt(objKey)\"/>\r\n            <input class=\"addNewInput\" *ngIf=\"keyValueTypeObj == 'textbox'\" #objValue placeholder=\"value\" [(ngModel)]=\"newKeyValue\" (keyup)=\"cleanIt(objValue)\"/>\r\n            <select class=\"addNewSelect\" *ngIf=\"keyValueTypeObj =='dropdown'\" [(ngModel)]=\"newKeyValue\">\r\n                <option *ngFor=\"let itemOption of keyValueTypeOptions\" value=\"{{itemOption}}\">{{itemOption}}</option>\r\n            </select>\r\n            <button *ngIf=\"showEdit\" class=\"button-standard \" (click)=\"saveNewProp(newKey ,newKeyValue)\"><span class=\"fa fa-floppy-o fa-lg\"></span></button>\r\n            <button *ngIf=\"showEdit\" class=\"button-standard \" (click)=\"adding = false\"><span class=\"fa fa-ban fa-lg\"></span></button>\r\n        </template>\r\n    </accordionBodyContent>\r\n</accordion>\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/miniGrid/miniGrid.html":
/***/ (function(module, exports) {

module.exports = "<!--Edit Header + lookup boxes-->\r\n<article Id=\"mainConfigPage\">\r\n    <table id=\"dataGridBody\" *ngFor=\"let set of headersAndDataSets\">\r\n        <thead Id=\"dataGridHeader\">\r\n        <tr>\r\n            <th *ngFor=\"let headerRow of set.headerSet\">\r\n                <div *ngIf=\"headerRow.isVisible\" class=\"{{headerRow.columnCss}}\">\r\n                    {{headerRow.val}}<span class=\"{{headerRow.sortCss}}\"></span>\r\n                </div>\r\n        </tr>\r\n        </thead>\r\n        <tbody Id=\"dataGrid-spreadSheet\">\r\n        <tr *ngFor=\"let row of set.dataSet\">\r\n            <td *ngFor=\"let col of row.cells\">\r\n                <template [ngIf]=\"col.isAllowGridLevelEdit\">\r\n                    <template [ngIf]=\"!(col.htmlControlType ==='select' || col.htmlControlType === 'checkbox')\">\r\n                        <div *ngIf=\"col.isVisible\" class=\"{{col.columnCss}}\">\r\n                            <ec-trigger *ngIf=\"col.isToggleable\" [collapsed]=\"row.collapsed\" [owner]=\"row\" class=\"cell-contents\"></ec-trigger>\r\n                            <input class=\"cell-contents\" [attr.Id]=\"col.sequence\" type={{col.htmlControlType}} [(ngModel)]=\"col.val\" (click)=\"inputClicked(col)\">\r\n                        </div>\r\n                    </template>\r\n                    <template [ngIf]=\"col.htmlControlType ==='checkbox'\">\r\n                        <div *ngIf=\"col.isVisible\" class=\"{{col.columnCss}}\">\r\n                            <ec-trigger *ngIf=\"col.isToggleable\" [collapsed]=\"row.collapsed\" [owner]=\"row\" class=\"toggleItem\"></ec-trigger>\r\n                            <input class=\"cell-contents\" [attr.Id]=\"col.sequence\" type='checkbox' [(ngModel)]=\"col.val\" (click)=\"inputClicked(col)\">\r\n                        </div>\r\n                    </template>\r\n                    <template [ngIf]=\"col.htmlControlType === 'select'\">\r\n                        <div class=\"{{col.columnCss}}\">\r\n                            <ec-trigger *ngIf=\"col.isToggleable\" [collapsed]=\"row.collapsed\" [owner]=\"row\"></ec-trigger>\r\n                            <select [(ngModel)]=\"col.val\" [attr.Id]=\"col.sequence\">\r\n                                <option *ngFor=\"let itemOption of col.dataSource\" value=\"{{itemOption}}\">{{itemOption}}</option>\r\n                            </select>\r\n                        </div>\r\n                    </template>\r\n                </template>\r\n                <template [ngIf]=\"!col.isAllowGridLevelEdit\">\r\n                    <div *ngIf=\"col.isVisible\" class=\"{{col.columnCss}}\">\r\n                        <ec-trigger *ngIf=\"col.isToggleable\" [collapsed]=\"row.collapsed\" [owner]=\"row\" class=\"toggleItem\"></ec-trigger>\r\n                        <div *ngIf=\"col.isVisible\" class=\"cell-contents\">{{col.val}}</div>\r\n                    </div>\r\n                </template>\r\n            </td>\r\n        </tr>\r\n        </tbody>\r\n    </table>\r\n</article>\r\n\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/miniGrid/miniGrid.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var miniMatrixService_1 = __webpack_require__("./src/app/ReusableServices/miniMatrixService.ts");
var MiniGridComponenet = (function () {
    function MiniGridComponenet(alert, vmMatrix) {
        var _this = this;
        this.alertService = alert;
        this.vmMatrixService = vmMatrix;
        this.gridSettings = this.vmMatrixService.getTestDataConfig();
        this.headersAndDataSets = this.vmMatrixService.getConfigAndData();
        this.parentLine = this.selectedRow;
        this.vmMatrixService.pushEventToDirectivesEvent.subscribe(function (x) { _this.inputPushed(x); });
    }
    MiniGridComponenet.prototype.ngOnInit = function () {
        var _this = this;
        this.registery = this.vmMatrixService.subscribeDirective(this.selectedRow);
        //this.identification=registery.directiveId;
        this.correlatedColumnName = this.registery.configObj.correlationColumn;
        this.registery.clickCallback.subscribe(function (result) { return _this.markCells(result); });
        this.markCells(this.selectedRow);
    };
    MiniGridComponenet.prototype.inputPushed = function (input) {
        if (input.Id === this.registery.modelObj.Id) {
            this.markCells(input);
        }
    };
    MiniGridComponenet.prototype.markCells = function (row) {
        var correlatedColumnNameLocal = this.correlatedColumnName;
        var value = row.cells.find(function (x) { return x.name === correlatedColumnNameLocal; });
        if (value) {
            var data = this.headersAndDataSets;
            data.forEach(function (table) {
                var dSet = table.dataSet;
                dSet.forEach(function (line) {
                    var correlatedFiled = line.cells.find(function (x) {
                        return x.name === correlatedColumnNameLocal;
                    });
                    if (correlatedFiled) {
                        correlatedFiled.val = value.val;
                    }
                });
            });
        }
    };
    MiniGridComponenet.prototype.inputClicked = function (line) {
        line.val = !line.val;
        this.checkAllCorrelations();
        this.vmMatrixService.partialCorrelation(this.registery.directiveId, { isAllTrue: this.isAllTrue, isAllFalse: this.isAllFalse });
    };
    MiniGridComponenet.prototype.checkAllCorrelations = function () {
        var correlatedColumnName = this.correlatedColumnName;
        var tempArray = new Array();
        var result = true;
        var data = this.headersAndDataSets;
        data.forEach(function (table) {
            var dSet = table.dataSet;
            dSet.forEach(function (line) {
                var correlatedFiled = line.cells.find(function (x) { return x.name === correlatedColumnName; });
                if (correlatedFiled) {
                    tempArray.push(correlatedFiled.val);
                }
            });
        });
        this.isAllFalse = tempArray.every(function (x) { return x === false; });
        this.isAllTrue = tempArray.every(function (x) { return x === true; });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], MiniGridComponenet.prototype, "selectedRow", void 0);
    MiniGridComponenet = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/ReusableComponents/miniGrid/miniGrid.html"),
            selector: 'miniGrid'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _a) || Object, (typeof (_b = typeof miniMatrixService_1.MiniMatrixService !== 'undefined' && miniMatrixService_1.MiniMatrixService) === 'function' && _b) || Object])
    ], MiniGridComponenet);
    return MiniGridComponenet;
    var _a, _b;
}());
exports.MiniGridComponenet = MiniGridComponenet;


/***/ }),

/***/ "./src/app/ReusableComponents/navbar/navbar.html":
/***/ (function(module, exports) {

module.exports = "<nav id=\"main-nav\" class=\"navbar\" role=\"navigation\">\r\n    <!-- responsive button -->\r\n    <button class=\"navbar-toggler hidden-md-up\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbar-responsive\" aria-controls=\"navbar-responsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">☰</button>\r\n    <div class=\"collapse navbar-toggleable-sm\" id=\"navbar-responsive\">\r\n        <ul class=\"nav navbar-nav\">\r\n            <li id=\"main-nav-logo\" class=\"hidden-sm-down\">\r\n                <a [routerLink]=\"['']\">\r\n                    <img alt=\"TD\" src=\"//www.tdstandards.com/assets-tdos/images/logos/td_shield_nowhitespace.gif\">\r\n                </a>\r\n            </li>\r\n            <template ngFor let-node [ngForOf]=\"links\" let-i=\"index\">\r\n                <template [ngIf]=\"node.Children.length > 0\">\r\n                    <li class=\"nav-item dropdown\">\r\n                        <a class=\"nav-link dropdown-toggle\" id=\"supportedContentDropdown-{{i}}\" aria-haspopup=\"true\" aria-expanded=\"false\">{{node.Title}}</a>\r\n                        <div class=\"dropdown-menu\" [attr.aria-labelledby]=\"'supportedContentDropdown-' + i\">\r\n                            <a *ngFor=\"let childNode of node.Children\" [routerLink]=\"childNode.RouteLink\" class=\"dropdown-item\">{{childNode.Title}}</a>\r\n                        </div>\r\n                    </li>\r\n                </template>\r\n                <template [ngIf]=\"node.Children.length == 0\">\r\n                    <li class=\"nav-item\">\r\n                        <a [routerLink]=\"node.RouteLink\" class=\"nav-link\">{{node.Title}}&nbsp;</a>\r\n                    </li>\r\n                </template>\r\n            </template>\r\n            <li id=\"account-link\" class=\"float-md-right nav-item right-menu-item\">\r\n                <a class=\"nav-link\" [routerLink]=\"['/Datahub/UserProfile']\">\r\n                    <span class=\"fa fa-user fa-lg\"></span> {{userName}}\r\n                </a>\r\n            </li>\r\n            <!-- Theme switcher -->\r\n            <li id=\"theme-toggle\" class=\"float-md-right nav-item right-menu-item\">\r\n                <a class=\"nav-link\">\r\n                    <span *ngIf=\"theme == 'standard'\" class=\"fa fa-adjust fa-lg\" title=\"Dark Theme\" (click)=\"toggleTheme()\"></span>\r\n                    <span *ngIf=\"theme == 'dark'\" class=\"fa fa-adjust fa-lg rotate-180\" title=\"Light Theme\" (click)=\"toggleTheme()\"></span>\r\n                </a>\r\n            </li>\r\n            <!-- Language switcher (new) -->\r\n            <li id=\"language-switcher\" class=\"float-md-right nav-item dropdown right-menu-item\">\r\n                <a class=\"nav-link dropdown-toggle\">\r\n                    <span class=\"fa fa-globe fa-lg\"></span>\r\n                </a>\r\n                <div class=\"dropdown-menu\">\r\n                    <a class=\"dropdown-item\" *ngFor=\"let itemOption of langList\" (click)=\"updateSelectedLanguage(itemOption.Id)\">{{itemOption.Description}}\r\n                        <span *ngIf=\"itemOption.Id == selectedLangId\" class=\"fa fa-check text-success\"></span>\r\n                    </a>\r\n                </div>\r\n            </li>\r\n            <li id=\"font-shrinker\" class=\"float-md-right nav-item right-menu-item\" (click)=\"shrinkAllFont()\">\r\n                <a class=\"nav-link\">\r\n                    <span class=\"fa fa-font\"></span>\r\n                </a>\r\n            </li>\r\n            <li id=\"font-expander\" class=\"float-md-right nav-item right-menu-item\" (click)=\"expandAllFont()\">\r\n                <a class=\"nav-link\">\r\n                    <span class=\"fa fa-font fa-lg\"></span>\r\n                </a>\r\n            </li>\r\n            <li class=\"float-md-right nav-item dropdown right-menu-item\" [ngClass]=\"envDetailsOpen ? 'open' : ''\">\r\n                <a class=\"nav-link\">\r\n                    <span class=\"fa fa-laptop fa-lg\"></span>\r\n                </a>\r\n                <div class=\"dropdown-menu\" (click)=\"toggleEnvDetails()\">\r\n                    <a class=\"dropdown-item\" *ngFor=\"let detail of envDetails\"><strong>{{detail.name}}:</strong> {{detail.value}}</a>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</nav>\r\n\r\n<navBarVert></navBarVert>\r\n<breadcrumb></breadcrumb>\r\n\r\n<template [ngIf]=\"canShowAlert\">\r\n    <div id=\"navbar-alerts\" tabindex=\"-1\" class=\"row\">\r\n        <div class=\"row\">\r\n            <img id=\"icon-warning\" alt=\"!\" src=\"../../Datahub/img/td-icon-info.png\">\r\n        </div>\r\n        <template ngFor let-alert1 [ngForOf]=\"alertInfo\">\r\n            <!--<div class=\"col-md-4\"> </div>-->\r\n            <!--<div class=\"col-md-4 center-block formItemLabel navbar-alert\">-->\r\n            <div class=\"col-md-12\">{{alert1.Description | LocalizationTranslate}}</div>\r\n        </template>\r\n    </div>\r\n</template>"

/***/ }),

/***/ "./src/app/ReusableComponents/navbar/navbar.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var appSettings_1 = __webpack_require__("./src/app/Configuration/appSettings.ts");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var localizationService_1 = __webpack_require__("./src/app/ReusableServices/localizationService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var navBar = (function () {
    function navBar(httpAbs, apiService, nav, router, localizationService, alert, loc) {
        var _this = this;
        this.nav = nav;
        this.router = router;
        this.localizationService = localizationService;
        this.alert = alert;
        this.loc = loc;
        this.routeName = "Home";
        this.userName = "Guest";
        this.canShowAlert = false;
        this.showAlertWindow = false;
        this.langList = new Array();
        this.theme = "standard";
        this.envDetails = [];
        this.envDetailsOpen = false;
        this.environmentBaseUrl = "/application/configuration/Environment";
        this.apiService = apiService;
        this.httpAbs = httpAbs;
        this.navigation = nav;
        this.navigation.navigationCb.subscribe(function (data) {
            _this.langList = _this.localizationService.languageList;
            if (_this.selectedLangId == undefined || _this.selectedLangCode == undefined) {
                _this.selectedLangId = _this.langList.find(function (p) { return p.LangCode.toLowerCase().substring(0, 2) == 'en'; }).Id;
                _this.selectedLangCode = _this.langList.find(function (p) { return p.LangCode.toLowerCase().substring(0, 2) == 'en'; }).LangCode;
            }
            _this.links = _this.navigation.buildNavigationMenu(data);
            _this.links = _this.sortDropdownLinks(_this.links);
        });
        this.setCurrentUser();
        this.localizationService.localizationEventEmitter.subscribe(function (message) {
            _this.refreshPage(message);
        });
    }
    navBar.prototype.activeClass = function (item) {
        if (this.isActive(item)) {
            return "list-group-item-info";
        }
        return "";
    };
    ;
    navBar.prototype.updateSelectedLanguage = function (langId) {
        this.localizationService.toggleSelection(langId);
    };
    navBar.prototype.refreshPage = function (lang) {
        this.selectedLangId = lang.Id;
        this.selectedLangCode = lang.LangCode;
        this.navigation.navigationCb.emit(this.links);
        this.navigation.getLeftMenuRoutes([this.navigation.leftMenuItems.LookupKey]);
        this.router.navigate(['/Datahub/PageRedirect', { path: this.loc.path() }]);
    };
    navBar.prototype.isActive = function (item) {
        return item.Active;
    };
    navBar.prototype.setCurrentUser = function () {
        var _this = this;
        var currentUser = new apiService_1.AuthUser();
        //this.apiService.getAuthCurrentUser()
        this.apiService.fetchMultipleList(['/auth/currentuser', this.environmentBaseUrl])
            .subscribe(function (res) {
            if (res[0]) {
                currentUser = _this.assignUserDetails(currentUser, res[0]);
            }
            if (res[1] && res[1].length) {
                _this.assignEnvironmentDetails(res[1]);
            }
        }, function (error) {
            _this.alert.error(appSettings_1.AppNotificationsMSG.apiMsg.apiGetUserInfo + '   ' + error.status);
        });
    };
    navBar.prototype.getActiveClass = function (path) {
        /*if (this.location.path().toLowerCase() == path.toLowerCase()) {
         return "active";
         }*/
        return "active";
    };
    navBar.prototype.showAlert = function (res) {
        this.canShowAlert = false;
        if (res) {
            if (res.DataTable.length) {
                this.alertInfo = res.DataTable;
                this.canShowAlert = true;
            }
        }
    };
    navBar.prototype.showHideAlert = function (result) {
        if (result != "disable") {
            this.canShowAlert = result;
        }
    };
    navBar.prototype.toggleTheme = function () {
        if (this.theme == "standard") {
            this.theme = "dark";
            document.getElementById('theme-link').setAttribute('href', 'resources/Datahub/assets/theme_dark.css');
        }
        else {
            this.theme = "standard";
            document.getElementById('theme-link').setAttribute('href', 'resources/Datahub/assets/theme_standard.css');
        }
    };
    navBar.prototype.shrinkAllFont = function () {
        var previousFontSize = window.getComputedStyle(document.getElementById("app-html")).getPropertyValue('font-size').split("px")[0];
        document.getElementById("app-html").style.fontSize = (parseInt(previousFontSize) - 1) + "px";
    };
    navBar.prototype.expandAllFont = function () {
        var previousFontSize = window.getComputedStyle(document.getElementById("app-html")).getPropertyValue('font-size').split("px")[0];
        document.getElementById("app-html").style.fontSize = (parseInt(previousFontSize) + 1) + "px";
    };
    navBar.prototype.toggleEnvDetails = function () {
        this.envDetailsOpen = !this.envDetailsOpen;
    };
    navBar.prototype.assignUserDetails = function (user, res) {
        user.CostCentre = res.CostCentre;
        user.Id = res.Id;
        user.Login = res.Login;
        user.Name = res.Name;
        var nPos = res.Login.lastIndexOf('\\');
        if (nPos > -1) {
            user.LoginName = res.Login.substring(nPos + 1).toString().trim();
        }
        this.userName = user.Login;
        this.userId = user.Id;
        this.apiService.CurrentUser = user;
        return user;
    };
    navBar.prototype.assignEnvironmentDetails = function (res) {
        var _this = this;
        JSON.parse(res).forEach(function (item) {
            var jsonStringPair = {
                name: Object.getOwnPropertyNames(item)[0],
                value: Object.values(item)[0]
            };
            _this.envDetails.push(jsonStringPair);
        });
    };
    navBar.prototype.sortDropdownLinks = function (links) {
        for (var _i = 0, links_1 = links; _i < links_1.length; _i++) {
            var link = links_1[_i];
            link.Children = link.Children.sort(function (a, b) {
                var firstValue = a.Name.toLowerCase();
                var secondValue = b.Name.toLowerCase();
                if (firstValue < secondValue)
                    return -1;
                if (firstValue > secondValue)
                    return 1;
                return 0;
            });
        }
        return links;
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Object]), 
        __metadata('design:returntype', String)
    ], navBar.prototype, "activeClass", null);
    navBar = __decorate([
        core_1.Component({
            selector: 'navBar',
            template: __webpack_require__("./src/app/ReusableComponents/navbar/navbar.html"),
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _a) || Object, (typeof (_b = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _b) || Object, (typeof (_c = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _c) || Object, (typeof (_d = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _d) || Object, (typeof (_e = typeof localizationService_1.LocalizationService !== 'undefined' && localizationService_1.LocalizationService) === 'function' && _e) || Object, (typeof (_f = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _f) || Object, (typeof (_g = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _g) || Object])
    ], navBar);
    return navBar;
    var _a, _b, _c, _d, _e, _f, _g;
}());
exports.navBar = navBar;


/***/ }),

/***/ "./src/app/ReusableComponents/navbarVert/navItem.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var NavItem = (function () {
    function NavItem(name, title, lookupKey, routeLink, children, menuType, active) {
        if (active === void 0) { active = false; }
        this.Children = [];
        this.Name = name;
        this.Title = title;
        this.LookupKey = lookupKey;
        this.RouteLink = routeLink;
        this.Children = children;
        this.Active = active;
        this.MenuType = menuType;
    }
    return NavItem;
}());
exports.NavItem = NavItem;


/***/ }),

/***/ "./src/app/ReusableComponents/navbarVert/navbarVert.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
//TODO:RF
//import {CORE_DIRECTIVES,} from '@angular/common'
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var localizationService_1 = __webpack_require__("./src/app/ReusableServices/localizationService.ts");
var NavBarVert = (function () {
    function NavBarVert(_router, navigation, localizationService) {
        var _this = this;
        this._router = _router;
        this.navigation = navigation;
        this.localizationService = localizationService;
        this.items = [];
        this.navigation.navigationLeftMenuEmitter.subscribe(function (data) {
            _this.items = _this.navigation.buildNavigationMenu(data);
        });
    }
    NavBarVert.prototype.activeClass = function (item) {
        if (item.Active) {
            return "list-group-item-info";
        }
        return "";
    };
    ;
    NavBarVert.prototype.activate = function (item) {
        var toggle = !item.Active;
        this.items.forEach(function (item) {
            item.Active = false;
        });
        item.Active = toggle;
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Object]), 
        __metadata('design:returntype', String)
    ], NavBarVert.prototype, "activeClass", null);
    NavBarVert = __decorate([
        core_1.Component({
            selector: 'navBarVert',
            template: __webpack_require__("./src/app/ReusableComponents/navbarVert/navbarvert.html"),
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _a) || Object, (typeof (_b = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _b) || Object, (typeof (_c = typeof localizationService_1.LocalizationService !== 'undefined' && localizationService_1.LocalizationService) === 'function' && _c) || Object])
    ], NavBarVert);
    return NavBarVert;
    var _a, _b, _c;
}());
exports.NavBarVert = NavBarVert;


/***/ }),

/***/ "./src/app/ReusableComponents/navbarVert/navbarvert.html":
/***/ (function(module, exports) {

module.exports = "<nav id=\"sub-nav\" class=\"navbar\">\r\n    <ul class=\"nav navbar-nav\">\r\n        <li *ngFor=\"let item of items\" (click)=\"activate(item)\" class=\"nav-item float-xs-none float-md-left\">\r\n            <a [routerLink]=\"item.RouteLink\" [routerLinkActive]=\"['list-group-item-info']\" class=\"nav-link\">{{item.Title}}</a>\r\n        </li>\r\n    </ul>\r\n</nav>\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/notification/notification.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"modal\" tabindex=\"-1\" role=\"dialog\" style=\"display:block !important;\" *ngIf=\"alert.alerts.length>0\">\r\n    <div *ngIf=\"!(alert.askConfirmation)\" class=\"modal-dialog\" style=\"height: 100%; width: 40%;\">\r\n        <div class=\"modal-content standard-callout-background\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"closeAll();\"><span aria-hidden=\"true\">&times;</span></button>\r\n                <h4 class=\"modal-title\">{{alert.notificationTitle}}</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <div>\r\n                    <table class=\"table\">\r\n                        <tbody>\r\n                        <tr *ngFor=\"let a of alert.alerts;let i = index\">\r\n                            <td>{{ a?.text + ' '}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"button-standard \" (click)=\"closeAll();\"><span class=\"fa fa-check-square-o fa-lg\"></span> OK</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"(alert.askConfirmation)\" class=\"modal-dialog\">\r\n        <div class=\"modal-content standard-callout-background\">\r\n            <div class=\"modal-header\">\r\n                <button type=\"button\" class=\"close\" (click)=\"closeAll();\"><span aria-hidden=\"true\">&times;</span></button>\r\n                <h4 class=\"modal-title\">{{alert.notificationTitle}}</h4>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <div>\r\n                    <table class=\"table\">\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>{{ alert.alerts[0]?.text + ' '}}</td>\r\n                        </tr>\r\n\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button class=\"button-standard \" name=\"btnOK\" (click)=\"clickOK(i)\">\r\n                    <span class=\"fa fa-check-square-o fa-lg\"></span>\r\n                    OK\r\n                </button>\r\n                <button class=\"button-standard \" name=\"btnCancel\" (click)=\"clickCancel(i)\">\r\n                    <span class=\"fa fa-ban fa-lg\"></span>\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/notification/notification.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var Notification = (function () {
    function Notification(alert) {
        this.alert = alert;
        this.active = true;
    }
    ;
    Notification.prototype.closeAlerts = function (i) {
        this.alert.alerts.splice(i, 1);
    };
    ;
    Notification.prototype.clickOK = function () {
        this.alert.requestConfirmationAnswer$.emit("OK");
        this.alert.askConfirmation = false;
        this.closeAll();
    };
    ;
    Notification.prototype.clickCancel = function () {
        this.alert.requestConfirmationAnswer$.emit("CANCEL");
        this.alert.askConfirmation = false;
        this.closeAll();
    };
    Notification.prototype.closeAll = function () {
        this.alert.alerts = [];
    };
    Notification = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/ReusableComponents/notification/notification.html"),
            selector: 'tdamNotifications'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _a) || Object])
    ], Notification);
    return Notification;
    var _a;
}());
exports.Notification = Notification;


/***/ }),

/***/ "./src/app/ReusableComponents/pagination/pagination.html":
/***/ (function(module, exports) {

module.exports = "<ul class=\"pagination\" [ngClass]=\"classMap\">\r\n    <li class=\"pagination-first page-item\" *ngIf=\"boundaryLinks\" [class.disabled]=\"noPrevious()||disabled\" (click)=\"selectPage(1, $event)\">\r\n        <a class=\"page-link\" href>{{getText('first')}}</a>\r\n    </li>\r\n    <li class=\"pagination-prev page-item\" *ngIf=\"directionLinks\" [class.disabled]=\"noPrevious()||disabled\" (click)=\"selectPage(page - 1, $event)\">\r\n        <a class=\"page-link\" href>{{getText('previous')}}</a>\r\n    </li>\r\n    <li *ngFor=\"let pg of pages\" class=\"page-item\" [class.active]=\"pg.active\" [class.disabled]=\"disabled&&!pg.active\" class=\"pagination-page page-item\" (click)=\"selectPage(pg.number, $event)\">\r\n        <a class=\"page-link\" href>{{pg.text}}</a>\r\n    </li>\r\n    <li class=\"pagination-next page-item\" *ngIf=\"directionLinks\" [class.disabled]=\"noNext()\" (click)=\"selectPage(page + 1, $event)\">\r\n        <a class=\"page-link\" href>{{getText('next')}}</a></li>\r\n    <li class=\"pagination-last page-item\" *ngIf=\"boundaryLinks\" [class.disabled]=\"noNext()\" (click)=\"selectPage(totalPages, $event)\">\r\n        <a class=\"page-link\" href>{{getText('last')}}</a></li>\r\n</ul>"

/***/ }),

/***/ "./src/app/ReusableComponents/pagination/pagination.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
exports.CUSTOM_PAGINATION_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return Pagination; }),
    multi: true
};
var Pagination = (function () {
    function Pagination() {
        this.isInit = false;
        this.boundaryLinks = false;
        this.directionLinks = true;
        // labels
        this.firstText = 'First';
        this.previousText = 'Previous';
        this.nextText = 'Next';
        this.lastText = 'Last';
        this.rotate = true;
        this.numPages = new core_1.EventEmitter();
        this.pageChanged = new core_1.EventEmitter();
        this.currentMasterPage = 1;
        this.currentChildPage = 1;
        this._isChildPage = false;
        this.onChange = function (_) {
        };
        this.onTouched = function () {
        };
    }
    Object.defineProperty(Pagination.prototype, "page", {
        get: function () {
            return (this.IsChildPage) ? this.currentChildPage : this.currentMasterPage;
        },
        set: function (value) {
            var _page = (value > this.totalPages) ? this.totalPages : (value || 1);
            if (this.isInit) {
                this.pageChanged.emit({
                    page: (this.IsChildPage) ? this.currentChildPage = _page : this.currentMasterPage = _page
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pagination.prototype, "IsChildPage", {
        get: function () {
            return this._isChildPage;
        },
        set: function (v) {
            this._isChildPage = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pagination.prototype, "totalPages", {
        get: function () {
            return this._totalPages;
        },
        set: function (v) {
            this._totalPages = v;
            this.numPages.emit(v);
            if (this.isInit) {
                this.selectPage(this.page);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pagination.prototype, "totalItems", {
        get: function () {
            return this._totalItems;
        },
        set: function (v) {
            this._totalItems = v;
            this.totalPages = this.calculateTotalPages();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Pagination.prototype, "itemsPerPage", {
        get: function () {
            return this._itemsPerPage;
        },
        set: function (v) {
            this._itemsPerPage = v;
            this.totalPages = this.calculateTotalPages();
        },
        enumerable: true,
        configurable: true
    });
    Pagination.prototype.ngOnInit = function () {
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.page = 1;
    };
    Pagination.prototype.calculateTotalPages = function () {
        var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);
        return Math.max(totalPages || 0, 1);
    };
    Pagination.prototype.getPages = function (currentPage, totalPages) {
        var pages = [];
        // Default page limits
        var startPage = 1;
        var endPage = totalPages;
        var isMaxSized = typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;
        // recompute if maxSize
        if (isMaxSized) {
            if (this.rotate) {
                // Current page is displayed in the middle of the visible ones
                startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                endPage = startPage + this.maxSize - 1;
                // Adjust if limit is exceeded
                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = endPage - this.maxSize + 1;
                }
            }
            else {
                // Visible pages are paginated with maxSize
                startPage = ((Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize) + 1;
                // Adjust last page if limit is exceeded
                endPage = Math.min(startPage + this.maxSize - 1, totalPages);
            }
        }
        // Add page number links
        for (var number = startPage; number <= endPage; number++) {
            var page = this.makePage(number, number.toString(), number === currentPage);
            pages.push(page);
        }
        // Add links to move between page sets
        if (isMaxSized && !this.rotate) {
            if (startPage > 1) {
                var previousPageSet = this.makePage(startPage - 1, '...', false);
                pages.unshift(previousPageSet);
            }
            if (endPage < totalPages) {
                var nextPageSet = this.makePage(endPage + 1, '...', false);
                pages.push(nextPageSet);
            }
        }
        return pages;
    };
    Pagination.prototype.writeValue = function (value) {
        this.page = value;
        this.pages = this.getPages(this.page, this.totalPages);
        if (!this.isInit) {
            this.isInit = true;
        }
    };
    Pagination.prototype.selectPage = function (page, event) {
        if (event) {
            event.preventDefault();
        }
        if (!this.disabled) {
            if (event && event.target) {
                var target = event.target;
                target.blur();
            }
            this.writeValue(page);
            this.pageChanged.emit({
                page: this.page
            });
        }
    };
    Pagination.prototype.getText = function (key) {
        return key;
    };
    Pagination.prototype.noPrevious = function () {
        return this.page === 1;
    };
    Pagination.prototype.noNext = function () {
        return this.page === this.totalPages;
    };
    // Create page object used in template
    Pagination.prototype.makePage = function (number, text, isActive) {
        return {
            number: number,
            text: text,
            active: isActive
        };
    };
    Pagination.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    Pagination.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], Pagination.prototype, "maxSize", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Pagination.prototype, "boundaryLinks", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Pagination.prototype, "directionLinks", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Pagination.prototype, "firstText", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Pagination.prototype, "previousText", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Pagination.prototype, "nextText", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Pagination.prototype, "lastText", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Pagination.prototype, "rotate", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Pagination.prototype, "disabled", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_a = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _a) || Object)
    ], Pagination.prototype, "numPages", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_b = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _b) || Object)
    ], Pagination.prototype, "pageChanged", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Pagination.prototype, "IsChildPage", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], Pagination.prototype, "totalItems", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], Pagination.prototype, "itemsPerPage", null);
    Pagination = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/ReusableComponents/pagination/pagination.html"),
            selector: 'pagination',
            providers: [exports.CUSTOM_PAGINATION_ACCESSOR],
        }), 
        __metadata('design:paramtypes', [])
    ], Pagination);
    return Pagination;
    var _a, _b;
}());
exports.Pagination = Pagination;


/***/ }),

/***/ "./src/app/ReusableComponents/slimSlider/SlimSlider.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var _Score_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/_Score.ts");
var slimLoadingBarService_1 = __webpack_require__("./src/app/ReusableServices/slimLoadingBarService.ts");
var SlimSliderComponent = (function () {
    function SlimSliderComponent(service) {
        this.service = service;
        this._progress = '0%';
        this.color = 'firebrick';
        this.height = '2px';
        this.show = true;
    }
    Object.defineProperty(SlimSliderComponent.prototype, "progress", {
        get: function () {
            return this._progress;
        },
        set: function (value) {
            if (_Score_1._Score.isPresent(value)) {
                this._progress = value + '%';
            }
        },
        enumerable: true,
        configurable: true
    });
    SlimSliderComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.service.observable.subscribe(function (event) {
            if (event.type === slimLoadingBarService_1.SlimLoadingBarEventType.PROGRESS) {
                _this.progress = event.value;
            }
            else if (event.type === slimLoadingBarService_1.SlimLoadingBarEventType.COLOR) {
                _this.color = event.value;
            }
            else if (event.type === slimLoadingBarService_1.SlimLoadingBarEventType.HEIGHT) {
                _this.height = event.value;
            }
            else if (event.type === slimLoadingBarService_1.SlimLoadingBarEventType.VISIBLE) {
                _this.show = event.value;
            }
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], SlimSliderComponent.prototype, "progress", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], SlimSliderComponent.prototype, "color", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], SlimSliderComponent.prototype, "height", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], SlimSliderComponent.prototype, "show", void 0);
    SlimSliderComponent = __decorate([
        core_1.Component({
            selector: 'ng2-slim-loading-bar',
            template: "\n<div class=\"slim-loading-bar\">\n    <div class=\"slim-loading-bar-progress\" [style.width]=\"progress\" [style.backgroundColor]=\"color\" [style.color]=\"color\"\n        [style.height]=\"height\" [style.opacity]=\"show ? '1' : '0'\"></div>\n</div>"
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof slimLoadingBarService_1.SlimLoadingBarService !== 'undefined' && slimLoadingBarService_1.SlimLoadingBarService) === 'function' && _a) || Object])
    ], SlimSliderComponent);
    return SlimSliderComponent;
    var _a;
}());
exports.SlimSliderComponent = SlimSliderComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/spinner/spinner.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Rx_1 = __webpack_require__("./node_modules/rxjs/Rx.js");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var SpinnerComponent = (function () {
    function SpinnerComponent(interForm) {
        var _this = this;
        this.interForm = interForm;
        this.isDelayedRunning = false;
        this.spinnerText = 'Loading contents...';
        this.spinnerScope = 'page';
        this.delay = 300;
        this.scope = 'card';
        this.text = '';
        this.spinnerSubscription = this.interForm.spinnerEmitter.subscribe(function (value) {
            _this.isDelayedRunning = value.isSpinnerRunning;
            _this.spinnerText = value.spinnerText;
            _this.spinnerScope = value.spinnerScope;
        });
    }
    Object.defineProperty(SpinnerComponent.prototype, "isRunning", {
        set: function (value) {
            if (!value) {
                this.cancelTimeout();
                this.isDelayedRunning = false;
            }
            if (this.currentTimeout) {
                return;
            }
            var timer = Rx_1.Observable.timer(5, this.delay);
            var self = this;
            this.currentTimeout = timer.subscribe(function (t) {
                self.isDelayedRunning = value;
                self.cancelTimeout();
            });
        },
        enumerable: true,
        configurable: true
    });
    SpinnerComponent.prototype.cancelTimeout = function () {
        if (this.currentTimeout) {
            this.currentTimeout.unsubscribe();
        }
        this.currentTimeout = undefined;
    };
    SpinnerComponent.prototype.ngOnDestroy = function () {
        if (this.spinnerSubscription) {
            this.spinnerSubscription.unsubscribe();
        }
        this.cancelTimeout();
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], SpinnerComponent.prototype, "delay", void 0);
    SpinnerComponent = __decorate([
        core_1.Component({
            selector: 'spinner',
            template: __webpack_require__("./src/app/ReusableComponents/spinner/spinner.html"),
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _a) || Object])
    ], SpinnerComponent);
    return SpinnerComponent;
    var _a;
}());
exports.SpinnerComponent = SpinnerComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/spinner/spinner.html":
/***/ (function(module, exports) {

module.exports = "<div [hidden]=\"!isDelayedRunning\" class=\"spinner-background\" [ngClass]=\"{'global-spinner' : scope == 'page'}\">\r\n    <div class=\"spinner-wrapper text-xs-center\">\r\n        <div class=\"standard-spinner\"></div>\r\n        <br>\r\n        <div class=\"spinner-text\" *ngIf=\"scope == 'page' && text != ''\">\r\n            <span>{{text}}</span>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/ReusableComponents/sqlQueryBuilder/sqlQueryBuilder.html":
/***/ (function(module, exports) {

module.exports = "<template [ngIf]=\"visiblePlugin\">\r\n    <article Id=\"CustomPlugin\">\r\n        <div class=\"separator\"></div>\r\n        <section>\r\n            <div>\r\n            <textarea rows=\"10\" cols=\"50\" [(ngModel)]=\"pluginValue\" (click)=\"textAreaClicked()\">\r\n            </textarea>\r\n            </div>\r\n            <div>\r\n                <button (click)=\"validateClicked()\" class=\"button-standard \">Validate</button>\r\n                <button [disabled]=\"!enableInsert\" (click)=\"insertClicked()\" class=\"button-standard \">Insert</button>\r\n                <button (click)=\"cancelClicked()\" class=\"button-standard \">Cancel</button>\r\n                <button (click)=\"resetClicked()\" class=\"button-standard \">Reset</button>\r\n            </div>\r\n            <div class=\"separator\"></div>\r\n            <template [ngIf]=\"showValidation\">\r\n                <Label>Matching Dates;</Label>\r\n                <template ngFor let-day [ngForOf]=\"applicableDatesUI\">\r\n                    <div>\r\n                        <label>{{day.ApplicableDate | date }}</label>\r\n                    </div>\r\n                </template>\r\n                <template [ngIf]=\"isEmptyResult\">\r\n                    No matching result !\r\n                </template>\r\n            </template>\r\n        </section>\r\n        <section>\r\n            <template ngFor let-attr [ngForOf]=\"attributesVM\">\r\n                <div>\r\n                    <label>{{attr.AttributeName}}</label>\r\n                    <label>{{attr.UpperLimit}}</label>\r\n                    <label>{{attr.LowerLimit}}</label>\r\n                    <a (click)=\"attributeClicked(attr)\">add</a>\r\n                </div>\r\n            </template>\r\n        </section>\r\n        <section></section>\r\n    </article>\r\n</template>"

/***/ }),

/***/ "./src/app/ReusableComponents/sqlQueryBuilder/sqlQueryBuilder.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var sqlQueryBuilder = (function () {
    function sqlQueryBuilder(httpPrx, alt) {
        this.httpPrx = httpPrx;
        this.alt = alt;
        this.newBase = '/schedules/';
        this.pluginValue = "";
        this.visiblePlugin = true;
        this.showValidation = false;
        this.enableInsert = false;
        this.outputNotifier = new core_1.EventEmitter();
        this.isEmptyResult = false;
        this.disableForm();
        this.httpProxy = httpPrx;
        this.alert = alt;
        this.getDaysAttributes();
    }
    sqlQueryBuilder.prototype.ngOnInit = function () {
        this.pluginValue = this.pluginInput;
    };
    sqlQueryBuilder.prototype.getDaysAttributes = function () {
        var _this = this;
        this.httpProxy.fetch(this.newBase + 'dayattributeslimit').subscribe(function (res) {
            _this.transformAttributes(res);
            _this.cleanUp();
        }, function (error) {
            _this.alert.error("async error #" + error.status);
            _this.enableForm();
        }, function () {
        });
    };
    sqlQueryBuilder.prototype.getDaysAttributesValidation = function () {
        var _this = this;
        var fullPath = this.newBase + 'getvaliddaysfordayattribute';
        var tt = '{"LookupDaysWhereClause":"' + this.pluginValue + '"}';
        this.httpProxy.insertJson(fullPath, tt).subscribe(function (res) {
            if (res.DataTable.length === 0) {
                _this.enableInsert = false;
                _this.isEmptyResult = true;
            }
            else {
                _this.enableInsert = true;
                _this.isEmptyResult = false;
                _this.applicableDates = res.DataTable;
                _this.rebuildDates();
            }
        }, function (error) {
            _this.alert.error("async error #" + error.status);
            _this.enableInsert = false;
        }, function () {
        });
    };
    sqlQueryBuilder.prototype.rebuildDates = function () {
        var allDates = this.applicableDates;
        var newUI = new Array();
        allDates.forEach(function (x) {
            var tt = x.ApplicableDate.substring(0, 10);
            var date = new Date(tt);
            newUI.push({ "ApplicableDate": date });
        });
        this.applicableDatesUI = newUI;
    };
    sqlQueryBuilder.prototype.transformAttributes = function (data) {
        var vm = new Array();
        var sequence = 0;
        data.forEach(function (x) {
            vm.push({
                Id: sequence,
                AttributeName: x.AttributeName.replace('[', '').replace(']', ''),
                UpperLimit: x.UpperLimit,
                LowerLimit: x.LowerLimit
            });
        });
        this.attributesVM = vm;
    };
    sqlQueryBuilder.prototype.cleanUp = function () {
    };
    sqlQueryBuilder.prototype.disableForm = function () {
        var dsbControls = new Array();
        var form = document.forms[0];
        var allElements = [].slice.call(form.elements);
        for (var element in allElements) {
            var item = allElements[element];
            var isDisabled = item.disabled;
            if (isDisabled) {
                dsbControls.push(item.id);
            }
            item.readOnly = 'true';
            item.disabled = 'true';
        }
        ;
        this.disabledControles = dsbControls;
    };
    sqlQueryBuilder.prototype.enableForm = function () {
        var form = document.forms[0];
        var allElements = [].slice.call(form.elements);
        for (var element in allElements) {
            var item = allElements[element];
            if (this.disabledControles.indexOf(item.id) === -1) {
                item.readOnly = false;
                item.disabled = false;
                item.enabled = true;
            }
        }
        ;
    };
    sqlQueryBuilder.prototype.validateClicked = function () {
        this.getDaysAttributesValidation();
        this.showValidation = true;
    };
    sqlQueryBuilder.prototype.insertClicked = function () {
        this.enableForm();
        this.outputNotifier.emit({
            value: this.pluginValue.replace("\n", "")
        });
        this.enableInsert = false;
        this.showValidation = false;
        this.visiblePlugin = false;
    };
    sqlQueryBuilder.prototype.resetClicked = function () {
        this.showValidation = false;
        this.pluginValue = "";
        this.enableInsert = false;
    };
    sqlQueryBuilder.prototype.cancelClicked = function () {
        this.enableForm();
        this.visiblePlugin = false;
        this.showValidation = false;
        this.enableInsert = false;
    };
    sqlQueryBuilder.prototype.attributeClicked = function (attr) {
        this.showValidation = false;
        if (this.pluginValue === "") {
            this.pluginValue = " " + attr.AttributeName + "=" + attr.LowerLimit;
        }
        else {
            this.pluginValue = this.pluginValue + '\n' + " AND " + attr.AttributeName + "=" + attr.LowerLimit;
        }
        this.enableInsert = false;
        this.showValidation = false;
    };
    sqlQueryBuilder.prototype.textAreaClicked = function () {
        this.showValidation = false;
        this.enableInsert = false;
    };
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], sqlQueryBuilder.prototype, "outputNotifier", void 0);
    __decorate([
        core_1.Input('pluginInput'), 
        __metadata('design:type', Object)
    ], sqlQueryBuilder.prototype, "pluginInput", void 0);
    sqlQueryBuilder = __decorate([
        core_1.Component({
            selector: 'sql-query-builder',
            template: __webpack_require__("./src/app/ReusableComponents/sqlQueryBuilder/sqlQueryBuilder.html"),
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _a) || Object, (typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object])
    ], sqlQueryBuilder);
    return sqlQueryBuilder;
    var _a, _b;
}());
exports.sqlQueryBuilder = sqlQueryBuilder;


/***/ }),

/***/ "./src/app/ReusableComponents/standardToasty/toast.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var toasty_service_1 = __webpack_require__("./src/app/ReusableServices/toasty.service.ts");
/**
 * A Toast component shows message with title and close button.
 */
var ToastComponent = (function () {
    function ToastComponent(toastSer) {
        this.closeToastEvent = new core_1.EventEmitter();
        this.toastService = toastSer;
    }
    ToastComponent.prototype.close = function ($event) {
        $event.preventDefault();
        this.closeToastEvent.next(this.toast);
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', (typeof (_a = typeof toasty_service_1.ToastData !== 'undefined' && toasty_service_1.ToastData) === 'function' && _a) || Object)
    ], ToastComponent.prototype, "toast", void 0);
    __decorate([
        core_1.Output('closeToast'), 
        __metadata('design:type', Object)
    ], ToastComponent.prototype, "closeToastEvent", void 0);
    ToastComponent = __decorate([
        core_1.Component({
            selector: 'ng2-toast',
            template: __webpack_require__("./src/app/ReusableComponents/standardToasty/toast.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof toasty_service_1.ToastyService !== 'undefined' && toasty_service_1.ToastyService) === 'function' && _b) || Object])
    ], ToastComponent);
    return ToastComponent;
    var _a, _b;
}());
exports.ToastComponent = ToastComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/standardToasty/toast.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"toast\" [ngClass]=\"[toast.type, toast.theme]\">\r\n    <div *ngIf=\"toast.showClose\" class=\"close-button\" (click)=\"close($event)\"></div>\r\n    <div *ngIf=\"toast.title || toast.msg\" class=\"toast-text\">\r\n        <span *ngIf=\"toast.title\" class=\"toast-title\">{{toast.title}}</span>\r\n        <br *ngIf=\"toast.title && toast.msg\" />\r\n        <span *ngIf=\"toast.msg\" class=\"toast-msg\" >{{toast.msg}}</span>\r\n    </div>\r\n</div>`"

/***/ }),

/***/ "./src/app/ReusableComponents/standardToasty/toasty.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var toasty_utils_1 = __webpack_require__("./src/app/ReusableComponents/standardToasty/toasty.utils.ts");
var toasty_service_1 = __webpack_require__("./src/app/ReusableServices/toasty.service.ts");
/**
 * Toasty is container for Toast components
 */
var ToastyComponent = (function () {
    function ToastyComponent(config, toastyService) {
        this.config = config;
        this.toastyService = toastyService;
        this._position = '';
        // The storage for toasts.
        this.toasts = [];
        // Initialise position
        this.position = '';
    }
    Object.defineProperty(ToastyComponent.prototype, "position", {
        get: function () {
            return this._position;
        },
        // The window position where the toast pops up. Possible values:
        // - bottom-right (default value from ToastConfig)
        // - bottom-left
        // - top-right
        // - top-left
        // - top-center
        // - bottom-center
        // - center-center
        set: function (value) {
            if (value) {
                var notFound = true;
                for (var i = 0; i < ToastyComponent.POSITIONS.length; i++) {
                    if (ToastyComponent.POSITIONS[i] === value) {
                        notFound = false;
                        break;
                    }
                }
                if (notFound) {
                    // Position was wrong - clear it here to use the one from config.
                    value = this.config.position;
                }
            }
            else {
                value = this.config.position;
            }
            this._position = 'toasty-position-' + value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the
     * first time, and before any of its children have been checked. It is invoked only once when the
     * directive is instantiated.
     */
    ToastyComponent.prototype.ngOnInit = function () {
        var _this = this;
        // We listen our service to recieve new toasts from it
        this.toastyService.getToasts().subscribe(function (toast) {
            // If we've gone over our limit, remove the earliest
            // one from the array
            if (_this.toasts.length >= _this.config.limit) {
                _this.toasts.shift();
            }
            // Add toasty to array
            _this.toasts.push(toast);
            //
            // If there's a timeout individually or globally,
            // set the toast to timeout
            if (toast.timeout) {
                _this._setTimeout(toast);
            }
        });
        // We listen clear all comes from service here.
        this.toastyService.getClear().subscribe(function (id) {
            if (id) {
                _this.clear(id);
            }
            // Lets clear all toasts
            _this.clearAll();
        });
    };
    /**
     * Event listener of 'closeToast' event comes from ToastyComponent.
     * This method removes ToastComponent assosiated with this Toast.
     */
    ToastyComponent.prototype.closeToast = function (toast) {
        this.clear(toast.id);
    };
    /**
     * Clear individual toast by id
     * @param id is unique identifier of Toast
     */
    ToastyComponent.prototype.clear = function (id) {
        var _this = this;
        if (id) {
            this.toasts.forEach(function (value, key) {
                if (value.id === id) {
                    if (value.onRemove && toasty_utils_1.isFunction(value.onRemove)) {
                        value.onRemove.call(_this, value);
                    }
                    _this.toasts.splice(key, 1);
                }
            });
        }
        else {
            throw new Error('Please provide id of Toast to close');
        }
    };
    /**
     * Clear all toasts
     */
    ToastyComponent.prototype.clearAll = function () {
        var _this = this;
        this.toasts.forEach(function (value, key) {
            if (value.onRemove && toasty_utils_1.isFunction(value.onRemove)) {
                value.onRemove.call(_this, value);
            }
        });
        this.toasts = [];
    };
    /**
     * Custom setTimeout function for specific setTimeouts on individual toasts.
     */
    ToastyComponent.prototype._setTimeout = function (toast) {
        var _this = this;
        window.setTimeout(function () {
            _this.clear(toast.id);
        }, toast.timeout);
    };
    /**
     * Set of constants defins position of Toasty on the page.
     */
    ToastyComponent.POSITIONS = ['bottom-right', 'bottom-left', 'top-right', 'top-left', 'top-center', 'bottom-center', 'center-center'];
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], ToastyComponent.prototype, "position", null);
    ToastyComponent = __decorate([
        core_1.Component({
            selector: 'ng2-toasty',
            template: __webpack_require__("./src/app/ReusableComponents/standardToasty/toasty.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof toasty_service_1.ToastyConfig !== 'undefined' && toasty_service_1.ToastyConfig) === 'function' && _a) || Object, (typeof (_b = typeof toasty_service_1.ToastyService !== 'undefined' && toasty_service_1.ToastyService) === 'function' && _b) || Object])
    ], ToastyComponent);
    return ToastyComponent;
    var _a, _b;
}());
exports.ToastyComponent = ToastyComponent;


/***/ }),

/***/ "./src/app/ReusableComponents/standardToasty/toasty.html":
/***/ (function(module, exports) {

module.exports = "<div id=\"toasty\" [ngClass]=\"[position]\">\r\n    <ng2-toast *ngFor=\"let toast of toasts\" [toast]=\"toast\" (closeToast)=\"closeToast(toast)\"></ng2-toast>\r\n</div>`"

/***/ }),

/***/ "./src/app/ReusableComponents/standardToasty/toasty.utils.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Check and return true if an object is type of string
 */
function isString(obj) {
    return typeof obj === "string";
}
exports.isString = isString;
/**
 * Check and return true if an object is type of number
 */
function isNumber(obj) {
    return typeof obj === "number";
}
exports.isNumber = isNumber;
/**
 * Check and return true if an object is type of Function
 */
function isFunction(obj) {
    return typeof obj === "function";
}
exports.isFunction = isFunction;


/***/ }),

/***/ "./src/app/ReusableComponents/tabBuilder/tabBuilder.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"card-header\" *ngIf=\"showTabHeaders\">\r\n    <ul class=\"nav nav-tabs card-header-tabs float-md-left\">\r\n        <li class=\"nav-item\" *ngFor=\"let ln of tabs\" (click)=\"childClicked(ln)\">\r\n            <a class=\"nav-link {{ln.activeClassChild}}\">{{ln.TabKey | LocalizationTranslate}}</a>\r\n        </li>\r\n    </ul>\r\n</div>\r\n<!-- <article id=\"pluginSection\">\r\n     <div #dynamictabplugin></div>\r\n </article>-->\r\n<div class=\"card-block\">\r\n    <template ngFor let-msg [ngForOf]=\"messages\">\r\n        <ul class=\"alert {{msg.alert}}\">\r\n            <li *ngFor=\"let msgText of msg.text\">{{msgText}}</li>\r\n        </ul>\r\n    </template>\r\n    <template ngFor let-controlitem [ngForOf]=\"pageControls\">\r\n        <div *ngIf=\"controlitem.PageType == 'formbuilder' && controlitem.ShowDefault\" class=\"row\">\r\n            <b><div class=\"col-sm-12\" *ngIf=\"controlitem.ComponentTitle\">{{controlitem.ComponentTitle}}</div></b>\r\n            <div class=\"col-sm-12 col-md-6\">\r\n                <formBuilder [gridSettings]=\"controlitem.gridSettings\"\r\n                             [httpProxy]=\"controlitem.httpProxy\" [pluginInput]=\"controlitem.data\"\r\n                             [PageType]=\"controlitem.PageOperationType\"\r\n                             (formBuilderNotifier)=\"updateDataFromComponents($event, controlitem.ComponentName)\"></formBuilder>\r\n            </div>\r\n        </div>\r\n        <div *ngIf=\"controlitem.PageType =='assignablelist' && controlitem.ShowDefault\" class=\"row\">\r\n            <b><div class=\"col-sm-12\" *ngIf=\"controlitem.ComponentTitle\">{{controlitem.ComponentTitle}}</div></b>\r\n            <assignable-list [inputSettings]=\"controlitem.gridSettings\"\r\n                             [inputList]=\"controlitem.inputList\" [assignedList]=\"controlitem.assignedList\"\r\n                             [inputTitle]=\"controlitem.inputTitle\" [assignedTitle]=\"controlitem.assignedTitle\"\r\n                             (listOut)=\"updateDataFromComponents($event,controlitem.ComponentName)\"></assignable-list>\r\n        </div>\r\n        <div *ngIf=\"controlitem.PageType =='displaygrid' && controlitem.ShowDefault\" class=\"row\">\r\n            <b><div class=\"col-sm-12\" *ngIf=\"controlitem.ComponentTitle\">{{controlitem.ComponentTitle}}</div></b>\r\n            <div class=\"col-sm-12\">\r\n                <displayGrid [inputGridSettings]=\"controlitem.gridSettings\"\r\n                             [inputHttpProxy]=\"controlitem.httpProxy\" [inputPageName]=\"controlitem.ComponentName\"\r\n                             [pluginInput]=\"controlitem.data\" [ParentIdInputValue]=\"controlitem.parentIdInputValue\"\r\n                             (displayGridNotifier)=\"updateDataFromComponents($event, controlitem.ComponentName)\"></displayGrid>\r\n            </div>\r\n        </div>\r\n    </template>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/tabBuilder/tabBuilder.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var TabBuilder = (function () {
    function TabBuilder(intFormSvc) {
        this.intFormSvc = intFormSvc;
        this.tabEmitter = new core_1.EventEmitter();
        this.tabContentEmitter = new core_1.EventEmitter();
        this.showTabHeaders = false;
        this.pageControls = [];
        this.tabs = [];
        this.messages = [];
    }
    TabBuilder.prototype.ngOnInit = function () {
        if (this.tabsList && this.tabsList.length) {
            if (this.tabsList.length > 1) {
                this.showTabHeaders = true;
            }
            this.buildTabs();
            this.childClicked(this.tabs[0]);
        }
    };
    TabBuilder.prototype.buildTabs = function () {
        var _this = this;
        if (this.tabsList && this.tabsList.length) {
            this.tabsList.forEach(function (x) {
                _this.tabs.push({
                    TabKey: x.TabKey,
                    TabName: x.TabName,
                    activeClassChild: "",
                    visible: false
                });
            });
        }
    };
    TabBuilder.prototype.childClicked = function (tabData) {
        this.selectedTab = tabData;
        this.tabs.forEach(function (x) {
            x.activeClassChild = "";
            x.visible = false;
        });
        this.tabEmitter.emit({
            TabKey: tabData.TabKey
        });
    };
    TabBuilder.prototype.displayTabInfo = function (incomingTabInfo) {
        var _this = this;
        var tempTabData = this.tabs.find(function (p) { return p.TabKey == incomingTabInfo.TabKey; });
        tempTabData.activeClassChild = "active";
        tempTabData.visible = true;
        this.pageControls = [];
        this.messages = [];
        incomingTabInfo.TabControls.forEach(function (x) {
            _this.pageControls.push(x);
        });
        this.intFormSvc.stopSpinner();
    };
    TabBuilder.prototype.updateDataFromComponents = function (outputValue, componentName) {
        //TODO: Balaji
        // this.intFormSvc.spinnerRunning = true;
        this.tabContentEmitter.emit({
            updatedValue: outputValue,
            ComponentName: componentName,
            TabKey: this.selectedTab.TabKey
        });
    };
    TabBuilder.prototype.LoadSpecificTabsByUpdate = function (incomingTabsList) {
        var _this = this;
        if (this.pageControls && this.pageControls.length) {
            incomingTabsList.forEach(function (x) {
                var index = _this.pageControls.findIndex(function (p) { return p.ComponentName == x.ComponentName; });
                if (index >= 0) {
                    _this.pageControls[index] = x;
                }
            });
        }
        this.intFormSvc.stopSpinner();
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], TabBuilder.prototype, "tabsList", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_a = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _a) || Object)
    ], TabBuilder.prototype, "tabEmitter", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_b = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _b) || Object)
    ], TabBuilder.prototype, "tabContentEmitter", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], TabBuilder.prototype, "messages", void 0);
    TabBuilder = __decorate([
        core_1.Component({
            selector: 'tabBuilder',
            template: __webpack_require__("./src/app/ReusableComponents/tabBuilder/tabBuilder.html"),
        }), 
        __metadata('design:paramtypes', [(typeof (_c = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _c) || Object])
    ], TabBuilder);
    return TabBuilder;
    var _a, _b, _c;
}());
exports.TabBuilder = TabBuilder;


/***/ }),

/***/ "./src/app/ReusableComponents/tileView/tileView.html":
/***/ (function(module, exports) {

module.exports = "<div id=\"tileview-options\">\r\n    <div class=\"row\">\r\n        <div *ngFor=\"let childItem of menuItemsList\" (click)=\"gotoChildItem(childItem)\" class=\"col-md-4\">\r\n            <div class=\"card card-block text-xs-center\">\r\n                <h6 class=\"card-title mb-0\">{{childItem.LookupKey | LocalizationTranslate}}</h6>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/ReusableComponents/tileView/tileView.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var TileView = (function () {
    function TileView(router, navigationService) {
        this.router = router;
        this.navigationService = navigationService;
        this.menuItemsList = [];
    }
    TileView.prototype.gotoChildItem = function (childItem) {
        this.router.navigate(childItem.RouteLink);
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], TileView.prototype, "menuItemsList", void 0);
    TileView = __decorate([
        core_1.Component({
            selector: 'tileView',
            //template: require('./app/ReusableComponents/tabBuilder/tabBuilder.html'),
            template: __webpack_require__("./src/app/ReusableComponents/tileView/tileView.html"),
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _a) || Object, (typeof (_b = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _b) || Object])
    ], TileView);
    return TileView;
    var _a, _b;
}());
exports.TileView = TileView;


/***/ }),

/***/ "./src/app/ReusableComponents/treeView/TreeViewModule.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var treeViewBuilder_1 = __webpack_require__("./src/app/ReusableComponents/treeView/treeViewBuilder/treeViewBuilder.ts");
var treeViewMain_1 = __webpack_require__("./src/app/ReusableComponents/treeView/treeViewMain/treeViewMain.ts");
var treeViewAddEditForm_1 = __webpack_require__("./src/app/ReusableComponents/treeView/treeViewAddEditForm/treeViewAddEditForm.ts");
var treeViewChildrenParser_1 = __webpack_require__("./src/app/ReusableComponents/treeView/treeViewChildrenParser/treeViewChildrenParser.ts");
var reportBuilder_1 = __webpack_require__("./src/app/ReusableComponents/treeView/reportBuilder/reportBuilder.ts");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var TreeViewModule = (function () {
    function TreeViewModule() {
    }
    TreeViewModule = __decorate([
        core_1.NgModule({
            imports: [forms_1.FormsModule, platform_browser_1.BrowserModule, SharedModule_1.SharedModule],
            exports: [treeViewBuilder_1.TreeViewBuilder, treeViewMain_1.treeViewMain, treeViewAddEditForm_1.treeViewAddEditForm, treeViewChildrenParser_1.treeViewChildrenParser, reportBuilder_1.ReportBuilder],
            declarations: [treeViewBuilder_1.TreeViewBuilder, treeViewMain_1.treeViewMain, treeViewAddEditForm_1.treeViewAddEditForm, treeViewChildrenParser_1.treeViewChildrenParser, reportBuilder_1.ReportBuilder],
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], TreeViewModule);
    return TreeViewModule;
}());
exports.TreeViewModule = TreeViewModule;


/***/ }),

/***/ "./src/app/ReusableComponents/treeView/reportBuilder/reportBuilder.html":
/***/ (function(module, exports) {

module.exports = "<article Id=\"editConfigPage\" *ngIf=\"visiblePlugin\">\r\n    <div class=\"col-md-12\">\r\n        <div *ngFor=\"let ln of editViewRowDataTable\" class=\"row\">\r\n            <div class=\"col-md-3\">\r\n                <label [attr.for]=\"ln.sequence\">{{ln.label | LocalizationTranslate}}:</label>\r\n            </div>\r\n            <div class=\"col-md-9\">\r\n                {{ln.val | LocalizationTranslate}}\r\n            </div>\r\n        </div>\r\n    </div>\r\n</article>\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/treeView/reportBuilder/reportBuilder.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
//import {FORM_DIRECTIVES} from "angular2/common";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var ReportBuilder = (function () {
    function ReportBuilder() {
        this.pluginValue = "";
        this.visiblePlugin = true;
        this.showValidation = false;
        this.enableInsert = false;
        this.formBuilderNotifier = new core_1.EventEmitter();
        this.title = "Form";
        this.isEmptyResult = false;
        this.PageType = "view";
        this.pageName = "";
        this.IsHideCancel = false;
    }
    ReportBuilder.prototype.ngOnInit = function () {
        this.editViewRowDataTable = this.pluginInput;
    };
    ReportBuilder.prototype.injectDataAndConfig = function (data, config, pageType) {
        this.gridSettings = config;
        this.PageType = pageType;
        this.editViewRowDataTable = data;
    };
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], ReportBuilder.prototype, "formBuilderNotifier", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], ReportBuilder.prototype, "title", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], ReportBuilder.prototype, "pluginInput", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], ReportBuilder.prototype, "gridSettings", void 0);
    __decorate([
        core_1.Input('PageType'), 
        __metadata('design:type', String)
    ], ReportBuilder.prototype, "PageType", void 0);
    __decorate([
        core_1.Input('pageName'), 
        __metadata('design:type', String)
    ], ReportBuilder.prototype, "pageName", void 0);
    __decorate([
        core_1.Input('httpProxy'), 
        __metadata('design:type', Object)
    ], ReportBuilder.prototype, "httpProxy", void 0);
    __decorate([
        core_1.Input('IsHideCancel'), 
        __metadata('design:type', Boolean)
    ], ReportBuilder.prototype, "IsHideCancel", void 0);
    __decorate([
        core_1.Input('NodeClass'), 
        __metadata('design:type', String)
    ], ReportBuilder.prototype, "nodeClass", void 0);
    ReportBuilder = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/ReusableComponents/treeView/reportBuilder/reportBuilder.html"),
            selector: 'reportBuilder',
        }), 
        __metadata('design:paramtypes', [])
    ], ReportBuilder);
    return ReportBuilder;
}());
exports.ReportBuilder = ReportBuilder;


/***/ }),

/***/ "./src/app/ReusableComponents/treeView/treeViewAddEditForm/treeViewAddEditForm.html":
/***/ (function(module, exports) {

module.exports = "<article Id=\"editConfigPage\" *ngIf=\"visiblePlugin\">\r\n    <div class=\"{{nodeClass}}\">\r\n        <section Id=\"editForm\">\r\n            <form #genericForm=\"ngForm\" (ngSubmit)=\"saveClicked()\">\r\n                <template ngFor let-ln [ngForOf]=\"editViewRowDataTable\">\r\n                    <div class=\"form-group\">\r\n                        <label [attr.for]=\"ln.sequence\"><strong>{{ln.label | LocalizationTranslate}}:</strong></label>\r\n                        <template [ngIf]=\"ln.htmlControlType == 'text'\">\r\n                            <input name={{ln.label}} class=\"form-control\" #name=\"ngModel\" [attr.Id]=\"ln.sequence\" type={{ln.htmlControlType}} [(ngModel)]=\"ln.val\" checked={{ln.val}} [disabled]=\"!ln.visibility || ln.readOnly\">\r\n                            <template ngFor let-er [ngForOf]=\"ln.errors\">\r\n                                <div class=\"alert alert-danger\">\r\n                                    {{er | LocalizationTranslate}}\r\n                                </div>\r\n                            </template>\r\n                        </template>\r\n                        <template [ngIf]=\"ln.htmlControlType === 'checkbox'\">\r\n                            <input name={{ln.label}} class=\"form-control\" #name=\"ngModel\" [attr.Id]=\"ln.sequence\" type=\"checkbox\" [(ngModel)]=\"ln.val\" [disabled]=\"!ln.visibility || ln.readOnly\" (click)=\"inputClicked(ln)\">\r\n                            <template ngFor let-er [ngForOf]=\"ln.errors\">\r\n                                <div class=\"alert alert-danger\">\r\n                                    {{er | LocalizationTranslate}}\r\n                                </div>\r\n                            </template>\r\n                        </template>\r\n                        <template [ngIf]=\"ln.htmlControlType === 'select'\">\r\n                            <select name={{ln.label}} class=\"form-control\" #name=\"ngModel\" [(ngModel)]=\"ln.val\" [attr.Id]=\"ln.sequence\" [disabled]=\"!ln.visibility || ln.readOnly\">\r\n                                <option *ngFor=\"let itemOption of ln.dataSource\" value=\"{{itemOption.Value}}\" selected=\"ln.val == itemOption.Value\">{{itemOption.Description | LocalizationTranslate}}</option>\r\n                            </select>\r\n                            <template ngFor let-er [ngForOf]=\"ln.errors\">\r\n                                <div class=\"alert alert-danger\">\r\n                                    {{er | LocalizationTranslate}}\r\n                                </div>\r\n                            </template>\r\n                        </template>\r\n                        <template [ngIf]=\"ln.htmlControlType === 'customselect'\">\r\n                            <customDropDown [DataSource]=\"ln.customdataSource\" [selectedValue]=\"ln.val\" (DropDownEmitter)=\"getDropDownResult($event,ln)\"></customDropDown>\r\n                            <template ngFor let-er [ngForOf]=\"ln.errors\">\r\n                                <div class=\"alert alert-danger\">\r\n                                    {{er | LocalizationTranslate}}\r\n                                </div>\r\n                            </template>\r\n                        </template>\r\n                        <template [ngIf]=\"ln.htmlControlType === 'radio'\">\r\n                            <template ngFor let-itemOption [ngForOf]=\"ln.dataSource\">\r\n                                <div class=\"row\">\r\n                                    <input name=\"ln.objId\" type=\"radio\" [(ngModel)]=\"ln.val\" [disabled]=\"!ln.visibility || ln.readOnly\" value=\"{{itemOption}}\"><span class=\"float-xs-left\">{{' ' + (itemOption | LocalizationTranslate) + '    '}}</span>\r\n                                </div>\r\n                            </template>\r\n                            <template ngFor let-er [ngForOf]=\"ln.errors\">\r\n                                <div class=\"alert alert-danger\">\r\n                                    {{er | LocalizationTranslate}}\r\n                                </div>\r\n                            </template>\r\n                        </template>\r\n                    </div>\r\n                </template>\r\n                <div id=\"buttons\">\r\n                    <button type=\"submit\" title=\"{{'Save' | LocalizationTranslate}}\" class=\"button-standard \">\r\n                        <span class=\"fa fa-floppy-o fa-lg\"></span>\r\n                        {{\"Save\" | LocalizationTranslate}}\r\n                    </button>\r\n                    <button type=\"button\" title=\"{{'Cancel' | LocalizationTranslate}}\" (click)=\"cancelClicked()\" class=\"button-standard \" *ngIf=\"!IsHideCancel\">\r\n                        <span class=\"fa fa-ban fa-lg\"></span>\r\n                        {{\"Cancel\" | LocalizationTranslate}}\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </section>\r\n    </div>\r\n</article>\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/treeView/treeViewAddEditForm/treeViewAddEditForm.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var ruleService_1 = __webpack_require__("./src/app/ReusableServices/ruleService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var treeViewAddEditForm = (function () {
    function treeViewAddEditForm(alert, elementRef, appSettingsService, intFormSer, ruleService, matrixService) {
        this.appSettingsService = appSettingsService;
        this.intFormSer = intFormSer;
        this.ruleService = ruleService;
        this.matrixService = matrixService;
        this.PageType = "view";
        this.pageName = "";
        this.pluginValue = "";
        this.visiblePlugin = true;
        this.alert = alert;
        this.elemRef = elementRef;
        this.interFormService = intFormSer;
    }
    treeViewAddEditForm.prototype.ngOnInit = function () {
        this.editViewRowDataTable = this.pluginInput;
    };
    treeViewAddEditForm.prototype.injectDataAndConfig = function (data, config, pageType) {
        this.gridSettings = config;
        this.PageType = pageType;
        this.editViewRowDataTable = data;
    };
    treeViewAddEditForm.prototype.cancelClicked = function () {
        this.interFormService.closeCurrentlyOpenedForm();
    };
    treeViewAddEditForm.prototype.saveClicked = function () {
        var _this = this;
        this.ruleService.errorsResultSet = [];
        var formMode = this.interFormService.addEditDeleteMode;
        var temp = {};
        switch (formMode) {
            case "add":
                var newObj = Object.create(Object.prototype);
                temp[this.originalInput.modelName] = [];
                for (var colInd in this.editViewRowDataTable) {
                    this.editViewRowDataTable[colInd]["errors"] = [];
                    var column = this.editViewRowDataTable[colInd];
                    column = this.getDropDownIdValue(column);
                    newObj[column.name] = column.val;
                }
                for (var x in this.originalInput.blankModel) {
                    if (x.endsWith("_Id")) {
                        newObj[x] = this.originalInput.blankModel[x];
                    }
                }
                newObj["Action"] = "Insert";
                var name = this.originalInput.modelName;
                var ref = this.originalInput[name];
                if (!ref) {
                    ref = this.originalInput.elementList;
                }
                temp[this.originalInput.modelName].push(newObj);
                //Check whether the rules are satisfied
                if (!this.ruleService.checkIfRulesSatisfied(temp, this.ruleService.getRulesByModel(name, this.interFormService.getTreeViewRuleConfig()))) {
                    if (this.ruleService.errorsResultSet && this.ruleService.errorsResultSet.length > 0) {
                        this.ruleService.errorsResultSet.forEach(function (x) {
                            var tempRowTable = _this.editViewRowDataTable.find(function (p) { return p.name == x.name; });
                            if (tempRowTable && x.message.length > 0) {
                                tempRowTable["errors"].push(x.name + "_" + x.message);
                            }
                        });
                    }
                }
                else {
                    if (ref) {
                        ref.push(newObj);
                    }
                    this.interFormService.addEditCompleted.emit("");
                }
                break;
            case "edit":
                var tempObj = Object.assign({}, this.originalInput);
                temp[tempObj.mainPageObject[0].modelName] = [];
                for (var colInd in this.editViewRowDataTable) {
                    this.editViewRowDataTable[colInd]["errors"] = [];
                    var column = this.editViewRowDataTable[colInd];
                    column = this.getDropDownIdValue(column);
                    tempObj[column.name] = column.val;
                }
                tempObj["Action"] = "Update";
                temp[tempObj.mainPageObject[0].modelName].push(tempObj);
                if (!this.ruleService.checkIfRulesSatisfied(temp, this.ruleService.getRulesByModel(tempObj.mainPageObject[0].modelName, this.interFormService.getTreeViewRuleConfig()))) {
                    if (this.ruleService.errorsResultSet && this.ruleService.errorsResultSet.length > 0) {
                        this.ruleService.errorsResultSet.forEach(function (x) {
                            var tempRowTable = _this.editViewRowDataTable.find(function (p) { return p.name == x.name; });
                            if (tempRowTable && x.message.length > 0) {
                                tempRowTable["errors"].push(x.name + "_" + x.message);
                            }
                        });
                    }
                }
                else {
                    for (var colInd in this.editViewRowDataTable) {
                        var column = this.editViewRowDataTable[colInd];
                        column = this.getDropDownIdValue(column);
                        this.originalInput[column.name] = column.val;
                    }
                    this.originalInput["Action"] = "Update";
                    this.interFormService.addEditCompleted.emit("");
                }
                break;
        }
    };
    treeViewAddEditForm.prototype.getDropDownIdValue = function (column) {
        if (column.dataSourceAddress && column.masterdataSource) {
            var primaryColName = this.matrixService.getdbColumnNameForDataSourceAddress(column.dataSourceAddress);
            column.val = this.matrixService.getDropDownIdValue(column.masterdataSource, primaryColName, primaryColName, column.val);
        }
        return column;
    };
    treeViewAddEditForm.prototype.getDropDownResult = function (result, obj) {
        var dropDownId = 0;
        obj.val = result.Value;
        if (obj.name) {
            var tempControl = this.editViewRowDataTable.find(function (c) { return c.name == obj.name; });
            var dbColumnName = "";
            if (tempControl.dataSource) {
                dbColumnName = this.matrixService.getdbColumnNameForDataSourceAddress(tempControl.dataSourceAddress);
            }
            var dropDowndata = tempControl.masterdataSource.find(function (p) { return p[dbColumnName] === obj.val; });
            if (tempControl && tempControl.associatedDropdownControl) {
                if (dropDowndata) {
                    dropDownId = dropDowndata[tempControl.dataSourceAddress.dbColumnName];
                }
                var x = this.editViewRowDataTable.find(function (p) { return p.name == tempControl.associatedDropdownControl; });
                x["customdataSource"] = [];
                var tempcustomDropdownSource = [];
                if (dropDowndata && dropDowndata[tempControl.dataSourceAddress.PrimaryKeyColumn]) {
                    tempcustomDropdownSource = x.masterdataSource.filter(function (c) { return c[x.dataSourceAddress.ForeignKeyColumn] == dropDownId; });
                }
                else {
                    tempcustomDropdownSource = x.masterdataSource.filter(function (c) { return c[tempControl.dataSourceAddress.dbColumnName] == dropDownId; });
                }
                if (tempcustomDropdownSource) {
                    var tempdbColumnName = this.matrixService.getdbColumnNameForDataSourceAddress(x.dataSourceAddress);
                    x["customdataSource"] = this.matrixService.getArrayDataSource(tempcustomDropdownSource, x.dataSourceAddress["displayColumnName"], tempdbColumnName, x.dataSourceAddress["defaultValue"]);
                }
                x.val = "";
            }
        }
    };
    __decorate([
        core_1.Input('originalInput'), 
        __metadata('design:type', Object)
    ], treeViewAddEditForm.prototype, "originalInput", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], treeViewAddEditForm.prototype, "pluginInput", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], treeViewAddEditForm.prototype, "gridSettings", void 0);
    __decorate([
        core_1.Input('PageType'), 
        __metadata('design:type', String)
    ], treeViewAddEditForm.prototype, "PageType", void 0);
    __decorate([
        core_1.Input('pageName'), 
        __metadata('design:type', String)
    ], treeViewAddEditForm.prototype, "pageName", void 0);
    __decorate([
        core_1.Input('childRulesConfig'), 
        __metadata('design:type', Object)
    ], treeViewAddEditForm.prototype, "childRulesConfig", void 0);
    __decorate([
        core_1.Input('NodeClass'), 
        __metadata('design:type', String)
    ], treeViewAddEditForm.prototype, "nodeClass", void 0);
    treeViewAddEditForm = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/ReusableComponents/treeView/treeViewAddEditForm/treeViewAddEditForm.html"),
            selector: 'treeViewAddEditForm',
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _a) || Object, (typeof (_b = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _b) || Object, (typeof (_c = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _c) || Object, (typeof (_d = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _d) || Object, (typeof (_e = typeof ruleService_1.RuleService !== 'undefined' && ruleService_1.RuleService) === 'function' && _e) || Object, (typeof (_f = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _f) || Object])
    ], treeViewAddEditForm);
    return treeViewAddEditForm;
    var _a, _b, _c, _d, _e, _f;
}());
exports.treeViewAddEditForm = treeViewAddEditForm;


/***/ }),

/***/ "./src/app/ReusableComponents/treeView/treeViewBuilder/treeView.html":
/***/ (function(module, exports) {

module.exports = "<article>\r\n    <br/>\r\n    <ul>\r\n        <li *ngFor=\"let errordata of ruleErrors\">{{errordata}}</li>\r\n    </ul>\r\n    <!--</div>-->\r\n    <section class=\"row\"><!--*ngIf=\"showTreeViewdata\"-->\r\n        <div class=\"col-md-12\">\r\n            <treeViewMain [maintreeViewInput]=\"maintreeViewInput\"></treeViewMain>\r\n        </div>\r\n    </section>\r\n</article>"

/***/ }),

/***/ "./src/app/ReusableComponents/treeView/treeViewBuilder/treeViewBuilder.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var ruleService_1 = __webpack_require__("./src/app/ReusableServices/ruleService.ts");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var _Score_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/_Score.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var TreeViewBuilder = (function () {
    function TreeViewBuilder(ruleSrv, httpProx, vmMatrix, interFormsService, navService, alert, apiService, appSettingsService) {
        this.ruleSrv = ruleSrv;
        this.httpProx = httpProx;
        this.vmMatrix = vmMatrix;
        this.interFormsService = interFormsService;
        this.navService = navService;
        this.alert = alert;
        this.apiService = apiService;
        this.appSettingsService = appSettingsService;
        this.editAddClicked = true;
        this.grandParentLevel = 0;
        this.showTreeViewdata = false;
        this.ruleService = ruleSrv;
        this.matrixService = vmMatrix;
        this.interFormService = interFormsService;
        this.httpProxy = httpProx;
    }
    TreeViewBuilder.prototype.ngOnInit = function () {
        var _this = this;
        this.mainConfig = this.jsonConfig;
        var dataSourceAddressTables = [];
        //Load all dropdown values here
        for (var index in this.mainConfig.Definitions)
            for (var key in this.mainConfig.Definitions[index]["ColumnDefinitions"]) {
                if (this.mainConfig.Definitions[index]["ColumnDefinitions"][key].dataSourceAddress) {
                    dataSourceAddressTables.push(this.mainConfig.Definitions[index]["ColumnDefinitions"][key].dataSourceAddress.tableName);
                }
            }
        if (dataSourceAddressTables.length) {
            this.apiService.fetchMultipleList(dataSourceAddressTables).subscribe(function (res) {
                // check if res in not an Array
                var i = 0;
                for (var jIndex in _this.mainConfig.Definitions) {
                    for (var key in _this.mainConfig.Definitions[jIndex]["ColumnDefinitions"]) {
                        if (_this.mainConfig.Definitions[jIndex]["ColumnDefinitions"][key].dataSourceAddress) {
                            _this.mainConfig.Definitions[jIndex]["ColumnDefinitions"][key].dataSource = res[i];
                            i++;
                        }
                    }
                }
                _this.loadTreeViewData();
            }, function (error) {
                _this.alert.error("Error in retrieving master data: async error #" + error.status);
            }, function () {
            });
        }
        else {
            this.loadTreeViewData();
        }
        // this.loadTreeViewData();
    };
    TreeViewBuilder.prototype.loadTreeViewData = function () {
        //this.mainConfig= this.jsonConfig;
        this.maintreeViewInput = Object.create(Object.prototype);
        this.maintreeViewInput.visiblePlugin = false;
        this.maintreeViewInput.gridSettings = this.mainConfig;
        this.maintreeViewInput.pluginInput = this.apiResult;
        this.ruleConfig = this.jsonConfig.RulesConfig;
        var deleteAddEditCb = this.deleteAddEditCalled;
        var deleteAddEditCompleteCb = this.deleteAddEditCallCompleted;
        ;
        var that = this;
        this.fbDeleteNotifierObservable = this.interFormService.formBuilderDeleteNotifier.subscribe(function (x) {
            deleteAddEditCb(that);
        });
        this.fbAddNotifierObservable = this.interFormService.formBuilderAddNotifier.subscribe(function (x) {
            deleteAddEditCb(that);
        });
        this.fbEditNotifierObservable = this.interFormService.formBuilderEditNotifier.subscribe(function (x) {
            deleteAddEditCb(that);
        });
        this.addEditCompletedObservable = this.interFormService.addEditCompleted.subscribe(function (x) {
            deleteAddEditCompleteCb(that);
        });
        this.getTreeViewdataFromApi(this);
    };
    TreeViewBuilder.prototype.getTreeViewdataFromApi = function (that) {
        var _this = this;
        that.httpProxy.fetch(that.treeViewApiUrl).subscribe(function (x) {
            if (x) {
                _this.apiResult = JSON.parse(x);
                _this.interFormService.setTreeViewApiResult(_this.apiResult);
                _this.interFormService.setTreeViewRuleConfig(_this.ruleConfig);
                that.addRootAsArray(_this.apiResult);
                that.loadTreeView(that, _this.apiResult, true);
                _this.ruleErrors = [];
                that.showClicked();
            }
        }, function (error) {
            _this.alert.error("Error in retrieving data: async error #" + error.status);
        }, function () {
        });
    };
    TreeViewBuilder.prototype.addRootAsArray = function (obj) {
        var newArray = new Array();
        var newObj = Object.create(Object.prototype);
        var modelName = this.mainConfig.RootModel;
        var myObject = obj[modelName];
        for (var key in myObject) {
            if (!_Score_1._Score.isObject(myObject[key])) {
                newObj[key] = myObject[key];
            }
        }
        newArray.push(newObj);
        myObject[modelName] = newArray;
    };
    TreeViewBuilder.prototype.ngOnDestroy = function () {
        this.fbDeleteNotifierObservable.unsubscribe();
        this.fbAddNotifierObservable.unsubscribe();
        this.fbEditNotifierObservable.unsubscribe();
        this.addEditCompletedObservable.unsubscribe();
    };
    TreeViewBuilder.prototype.loadTreeView = function (context, input, firstLoad) {
        context.vmMatrix.resetTreeViewBlockCount();
        var finalResult = context.matrixService.extractNodes(input, context.mainConfig);
        var result = finalResult.treeArray;
        var skipList = finalResult.skipList;
        context.interFormService.setSkipList(skipList);
        context.children = result.filter(function (x) { return x.type === 'node'; });
        context.children.sort(context.sortByTabOrder);
        var mainPageObject = result.filter(function (x) { return x.type === 'leaf'; });
        var mainPageObjectArray = new Array();
        mainPageObjectArray.push(mainPageObject[0].mainPageObject);
        context.mainPage = context.vmMatrix.extractMatrixNew(skipList, mainPageObject[0].modelName, mainPageObjectArray, context.mainConfig);
        context.mainHeader = context.vmMatrix.extractHeaderNew(skipList, mainPageObject[0].modelName, mainPageObjectArray, context.mainConfig);
        context.formData = context.vmMatrix.editMatrixNew(skipList, mainPageObject[0].modelName, context.mainPage[0].cells, context.mainHeader, context.mainConfig);
        context.processChildren(context.children);
    };
    TreeViewBuilder.prototype.sortByTabOrder = function (a, b) {
        if (a.tabOrder < b.tabOrder)
            return -1;
        if (a.tabOrder > b.tabOrder)
            return 1;
        return 0;
    };
    TreeViewBuilder.prototype.deleteAddEditCalled = function (context) {
        var blank = new Array();
        var opMode = context.interFormService.addEditDeleteMode;
        //context.component.instance.injectDataAndConfigAndChildren({data:blank, modelName:context.mainConfig.RootModel}, blank,context.mainConfig,"");
        if (opMode === "delete") {
            context.deleteAddEditCallCompleted(context);
        }
    };
    TreeViewBuilder.prototype.checkIfRulesSatisfied = function (context) {
        var _this = this;
        var finalResult = true;
        this.ruleErrors = [];
        if (this.ruleConfig) {
            this.ruleConfig.forEach(function (x) {
                var ruleType = x.ruleType;
                var columnNames = x.ruleAssociates;
                var applicationMode = x.applyTo;
                var modelName = x.apiObject;
                var ruleValue = x.ruleValue;
                context.ruleService.clearExistingValidations();
                context.ruleService.associateRule(x, context); //ruleType, columnNames,ruleValue);
                var result = _this.ruleService.validateRules(context.apiResult, modelName, ruleType, applicationMode);
                if (result.hasErrors || result.errorMessage.length) {
                    if (result.errorMessage) {
                        //this.ruleErrors.push();
                        result.errorMessage.forEach(function (x) {
                            _this.ruleErrors.push(x);
                        });
                        finalResult = false;
                    }
                }
            });
        }
        return finalResult;
    };
    TreeViewBuilder.prototype.deleteAddEditCallCompleted = function (context) {
        var _this = this;
        //if(context.checkIfRulesSatisfied(context)) {
        context.interFormService.cleanApi(context.apiResult);
        context.interFormService.rebuildRootObject(context.apiResult);
        context.httpProxy.insert(context.treeViewApiUrl, JSON.stringify(context.apiResult)).subscribe(function (res) {
            if (res) {
                context.alert.addAlert(context.appSettingsService.appNotificationsMsg.saveConfirmedMsg);
                context.getTreeViewdataFromApi(context);
            }
        }, function (error) {
            _this.alert.error("async error #" + error.status);
        }, function () {
        });
        //}
    };
    TreeViewBuilder.prototype.softDelete = function (inputObj) {
        this.findDeletedObj(inputObj);
        if (this.deletedObject) {
            this.removeObjectFromInput(inputObj);
        }
    };
    TreeViewBuilder.prototype.removeObjectFromInput = function (input) {
        for (var colInd in input) {
            var obj = input[colInd];
            if (Object.prototype.toString.call(obj) === '[object Array]') {
                var index = obj.indexOf(this.deletedObject);
                if (index > -1) {
                    obj.splice(index, 1);
                }
                else
                    (this.removeObjectFromInput(obj));
            }
            if (Object.prototype.toString.call(obj) === '[object Object]') {
                this.removeObjectFromInput(obj);
            }
        }
    };
    TreeViewBuilder.prototype.findDeletedObj = function (input) {
        var _this = this;
        var lookup = input.Action;
        if (lookup) {
            if (lookup === "Deleted") {
                this.deletedObject = input;
            }
        }
        for (var colInd in input) {
            var obj = input[colInd];
            if (Object.prototype.toString.call(obj) === '[object Array]') {
                obj.forEach(function (x) { return _this.findDeletedObj(x); });
            }
            if (Object.prototype.toString.call(obj) === '[object Object]') {
                this.findDeletedObj(obj);
            }
        }
    };
    TreeViewBuilder.prototype.processChildren = function (kids) {
        var _this = this;
        var children = kids;
        for (var child in children) {
            // x is a list of the children of every node that has children and is NOT the root node
            var x = children[child].elementList;
            var modelName = children[child].modelName;
            var newObject = Object.create(Object.prototype);
            for (var ele in x) {
                var elem = x[ele];
                newObject[modelName] = elem;
                var finalResult = this.matrixService.extractNodesLight(newObject);
                var result = finalResult.treeArray;
                var skipList = finalResult.skipList;
                var mainPageObject = result.filter(function (xx) { return xx.type === 'leaf'; });
                var childrenList = result.filter(function (xx) { return xx.type === 'node'; });
                var mainPageObjectArray = new Array();
                mainPageObjectArray.push(mainPageObject[0].mainPageObject);
                var mainPage = this.vmMatrix.extractMatrixNew(skipList, mainPageObject[0].modelName, mainPageObjectArray, this.mainConfig);
                var mainHeader = this.vmMatrix.extractHeaderNew(skipList, mainPageObject[0].modelName, mainPageObjectArray, this.mainConfig);
                var formData = this.vmMatrix.editMatrixNew(skipList, mainPageObject[0].modelName, mainPage[0].cells, mainHeader, this.mainConfig);
                elem.config = this.mainConfig;
                elem.model = formData;
                elem.mainPageObject = mainPageObject;
                elem.expanded = mainPageObject[0].expanded;
                elem.level = mainPageObject[0].level;
                elem.childrenArrayList = [];
                if (childrenList.length) {
                    var objElem = Object.assign({}, elem);
                    objElem["config"] = {};
                    objElem["mainPageObject"] = [];
                    objElem["model"] = [];
                    childrenList.sort(this.sortByTabOrder);
                    childrenList.forEach(function (x) {
                        var tempObj = Object.assign({}, objElem);
                        var k = {};
                        k['elementList'] = x.elementList;
                        k['blankModel'] = x.blankModel;
                        k['blankModelConfig'] = x.blankModelConfig;
                        k['modelName'] = x.modelName;
                        k['parentModelName'] = modelName;
                        k['parentModel'] = JSON.stringify(tempObj);
                        elem.childrenArrayList.push(k);
                    });
                }
                elem.viewDetail = false;
                elem.editDetail = false;
                elem.addDetail = false;
                var summaryObject = JSON.parse(JSON.stringify(newObject));
                elem.summaryObject = this.prepareSummaryText(summaryObject, skipList);
                var grandChildren = result.filter(function (x) { return x.type === 'node'; });
                if (grandChildren.length) {
                    grandChildren.forEach(function (z) {
                        _this.processChildren([z]);
                    });
                }
                for (var _i = 0, _a = elem.config.Definitions; _i < _a.length; _i++) {
                    var defn = _a[_i];
                    if (defn.ModelName == modelName) {
                        elem.nodeClass = defn.NodeClass;
                    }
                }
            }
        }
    };
    TreeViewBuilder.prototype.prepareSummaryText = function (inputObject, skipList) {
        var newString = "";
        var modelName;
        var summaryObjectArray = new Array();
        for (var colInd in inputObject) {
            modelName = colInd;
            var obj = inputObject[colInd];
            this.interFormService.injectSkipList(skipList);
            this.test = this.interFormService.cleanObjectForSummary(obj);
        }
        /* for (var ind in this.test){
         newString=newString+ind +': "'+this.test[ind]+'"'+","
         }*/
        var config = this.mainConfig.Definitions.find(function (x) { return x.ModelName === modelName; });
        for (var ind in this.test) {
            if (config.ColumnDefinitions.find(function (x) { return x.dbColumnName === ind; }).isPartOfSummary) {
                summaryObjectArray.push({ lbl: ind, val: this.test[ind] });
            }
        }
        return summaryObjectArray;
    };
    TreeViewBuilder.prototype.showClicked = function () {
        this.showTreeViewdata = true;
        this.maintreeViewInput.visiblePlugin = true;
        this.maintreeViewInput.data = this.formData;
        this.maintreeViewInput.modelName = this.mainConfig.RootModel;
        this.maintreeViewInput.children = this.children;
        this.maintreeViewInput.mainConfig = this.mainConfig;
        this.maintreeViewInput.pageType = 'configPage';
        this.interFormService.treeViewInputArrived.emit(this.maintreeViewInput);
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], TreeViewBuilder.prototype, "jsonConfig", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], TreeViewBuilder.prototype, "treeViewApiUrl", void 0);
    TreeViewBuilder = __decorate([
        core_1.Component({
            selector: 'treeViewBuilder',
            template: __webpack_require__("./src/app/ReusableComponents/treeView/treeViewBuilder/treeView.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof ruleService_1.RuleService !== 'undefined' && ruleService_1.RuleService) === 'function' && _a) || Object, (typeof (_b = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _b) || Object, (typeof (_c = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _c) || Object, (typeof (_d = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _d) || Object, (typeof (_e = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _e) || Object, (typeof (_f = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _f) || Object, (typeof (_g = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _g) || Object, (typeof (_h = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _h) || Object])
    ], TreeViewBuilder);
    return TreeViewBuilder;
    var _a, _b, _c, _d, _e, _f, _g, _h;
}());
exports.TreeViewBuilder = TreeViewBuilder;


/***/ }),

/***/ "./src/app/ReusableComponents/treeView/treeViewChildrenParser/treeViewChildrenParser.html":
/***/ (function(module, exports) {

module.exports = "<template [ngIf]=\"!addEditClicked\">\r\n    <div *ngFor=\"let child of elementList; let ndx = index\">\r\n        <template [ngIf]=\"child.expanded\">\r\n            <div class=\"col-md-12\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-header\">\r\n                        <div class=\"form-inline\">\r\n                            <div class=\"form-group\">\r\n                                <h3 id=\"card-title\">{{child.mainPageObject[0].modelName | LocalizationTranslate}} {{ndx + 1}}\r\n                                    <button *ngIf=\"canAddDelete\" (click)=\"deleteClicked(child)\" title=\"{{'Delete' | LocalizationTranslate}}\" class=\"button-standard \">\r\n                                        <span class=\"fa fa-eraser fa-lg\"></span>\r\n                                    </button>\r\n                                    <button (click)=\"editClicked(child)\" title=\"{{'Edit' | LocalizationTranslate}}\" class=\"button-standard \">\r\n                                        <span class=\"fa fa-pencil-square-o fa-lg\"></span>\r\n                                    </button>\r\n                                    <button (click)=\"moreClicked(child)\" title=\"{{'View' | LocalizationTranslate}}\" class=\"button-standard \"><span class=\"fa fa-ellipsis-h fa-lg\"></span></button>\r\n                                </h3>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"card-block\">\r\n                        <div class=\"col-md-4\">\r\n                            <div class=\"card card-block\">\r\n                                <template ngFor let-summary [ngForOf]=\"child.summaryObject\">\r\n                                    <strong>{{summary.lbl | LocalizationTranslate}}:</strong> {{summary.val | LocalizationTranslate}}\r\n                                    <br/>\r\n                                </template>\r\n                            </div>\r\n                        </div>\r\n                        <template [ngIf]=\"child.viewDetail\">\r\n                            <div class=\"col-md-8\">\r\n                                <div class=\"card card-block\">\r\n                                    <reportBuilder [NodeClass]=\"child.nodeClass\" [pluginInput]=\"child.model\" [gridSettings]=\"child.config\"></reportBuilder>\r\n                                </div>\r\n                            </div>\r\n                        </template>\r\n                        <template [ngIf]=\"child.editDetail\">\r\n                            <div class=\"col-md-8\">\r\n                                <div class=\"card card-block\">\r\n                                    <treeViewAddEditForm [originalInput]=\"originalInput\" [NodeClass]=\"singleEditClass\" [pluginInput]=\"addEditObject\" [gridSettings]=\"addEditObjectConfig\" [childRulesConfig]=\"child.childRulesConfig\"></treeViewAddEditForm>\r\n                                </div>\r\n                            </div>\r\n                        </template>\r\n                        <template [ngIf]=\"child.childrenArrayList.length > 0\">\r\n                            <!-- <div *ngIf=\"child.level<currentLevel\">-->\r\n                            <template ngFor let-subchild [ngForOf]=\"child.childrenArrayList\">\r\n                                <div class=\"col-md-12\">\r\n                                    <div class=\"card-block\">\r\n                                        <h3 id=\"treeview-node-child-title\" *ngIf=\"subchild.elementList\">{{subchild.modelName | LocalizationTranslate}}({{subchild.elementList.length}})</h3>\r\n                                        <button (click)=\"childClicked(subchild)\" title=\"{{'View' | LocalizationTranslate}}\" class=\"button-standard  treeview-node-button\">\r\n                                            <span class=\"fa fa-ellipsis-h fa-lg\"></span>\r\n                                        </button>\r\n                                        <button (click)=\"addClicked(subchild)\" title=\"{{'Add' | LocalizationTranslate}}\" class=\"button-standard  treeview-node-button\">\r\n                                            <span class=\"fa fa-plus fa-lg\"></span>\r\n                                        </button>\r\n                                    </div>\r\n                                    <template [ngIf]=\"subchild.addDetail\">\r\n                                        <treeViewAddEditForm [originalInput]=\"originalInput\" [NodeClass]=\"singleEditClass\" [pluginInput]=\"addEditObject\" [gridSettings]=\"addEditObjectConfig\" [childRulesConfig]=\"subchild.childRulesConfig\"></treeViewAddEditForm>\r\n                                    </template>\r\n                                    <treeViewChildrenParser *ngIf=\"!subchild.addDetail\" [children]=\"subchild\" [subChild]=\"true\"></treeViewChildrenParser>\r\n                                </div>\r\n                            </template>\r\n                        </template>\r\n                        <!--<section>\r\n                            <treeViewChildrenParser [children]=\"child\" [pluginInput]=\"child.model\" [gridSettings]=\"child.config\"></treeViewChildrenParser>\r\n                        </section>-->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </div>\r\n</template>\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/treeView/treeViewChildrenParser/treeViewChildrenParser.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//import {FORM_DIRECTIVES} from "angular2/common";
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var ruleService_1 = __webpack_require__("./src/app/ReusableServices/ruleService.ts");
var treeViewChildrenParser = (function () {
    function treeViewChildrenParser(matSV, intFormSer, alert, appSettingsService, ruleService) {
        var _this = this;
        this.matSV = matSV;
        this.intFormSer = intFormSer;
        this.alert = alert;
        this.appSettingsService = appSettingsService;
        this.ruleService = ruleService;
        this.title = "Form";
        this.addEditClicked = false;
        this.subChild = false;
        this.interFormService = intFormSer;
        this.matrixService = matSV;
        this.show = false;
        this.currentLevel = 3;
        this.canAddDelete = true;
        this.interFormService.currentThreeLevelChange.subscribe(function (x) { return _this.levelChanged(x); });
    }
    treeViewChildrenParser.prototype.levelChanged = function (x) {
        this.currentLevel = x + 2;
    };
    treeViewChildrenParser.prototype.addClicked = function (line) {
        this.interFormService.closeCurrentlyOpenedForm();
        this.interFormService.addEditDeleteMode = "add";
        this.deleteAddEditCalled(line, "add");
        this.interFormService.setCurrentForm(line);
    };
    treeViewChildrenParser.prototype.deleteClicked = function (line) {
        var _this = this;
        line.Action = "Delete";
        this.interFormService.addEditDeleteMode = "delete";
        var deletedModelName = line.mainPageObject[0].modelName;
        this.ruleService.errorsResultSet = [];
        var temp = {};
        var tempObj;
        var deletedObj = [];
        var updatedObj;
        var validatedModelName;
        if (line.level > 2) {
            tempObj = JSON.parse(this.children.parentModel);
            temp[this.children.parentModelName] = [];
            deletedObj = tempObj[deletedModelName];
            deletedObj.find(function (p) { return p[deletedModelName + "_Id"] == line[deletedModelName + "_Id"]; }).Action = "Delete";
            updatedObj = deletedObj.filter(function (p) { return p.Action != "Delete"; });
            tempObj[deletedModelName] = updatedObj;
            temp[this.children.parentModelName].push(tempObj);
            validatedModelName = this.children.parentModelName;
        }
        else {
            tempObj = Object.assign({}, JSON.parse(JSON.stringify(this.interFormService.getTreeViewApiResult())));
            temp[this.mainModelName] = [];
            deletedObj = tempObj[this.mainModelName][deletedModelName];
            updatedObj = deletedObj.filter(function (p) { return p.Action != "Delete"; });
            tempObj[this.mainModelName][deletedModelName] = updatedObj;
            temp[this.mainModelName].push(tempObj);
            validatedModelName = this.mainModelName;
        }
        if (!this.ruleService.checkIfRulesSatisfied(temp, this.ruleService.getRulesByModel(validatedModelName, this.interFormService.getTreeViewRuleConfig()))) {
            if (this.ruleService.errorsResultSet && this.ruleService.errorsResultSet.length > 0) {
                this.alert.warn("Cannot delete a record. At least one " + deletedModelName + " is required !");
                line.Action = "Read";
            }
        }
        else {
            this.alert.addAlertAndRequestAnswer(this.appSettingsService.appNotificationsMsg.deletionQuestionMsg);
            var subscription_1 = this.alert.requestConfirmationAnswer$.subscribe(function (answer) {
                subscription_1.unsubscribe();
                _this.alert.askConfirmation = false;
                if (answer != "OK") {
                    line.Action = "Read";
                    return;
                }
                _this.interFormService.formBuilderDeleteNotifier.emit(line);
            });
        }
    };
    treeViewChildrenParser.prototype.editClicked = function (line) {
        this.interFormService.closeCurrentlyOpenedForm();
        this.interFormService.addEditDeleteMode = "edit";
        line.editDetail = !line.editDetail;
        line.viewDetail = false;
        this.deleteAddEditCalled(line, "edit");
        this.interFormService.setCurrentForm(line);
    };
    treeViewChildrenParser.prototype.moreClicked = function (line) {
        line.editDetail = false;
        line.viewDetail = !line.viewDetail;
    };
    treeViewChildrenParser.prototype.ngOnInit = function () {
        this.elementList = [];
        if (this.children && this.children.elementList) {
            this.elementList = this.children.elementList;
            this.mainModelName = this.interFormService.getMainModelName();
            if (!this.subChild)
                this.canAddDelete = this.children.modelName !== this.interFormService.getMainModelName();
            else
                this.canAddDelete = true;
        }
        else {
            this.editViewRowDataTable = this.pluginInput;
        }
        this.indentLevel = new Array(this.children.indent);
    };
    treeViewChildrenParser.prototype.childClicked = function (ln) {
        ln.elementList.forEach(function (x) {
            x.expanded = !x.expanded;
        });
        this.interFormService.setCurrentTreeLeve(ln.level);
    };
    treeViewChildrenParser.prototype.deleteAddEditCalled = function (selectedRecord, op) {
        switch (op) {
            case "edit":
                this.editAddClicked = true;
                var modelName = selectedRecord.mainPageObject[0].modelName;
                this.pluginInput = selectedRecord.mainPageObject[0].blankModel;
                this.gridSettings = selectedRecord.mainPageObject[0].blankModelConfig;
                this.originalInput = selectedRecord;
                var target = selectedRecord;
                for (var dataKey in this.pluginInput) {
                    var val = target[dataKey];
                    this.pluginInput[dataKey] = val;
                }
                var mainPageObjectArray = new Array();
                mainPageObjectArray.push(this.pluginInput);
                var configObj = Object.create(Object.prototype);
                configObj["Definitions"] = new Array();
                configObj["Definitions"].push({ "ColumnDefinitions": this.gridSettings, "ModelName": modelName });
                var skipList = this.interFormService.getSkipList();
                var mainPage = this.matrixService.extractMatrixNew(skipList, modelName, mainPageObjectArray, configObj);
                var mainHeader = this.matrixService.extractHeaderNew(skipList, modelName, mainPageObjectArray, configObj);
                this.addEditObject = this.matrixService.editMatrixNew(skipList, modelName, mainPage[0].cells, mainHeader, configObj);
                break;
            case "add":
                this.editAddClicked = true;
                this.pluginInput = selectedRecord.blankModel;
                this.gridSettings = selectedRecord.blankModelConfig;
                this.originalInput = selectedRecord;
                var mainPageObjectArray = new Array();
                mainPageObjectArray.push(selectedRecord.blankModel);
                var configObj = Object.create(Object.prototype);
                configObj["Definitions"] = new Array();
                configObj["Definitions"].push({ "ColumnDefinitions": selectedRecord.blankModelConfig, "ModelName": selectedRecord.modelName });
                var skipList = this.interFormService.getSkipList();
                var mainPage = this.matrixService.extractMatrixNew(skipList, selectedRecord.modelName, mainPageObjectArray, configObj);
                var mainHeader = this.matrixService.extractHeaderNew(skipList, selectedRecord.modelName, mainPageObjectArray, configObj);
                this.addEditObject = this.matrixService.editMatrixNew(skipList, selectedRecord.modelName, mainPage[0].cells, mainHeader, configObj);
                selectedRecord.addDetail = true;
                break;
            case "delete":
                break;
        }
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], treeViewChildrenParser.prototype, "title", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], treeViewChildrenParser.prototype, "pluginInput", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], treeViewChildrenParser.prototype, "gridSettings", void 0);
    __decorate([
        core_1.Input('children'), 
        __metadata('design:type', Object)
    ], treeViewChildrenParser.prototype, "children", void 0);
    __decorate([
        core_1.Input('NodeClass'), 
        __metadata('design:type', String)
    ], treeViewChildrenParser.prototype, "nodeClass", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], treeViewChildrenParser.prototype, "subChild", void 0);
    treeViewChildrenParser = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/ReusableComponents/treeView/treeViewChildrenParser/treeViewChildrenParser.html"),
            selector: 'treeViewChildrenParser',
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _a) || Object, (typeof (_b = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _b) || Object, (typeof (_c = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _c) || Object, (typeof (_d = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _d) || Object, (typeof (_e = typeof ruleService_1.RuleService !== 'undefined' && ruleService_1.RuleService) === 'function' && _e) || Object])
    ], treeViewChildrenParser);
    return treeViewChildrenParser;
    var _a, _b, _c, _d, _e;
}());
exports.treeViewChildrenParser = treeViewChildrenParser;


/***/ }),

/***/ "./src/app/ReusableComponents/treeView/treeViewMain/treeViewMain.html":
/***/ (function(module, exports) {

module.exports = "<article Id=\"editConfigPage\">\r\n    <div class=\"col-md-12\">\r\n        <div class=\"card\">\r\n            <div class=\"card-header\">\r\n                <ul class=\"nav nav-tabs card-header-tabs float-md-left\">\r\n                    <!--<li class=\"tdam-tab-item\" (click)=\"showMainPage()\"><div class=\"tdam-tab-item-text\">{{mainModelName}}</div></li>-->\r\n                    <li class=\"nav-item\" *ngFor=\"let ln of children\" (click)=\"childClicked(ln)\">\r\n                        <a class=\"nav-link {{ln.activeClassChild}}\">{{ln.name | LocalizationTranslate}}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div class=\"card-block\">\r\n                <div class=\"col-md-12\">\r\n                    <section Id=\"editForm\">\r\n                        <form genericMainTreeForm=\"ngForm\">\r\n                            <template [ngIf]=\"visiblePlugin\">\r\n                                <!--<section id=\"mainPage\"  class=\"flex-container\" *ngIf=\"isMainPageVisible\">-->\r\n                                <!-- <div id=\"mainPageValues\">\r\n                                     <div *ngFor=\"let ln of editViewRowDataTable\">\r\n                                        <h3><strong>{{ln.label}}</strong> : {{ln.val}}</h3>\r\n                                     </div>\r\n                                 </div>-->\r\n                                <!--</section>-->\r\n                                <br/>\r\n                                <section id=\"children\">\r\n                                    <template ngFor let-ln [ngForOf]=\"children\">\r\n                                        <div class=\"row\">\r\n                                            <template [ngIf]=\"ln.visible\">\r\n                                                <div class=\"card-block\">\r\n                                                    <button *ngIf=\"canAdd\" title=\"{{'Add' | LocalizationTranslate}}\" (click)=\"addClicked(ln)\" class=\"button-standard \">\r\n                                                        <span class=\"fa fa-plus fa-lg\"></span> {{\"Add\" | LocalizationTranslate}}\r\n                                                        {{ln.modelName | LocalizationTranslate}}\r\n                                                    </button>\r\n                                                </div>\r\n                                                <template [ngIf]=\"ln.addDetail\">\r\n                                                    <treeViewAddEditForm [originalInput]=\"originalInput\" [NodeClass]=\"singleEditClass\" [pluginInput]=\"addEditObject\" [gridSettings]=\"addEditObjectConfig\" [childRulesConfig]=\"ln.childRulesConfig\"></treeViewAddEditForm>\r\n                                                </template>\r\n                                                <treeViewChildrenParser [children]=\"ln\" [gridSettings]=\"addEditObjectConfig\"></treeViewChildrenParser>\r\n                                            </template>\r\n                                        </div>\r\n                                    </template>\r\n                                </section>\r\n                                <!--<section id=\"mainPage\"  class=\"flex-container\" *ngIf=\"isMainPageVisible\">\r\n                                    <div *ngFor=\"let ln of editViewRowDataTable\">\r\n                                        <div >\r\n                                            <div>\r\n                                                <div class=\"flex-container\">\r\n                                                    <div> {{ln.label}}: </div>\r\n                                                    <div> {{ln.val}} </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>-->\r\n                            </template>\r\n                        </form>\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</article>\r\n\r\n\r\n\r\n\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/ReusableComponents/treeView/treeViewMain/treeViewMain.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var treeViewMain = (function () {
    function treeViewMain(alert, elementRef, interFormService, vmMat) {
        var _this = this;
        this.interFormService = interFormService;
        this.vmMat = vmMat;
        this.pluginValue = "";
        this.showValidation = false;
        this.enableInsert = false;
        this.formBuilderNotifier = new core_1.EventEmitter();
        this.isEmptyResult = false;
        this.alert = alert;
        this.elemRef = elementRef;
        this.matrixService = vmMat;
        this.addEditObjectConfig = {};
        this.addEditObject = {};
        this.NodeClass = "";
        this.editAddClicked = false;
        this.isMainPageVisible = true;
        this.canAdd = true;
        this.treeViewInputArrivedObservable = this.interFormService.treeViewInputArrived.subscribe(function (x) {
            return _this.injectDataAndConfigAndChildren(x);
        });
    }
    treeViewMain.prototype.ngOnInit = function () {
        if (this.maintreeViewInput) {
            this.editViewRowDataTable = this.maintreeViewInput.pluginInput;
        }
    };
    treeViewMain.prototype.ngOnDestroy = function () {
        this.fbDeleteNotifierObservable.unsubscribe();
        this.fbAddNotifierObservable.unsubscribe();
        this.fbEditNotifierObservable.unsubscribe();
        this.addEditCompletedObservable.unsubscribe();
        this.treeViewInputArrivedObservable.unsubscribe();
    };
    treeViewMain.prototype.deleteAddEditCalled = function (context, selectedRecord, op) {
        switch (op) {
            case "edit":
                context.editAddClicked = true;
                var modelName = selectedRecord.mainPageObject[0].modelName;
                context.pluginInput = selectedRecord.mainPageObject[0].blankModel;
                context.gridSettings = selectedRecord.mainPageObject[0].blankModelConfig;
                context.originalInput = selectedRecord;
                var target = selectedRecord;
                for (var dataKey in context.pluginInput) {
                    var val = target[dataKey];
                    context.pluginInput[dataKey] = val;
                }
                var mainPageObjectArray = new Array();
                mainPageObjectArray.push(context.pluginInput);
                var configObj = Object.create(Object.prototype);
                configObj["Definitions"] = new Array();
                configObj["Definitions"].push({ "ColumnDefinitions": context.gridSettings, "ModelName": modelName });
                var skipList = context.interFormService.getSkipList();
                var mainPage = context.matrixService.extractMatrixNew(skipList, modelName, mainPageObjectArray, configObj);
                var mainHeader = context.matrixService.extractHeaderNew(skipList, modelName, mainPageObjectArray, configObj);
                context.addEditObject = context.matrixService.editMatrixNew(skipList, modelName, mainPage[0].cells, mainHeader, configObj);
                break;
            case "add":
                context.editAddClicked = true;
                context.pluginInput = selectedRecord.blankModel;
                context.gridSettings = selectedRecord.blankModelConfig;
                context.originalInput = selectedRecord;
                var mainPageObjectArray = new Array();
                mainPageObjectArray.push(selectedRecord.blankModel);
                var configObj = Object.create(Object.prototype);
                configObj["Definitions"] = new Array();
                configObj["Definitions"].push({ "ColumnDefinitions": selectedRecord.blankModelConfig, "ModelName": selectedRecord.modelName });
                var skipList = context.interFormService.getSkipList();
                var mainPage = context.matrixService.extractMatrixNew(skipList, selectedRecord.modelName, mainPageObjectArray, configObj);
                var mainHeader = context.matrixService.extractHeaderNew(skipList, selectedRecord.modelName, mainPageObjectArray, configObj);
                context.addEditObject = context.matrixService.editMatrixNew(skipList, selectedRecord.modelName, mainPage[0].cells, mainHeader, configObj);
                selectedRecord.addDetail = true;
                break;
            case "delete":
                break;
        }
    };
    treeViewMain.prototype.setTreeViewVisibility = function (visibility) {
        this.maintreeViewInput.visiblePlugin = visibility;
    };
    treeViewMain.prototype.injectDataAndConfigAndChildren = function (input) {
        var _this = this;
        this.visiblePlugin = input.visiblePlugin;
        var deleteAddEditCb = this.deleteAddEditCalled;
        var kids = input.children;
        this.maintreeViewInput.gridSettings = input.mainConfig;
        this.PageType = input.pageType;
        this.editViewRowDataTable = input.data;
        this.mainModelName = input.modelName;
        this.interFormService.setMainModelName(this.mainModelName);
        this.children = input.children;
        this.PageType = input.pageType;
        var that = this;
        if (this.children && this.children.length > 0) {
            this.children.sort(function (a, b) {
                return a.TabOrder > b.TabOrder;
            });
            this.children.forEach(function (x) {
                _this.getChildRulesConfig(x);
            });
        }
        this.fbDeleteNotifierObservable = this.interFormService.formBuilderDeleteNotifier.subscribe(function (x) {
            deleteAddEditCb(that, x, "delete");
        });
        this.fbAddNotifierObservable = this.interFormService.formBuilderAddNotifier.subscribe(function (x) {
            deleteAddEditCb(that, x, "add");
        });
        this.fbEditNotifierObservable = this.interFormService.formBuilderEditNotifier.subscribe(function (x) {
            // deleteAddEditCb(that, x,"edit");
        });
        this.addEditCompletedObservable = this.interFormService.addEditCompleted.subscribe(function (x) {
            that.editAddClicked = false;
        });
        //show first tab by default
        if (this.children.length) {
            this.childClicked(this.children[0]);
        }
    };
    treeViewMain.prototype.cancelClicked = function () {
        this.returnCallBack("cancel");
    };
    treeViewMain.prototype.returnCallBack = function (returnData) {
        this.formBuilderNotifier.emit({
            value: returnData
        });
        this.maintreeViewInput.visiblePlugin = false;
    };
    treeViewMain.prototype.childClicked = function (child) {
        var _this = this;
        this.isMainPageVisible = false;
        this.children.forEach(function (x) {
            x.visible = false;
            x.addDetail = false;
            x.elementList.forEach(function (e) {
                e.editDetail = false;
                _this.resetChildDetailMode(e);
            });
            x.activeClassChild = "";
        });
        child.visible = true;
        child.activeClassChild = "active";
        this.canAdd = child.modelName !== this.interFormService.getMainModelName();
    };
    treeViewMain.prototype.resetChildDetailMode = function (obj) {
        var _this = this;
        obj.childrenArrayList.forEach(function (c) {
            c.addDetail = false;
            c.elementList.forEach(function (o) {
                o.editDetail = false;
                _this.resetChildDetailMode(o);
            });
        });
    };
    treeViewMain.prototype.getChildRulesConfig = function (child) {
        var _this = this;
        if (child.childrenArrayList && child.childrenArrayList.length > 0) {
            child.childrenArrayList.forEach(function (x) {
                if (x.elementList && x.elementList.length > 0) {
                    x.elementList.forEach(function (z) {
                        z.childRulesConfig = _this.maintreeViewInput.gridSettings.RulesConfig.filter(function (p) { return p.apiObject == z.mainPageObject[0].modelName; });
                        if (!z.childRulesConfig) {
                            z.childRulesConfig = [];
                        }
                        if (z.elementList && z.elementList.length) {
                            _this.getChildRulesConfig(z);
                        }
                    });
                }
            });
        }
        else {
            if (child.elementList && child.elementList.length > 0) {
                for (var i = 0; i < child.elementList.length; i++) {
                    child.elementList[i].childRulesConfig = this.maintreeViewInput.gridSettings.RulesConfig.filter(function (p) { return p.apiObject == child.elementList[i].mainPageObject[0].modelName; });
                    if (!child.elementList[i].childRulesConfig) {
                        child.elementList[i].childRulesConfig = [];
                    }
                    if (child.elementList[i].elementList || (child.elementList[i].childrenArrayList && child.elementList[i].childrenArrayList.length > 0)) {
                        this.getChildRulesConfig(child.elementList[i]);
                    }
                }
            }
        }
    };
    treeViewMain.prototype.showMainPage = function () {
        this.isMainPageVisible = true;
        this.children.forEach(function (x) {
            x.visible = false;
            x.activeClassChild = "";
        });
    };
    treeViewMain.prototype.addClicked = function (line) {
        line.childRulesConfig = this.maintreeViewInput.gridSettings.RulesConfig.filter(function (p) { return p.apiObject == line.modelName; });
        if (!line.childRulesConfig) {
            line.childRulesConfig = [];
        }
        this.interFormService.closeCurrentlyOpenedForm();
        this.interFormService.addEditDeleteMode = "add";
        this.interFormService.formBuilderAddNotifier.emit(line);
        this.interFormService.setCurrentForm(line);
    };
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], treeViewMain.prototype, "formBuilderNotifier", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], treeViewMain.prototype, "maintreeViewInput", void 0);
    treeViewMain = __decorate([
        core_1.Component({
            template: __webpack_require__("./src/app/ReusableComponents/treeView/treeViewMain/treeViewMain.html"),
            selector: 'treeViewMain'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _a) || Object, (typeof (_b = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _b) || Object, (typeof (_c = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], treeViewMain);
    return treeViewMain;
    var _a, _b, _c, _d;
}());
exports.treeViewMain = treeViewMain;


/***/ }),

/***/ "./src/app/ReusableComponents/typeahead/typeahead.html":
/***/ (function(module, exports) {

module.exports = "<input #theInput type=\"text\" [(ngModel)]=\"itemDescription\" class=\"form-control\" placeholder=\"Start typing the value you search for here ...\" type=\"text\" autocomplete=\"off\">\r\n<template [ngIf]=\"listCmp.length > 0\">\r\n    <ul id=\"typeahead-list\" class=\"list-group\">\r\n        <li class=\"list-group-item\" (click)=\"selectItem(item)\" *ngFor=\"let item of listCmp\">\r\n            <a><strong>{{item.id}}</strong> - {{item.text}}</a>\r\n        </li>\r\n    </ul>\r\n</template>"

/***/ }),

/***/ "./src/app/ReusableComponents/typeahead/typeahead.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var TypeAhead = (function () {
    function TypeAhead(el) {
        this.el = el;
        // public  search: (term: string) => Promise<Array<{ id: string, text: string }>>;
        this.selected = new core_1.EventEmitter();
        this.term = "";
        this.listCmp = [];
        this.refreshTimer = undefined;
        this.searchInProgress = false;
        this.searchRequired = false;
    }
    TypeAhead.prototype.ngAfterViewInit = function () {
        this.theInput.first.nativeElement.focus();
    };
    TypeAhead.prototype.onKey = function (event) {
        var _this = this;
        if (event.keyCode === 27) {
            this.listCmp = [];
            event.target.value = null;
            return;
        }
        this.term = event.target.value;
        if (!this.refreshTimer) {
            this.refreshTimer = setTimeout(function () {
                if (!_this.searchInProgress) {
                    _this.doSearch(event.keyCode);
                }
                else {
                    _this.searchRequired = true;
                }
            }, 200);
        }
    };
    TypeAhead.prototype.doSearch = function (keyCode) {
        var self = this;
        self.refreshTimer = undefined;
        if (self.search && self.term !== "") {
            self.searchInProgress = true;
            self.search(self.term)
                .then(function (res) {
                self.searchInProgress = false;
                if (self.searchRequired) {
                    self.searchRequired = false;
                    self.listCmp = [];
                    self.doSearch(keyCode);
                }
                else {
                    if (keyCode === 13 && parseInt(self.term) && res.find(function (x) { return x.id == self.term; })) {
                        self.listCmp = [];
                        self.selected.emit({ 'id': self.term, 'text': '' });
                    }
                    else {
                        self.displayList(res);
                    }
                }
            });
        }
    };
    TypeAhead.prototype.displayList = function (list) {
        this.listCmp = list;
    };
    TypeAhead.prototype.selectItem = function (item) {
        this.selected.emit(item);
        if (this.listCmp) {
            this.listCmp = [];
            this.itemDescription = item.id + ' - ' + item.text;
        }
    };
    TypeAhead.prototype.reset = function () {
        this.listCmp = [];
        this.itemDescription = '';
    };
    __decorate([
        core_1.ViewChildren('theInput'), 
        __metadata('design:type', Object)
    ], TypeAhead.prototype, "theInput", void 0);
    __decorate([
        core_1.Input("search"), 
        __metadata('design:type', Function)
    ], TypeAhead.prototype, "search", void 0);
    __decorate([
        core_1.Output("onSelected"), 
        __metadata('design:type', Object)
    ], TypeAhead.prototype, "selected", void 0);
    TypeAhead = __decorate([
        core_1.Component({
            selector: "typeahead-input",
            host: {
                "(keyup)": "onKey($event)"
            },
            template: __webpack_require__("./src/app/ReusableComponents/typeahead/typeahead.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _a) || Object])
    ], TypeAhead);
    return TypeAhead;
    var _a;
}());
exports.TypeAhead = TypeAhead;


/***/ }),

/***/ "./src/app/ReusableComponents/upload/uploader.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"card card-block\">\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12\">\r\n            <!-- file upload 'button' -->\r\n            <div class=\"uploader-header\">\r\n                <label id=\"uploader-button\" for=\"file-upload\" class=\"button-standard  {{disabled ? 'uploader-button-disabled' : ''}}\">\r\n                    <span class=\"fa fa-folder-open fa-lg\"></span>\r\n                    {{\"SelectFiles\" | LocalizationTranslate}}\r\n                    <input id=\"file-upload\" type=\"file\" (change)=\"onChange($event);\" [multiple]=\"multiple\" [disabled]=\"disabled\" [options]=\"options\" ngFileSelect>\r\n                </label>\r\n                <p>{{\"QueueLength\" | LocalizationTranslate}}: {{ uploader.queue.length }}</p>\r\n            </div>\r\n            <table class=\"uploader-table\">\r\n                <thead>\r\n                <tr>\r\n                    <th>{{\"Name\" | LocalizationTranslate}}</th>\r\n                    <th>{{\"Status\" | LocalizationTranslate}}</th>\r\n                    <th>{{\"Progress\" | LocalizationTranslate}}</th>\r\n                    <th>{{\"Action\" | LocalizationTranslate}}</th>\r\n                    <!--<th>Response</th>-->\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr *ngFor=\"let item of uploader.queue\">\r\n                    <td>{{ item.fileName }}</td>\r\n                    <td>\r\n                        <template [ngIf]=\"item.isSuccess\">\r\n                            <span class=\"fa fa-check fa-lg\"></span>\r\n                        </template>\r\n                        <template [ngIf]=\"item.isCancel\">\r\n                            <span class=\"fa fa-ban fa-lg\"></span>\r\n                        </template>\r\n                        <template [ngIf]=\"item.isError\">\r\n                            <span class=\"fa fa-remove fa-lg\"></span>\r\n                        </template>\r\n                    </td>\r\n                    <td>\r\n                        <div class=\"progress mb-0\">\r\n                            <progress class=\"progress\" value=\"{{item.progress}}\" max=\"100\"></progress>\r\n                        </div>\r\n                    </td>\r\n                    <td nowrap>\r\n                        <template [ngIf]=\"!autoUpload\">\r\n                            <button type=\"button\" title=\"{{'Upload' | LocalizationTranslate}}\" class=\"button-standard \" (click)=\"item.upload()\" [disabled]=\"item.isReady || item.isUploading || item.isSuccess\">\r\n                                <span class=\"fa fa-arrow-circle-o-up fa-lg\"></span>\r\n                            </button>\r\n                        </template>\r\n                        <button type=\"button\" title=\"{{'Remove' | LocalizationTranslate}}\" class=\"button-standard \" (click)=\"inlineDeleteClicked(item)\">\r\n                            <span class=\"fa fa-trash fa-lg\"></span>\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            <template [ngIf]=\"maxUploads !=1\">\r\n                <div>\r\n                    {{\"QueueProgress\" | LocalizationTranslate}}:\r\n                    <div class=\"progress\">\r\n                        <progress class=\"progress\" value=\"{{uploader.progress}}\" max=\"100\"></progress>\r\n                    </div>\r\n                </div>\r\n                <template [ngIf]=\"!autoUpload\">\r\n                    <button type=\"button\" title=\"{{'UploadAll' | LocalizationTranslate}}\" class=\"button-standard \"\r\n                            (click)=\"uploader.uploadFilesInQueue()\" [disabled]=\"!uploader.getNotUploadedItems().length\">\r\n                        <span class=\"fa fa-arrow-circle-o-up fa-lg\"></span> {{\"UploadAll\" | LocalizationTranslate}}\r\n                    </button>\r\n                </template>\r\n                <button type=\"button\" title=\"{{'RemoveAll' | LocalizationTranslate}}\" class=\"button-standard \"\r\n                        (click)=\"deleteAllClicked()\" [disabled]=\"!uploader.queue.length\">\r\n                    <span class=\"fa fa-trash fa-lg\"></span> {{\"RemoveAll\" | LocalizationTranslate}}\r\n                </button>\r\n            </template>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/ReusableComponents/upload/uploader.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var uploadService_1 = __webpack_require__("./src/app/ReusableServices/uploadService.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var CustomUploader = (function () {
    function CustomUploader(alertSvc, uploaderSvc, intFormSvc) {
        this.alertSvc = alertSvc;
        this.uploaderSvc = uploaderSvc;
        this.intFormSvc = intFormSvc;
        this.multiple = false;
        this.disabled = false;
        this.autoUpload = false;
        this.alert = alertSvc;
        this.uploader = uploaderSvc;
        this.intFormService = intFormSvc;
    }
    Object.defineProperty(CustomUploader.prototype, "UploadOptions", {
        set: function (value) {
            if (value.hasOwnProperty("autoUpload")) {
                this.autoUpload = value.autoUpload;
            }
            if (value.hasOwnProperty("multiple")) {
                this.multiple = value.multiple;
            }
            if (value.hasOwnProperty("maxUploads")) {
                this.maxUploads = value.maxUploads;
            }
            this.options = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomUploader.prototype, "Disabled", {
        set: function (value) {
            this.disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    CustomUploader.prototype.ngOnInit = function () {
        var _this = this;
        this.uploader.queue = [];
        this.uploader.progress = 0;
        this.overwriteUploadOptionsSubscription = this.intFormService.notifyUploadOptionsChange.subscribe(function (options) {
            _this.UploadOptions = options;
        });
        this.initUploadSubscription = this.intFormService.notifyUploadInit.subscribe(function () {
            _this.uploader.clearQueue();
        });
        this.addRemoveFilesSubscription = this.uploader.addRemoveFilesEventEmitter.subscribe(function () {
            if (_this.uploader.queue.length >= _this.uploader.options.maxUploads) {
                _this.disabled = true;
            }
            else {
                _this.disabled = false;
            }
        });
        this.validateFileSubscription = this.uploader.validateFileEventEmitter.subscribe(function (message) {
            _this.disabled = false;
            _this.alert.addAlert(message);
        });
        this.uploader.onAfterAddingFile = (function (item) {
            if (_this.target)
                _this.target.value = '';
        });
    };
    CustomUploader.prototype.ngOnDestroy = function () {
        this.addRemoveFilesSubscription.unsubscribe();
        this.validateFileSubscription.unsubscribe();
        this.overwriteUploadOptionsSubscription.unsubscribe();
        this.initUploadSubscription.unsubscribe();
    };
    CustomUploader.prototype.onChange = function (event) {
        this.target = event.target || event.srcElement;
    };
    CustomUploader.prototype.deleteAllClicked = function () {
        var _this = this;
        this.uploader.clearQueue().subscribe(function (res) {
            _this.uploader.queue = [];
            _this.uploader.progress = 0;
            _this.uploader.notifyUploadComplete.next('incomplete');
        }, function (error) {
            _this.alert.error(" Error removing a file " + error.status);
        });
    };
    CustomUploader.prototype.inlineDeleteClicked = function (item) {
        var _this = this;
        if (item.isUploaded && item.response) {
            this.uploader.removeFromQueue(item).subscribe(function (res) {
                _this.removeItem(item);
            }, function (error) {
                _this.alert.error(" Error removing a file " + error.status);
            });
        }
        else {
            this.removeItem(item);
        }
    };
    CustomUploader.prototype.removeItem = function (item) {
        var index = this.uploader.getIndexOfItem(item);
        this.uploader.queue.splice(index, 1);
        if (this.uploader.queue.length >= this.uploader.options.maxUploads) {
            this.disabled = true;
        }
        else {
            this.disabled = false;
        }
        this.uploader.progress = this.uploader.getTotalProgress();
        this.uploader.notifyUploadComplete.next('incomplete');
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], CustomUploader.prototype, "UploadOptions", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], CustomUploader.prototype, "Disabled", null);
    CustomUploader = __decorate([
        core_1.Component({
            selector: 'customUploader',
            template: __webpack_require__("./src/app/ReusableComponents/upload/uploader.html")
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _a) || Object, (typeof (_b = typeof uploadService_1.Ng2Uploader !== 'undefined' && uploadService_1.Ng2Uploader) === 'function' && _b) || Object, (typeof (_c = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _c) || Object])
    ], CustomUploader);
    return CustomUploader;
    var _a, _b, _c;
}());
exports.CustomUploader = CustomUploader;


/***/ }),

/***/ "./src/app/ReusableDirectives/upload/ng-file-select.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var uploadService_1 = __webpack_require__("./src/app/ReusableServices/uploadService.ts");
var NgFileSelectDirective = (function () {
    function NgFileSelectDirective(el, uploader) {
        var _this = this;
        this.el = el;
        this.uploader = uploader;
        this.onUpload = new core_1.EventEmitter();
        this.files = [];
        setTimeout(function () {
            _this.uploader.setOptions(_this.options);
        });
        this.uploader._emitter.subscribe(function (data) {
            _this.onUpload.emit(data);
            if (data.done) {
                _this.files = _this.files.filter(function (f) { return f.name !== data.originalName; });
            }
        });
        setTimeout(function () {
            if (_this.events) {
                _this.events.subscribe(function (data) {
                    if (data === 'startUpload') {
                        _this.uploader.uploadFilesInQueue();
                    }
                });
            }
        });
    }
    Object.defineProperty(NgFileSelectDirective.prototype, "options", {
        get: function () {
            return this._options;
        },
        set: function (value) {
            this._options = value;
            this.uploader.setOptions(this.options);
        },
        enumerable: true,
        configurable: true
    });
    NgFileSelectDirective.prototype.filterFilesByExtension = function () {
        var _this = this;
        var allowedExtensions = true;
        this.files = this.files.filter(function (f) {
            if (_this.uploader.options.allowedExtensions.indexOf(f.type) !== -1) {
                return true;
            }
            var ext = f.name.split('.').pop();
            if (_this.uploader.options.allowedExtensions.indexOf(ext) !== -1) {
                return true;
            }
            allowedExtensions = false;
            return false;
        });
        return (allowedExtensions);
    };
    NgFileSelectDirective.prototype.filterUploadSize = function () {
        var _this = this;
        var allowedMaxUploadSize = true;
        this.files = this.files.filter(function (f) {
            if (f.size > _this.uploader.options.maxUploadSize) {
                allowedMaxUploadSize = false;
                return false;
            }
            return true;
        });
        return (allowedMaxUploadSize);
    };
    NgFileSelectDirective.prototype.onChange = function () {
        this.files = Array.from(this.el.nativeElement.files);
        if ((this.files.length + this.uploader.queue.length) > this.uploader.options.maxUploads) {
            this.uploader.validateFileEventEmitter.emit("Too many files selected");
            return;
        }
        if (this.uploader.options.allowedExtensions.length) {
            if (!this.filterFilesByExtension()) {
                this.uploader.validateFileEventEmitter.emit("Incorrect file(s) type selected");
            }
        }
        if (!this.filterUploadSize()) {
            this.uploader.validateFileEventEmitter.emit("Uploaded file(s) size too big");
        }
        if (this.files.length) {
            this.uploader.addFilesToQueue(this.files);
        }
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', (typeof (_a = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _a) || Object)
    ], NgFileSelectDirective.prototype, "events", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_b = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _b) || Object)
    ], NgFileSelectDirective.prototype, "onUpload", void 0);
    __decorate([
        core_1.Input('options'), 
        __metadata('design:type', Object)
    ], NgFileSelectDirective.prototype, "options", null);
    __decorate([
        core_1.HostListener('change'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], NgFileSelectDirective.prototype, "onChange", null);
    NgFileSelectDirective = __decorate([
        core_1.Directive({
            selector: '[ngFileSelect]'
        }), 
        __metadata('design:paramtypes', [(typeof (_c = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _c) || Object, (typeof (_d = typeof uploadService_1.Ng2Uploader !== 'undefined' && uploadService_1.Ng2Uploader) === 'function' && _d) || Object])
    ], NgFileSelectDirective);
    return NgFileSelectDirective;
    var _a, _b, _c, _d;
}());
exports.NgFileSelectDirective = NgFileSelectDirective;


/***/ }),

/***/ "./src/app/ReusableDirectives/upload/ng-uploader.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var ng_file_select_1 = __webpack_require__("./src/app/ReusableDirectives/upload/ng-file-select.ts");
__export(__webpack_require__("./src/app/ReusableServices/uploadService.ts"));
__export(__webpack_require__("./src/app/ReusableDirectives/upload/ng-file-select.ts"));
exports.UPLOAD_DIRECTIVES = [
    ng_file_select_1.NgFileSelectDirective
];


/***/ }),

/***/ "./src/app/ReusableServices/AuthGuard.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var localizationService_1 = __webpack_require__("./src/app/ReusableServices/localizationService.ts");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var AuthGuard = (function () {
    function AuthGuard(router, apiService, httpAbstract, localizationService, intFormSvc, navigationService) {
        this.router = router;
        this.apiService = apiService;
        this.httpAbstract = httpAbstract;
        this.localizationService = localizationService;
        this.intFormSvc = intFormSvc;
        this.navigationService = navigationService;
    }
    AuthGuard.prototype.canActivate = function (route, state) {
        var _this = this;
        this.intFormSvc.stopSpinner();
        var tempbaseUrl = this.httpAbstract.baseUrl;
        if (tempbaseUrl != this.apiService.base) {
            this.httpAbstract.setBaseAddress((this.apiService.base));
        }
        var urlPath = state.url.split(';')[0]; //this.loc.path(false);
        if (this.localizationService.selectedLanguage && this.localizationService.localizationResourcesList.length) {
            return this.apiService.checkUserAuthorization(urlPath).map(function (authState) {
                _this.httpAbstract.setBaseAddress(tempbaseUrl);
                if (!authState)
                    _this.router.navigate(['Datahub', 'AccessDenied']);
                _this.navigationService.NavigateByLocationUrl(urlPath);
                return true;
            }).take(1);
        }
        else {
            var langId = 1;
            if (this.localizationService.selectedLanguage) {
                langId = this.localizationService.selectedLanguage.Id;
            }
            return this.apiService.fetchMultipleList(['/localization/language',
                '/localization/languagevalue/' + langId,
                '/auth/currentuser/checkpermission?route=' + urlPath,
                "/profile"]).map(function (res) {
                _this.httpAbstract.setBaseAddress(tempbaseUrl);
                _this.localizationService.setLanguageFromAuthGuard(res[0]);
                _this.localizationService.setResourcesByLangIdFromAuthGuard(res[1]);
                _this.navigationService.getMainPageNavigation(res[3]);
                _this.navigationService.getFiltertedPageNavigation('Datahub');
                _this.navigationService.NavigateByLocationUrl(urlPath);
                if (!res[2]) {
                    _this.router.navigate(['Datahub', 'AccessDenied']);
                }
                return true;
            }).take(1);
        }
    };
    AuthGuard = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _a) || Object, (typeof (_b = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _b) || Object, (typeof (_c = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _c) || Object, (typeof (_d = typeof localizationService_1.LocalizationService !== 'undefined' && localizationService_1.LocalizationService) === 'function' && _d) || Object, (typeof (_e = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _e) || Object, (typeof (_f = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _f) || Object])
    ], AuthGuard);
    return AuthGuard;
    var _a, _b, _c, _d, _e, _f;
}());
exports.AuthGuard = AuthGuard;


/***/ }),

/***/ "./src/app/ReusableServices/alertService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Alert) {
var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var appSettings_1 = __webpack_require__("./src/app/Configuration/appSettings.ts");
var interFormsService_1 = __webpack_require__("./src/app/ReusableServices/interFormsService.ts");
var AlertService = (function () {
    function AlertService(intFormsSvc) {
        this.intFormsSvc = intFormsSvc;
        this.askConfirmation = false;
        this.notificationTitle = appSettings_1.AppNotificationsMSG.notificationTitle;
        this.alerts = new Array();
        this.requestConfirmationAnswer$ = new core_1.EventEmitter();
        this.sendSectionForDelete$ = new core_1.EventEmitter();
    }
    AlertService.prototype.ok = function (text) {
        if (text === void 0) { text = "N/A"; }
        this.addAlert(text, "success");
    };
    AlertService.prototype.warn = function (text) {
        if (text === void 0) { text = "N/A"; }
        this.addAlert(text, "warning");
        this.notificationTitle = 'Warning';
    };
    AlertService.prototype.error = function (text) {
        if (text === void 0) { text = "N/A"; }
        this.addAlert(text, "danger");
        this.notificationTitle = 'Error';
    };
    AlertService.prototype.addAlert = function (text, type) {
        if (text === void 0) { text = "N/A"; }
        if (type === void 0) { type = "success"; }
        this.intFormsSvc.stopSpinner();
        var alert = new Alert(text, type);
        this.notificationTitle = appSettings_1.AppNotificationsMSG.notificationTitle;
        if (this.alerts.find(function (o) { return o.text === text && o.type === type; }) === undefined) {
            this.alerts.push(alert);
        }
    };
    AlertService.prototype.addAlertAndRequestAnswer = function (text, type, title) {
        if (text === void 0) { text = "N/A"; }
        if (type === void 0) { type = "inputRequired"; }
        this.intFormsSvc.stopSpinner();
        this.askConfirmation = true;
        this.notificationTitle = title ? title : appSettings_1.AppNotificationsMSG.deletionTitle;
        var alert = new Alert(text, type);
        if (this.alerts.find(function (o) { return o.text === text && o.type === type; }) === undefined) {
            this.alerts.push(alert);
        }
    };
    AlertService = __decorate([
        core_1.Injectable(),
        core_1.Component({}), 
        __metadata('design:paramtypes', [(typeof (_a = typeof interFormsService_1.InterFormsService !== 'undefined' && interFormsService_1.InterFormsService) === 'function' && _a) || Object])
    ], AlertService);
    return AlertService;
    var _a;
}());
exports.AlertService = AlertService;
;
var Alert = (function () {
    function Alert(text, type) {
        this.text = text;
        this.type = type;
    }
    return Alert;
}());
exports.Alert = Alert;
;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/exports-loader/index.js?Alert!./node_modules/bootstrap/js/dist/alert.js")))

/***/ }),

/***/ "./src/app/ReusableServices/apiService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var AuthUser = (function () {
    function AuthUser() {
        this.Id = 0;
    }
    return AuthUser;
}());
exports.AuthUser = AuthUser;
var ApiService = (function () {
    function ApiService(abstractHttp, appSettingsService) {
        this.abstractHttp = abstractHttp;
        this.appSettingsService = appSettingsService;
        this.prefixurl = '/auth';
        this.contentType = 'application/json; charset=utf-8';
        this.base = this.appSettingsService.appSettings.apiSettings.apiURL_BASE + '/api/tdam/datahub/ae';
        this.currentuserbaseurl = this.prefixurl + '/currentuser';
        this.logbaseurl = '/log';
        this.sqlStatementsUrl = '/application/sqlstatementdetail';
        this.httpAbs = abstractHttp;
        this.httpAbs.setBaseAddress(this.base);
    }
    ApiService.prototype.setApplicationsBaseUrl = function () {
        this.httpAbs = this.abstractHttp;
        this.httpAbs.setBaseAddress(this.base);
    };
    ApiService.prototype.getArrayFromQuery = function (dataKey, reportOptions) {
        if (reportOptions === void 0) { reportOptions = "{}"; }
        return this.httpAbs.fetchWithFilter(this.sqlStatementsUrl + '/' + dataKey, reportOptions, this.contentType);
    };
    ApiService.prototype.getMultipleArrayFromQuery = function (dataKeys) {
        var _this = this;
        dataKeys.forEach(function (x) {
            x.url = _this.sqlStatementsUrl + '/' + x.url;
            x.body = x.body ? x.body : "{}";
        });
        return this.httpAbs.fetchMultiple(dataKeys, this.contentType);
    };
    ApiService.prototype.executeMultipleNonQuery = function (dataKeys) {
        var _this = this;
        dataKeys.forEach(function (x) {
            x.url = _this.sqlStatementsUrl + '/executenonquery/' + x.url;
            x.body = x.body ? x.body : "{}";
        });
        return this.httpAbs.fetchMultiple(dataKeys, this.contentType);
    };
    ApiService.prototype.executeNonQuery = function (dataKey, reportOptions) {
        if (reportOptions === void 0) { reportOptions = "{}"; }
        return this.httpAbs.fetchWithFilter(this.sqlStatementsUrl + '/executenonquery/' + dataKey, reportOptions, this.contentType);
    };
    ApiService.prototype.getAuthCurrentUser = function () {
        return this.httpAbs.fetch(this.currentuserbaseurl);
    };
    ApiService.prototype.getAuthCurrentUserRoles = function () {
        return this.httpAbs.fetch(this.currentuserbaseurl + '/role');
    };
    ApiService.prototype.checkUserAuthorization = function (routepath) {
        return this.httpAbs.fetch(this.currentuserbaseurl + '/checkpermission?route=' + routepath);
    };
    ApiService.prototype.fetchMultipleList = function (urlList) {
        return this.httpAbs.fetchMultiple(urlList);
    };
    ApiService.prototype.fetchMultipleListWithBody = function (urldataList) {
        return this.httpAbs.fetchMultiple(urldataList, this.contentType);
    };
    ApiService.prototype.updateBulkRecords = function (apiParams, jsonData, headerKey, headers) {
        return this.httpAbs.updateBulkRecords(apiParams, jsonData, headerKey, headers, this.contentType);
    };
    ApiService.prototype.removeBulkRecords = function (apiParams, jsonData, headerKey, headers) {
        return this.httpAbs.removeBulkRecords(apiParams, jsonData, headerKey, headers, this.contentType);
    };
    ApiService.prototype.insertBulkRecords = function (apiParams, jsonData, headerKey, headers) {
        return this.httpAbs.insertBulkRecords(apiParams, jsonData, headerKey, headers, this.contentType);
    };
    ApiService.prototype.ExecuteUpdate = function (obj, pagename, primaryKeyColumn) {
        if (primaryKeyColumn === void 0) { primaryKeyColumn = ""; }
        switch (pagename.toLowerCase()) {
        }
    };
    ApiService.prototype.ExecutePageFilter = function (pagename, filterObject) {
        switch (pagename.toLowerCase()) {
        }
    };
    ApiService.prototype.ExecutePageRefresh = function (pagename, id) {
        if (id === void 0) { id = null; }
        switch (pagename.toLowerCase()) {
        }
    };
    ApiService.prototype.ExecuteDelete = function (obj, pagename, primaryKeyColumn) {
        if (primaryKeyColumn === void 0) { primaryKeyColumn = ""; }
        switch (pagename.toLowerCase()) {
        }
    };
    ApiService.prototype.ExecuteInsert = function (obj, pagename) {
        switch (pagename.toLowerCase()) {
        }
    };
    ApiService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _a) || Object, (typeof (_b = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _b) || Object])
    ], ApiService);
    return ApiService;
    var _a, _b;
}());
exports.ApiService = ApiService;


/***/ }),

/***/ "./src/app/ReusableServices/appSettingsService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var appSettings_1 = __webpack_require__("./src/app/Configuration/appSettings.ts");
var AppSettingsService = (function () {
    function AppSettingsService() {
        this.appSettings = appSettings_1.AppSettings;
        this.appNotificationsMsg = appSettings_1.AppNotificationsMSG;
    }
    AppSettingsService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], AppSettingsService);
    return AppSettingsService;
}());
exports.AppSettingsService = AppSettingsService;
;


/***/ }),

/***/ "./src/app/ReusableServices/calendar.toast.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright (C) 2016 Sergey Akopkokhyants
// This project is licensed under the terms of the MIT license.
// https://github.com/akserg/ng2-toasty

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var toasty_utils_1 = __webpack_require__("./src/app/ReusableComponents/standardToasty/toasty.utils.ts");
/**
 * Default configuration foa all toats and toasty container
 */
var CalendarToastyConfig = (function () {
    function CalendarToastyConfig() {
        // Maximum number of toasties to show at once
        this.limit = 100;
        // Whether to show the 'X' icon to close the toast
        this.showClose = true;
        // The window position where the toast pops up. Possible values
        // bottom-right, bottom-left, top-right, top-left, top-center, bottom-center, center-center
        this.position = 'top-right';
        // How long (in miliseconds) the toasty shows before it's removed. Set to null/0 to turn off.
        this.timeout = 5000;
        // What theme to use. Possible values:
        // default, material or bootstrap
        this.theme = 'default';
    }
    CalendarToastyConfig = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], CalendarToastyConfig);
    return CalendarToastyConfig;
}());
exports.CalendarToastyConfig = CalendarToastyConfig;
/**
 * Toasty service helps create different kinds of Toasts
 */
var CalendarToastyService = (function () {
    function CalendarToastyService(config) {
        this.config = config;
        // Init the counter
        this.uniqueCounter = 0;
        // ToastData event emitter
        this.toastsEmitter = new core_1.EventEmitter();
        // Clear event emitter
        this.clearEmitter = new core_1.EventEmitter();
        this.eventsArrival = new core_1.EventEmitter();
        this.eventTypeChanged = new core_1.EventEmitter();
        this.themes = [{
                name: 'Default Theme',
                code: 'default'
            }, {
                name: 'Material Design',
                code: 'material'
            }, {
                name: 'Bootstrap 3',
                code: 'bootstrap'
            }];
        this.types = [{
                name: 'Default',
                code: 'default',
            }, {
                name: 'Info',
                code: 'info'
            }, {
                name: 'Success',
                code: 'success'
            }, {
                name: 'Wait',
                code: 'wait'
            }, {
                name: 'Error',
                code: 'error'
            }, {
                name: 'Warning',
                code: 'warning'
            }];
        this.positions = [{
                name: 'Top Left',
                code: 'top-left',
            }, {
                name: 'Top Center',
                code: 'top-center',
            }, {
                name: 'Top Right',
                code: 'top-right',
            }, {
                name: 'Bottom Left',
                code: 'bottom-left',
            }, {
                name: 'Bottom Center',
                code: 'bottom-center',
            }, {
                name: 'Bottom Right',
                code: 'bottom-right',
            }, {
                name: 'Center Center',
                code: 'center-center',
            }];
    }
    CalendarToastyService.prototype.eventDetailClicked = function () {
        this.clearAll();
        var opt = {
            title: 'Event Details',
            msg: 'Event Detail will be shown here',
            showClose: true,
            timeout: 5000,
            theme: this.themes[0].code,
            type: this.types[0].code
        };
        this.info(opt);
    };
    CalendarToastyService.prototype.getToasts = function () {
        return this.toastsEmitter.asObservable();
    };
    CalendarToastyService.prototype.getClear = function () {
        return this.clearEmitter.asObservable();
    };
    /**
     * Create Toast of a default type
     */
    CalendarToastyService.prototype.default = function (options) {
        this.add(options, 'default');
    };
    /**
     * Create Toast of info type
     * @param  {object} options Individual toasty config overrides
     */
    CalendarToastyService.prototype.info = function (options) {
        this.add(options, 'info');
    };
    /**
     * Create Toast of success type
     * @param  {object} options Individual toasty config overrides
     */
    CalendarToastyService.prototype.success = function (options) {
        this.add(options, 'success');
    };
    /**
     * Create Toast of wait type
     * @param  {object} options Individual toasty config overrides
     */
    CalendarToastyService.prototype.wait = function (options) {
        this.add(options, 'wait');
    };
    /**
     * Create Toast of error type
     * @param  {object} options Individual toasty config overrides
     */
    CalendarToastyService.prototype.error = function (options) {
        this.add(options, 'error');
    };
    /**
     * Create Toast of warning type
     * @param  {object} options Individual toasty config overrides
     */
    CalendarToastyService.prototype.warning = function (options) {
        this.add(options, 'warning');
    };
    // Add a new toast item
    CalendarToastyService.prototype.add = function (options, type) {
        var toastyOptions;
        if (toasty_utils_1.isString(options) && options !== '' || toasty_utils_1.isNumber(options)) {
            toastyOptions = {
                title: options.toString()
            };
        }
        else {
            toastyOptions = options;
        }
        if (!toastyOptions || !toastyOptions.title && !toastyOptions.msg) {
            throw new Error('ng2-toasty: No toast title or message specified!');
        }
        type = type || 'default';
        // Set a unique counter for an id
        this.uniqueCounter++;
        // Set the local vs global config items
        var showClose = this._checkConfigItem(this.config, toastyOptions, 'showClose');
        // If we have a theme set, make sure it's a valid one
        var theme;
        if (toastyOptions.theme) {
            theme = CalendarToastyService.THEMES.indexOf(toastyOptions.theme) > -1 ? toastyOptions.theme : this.config.theme;
        }
        else {
            theme = this.config.theme;
        }
        var toast = {
            id: this.uniqueCounter,
            title: toastyOptions.title,
            msg: toastyOptions.msg,
            showClose: showClose,
            type: 'toasty-type-' + type,
            theme: 'toasty-theme-' + theme,
            onAdd: toastyOptions.onAdd && toasty_utils_1.isFunction(toastyOptions.onAdd) ? toastyOptions.onAdd : null,
            onRemove: toastyOptions.onRemove && toasty_utils_1.isFunction(toastyOptions.onRemove) ? toastyOptions.onRemove : null
        };
        // If there's a timeout individually or globally, set the toast to timeout
        // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.
        toast.timeout = toastyOptions.hasOwnProperty('timeout') ? toastyOptions.timeout : this.config.timeout;
        // Push up a new toast item
        // this.toastsSubscriber.next(toast);
        this.toastsEmitter.next(toast);
        // If we have a onAdd function, call it here
        if (toastyOptions.onAdd && toasty_utils_1.isFunction(toastyOptions.onAdd)) {
            toastyOptions.onAdd.call(this, toast);
        }
    };
    // Clear all toasts
    CalendarToastyService.prototype.clearAll = function () {
        this.clearEmitter.next(null);
    };
    // Clear the specific one
    CalendarToastyService.prototype.clear = function (id) {
        this.clearEmitter.next(id);
    };
    // Checks whether the local option is set, if not,
    // checks the global config
    CalendarToastyService.prototype._checkConfigItem = function (config, options, property) {
        if (options[property] === false) {
            return false;
        }
        else if (!options[property]) {
            return config[property];
        }
        else {
            return true;
        }
    };
    // Allowed THEMES
    CalendarToastyService.THEMES = ['default', 'material', 'bootstrap'];
    CalendarToastyService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [CalendarToastyConfig])
    ], CalendarToastyService);
    return CalendarToastyService;
}());
exports.CalendarToastyService = CalendarToastyService;


/***/ }),

/***/ "./src/app/ReusableServices/calendarService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var fns_1 = __webpack_require__("./src/app/Datahub/routes/home/fns.ts");
var colors = {
    red: {
        primary: '#ad2121',
        secondary: '#FAE3E3'
    },
    blue: {
        primary: '#1e90ff',
        secondary: '#D1E8FF'
    },
    green: {
        primary: 'LightGreen',
        secondary: 'LightGreen'
    }
};
(function (calendarMode) {
    calendarMode[calendarMode["standard"] = 0] = "standard";
    calendarMode[calendarMode["fourWeeks"] = 1] = "fourWeeks";
})(exports.calendarMode || (exports.calendarMode = {}));
var calendarMode = exports.calendarMode;
var CalendarService = (function () {
    function CalendarService(httpAbs, appSer) {
        this.eventsArrived = new core_1.EventEmitter();
        this.baseUrl = appSer.appSettings.apiSettings.apiURL_BASE + '/api/tdam/datahub/ae';
        httpAbs.setBaseAddress(this.baseUrl);
        this.proxy = httpAbs;
        this.home = 0;
        this.eventsArrived = new core_1.EventEmitter();
        // Set the calendar mode
        CalendarService.selectedSalendarMode = calendarMode.fourWeeks;
    }
    CalendarService.prototype.registerHome = function () {
        this.home++;
        return this.home;
    };
    CalendarService.prototype.getEvents = function (inputDate) {
        var _this = this;
        CalendarService.calEvents = Object.create(Object.prototype);
        var endOfMonth;
        var startOfMonth;
        switch (CalendarService.selectedSalendarMode) {
            case calendarMode.fourWeeks:
                endOfMonth = fns_1.fns.addWeeks(inputDate, 2).toISOString().substring(0, 10);
                startOfMonth = fns_1.fns.removeWeeks(inputDate, 2).toISOString().substring(0, 10);
                break;
            case calendarMode.standard:
                endOfMonth = fns_1.fns.endOfMonth(inputDate).toISOString().substring(0, 10);
                startOfMonth = fns_1.fns.startOfMonth(inputDate).toISOString().substring(0, 10);
                break;
        }
        this.proxy.setBaseAddress(this.baseUrl);
        var calUrl = "/auth/calendar/enginehistory?from=" + startOfMonth + "&to=" + endOfMonth;
        var calUrl1 = "/auth/calendar/pendingqueue?from=" + startOfMonth + "&to=" + endOfMonth;
        var result = this.proxy.fetchMultiple([calUrl, calUrl1]);
        result.subscribe(function (x) {
            var resultSet1 = _this.buildCaldendarEvents(false, x[0], CalendarService.calEvents);
            var resultSet2 = _this.buildCaldendarEvents(true, x[1], CalendarService.calEvents);
            _this.eventsArrived.emit(CalendarService.calEvents);
        });
    };
    CalendarService.prototype.buildCaldendarEvents = function (futureEvents, input, calEvents) {
        input.forEach(function (xx) {
            var eventObj = xx.EventData;
            var theColor;
            var status;
            if (futureEvents) {
                status = "Future";
            }
            else {
                status = eventObj.Status;
            }
            if (!calEvents[status]) {
                calEvents[status] = new Array();
            }
            if (!calEvents["All"]) {
                calEvents["All"] = new Array();
            }
            var startDate;
            var endDate;
            if (eventObj.Start) {
                startDate = new Date(eventObj.Start);
            }
            if (eventObj.End) {
                endDate = new Date(eventObj.End);
            }
            switch (status.toLowerCase()) {
                case "ok":
                    theColor = colors.green;
                    break;
                case "fatal":
                    theColor = colors.red;
                    break;
                case "future":
                    theColor = colors.blue;
                    break;
                default:
                    theColor = colors.green;
            }
            var name = eventObj.Name;
            calEvents[status].push({
                start: startDate,
                end: endDate,
                title: name,
                engineType: eventObj.EngineType,
                id: eventObj.Id,
                status: status,
                color: theColor
            });
            calEvents["All"].push({
                start: startDate,
                end: endDate,
                title: name,
                engineType: eventObj.EngineType,
                id: eventObj.Id,
                status: status,
                color: theColor
            });
        });
        return calEvents;
    };
    CalendarService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _a) || Object, (typeof (_b = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _b) || Object])
    ], CalendarService);
    return CalendarService;
    var _a, _b;
}());
exports.CalendarService = CalendarService;
/*[{
    start: fns.subDays(fns.startOfDay(new Date()), 1),
    end: fns.addDays(new Date(), 1),
    title: 'A 3 day event',
    color: colors.red,
    actions: this.actions
}, {
    start: fns.startOfDay(new Date()),
    title: 'An event with no end date',
    color: colors.yellow,
    actions: this.actions
}, {
    start: fns.subDays(fns.endOfMonth(new Date()), 3),
    end: fns.addDays(fns.endOfMonth(new Date()), 3),
    title: 'A long event that spans 2 months',
    color: colors.blue
}];*/


/***/ }),

/***/ "./src/app/ReusableServices/crudService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var ruleService_1 = __webpack_require__("./src/app/ReusableServices/ruleService.ts");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var crudService = (function () {
    function crudService(alertService, appSettingsSrv, ruleService, matrixService) {
        this.alertService = alertService;
        this.appSettingsSrv = appSettingsSrv;
        this.ruleService = ruleService;
        this.matrixService = matrixService;
        this.OnCrudOperationSuccess = new core_1.EventEmitter();
        this.alert = alertService;
        this.appSettingsService = appSettingsSrv;
    }
    crudService.prototype.setCallerContext = function (ctx) {
        this.callerContext = ctx;
    };
    crudService.prototype.getCallerContext = function () {
        return this.callerContext;
    };
    crudService.prototype.updateInlineRecord = function (columns, gridSettings, pageName, httpProxy) {
        var primaryColumnName = this.matrixService.getPrimaryColumnName(gridSettings);
        var pluginValue = this.matrixService.buildJSONObject(columns, primaryColumnName);
        if (this.ruleService.validateRulesByRulesConfig(pluginValue, gridSettings["RulesConfig"], columns)) {
            this.UpdatePage(pluginValue, pageName, gridSettings, httpProxy);
        }
    };
    crudService.prototype.updateInsertFormRecord = function (columns, gridSettings, pageName, pageType, httpProxy) {
        for (var colInd in columns) {
            var column = columns[colInd];
            var type = gridSettings.ColumnConfiguration.find(function (x) { return x.dbColumnName == column.name; });
            if (type.dataSourceAddress !== undefined) {
                var lookupColumnName = type.dataSourceAddress.displayColumnName;
                var lookupRow = type.dataSource.find(function (row) {
                    if (row[lookupColumnName] === column.val) {
                        return row;
                    }
                });
                if (lookupRow !== undefined) {
                    column.val = lookupRow[type.dataSourceAddress.dbColumnName];
                }
            }
        }
        var primaryColumnName = this.matrixService.getPrimaryColumnName(gridSettings);
        var pluginValue = this.matrixService.buildJSONObject(columns, primaryColumnName);
        switch (pageType.toLowerCase()) {
            case "edit":
                this.UpdatePage(pluginValue, pageName, gridSettings, httpProxy);
                break;
            case "add":
                this.InsertPage(pluginValue, pageName, httpProxy);
                break;
            default:
                this.OnCrudOperationSuccess.emit("Cancel");
        }
    };
    crudService.prototype.delete = function (columns, pageName, primaryColumnName, httpProxy) {
        var _this = this;
        var data = this.matrixService.buildJSONObject(columns, primaryColumnName);
        if (httpProxy) {
            httpProxy.ExecuteDelete(data, pageName)
                .subscribe(function (res) {
                _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.deletionConfirmationMsg);
                _this.OnCrudOperationSuccess.emit("DeleteSuccess");
            }, function (error) {
                _this.alert.error(_this.appSettingsService.appNotificationsMsg.apiMsg.apiDelete + error.status);
            }, function () {
            });
        }
    };
    /*buildJSONObject(columns,primaryColumnName) {
        var data = columns;
        var jsonValue = '{ ';
        for (var i = 0; i < data.length; i++) {
            var dbName = data[i].name;
            var editedValue = JSON.stringify(data[i].val);
            if(primaryColumnName == dbName && (data[i].val == "" || data[i].val == undefined ))
            {
                editedValue = JSON.stringify(0);
            }
            (i + 1) == data.length ? jsonValue += "\"" + dbName + "\" : " + editedValue : jsonValue += "\"" + dbName + "\" : " + editedValue + ",";
        }
        jsonValue += ' }';

        var returndata = JSON.parse(jsonValue);
        console.log(returndata);
        return returndata;
    }*/
    crudService.prototype.UpdatePage = function (returndata, pageName, gridSettings, httpProxy) {
        var _this = this;
        var PrimaryKeyColumn = undefined;
        if (httpProxy) {
            if (gridSettings["PrimaryKeyColumn"]) {
                PrimaryKeyColumn = gridSettings["PrimaryKeyColumn"];
            }
            httpProxy.ExecuteUpdate(returndata, pageName, PrimaryKeyColumn)
                .subscribe(function (res) {
                //alert("Record updated successfully");
                _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.saveConfirmedMsg);
                _this.OnCrudOperationSuccess.emit("UpdateSucceeded");
            }, function (error) {
                _this.alert.error("async error #" + error.status);
            }, function () {
            });
        }
    };
    crudService.prototype.InsertPage = function (data, pageName, httpProxy) {
        var _this = this;
        if (httpProxy) {
            httpProxy.ExecuteInsert(data, pageName)
                .subscribe(function (res) {
                //  alert("Record inserted successfully");
                _this.alert.addAlert(_this.appSettingsService.appNotificationsMsg.insertMSG);
                _this.OnCrudOperationSuccess.emit("InsertSucceeded");
            }, function (error) {
                _this.alert.error("async error #" + error.status);
            }, function () { });
        }
    };
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], crudService.prototype, "OnCrudOperationSuccess", void 0);
    crudService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _a) || Object, (typeof (_b = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _b) || Object, (typeof (_c = typeof ruleService_1.RuleService !== 'undefined' && ruleService_1.RuleService) === 'function' && _c) || Object, (typeof (_d = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _d) || Object])
    ], crudService);
    return crudService;
    var _a, _b, _c, _d;
}());
exports.crudService = crudService;


/***/ }),

/***/ "./src/app/ReusableServices/dnd.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var dnd_config_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/dnd.config.ts");
var dnd_utils_1 = __webpack_require__("./src/app/ReusableComponents/dragdrop/dnd.utils.ts");
var DragDropService = (function () {
    function DragDropService() {
        this.allowedDropZones = [];
    }
    DragDropService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], DragDropService);
    return DragDropService;
}());
exports.DragDropService = DragDropService;
var DragDropSortableService = (function () {
    function DragDropSortableService(_config) {
        this._config = _config;
    }
    Object.defineProperty(DragDropSortableService.prototype, "elem", {
        get: function () {
            return this._elem;
        },
        enumerable: true,
        configurable: true
    });
    DragDropSortableService.prototype.markSortable = function (elem) {
        if (dnd_utils_1.isPresent(this._elem)) {
            this._elem.classList.remove(this._config.onSortableDragClass);
        }
        if (dnd_utils_1.isPresent(elem)) {
            this._elem = elem;
            this._elem.classList.add(this._config.onSortableDragClass);
        }
    };
    DragDropSortableService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof dnd_config_1.DragDropConfig !== 'undefined' && dnd_config_1.DragDropConfig) === 'function' && _a) || Object])
    ], DragDropSortableService);
    return DragDropSortableService;
    var _a;
}());
exports.DragDropSortableService = DragDropSortableService;


/***/ }),

/***/ "./src/app/ReusableServices/genericfunctions.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function getIdValue(obj, primaryKeyColumn) {
    var Id;
    if (!primaryKeyColumn) {
        primaryKeyColumn = "Id";
    }
    for (var i = 0; i < Object.keys(obj).length; i++) {
        if (Object.keys(obj)[i] === primaryKeyColumn || Object.keys(obj)[i] === "Id") {
            Id = obj[Object.keys(obj)[i]];
            break;
        }
    }
    return Id;
}
exports.getIdValue = getIdValue;
function toDateString(date) {
    return (date.getUTCFullYear().toString() + '-' +
        ("0" + (date.getUTCMonth() + 1)).slice(-2) + '-' +
        ("0" + (date.getUTCDate())).slice(-2));
}
exports.toDateString = toDateString;
function toUTCDate(date) {
    return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
}
exports.toUTCDate = toUTCDate;
function toCamelCase(input) {
    return input.toLowerCase().split(' ').map(function (word) {
        return (word.charAt(0).toUpperCase() + word.slice(1));
    }).join(' ');
}
exports.toCamelCase = toCamelCase;


/***/ }),

/***/ "./src/app/ReusableServices/httpAbstract.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/index.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
__webpack_require__("./node_modules/rxjs/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/Rx.js");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var HttpAbstract = (function () {
    function HttpAbstract(http, appSettingsService) {
        this.appSettingsService = appSettingsService;
        this.baseUrl = this.appSettingsService.appSettings.apiSettings.apiURL_BASE + '/api/tdam/datahub/ae';
        this.http = http;
        this.contentTypeDefault = 'application/x-www-form-urlencoded';
        this.contentTypeJson = 'application/json';
    }
    //region CRUD return observable
    HttpAbstract.prototype.fetch = function (apiParams) {
        var test = this.baseUrl + apiParams;
        this.result = this.http.get(test).map(function (response) { return response.json(); });
        return this.result;
    };
    /* fetchMultiple(apiParams:Array<string>):Observable<any> {
         var allObservables:Array<Observable<any>> = new Array<Observable<any>>();
         var httpProvider=this.http;
         var root=this.baseUrl;
         apiParams.forEach(function(x){
             allObservables.push(httpProvider.get(root+x).map(response=>response.json()))
         });
         Observable.forkJoin(allObservables);
         this.result = Observable.forkJoin(allObservables);
         return this.result;
     }*/
    HttpAbstract.prototype.fetchMultiple = function (apiParams, contentType) {
        var allObservables = new Array();
        var httpProvider = this.http;
        var root = this.baseUrl;
        var headers = this.constructHeaders('', '', contentType);
        apiParams.forEach(function (x) {
            if (x.body) {
                allObservables.push(httpProvider.post(root + x.url, x.body, { headers: headers }).map(function (response) { return response.json(); }));
            }
            else if (x.url) {
                allObservables.push(httpProvider.get(root + x.url).map(function (response) { return response.json(); }));
            }
            else {
                allObservables.push(httpProvider.get(root + x).map(function (response) { return response.json(); }));
            }
        });
        Observable_1.Observable.forkJoin(allObservables);
        this.result = Observable_1.Observable.forkJoin(allObservables);
        return this.result;
    };
    HttpAbstract.prototype.fetchWithHeader = function (apiParams, headerKey, headerValue, contentType) {
        var headers = this.constructHeaders(headerKey, headerValue, contentType);
        this.result = this.http.get(this.baseUrl + apiParams, { headers: headers }).map(function (response) { return response.json(); });
        return this.result;
    };
    HttpAbstract.prototype.fetchWithFilter = function (apiParams, body, contentType) {
        var headers = this.constructHeaders('', '', contentType);
        this.result = this.http.post(this.baseUrl + apiParams, body, { headers: headers }).map(function (response) { return response.json(); });
        return this.result;
        /*let apiList= [];
        apiList.push({url: apiParams, body: body});
        return this.fetchMultiple(apiList,contentType);*/
    };
    /*fetchMultipleWithFilter(apiParams:Array<any>, contentType?: string):Observable<any> {
        var allObservables:Array<Observable<any>> = new Array<Observable<any>>();

        apiParams.forEach(x =>{
            let headers = this.constructHeaders('', '', contentType);
            allObservables.push(this.http.post(this.baseUrl + x.url, x.body, { headers: headers }).map(response => response.json()));
        });

        Observable.forkJoin(allObservables);
        this.result = Observable.forkJoin(allObservables);

        return this.result;
    }*/
    HttpAbstract.prototype.remove = function (apiParams) {
        this.result = this.http.delete(this.baseUrl + apiParams).map(function (response) { return response.json(); });
        ;
        return this.result;
    };
    HttpAbstract.prototype.removeWithHeader = function (apiParams, headerKey, headerValue, contentType) {
        var headers = this.constructHeaders(headerKey, headerValue, contentType);
        this.result = this.http.delete(this.baseUrl + apiParams, { headers: headers }).map(function (response) { return response.json(); });
        return this.result;
    };
    HttpAbstract.prototype.removeMultiple = function (apiParams, contentType) {
        var _this = this;
        var allObservables = new Array();
        apiParams.forEach(function (x) {
            var headers = _this.constructHeaders(x.headerKey, x.headerValue, contentType);
            allObservables.push(_this.http.delete(_this.baseUrl + x.url, { headers: headers, body: x.headerKey }).map(function (response) { return response.json(); }));
        });
        Observable_1.Observable.forkJoin(allObservables);
        this.result = Observable_1.Observable.forkJoin(allObservables);
        return this.result;
    };
    HttpAbstract.prototype.removeBulkRecords = function (apiParams, body, headerKey, headerValue, contentType) {
        var headers = this.constructHeaders(headerKey, headerValue, contentType);
        this.result = this.http.delete(this.baseUrl + apiParams, { headers: headers, body: body }).map(function (response) { return response.json(); });
        return this.result;
    };
    HttpAbstract.prototype.update = function (apiParams, body) {
        this.result = this.http.put(this.baseUrl + apiParams, body).map(function (response) { return response.json(); });
        ;
        return this.result;
    };
    HttpAbstract.prototype.updateBulkRecords = function (apiParams, body, headerKey, headerValue, contentType) {
        var headers = this.constructHeaders(headerKey, headerValue, contentType);
        this.result = this.http.put(this.baseUrl + apiParams, body, { headers: headers }).map(function (response) { return response.json(); });
        return this.result;
    };
    HttpAbstract.prototype.updateWithHeader = function (apiParams, body, headerKey, headerValue, contentType) {
        var headers = this.constructHeaders(headerKey, headerValue, contentType);
        this.result = this.http.put(this.baseUrl + apiParams, body, { headers: headers }).map(function (response) { return response.json(); });
        return this.result;
    };
    HttpAbstract.prototype.insert = function (apiParams, body) {
        this.result = this.http.post(this.baseUrl + apiParams, body).map(function (response) { return response.json(); });
        ;
        return this.result;
    };
    HttpAbstract.prototype.insertWithHeader = function (apiParams, body, headerKey, headerValue, contentType) {
        var headers = this.constructHeaders(headerKey, headerValue, contentType);
        this.result = this.http.post(this.baseUrl + apiParams, body, { headers: headers }).map(function (response) { return response.json(); });
        return this.result;
    };
    HttpAbstract.prototype.insertBulkRecords = function (apiParams, body, headerKey, headerValue, contentType) {
        var headers = this.constructHeaders(headerKey, headerValue, contentType);
        this.result = this.http.post(this.baseUrl + apiParams, body, { headers: headers }).map(function (response) { return response.json(); });
        return this.result;
    };
    HttpAbstract.prototype.insertJson = function (apiParams, body) {
        var headers = this.constructContentType(this.contentTypeJson);
        this.result = this.http.post(this.baseUrl + apiParams, body, { headers: headers }).map(function (response) { return response.json(); });
        return this.result;
    };
    //endregion CRUD with observable
    //region helper functions
    HttpAbstract.prototype.setBaseAddress = function (url) {
        this.baseUrl = url;
    };
    HttpAbstract.prototype.constructContentType = function (contentType) {
        var headers = new http_1.Headers();
        if (contentType) {
            headers.append('Content-Type', contentType);
        }
        return headers;
    };
    HttpAbstract.prototype.constructHeaders = function (headerKey, headerValue, contentType) {
        var headers = new http_1.Headers();
        if (contentType) {
            headers.append('Content-Type', contentType);
        }
        else {
            headers.append('Content-Type', this.contentTypeDefault);
        }
        if (headerKey) {
            if (headerValue) {
                headers.append(headerKey, headerValue);
            }
        }
        return headers;
    };
    HttpAbstract = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof http_1.Http !== 'undefined' && http_1.Http) === 'function' && _a) || Object, (typeof (_b = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _b) || Object])
    ], HttpAbstract);
    return HttpAbstract;
    var _a, _b;
}());
exports.HttpAbstract = HttpAbstract;


/***/ }),

/***/ "./src/app/ReusableServices/importExportService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var ImportExportService = (function () {
    function ImportExportService(abstractHttp, appSettingsService) {
        this.abstractHttp = abstractHttp;
        this.appSettingsService = appSettingsService;
        this.contentType = 'application/json; charset=utf-8';
        this.base = this.appSettingsService.appSettings.apiSettings.apiURL_BASE + '/api/tdam/datahub/ae';
        this.importTextFileUrl = '/import/textfile';
        this.httpAbs = abstractHttp;
        this.httpAbs.setBaseAddress(this.base);
    }
    ImportExportService.prototype.setApplicationsBaseUrl = function () {
        this.httpAbs = this.abstractHttp;
        this.httpAbs.setBaseAddress(this.base);
    };
    ImportExportService.prototype.importTextFile = function (dataKey, id) {
        return this.httpAbs.fetchWithFilter(this.importTextFileUrl + '/' + dataKey + '/' + id, '', this.contentType);
    };
    ImportExportService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _a) || Object, (typeof (_b = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _b) || Object])
    ], ImportExportService);
    return ImportExportService;
    var _a, _b;
}());
exports.ImportExportService = ImportExportService;


/***/ }),

/***/ "./src/app/ReusableServices/interFormsService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var InterFormsService = (function () {
    function InterFormsService() {
        this.treeViewAddedFields = new Array();
        this.treeViewSummarySkipFields = new Array();
        this.columnInserted = new core_1.EventEmitter();
        this.pageInserted = new core_1.EventEmitter();
        this.formBuilderDeleteNotifier = new core_1.EventEmitter();
        this.formBuilderEditNotifier = new core_1.EventEmitter();
        this.formBuilderAddNotifier = new core_1.EventEmitter();
        this.addEditCompleted = new core_1.EventEmitter();
        this.currentThreeLevelChange = new core_1.EventEmitter();
        this.treeViewInputArrived = new core_1.EventEmitter();
        this.notifyUploadOptionsChange = new Subject_1.Subject();
        this.notifyUploadInit = new Subject_1.Subject();
        this.spinnerEmitter = new Subject_1.Subject();
        this.buildTreeViewCleanupList();
    }
    InterFormsService.prototype.buildTreeViewCleanupList = function () {
        this.treeViewAddedFields.push("blockSequence");
        this.treeViewAddedFields.push("mainPageObject");
        this.treeViewAddedFields.push("config");
        this.treeViewAddedFields.push("model");
        this.treeViewAddedFields.push("nodeClass");
        this.treeViewAddedFields.push("indent");
        this.treeViewAddedFields.push("elementList");
        this.treeViewAddedFields.push("blankModel");
        this.treeViewAddedFields.push("blankModelConfig");
        this.treeViewAddedFields.push("modelName");
        this.treeViewAddedFields.push("level");
        this.treeViewAddedFields.push("expanded");
        this.treeViewAddedFields.push("summaryObject");
        this.treeViewAddedFields.push("viewDetail");
        this.treeViewAddedFields.push("editDetail");
        this.treeViewAddedFields.push("addDetail");
        for (var key in this.treeViewAddedFields) {
            this.treeViewSummarySkipFields.push(this.treeViewAddedFields[key]);
        }
    };
    InterFormsService.prototype.startSpinner = function (scope, text) {
        var spinner = {
            isSpinnerRunning: true,
            spinnerText: text,
            spinnerScope: scope
        };
        this.spinnerEmitter.next(spinner);
    };
    InterFormsService.prototype.stopSpinner = function () {
        var spinner = {
            isSpinnerRunning: false
        };
        this.spinnerEmitter.next(spinner);
    };
    InterFormsService.prototype.setTreeViewRuleConfig = function (ruleConfig) {
        this.treeViewRuleConfig = ruleConfig;
    };
    InterFormsService.prototype.getTreeViewRuleConfig = function () {
        return this.treeViewRuleConfig;
    };
    InterFormsService.prototype.setTreeViewApiResult = function (result) {
        this.treeViewApiResult = result;
    };
    InterFormsService.prototype.getTreeViewApiResult = function () {
        return this.treeViewApiResult;
    };
    InterFormsService.prototype.setMainModelName = function (modelName) {
        this.mainModelName = modelName;
    };
    InterFormsService.prototype.getMainModelName = function () {
        return this.mainModelName;
    };
    InterFormsService.prototype.cleanApi = function (mainObj) {
        var _this = this;
        this.deleteObjectProperties(mainObj);
        for (var colInd in mainObj) {
            var obj = mainObj[colInd];
            if (Object.prototype.toString.call(obj) === '[object Array]') {
                obj.forEach(function (x) { return _this.cleanApi(x); });
            }
            if (Object.prototype.toString.call(obj) === '[object Object]') {
                this.cleanApi(obj);
            }
        }
    };
    InterFormsService.prototype.rebuildRootObject = function (input) {
        var modelName = this.getMainModelName();
        var mainObj = input[modelName];
        var rootobj = input[modelName][modelName][0];
        for (var colInd in mainObj) {
            var obj = mainObj[colInd];
            if (Object.prototype.toString.call(obj) !== '[object Array]') {
                mainObj[colInd] = rootobj[colInd];
            }
        }
        delete mainObj[modelName];
    };
    InterFormsService.prototype.deleteObjectProperties = function (input) {
        var inputObj = input;
        this.treeViewAddedFields.forEach(function (x) {
            delete inputObj[x];
        });
    };
    InterFormsService.prototype.injectSkipList = function (skipList) {
        var _this = this;
        skipList.forEach(function (x) {
            if (!_this.treeViewSummarySkipFields.find(function (xx) { return xx === x; })) {
                _this.treeViewSummarySkipFields.push(x);
            }
        });
    };
    InterFormsService.prototype.cleanObjectForSummary = function (mainObj) {
        this.deleteObjectPropertiesForSummary(mainObj);
        var cleanObj = Object.create(Object.prototype);
        for (var colInd in mainObj) {
            var obj = mainObj[colInd];
            var check = Object.prototype.toString.call(obj);
            if (Object.prototype.toString.call(obj) !== '[object Array]') {
                cleanObj[colInd] = mainObj[colInd];
            }
        }
        return cleanObj;
    };
    InterFormsService.prototype.deleteObjectPropertiesForSummary = function (input) {
        var inputObj = input;
        this.treeViewSummarySkipFields.forEach(function (x) {
            delete inputObj[x];
        });
    };
    InterFormsService.prototype.setCurrentForm = function (currentForm) {
        this.currentTreeViewForm = currentForm;
    };
    InterFormsService.prototype.closeCurrentlyOpenedForm = function () {
        if (this.currentTreeViewForm) {
            this.currentTreeViewForm.addDetail = false;
            this.currentTreeViewForm.editDetail = false;
        }
    };
    InterFormsService.prototype.assignControl = function (control) {
        this.inputControl = control;
    };
    InterFormsService.prototype.saveValueInControl = function (val) {
        this.inputControl.val = val;
    };
    InterFormsService.prototype.getSkipList = function () {
        return this.skipList;
    };
    InterFormsService.prototype.setSkipList = function (skipList) {
        this.skipList = skipList;
    };
    InterFormsService.prototype.setCurrentTreeLeve = function (level) {
        this.currentThreeLevelChange.emit(level);
    };
    InterFormsService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], InterFormsService);
    return InterFormsService;
}());
exports.InterFormsService = InterFormsService;


/***/ }),

/***/ "./src/app/ReusableServices/localizationService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var SelectedLanguage = (function () {
    function SelectedLanguage(id, desc, code) {
        this.Id = id;
        this.Description = desc;
        this.LangCode = code;
    }
    return SelectedLanguage;
}());
exports.SelectedLanguage = SelectedLanguage;
var LocalizationService = (function () {
    function LocalizationService(httpAbstract, apiService, alert) {
        this.httpAbstract = httpAbstract;
        this.apiService = apiService;
        this.alert = alert;
        this.contentType = 'application/json; charset=utf-8';
        this.languageList = [];
        this.localizationResourcesList = [];
        this.prefixUrl = '/localization';
        this.localizationLanguageUrl = this.prefixUrl + "/language";
        this.localizationLanguageValueUrl = this.prefixUrl + '/languagevalue';
        this.localizationValueSetUrl = this.prefixUrl + '/valueset';
        this.localizationValueUrl = this.prefixUrl + '/value';
        this.localizationEventEmitter = new core_1.EventEmitter();
        this.setDefaultLanguge();
    }
    LocalizationService.prototype.setDefaultLanguge = function () {
        var _this = this;
        this.getLocalizationLanguagesList().subscribe(function (res) {
            _this.languageList = res;
            if (_this.languageList.length > 0) {
                var selectedLang = _this.languageList.find(function (p) { return p.LangCode.toLowerCase().substring(0, 2) == 'en'; });
                if (selectedLang) {
                    _this.selectedLanguage = selectedLang;
                }
            }
        }, function (error) {
            _this.alert.error('Error in retrieving Localization info' + error.status);
        }, function () { });
    };
    LocalizationService.prototype.setLanguageFromAuthGuard = function (res) {
        this.languageList = res;
        if (this.languageList.length > 0) {
            var selectedLang = this.languageList.find(function (p) { return p.LangCode.toLowerCase().substring(0, 2) == 'en'; });
            if (selectedLang) {
                this.selectedLanguage = selectedLang;
            }
        }
    };
    LocalizationService.prototype.setResourcesByLangIdFromAuthGuard = function (res) {
        this.localizationResourcesList = res;
        //this.localizationEventEmitter.emit(this.selectedLanguage);
    };
    LocalizationService.prototype.getLocalizationLanguagesList = function () {
        return this.httpAbstract.fetch(this.localizationLanguageUrl);
    };
    LocalizationService.prototype.getResourcesByLanguageId = function () {
        var _this = this;
        var tempBaseUrl = this.httpAbstract.baseUrl;
        if (tempBaseUrl != this.apiService.base) {
            this.httpAbstract.setBaseAddress(this.apiService.base);
        }
        this.httpAbstract.fetch(this.localizationLanguageValueUrl + '/' + this.selectedLanguage.Id).subscribe(function (res) {
            _this.localizationResourcesList = res;
            _this.localizationEventEmitter.emit(_this.selectedLanguage);
        }, function (error) {
            _this.alert.error('Error in retrieving Resources info' + error.status);
        }, function () { });
        this.httpAbstract.setBaseAddress(tempBaseUrl);
    };
    LocalizationService.prototype.toggleSelection = function (langId) {
        this.selectedLanguage = this.languageList.find(function (p) { return p.Id == langId; });
        this.getResourcesByLanguageId();
    };
    LocalizationService.prototype.getLocalizedValueDescription = function (valueSet) {
        if (this.localizationResourcesList.length) {
            var tempLocalizationValue = this.localizationResourcesList.find(function (p) { return p.ValueSetDescription.toLowerCase() == valueSet.toString().toLowerCase(); });
            if (tempLocalizationValue) {
                valueSet = tempLocalizationValue.ValueDescription;
            }
        }
        return valueSet;
    };
    LocalizationService.prototype.ExecutePageRefresh = function (pageName, id) {
        if (id === void 0) { id = null; }
        switch (pageName.toLowerCase()) {
            case "language":
                return this.getLanguage();
            case "valueset":
                return this.getValueSet();
            case "valueset_child":
                return this.getValuesByValueSetId(id);
        }
    };
    LocalizationService.prototype.ExecuteInsert = function (obj, pageName) {
        switch (pageName.toLowerCase()) {
            case "language":
                return this.createLanguage(obj);
            case "valueset":
                return this.createValueSet(obj);
            case "valueset_child":
                return this.createValueSetValue(obj);
        }
    };
    LocalizationService.prototype.ExecuteUpdate = function (obj, pageName) {
        switch (pageName.toLowerCase()) {
            case "language":
                return this.updateLanguage(obj);
            case "valueset":
                return this.updateValueSet(obj);
            case "valueset_child":
                return this.updateValueSetValue(obj);
        }
    };
    LocalizationService.prototype.ExecuteDelete = function (obj, pageName) {
        switch (pageName.toLowerCase()) {
            case "valueset":
                return this.deleteValueSet(obj);
            case "valueset_child":
                return this.deleteValueSetValue(obj);
        }
    };
    LocalizationService.prototype.getLanguage = function (id) {
        if (id === void 0) { id = null; }
        if (id) {
            return this.httpAbstract.fetch(this.localizationLanguageUrl + '/' + id);
        }
        else {
            return this.httpAbstract.fetch(this.localizationLanguageUrl);
        }
    };
    LocalizationService.prototype.updateLanguage = function (obj) {
        return this.httpAbstract.updateWithHeader(this.localizationLanguageUrl + '/' + obj.Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    LocalizationService.prototype.createLanguage = function (obj) {
        return this.httpAbstract.insertWithHeader(this.localizationLanguageUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    LocalizationService.prototype.getValueSet = function (id) {
        if (id === void 0) { id = null; }
        if (id) {
            return this.httpAbstract.fetch(this.localizationValueSetUrl + '/' + id);
        }
        else {
            return this.httpAbstract.fetch(this.localizationValueSetUrl);
        }
    };
    LocalizationService.prototype.updateValueSet = function (obj) {
        return this.httpAbstract.updateWithHeader(this.localizationValueSetUrl + '/' + obj.Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    LocalizationService.prototype.createValueSet = function (obj) {
        return this.httpAbstract.insertWithHeader(this.localizationValueSetUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    LocalizationService.prototype.deleteValueSet = function (obj) {
        return this.httpAbstract.remove(this.localizationValueSetUrl + '/' + obj.Id);
    };
    LocalizationService.prototype.getValuesByValueSetId = function (id) {
        return this.httpAbstract.fetch(this.localizationValueSetUrl + '/' + id + '/value');
    };
    LocalizationService.prototype.updateValueSetValue = function (obj) {
        return this.httpAbstract.updateWithHeader(this.localizationValueUrl + '/' + obj.Id, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    LocalizationService.prototype.createValueSetValue = function (obj) {
        return this.httpAbstract.insertWithHeader(this.localizationValueUrl, JSON.stringify(obj), '', '' //empty headers
        , this.contentType);
    };
    LocalizationService.prototype.deleteValueSetValue = function (obj) {
        return this.httpAbstract.remove(this.localizationValueUrl + '/' + obj.Id);
    };
    LocalizationService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _a) || Object, (typeof (_b = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _b) || Object, (typeof (_c = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _c) || Object])
    ], LocalizationService);
    return LocalizationService;
    var _a, _b, _c;
}());
exports.LocalizationService = LocalizationService;


/***/ }),

/***/ "./src/app/ReusableServices/matrixService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var alertService_1 = __webpack_require__("./src/app/ReusableServices/alertService.ts");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
/*
the attributes for configuration are coming from *ControlConfig.ts files (usually) in case that an attribute like isVisible is set to false ...
than that object(textbox, data etc) will be invisible wherever is used(form builder or display grid) but you can ovewrite it,
by forcing attributes: "isAlwaysVisibleOn": ["FormBuilder"] and than even if the setting is for visible = false, it will be visible on FormBuilder component
*/
var matrixService = (function () {
    function matrixService(apiService, alert) {
        this.apiService = apiService;
        this.alert = alert;
        this.pageIsLoaded = false;
        this.treeViewBlockCount = 1;
        this.treeParseLevel = 1;
        this.resetCheckBoxList = new Subject_1.Subject();
        this.modelObjects = new Array();
        this.inputClickedEvent = new core_1.EventEmitter();
    }
    matrixService.prototype.inputClicked = function (input) {
        this.inputClickedEvent.emit(input);
    };
    matrixService.prototype.extractMultiHeader = function (inputObjs, formTypes) {
        var finalArray = new Array();
        var arrayHeaders = new Array();
        var arrayObjects = new Array();
        for (var line in inputObjs) {
            var subData = inputObjs[line];
            var subConfig = formTypes[line];
            var header = this.extractHeader(subData, subConfig);
            var data = this.extractMatrix(subData, subConfig);
            finalArray.push({ headerSet: header, dataSet: data });
        }
        ;
        return finalArray;
    };
    matrixService.prototype.extractHeader = function (inputObjs, formTypes) {
        var headerRow;
        var row;
        var sequence = 0;
        if (inputObjs) {
            if (inputObjs.length > 0) {
                row = inputObjs[0];
                headerRow = new Array();
                for (var key in row) {
                    var columnConfig = formTypes.ColumnConfiguration.find(function (x) { return x.dbColumnName.toLowerCase() === key.toLowerCase(); });
                    if (columnConfig != undefined && row.hasOwnProperty(key)) {
                        sequence = formTypes.ColumnConfiguration.map(function (x) { return x.dbColumnName.toLowerCase(); }).indexOf(key.toLowerCase());
                        headerRow.push({
                            val: columnConfig.displayName,
                            columnCss: columnConfig.columnCss,
                            name: key,
                            sequence: sequence,
                            sortCss: "",
                            isVisible: columnConfig.isVisible,
                            filter: ""
                        });
                    }
                }
            }
            else {
                headerRow = this.extractHeaderFromConfig(formTypes);
            }
        }
        return this.sortBySequence(headerRow);
    };
    matrixService.prototype.extractFooter = function (inputObjs, formTypes) {
        var footerRow;
        var row;
        var sequence = 0;
        if (inputObjs) {
            if (inputObjs.length > 0) {
                row = inputObjs[0];
                footerRow = new Array();
                for (var key in row) {
                    var columnConfig = formTypes.ColumnConfiguration.find(function (x) { return x.dbColumnName.toLowerCase() === key.toLowerCase(); });
                    if (columnConfig != undefined && row.hasOwnProperty(key)) {
                        sequence = formTypes.ColumnConfiguration.map(function (x) { return x.dbColumnName.toLowerCase(); }).indexOf(key.toLowerCase());
                        var isTotalVisible = columnConfig.isTotalVisible ? columnConfig.isTotalVisible : false;
                        var columnFormat = columnConfig.columnFormat ? columnConfig.columnFormat : "";
                        footerRow.push({
                            val: "",
                            columnCss: columnConfig.columnCss,
                            name: key,
                            sequence: sequence,
                            columnFormat: columnFormat,
                            isVisible: columnConfig.isVisible,
                            htmlControlType: columnConfig.htmlControlType,
                            isTotalVisible: isTotalVisible
                        });
                    }
                }
            }
            else {
                footerRow = this.extractHeaderFromConfig(formTypes);
            }
        }
        return this.sortBySequence(footerRow);
    };
    matrixService.prototype.extractFilter = function (inputObjs, formTypes) {
        var headerRow;
        var row;
        var sequence = 0;
        if (inputObjs.length) {
            row = inputObjs[0];
            headerRow = new Array();
            for (var key in row) {
                var columnConfig = formTypes.ColumnConfiguration.find(function (x) { return x.dbColumnName.toLowerCase() === key.toLowerCase(); });
                if (columnConfig != undefined && row.hasOwnProperty(key)) {
                    sequence = formTypes.ColumnConfiguration.map(function (x) { return x.dbColumnName.toLowerCase(); }).indexOf(key.toLowerCase());
                    headerRow.push({
                        val: columnConfig.displayName,
                        columnCss: columnConfig.columnCss,
                        name: key,
                        sequence: sequence,
                        htmlControlType: columnConfig.htmlControlType,
                        filterable: columnConfig.filterable,
                        options: [],
                        filterValue: []
                    });
                }
            }
        }
        else {
            headerRow = this.extractHeaderFromConfig(formTypes);
        }
        return this.sortBySequence(headerRow);
    };
    matrixService.prototype.extractViewHeader = function (inputObjs, formTypes) {
        var headerRow = new Array();
        if (inputObjs) {
            var row = inputObjs[0];
            var sequence = 0;
            for (var key in row) {
                var columnConfig = formTypes.ColumnConfiguration.find(function (x) { return x.dbColumnName.toLowerCase() === key.toLowerCase(); });
                if (columnConfig != undefined && row.hasOwnProperty(key)) {
                    sequence = formTypes.ColumnConfiguration.map(function (x) { return x.dbColumnName.toLowerCase(); }).indexOf(key.toLowerCase());
                    headerRow.push({
                        columnCss: columnConfig.columnCss,
                        val: columnConfig.displayName,
                        name: key,
                        sequence: sequence,
                        sortCss: "",
                        isVisible: columnConfig.isVisible
                    });
                }
            }
        }
        else {
            headerRow = this.extractHeaderFromConfig(formTypes);
        }
        return headerRow;
    };
    matrixService.prototype.extractHeaderFromConfig = function (formTypes) {
        var headerRow = new Array();
        var sequence = 0;
        //When no records exists create the grid from control configuration array
        if (formTypes.ColumnConfiguration != undefined && formTypes.ColumnConfiguration.length > 0) {
            formTypes.ColumnConfiguration.forEach(function (x) {
                headerRow.push({
                    val: x.displayName,
                    columnCss: x.columnCss,
                    name: x.dbColumnName,
                    sequence: sequence,
                    sortCss: "",
                    isVisible: x.isVisible
                });
                sequence++;
            });
        }
        return headerRow;
    };
    matrixService.prototype.extractMatrix = function (inputObjs, formTypes) {
        var result = new Array();
        var sortedRow = new Array();
        var length = inputObjs.length;
        var newRow;
        var columnSequence = 0;
        var rowSequence = 0;
        var primaryKeyColumn;
        var primaryKeyNameValue = {};
        this.pageIsLoaded = false;
        if (formTypes.PrimaryKeyColumn) {
            primaryKeyColumn = formTypes.PrimaryKeyColumn.toLowerCase();
        }
        for (var i = 0; i < length; i++) {
            newRow = new Array();
            var row = inputObjs[i];
            for (var key in row) {
                var columnConfig = formTypes.ColumnConfiguration.find(function (x) { return x.dbColumnName.toLowerCase() === key.toLowerCase(); });
                if (columnConfig != undefined && row.hasOwnProperty(key)) {
                    var displayDescription = "";
                    if (columnConfig.dataSourceAddress) {
                        var lookupTable = columnConfig.dataSource;
                        var dataSourceAddressColumnName = columnConfig.dataSourceAddress.dbColumnName;
                        var lookupRow = lookupTable.find(function (x) {
                            return row[key] === x[dataSourceAddressColumnName];
                        });
                        var displayColumnName = columnConfig.dataSourceAddress.displayColumnName;
                        if (lookupRow == undefined) {
                            displayDescription = row[key];
                        }
                        else {
                            displayDescription = lookupRow[displayColumnName];
                        }
                    }
                    var displayValue = row[key];
                    if (key.toLowerCase() == "id" || key.toLowerCase() == primaryKeyColumn) {
                        primaryKeyNameValue = { name: key.toLowerCase(), value: displayValue };
                    }
                    columnSequence = formTypes.ColumnConfiguration.map(function (x) { return x.dbColumnName.toLowerCase(); }).indexOf(key.toLowerCase());
                    var columnFormat = columnConfig.columnFormat ? columnConfig.columnFormat : "";
                    newRow.push({
                        name: key,
                        val: displayValue,
                        displayDescription: displayDescription,
                        objId: rowSequence,
                        eventHandler: "",
                        sequence: columnSequence,
                        columnCss: columnConfig.columnCss,
                        columnFormat: columnFormat,
                        isVisible: columnConfig.isVisible,
                        htmlControlType: columnConfig.htmlControlType,
                        isRequired: columnConfig.isRequired,
                        isToggleable: columnConfig.isToggleable,
                        isAllowGridLevelEdit: columnConfig.isAllowGridLevelEdit,
                        dataSourceAddress: columnConfig.dataSourceAddress,
                        dataSource: columnConfig.dataSource ? this.getArrayDataSource(columnConfig.dataSource, columnConfig.dataSourceAddress["displayColumnName"], columnConfig.dataSourceAddress["dbColumnName"], columnConfig.dataSourceAddress["defaultValue"]) : [],
                        customdataSource: columnConfig.customdataSource ? this.getArrayDataSource(columnConfig.customdataSource, columnConfig.dataSourceAddress["displayColumnName"], columnConfig.dataSourceAddress["dbColumnName"], columnConfig.dataSourceAddress["defaultValue"]) : [],
                    });
                }
            }
            sortedRow = this.sortBySequence(newRow);
            result.push({ Id: rowSequence, primaryKey: primaryKeyNameValue, collapsed: true, inlineEditEnabled: false,
                cells: sortedRow, checkBox: { checked: false, disabled: false }, childData: row.childData });
            rowSequence++;
        }
        this.pageIsLoaded = true;
        return result;
    };
    matrixService.prototype.getDropDownIdValue = function (dataSource, DescriptionColumn, ValueColumn, ActualValue) {
        var IdValue;
        if (dataSource) {
            var temp = dataSource.find(function (p) { return p[DescriptionColumn] == ActualValue; });
            if (temp) {
                IdValue = temp[ValueColumn];
            }
        }
        return IdValue;
    };
    matrixService.prototype.getArrayDataSource = function (dataSource, DescriptionColumn, ValueColumn, defaultValue) {
        var result = [];
        if (defaultValue) {
            defaultValue.forEach(function (x) {
                result.push({
                    Description: x["Name"],
                    Value: x["Value"]
                });
            });
        }
        if (dataSource) {
            dataSource.forEach(function (x) {
                result.push({
                    Description: x[DescriptionColumn],
                    Value: x[ValueColumn]
                });
            });
        }
        return result;
    };
    matrixService.prototype.bindCustomDropDown = function (dropDown, data) {
        dropDown.customdataSource = this.getArrayDataSource(data, dropDown.dataSourceAddress["displayColumnName"], dropDown.dataSourceAddress["dbColumnName"], dropDown.dataSourceAddress["defaultValue"]);
        if (dropDown.dataSourceAddress["defaultValue"]) {
            var defaultItem = dropDown.customdataSource.find(function (x) { return x.Value == dropDown.dataSourceAddress["defaultValue"][0].Value; });
            dropDown.val = defaultItem.Value;
        }
    };
    matrixService.prototype.bindCustomCheckBoxList = function (checkBoxList, data) {
        var result = [];
        if (data) {
            data.forEach(function (x) {
                result.push({
                    Description: x[checkBoxList.dataSourceAddress["displayColumnName"]],
                    Value: x[checkBoxList.dataSourceAddress["dbColumnName"]],
                    Checked: data.Checked ? data.Checked : false
                });
            });
        }
        checkBoxList.dataSource = result;
        this.resetCheckBoxList.next(false);
    };
    matrixService.prototype.editMatrix = function (editableRow, labels, formTypes) {
        var result = new Array();
        var length = labels.length;
        var controlSequence = 0;
        for (var i = 0; i < length; i++) {
            var cell = labels[i];
            var labelValue = editableRow.find(function (x) {
                return x.sequence === cell.sequence;
            });
            var columnConfig = formTypes.ColumnConfiguration.find(function (x) { return x.dbColumnName.toLowerCase() === cell.name.toLowerCase(); });
            if (columnConfig === undefined) {
                continue;
            }
            var dbColumnName = "";
            if (columnConfig.dataSource) {
                dbColumnName = this.getdbColumnNameForDataSourceAddress(columnConfig.dataSourceAddress);
            }
            if (columnConfig.htmlControlType.toLowerCase() == 'customselect' && columnConfig.dataSource) {
                var associatedControl;
                if (formTypes.ColumnDefinitions) {
                    associatedControl = formTypes.ColumnDefinitions.find(function (x) { return x.dbColumnName === columnConfig.associatedDropdownControl; });
                }
                else {
                    associatedControl = formTypes.ColumnConfiguration.find(function (x) { return x.dbColumnName === columnConfig.associatedDropdownControl; });
                }
                var dropDowndata = columnConfig.dataSource.find(function (p) { return p[dbColumnName] === cell.val; });
                columnConfig.customdataSource = columnConfig.dataSource;
                if (associatedControl) {
                    //Update the custom dataSource for associated control
                    var dropDownId = 0;
                    if (dropDowndata) {
                        dropDownId = dropDowndata[columnConfig.dataSourceAddress.dbColumnName];
                    }
                    if (dropDowndata[columnConfig.dataSourceAddress.PrimaryKeyColumn]) {
                        associatedControl.customdataSource = associatedControl.dataSource.filter(function (c) { return c[associatedControl.dataSourceAddress.ForeignKeyColumn] == dropDownId; });
                    }
                    else {
                        associatedControl.customdataSource = associatedControl.dataSource.filter(function (c) { return c[associatedControl.dataSourceAddress.dbColumnName] == dropDownId; });
                    }
                    var tempAssociatedRecord = result.find(function (p) { return p.name.toLowerCase() == associatedControl.dbColumnName.toLowerCase(); });
                    if (tempAssociatedRecord) {
                        var tempdbColumnName = this.getdbColumnNameForDataSourceAddress(tempAssociatedRecord.dataSourceAddress);
                        tempAssociatedRecord.customdataSource = this.getArrayDataSource(associatedControl.customdataSource, tempAssociatedRecord.dataSourceAddress["displayColumnName"], tempdbColumnName, tempAssociatedRecord.dataSourceAddress["defaultValue"]);
                    }
                }
            }
            var lookUp = columnConfig.htmlControlType;
            var castedValue;
            if (lookUp === "checkbox")
                castedValue = Boolean(labelValue.val);
            else
                castedValue = labelValue.val;
            var htmlObjSettings = {
                objId: labelValue.objId,
                label: cell.val,
                name: cell.name,
                val: castedValue,
                htmlControlType: columnConfig.htmlControlType,
                isStateType: columnConfig.isStateType,
                columnCss: columnConfig.columnCss,
                isRequired: columnConfig.isRequired,
                sequence: controlSequence,
                isVisible: columnConfig.isVisible,
                readOnly: columnConfig.readOnly,
                isToggleable: columnConfig.isToggleable,
                isComplexTypeInlineTemplate: columnConfig.isComplexTypeInlineTemplate,
                isComplexTypeInlineTemplateConfig: columnConfig.isComplexTypeInlineTemplateConfig,
                dataSourceAddress: columnConfig.dataSourceAddress,
                dataSource: columnConfig.dataSource ? this.getArrayDataSource(columnConfig.dataSource, columnConfig.dataSourceAddress["displayColumnName"], dbColumnName, columnConfig.dataSourceAddress["defaultValue"]) : [],
                customdataSource: columnConfig.customdataSource ? this.getArrayDataSource(columnConfig.customdataSource, columnConfig.dataSourceAddress["displayColumnName"], dbColumnName, columnConfig.dataSourceAddress["defaultValue"]) : [],
                masterdataSource: columnConfig.dataSource,
                isAlwaysVisibleOn: columnConfig.isAlwaysVisibleOn ? columnConfig.isAlwaysVisibleOn : []
            };
            result.push(htmlObjSettings);
            controlSequence++;
        }
        return result;
    };
    matrixService.prototype.viewMatrix = function (editableRow, labels, formTypes, databaseRecords) {
        var result = new Array();
        var length = labels.length;
        var controlSequence = 0;
        for (var i = 0; i < length; i++) {
            var cell = labels[i];
            var labelValue = editableRow.find(function (x) {
                return x.sequence === cell.sequence;
            });
            var columnConfig = formTypes.ColumnConfiguration.find(function (x) { return x.dbColumnName.toLowerCase() === cell.name.toLowerCase(); });
            if (columnConfig === undefined) {
                continue;
            }
            var lookUp = columnConfig.htmlControlType;
            var castedValue;
            if (lookUp === "checkbox")
                castedValue = Boolean(labelValue.val);
            else
                castedValue = labelValue.val;
            result.push({
                objId: labelValue.objId,
                label: cell.val,
                name: cell.name,
                val: castedValue,
                htmlControlType: columnConfig.htmlControlType,
                isStateType: columnConfig.isStateType,
                columnCss: columnConfig.columnCss,
                isVisible: columnConfig.isVisible,
                readOnly: columnConfig.readOnly,
                isToggleable: columnConfig.isToggleable
            });
        }
        return result;
    };
    matrixService.prototype.getFormBuilderControls = function (formTypes) {
        var result = new Array();
        var length = formTypes.ColumnConfiguration.length;
        var controlSequence = 0;
        for (var i = 0; i < length; i++) {
            var columnConfig = formTypes.ColumnConfiguration[i];
            var dbColumnName = "";
            if (columnConfig.dataSource) {
                dbColumnName = this.getdbColumnNameForDataSourceAddress(columnConfig.dataSourceAddress);
            }
            if (columnConfig.htmlControlType.toLowerCase() == 'customselect' && columnConfig.dataSource) {
                var associatedControl;
                if (formTypes.ColumnDefinitions) {
                    associatedControl = formTypes.ColumnDefinitions.find(function (x) { return x.dbColumnName === columnConfig.associatedDropdownControl; });
                }
                else {
                    associatedControl = formTypes.ColumnConfiguration.find(function (x) { return x.dbColumnName === columnConfig.associatedDropdownControl; });
                }
                var dropDowndata = columnConfig.dataSource;
                columnConfig.customdataSource = columnConfig.dataSource;
                if (associatedControl) {
                    //Update the custom dataSource for associated control
                    var dropDownId = 0;
                    if (dropDowndata) {
                        dropDownId = dropDowndata[columnConfig.dataSourceAddress.dbColumnName];
                    }
                    if (dropDowndata[columnConfig.dataSourceAddress.PrimaryKeyColumn]) {
                        associatedControl.customdataSource = associatedControl.dataSource.filter(function (c) { return c[associatedControl.dataSourceAddress.ForeignKeyColumn] == dropDownId; });
                    }
                    else {
                        associatedControl.customdataSource = associatedControl.dataSource.filter(function (c) { return c[associatedControl.dataSourceAddress.dbColumnName] == dropDownId; });
                    }
                    var tempAssociatedRecord = result.find(function (p) { return p.name.toLowerCase() == associatedControl.dbColumnName.toLowerCase(); });
                    if (tempAssociatedRecord) {
                        var tempdbColumnName = this.getdbColumnNameForDataSourceAddress(tempAssociatedRecord.dataSourceAddress);
                        tempAssociatedRecord.customdataSource = this.getArrayDataSource(associatedControl.customdataSource, tempAssociatedRecord.dataSourceAddress["displayColumnName"], tempdbColumnName, tempAssociatedRecord.dataSourceAddress["defaultValue"]);
                    }
                }
            }
            var lookUp = columnConfig.htmlControlType;
            var castedValue;
            if (lookUp === "checkbox")
                castedValue = false;
            else
                castedValue = "";
            var htmlObjSettings = {
                objId: 0,
                label: columnConfig.displayName,
                name: columnConfig.dbColumnName,
                val: castedValue,
                htmlControlType: columnConfig.htmlControlType,
                isStateType: columnConfig.isStateType,
                columnCss: columnConfig.columnCss,
                sequence: controlSequence,
                isVisible: columnConfig.isVisible,
                readOnly: columnConfig.readOnly,
                dataSourceAddress: columnConfig.dataSourceAddress,
                dataSource: columnConfig.dataSource ? this.getArrayDataSource(columnConfig.dataSource, columnConfig.dataSourceAddress["displayColumnName"], columnConfig.dataSourceAddress["dbColumnName"], columnConfig.dataSourceAddress["defaultValue"]) : [],
                customdataSource: columnConfig.customdataSource ? this.getArrayDataSource(columnConfig.customdataSource, columnConfig.dataSourceAddress["displayColumnName"], columnConfig.dataSourceAddress["dbColumnName"], columnConfig.dataSourceAddress["defaultValue"]) : [],
                masterdataSource: columnConfig.dataSource,
                isAlwaysVisibleOn: columnConfig.isAlwaysVisibleOn ? columnConfig.isAlwaysVisibleOn : []
            };
            if (formTypes.FormValidationRules) {
                var colFormValidationSettings = formTypes.FormValidationRules.find(function (x) { return x.dbColumnName.toLowerCase() === columnConfig.dbColumnName.toLowerCase(); });
                if (colFormValidationSettings) {
                    this.applyFormValidationRules(htmlObjSettings, colFormValidationSettings);
                }
            }
            result.push(htmlObjSettings);
            controlSequence++;
        }
        return result;
    };
    matrixService.prototype.applyFormValidationRules = function (objTarget, rulesToApply) {
        for (var key in rulesToApply["builtInValidators"]) {
            if (rulesToApply["builtInValidators"].hasOwnProperty(key)) {
                var val = rulesToApply["builtInValidators"][key];
                objTarget[key] = val;
            }
        }
    };
    matrixService.prototype.sortBySequence = function (inputArray) {
        var sortedArray = inputArray.sort(function (n1, n2) {
            if (n1.sequence > n2.sequence) {
                return 1;
            }
            if (n1.sequence < n2.sequence) {
                return -1;
            }
            return 0;
        });
        return sortedArray;
    };
    matrixService.prototype.parseTree = function (dataList) {
        var mainObject = {};
        for (var dataKey in dataList) {
            var obj = dataList[dataKey];
            var configObj = this.modelObjects.find(function (x) { return x.modelName === dataKey; });
            if (((typeof obj) === 'object') && (obj)) {
                this.skipList.push(dataKey + "_Id");
                var emptyModelObj = JSON.parse(JSON.stringify(configObj.emptyModel));
                var primaryKey = dataKey + "_Id";
                if (obj.length) {
                    var tmpObj = obj[0];
                    for (var x in tmpObj) {
                        if (x.endsWith("_Id")) {
                            if (x !== primaryKey) {
                                emptyModelObj[x] = tmpObj[x];
                            }
                        }
                    }
                }
                else {
                    emptyModelObj[primaryKey] = obj[primaryKey];
                }
                if (Object.prototype.toString.call(obj) === '[object Array]') {
                    this.treeArray.push({
                        modelName: dataKey,
                        type: "node",
                        name: dataKey,
                        elementList: obj,
                        visible: false,
                        blockSequence: this.treeViewBlockCount,
                        blankModel: emptyModelObj,
                        blankModelConfig: configObj.configObjects,
                        expanded: configObj.Expanded,
                        level: configObj.level,
                        tabOrder: configObj.tabOrder
                    });
                }
                else {
                    var rootObjects = this.parseTree(obj);
                    obj["blockSequence"] = this.treeViewBlockCount;
                    this.treeArray.push({
                        type: "leaf",
                        mainPageObject: rootObjects,
                        name: "root leaves",
                        modelName: dataKey,
                        blankModel: emptyModelObj,
                        blankModelConfig: configObj.configObjects,
                        blockSequence: this.treeViewBlockCount,
                        expanded: configObj.Expanded,
                        level: configObj.level,
                        tabOrder: configObj.tabOrder
                    });
                    this.treeViewBlockCount++;
                }
            }
            else {
                mainObject[dataKey] = dataList[dataKey];
            }
        }
        if (!this.skipList.find(function (x) { return x === "Action"; })) {
            this.skipList.push("Action");
        }
        if (!this.skipList.find(function (x) { return x === "blockSequence"; })) {
            this.skipList.push("blockSequence");
        }
        return mainObject;
    };
    matrixService.prototype.extractNodes = function (dataList, configFile) {
        this.treeArray = new Array();
        this.skipList = new Array();
        this.modelObjects = new Array();
        this.extractModels(configFile);
        this.extractBlankModels();
        this.parseTree(dataList);
        return { "treeArray": this.treeArray, "skipList": this.skipList };
    };
    matrixService.prototype.extractNodesLight = function (dataList) {
        this.treeArray = new Array();
        this.parseTree(dataList);
        return { "treeArray": this.treeArray, "skipList": this.skipList };
    };
    matrixService.prototype.extractModels = function (configFile) {
        var _this = this;
        configFile.Definitions.forEach(function (x) {
            _this.modelObjects.push({ "modelName": x.ModelName, "Expanded": x.Expanded, "level": x.Level, "tabOrder": x.TabOrder, "configObjects": x.ColumnDefinitions });
        });
    };
    matrixService.prototype.extractBlankModels = function () {
        var emptyObject;
        this.modelObjects.forEach(function (x) {
            emptyObject = Object.create(Object.prototype);
            x.configObjects.forEach(function (xx) {
                emptyObject[xx.dbColumnName] = "";
            });
            x["emptyModel"] = emptyObject;
        });
    };
    matrixService.prototype.resetTreeViewBlockCount = function () {
        this.treeViewBlockCount = 1;
    };
    matrixService.prototype.extractHeaderNew = function (skipList, modelName, inputObjs, mainConfig) {
        var formTypes = mainConfig.Definitions.find(function (x) { return x.ModelName === modelName; });
        if (!formTypes) {
            formTypes = mainConfig;
        }
        var headerRow;
        var row;
        var sequence;
        if (inputObjs) {
            row = inputObjs[0];
            headerRow = new Array();
            sequence = 0;
            for (var key in row) {
                if (skipList.find(function (x) { return x === key; })) {
                    continue;
                }
                var columnConfig = formTypes.ColumnDefinitions.find(function (x) { return x.dbColumnName === key; });
                if (row.hasOwnProperty(key)) {
                    headerRow.push({
                        val: columnConfig.displayName,
                        columnCss: columnConfig.columnCss,
                        name: key,
                        sequence: sequence,
                        sortCss: "",
                        visibility: columnConfig.visibility,
                        filter: "",
                    });
                    sequence++;
                }
            }
        }
        else {
            headerRow = this.extractHeaderFromConfig(formTypes);
        }
        return headerRow;
    };
    matrixService.prototype.extractMatrixNew = function (skipList, modelName, inputObjs, mainConfig) {
        var formTypes = mainConfig.Definitions.find(function (x) { return x.ModelName === modelName; });
        var result = new Array();
        var length = inputObjs.length;
        var newRow;
        var columnSequence = 0;
        var rowSequence = 0;
        var primaryKeyColumn;
        var primaryKeyNameValue = {};
        if (formTypes.PrimaryKeyColumn) {
            primaryKeyColumn = formTypes.PrimaryKeyColumn.toLowerCase();
        }
        for (var i = 0; i < length; i++) {
            newRow = new Array();
            var row = inputObjs[i];
            columnSequence = 0;
            for (var key in row) {
                if (skipList.find(function (x) { return x === key; })) {
                    continue;
                }
                var columnConfig = formTypes.ColumnDefinitions.find(function (x) { return x.dbColumnName === key; });
                if (!columnConfig) {
                    var t = 0;
                }
                var dbColumnName = "";
                if (columnConfig.dataSource) {
                    dbColumnName = this.getdbColumnNameForDataSourceAddress(columnConfig.dataSourceAddress);
                }
                if (row.hasOwnProperty(key)) {
                    var displayValue = undefined;
                    if (columnConfig.dataSourceAddress) {
                        displayValue = this.getDropDownIdValue(columnConfig.dataSource, columnConfig.dataSourceAddress["displayColumnName"], dbColumnName, row[key]);
                    }
                    if (displayValue === undefined) {
                        displayValue = row[key];
                    }
                    if (key.toLowerCase() == "id" || key.toLowerCase() == primaryKeyColumn) {
                        primaryKeyNameValue = { name: key, value: displayValue };
                    }
                    if (columnConfig.htmlControlType.toLowerCase() == 'customselect' && columnConfig.dataSource) {
                        var associatedControl = formTypes.ColumnDefinitions.find(function (x) { return x.dbColumnName === columnConfig.associatedDropdownControl; });
                        var dropDowndata = columnConfig.dataSource.find(function (p) { return p[dbColumnName] === displayValue; });
                        columnConfig.customdataSource = columnConfig.dataSource;
                        if (associatedControl) {
                            //Update the custom dataSource for associated control
                            var dropDownId = 0;
                            if (dropDowndata) {
                                dropDownId = dropDowndata[columnConfig.dataSourceAddress.dbColumnName];
                            }
                            if (dropDowndata && dropDowndata[columnConfig.dataSourceAddress.PrimaryKeyColumn]) {
                                associatedControl.customdataSource = associatedControl.dataSource.filter(function (c) { return c[associatedControl.dataSourceAddress.ForeignKeyColumn] == dropDownId; });
                            }
                            else {
                                associatedControl.customdataSource = associatedControl.dataSource.filter(function (c) { return c[associatedControl.dataSourceAddress.dbColumnName] == dropDownId; });
                            }
                            var tempAssociatedRecord = newRow.find(function (p) { return p.name.toLowerCase() == associatedControl.dbColumnName.toLowerCase(); });
                            if (tempAssociatedRecord) {
                                var tempdbColumnName = this.getdbColumnNameForDataSourceAddress(tempAssociatedRecord.dataSourceAddress);
                                tempAssociatedRecord.customdataSource = this.getArrayDataSource(associatedControl.customdataSource, tempAssociatedRecord.dataSourceAddress["displayColumnName"], tempdbColumnName, tempAssociatedRecord.dataSourceAddress["defaultValue"]);
                            }
                        }
                    }
                    newRow.push({
                        name: key,
                        val: displayValue,
                        objId: rowSequence,
                        eventHandler: "",
                        sequence: columnSequence,
                        columnCss: columnConfig.columnCss,
                        visibility: columnConfig.visibility,
                        htmlControlType: columnConfig.htmlControlType,
                        togglable: columnConfig.togglable,
                        allowGridLevelEdit: columnConfig.allowGridLevelEdit,
                        dataSourceAddress: columnConfig.dataSourceAddress,
                        dataSource: columnConfig.dataSource ? this.getArrayDataSource(columnConfig.dataSource, columnConfig.dataSourceAddress["displayColumnName"], dbColumnName, columnConfig.dataSourceAddress["defaultValue"]) : [],
                        masterdataSource: columnConfig.dataSource,
                        customdataSource: columnConfig.customdataSource ? this.getArrayDataSource(columnConfig.customdataSource, columnConfig.dataSourceAddress["displayColumnName"], dbColumnName, columnConfig.dataSourceAddress["defaultValue"]) : [],
                        associatedDropdownControl: columnConfig.associatedDropdownControl
                    });
                    columnSequence++;
                }
            }
            result.push({ Id: rowSequence, primaryKey: primaryKeyNameValue, collapsed: true, inlineEditEnabled: false,
                cells: newRow, checkBox: { checked: false, disabled: false }, childData: row.childData });
            rowSequence++;
        }
        return result;
    };
    matrixService.prototype.editMatrixNew = function (skipList, modelName, editableRow, labels, mainConfig) {
        var formTypes = mainConfig.Definitions.find(function (x) { return x.ModelName === modelName; });
        var result = new Array();
        var length = labels.length;
        var controlSequence = 0;
        for (var i = 0; i < length; i++) {
            var cell = labels[i];
            var labelValue = editableRow.find(function (x) {
                return x.sequence === cell.sequence;
            });
            var columnConfig = formTypes.ColumnDefinitions.find(function (x) { return x.dbColumnName === cell.name; });
            if (columnConfig === undefined) {
                continue;
            }
            var lookUp = columnConfig.htmlControlType;
            var castedValue;
            if (lookUp === "checkbox")
                castedValue = Boolean(labelValue.val);
            else
                castedValue = labelValue.val;
            var dbColumnName = "";
            if (columnConfig.dataSource) {
                dbColumnName = this.getdbColumnNameForDataSourceAddress(columnConfig.dataSourceAddress);
            }
            if (columnConfig.htmlControlType.toLowerCase() == 'customselect' && columnConfig.dataSource) {
                var associatedControl = formTypes.ColumnDefinitions.find(function (x) { return x.dbColumnName === columnConfig.associatedDropdownControl; });
                var dropDowndata = columnConfig.dataSource.find(function (p) { return p[dbColumnName] === castedValue; });
                columnConfig.customdataSource = columnConfig.dataSource;
                if (associatedControl) {
                    //Update the custom dataSource for associated control
                    var dropDownId = 0;
                    if (dropDowndata) {
                        dropDownId = dropDowndata[columnConfig.dataSourceAddress.dbColumnName];
                    }
                    if (dropDowndata && dropDowndata[columnConfig.dataSourceAddress.PrimaryKeyColumn]) {
                        associatedControl.customdataSource = associatedControl.dataSource.filter(function (c) { return c[associatedControl.dataSourceAddress.ForeignKeyColumn] == dropDownId; });
                    }
                    else {
                        associatedControl.customdataSource = associatedControl.dataSource.filter(function (c) { return c[associatedControl.dataSourceAddress.dbColumnName] == dropDownId; });
                    }
                    var tempAssociatedRecord = result.find(function (p) { return p.name.toLowerCase() == associatedControl.dbColumnName.toLowerCase(); });
                    if (tempAssociatedRecord) {
                        var tempdbColumnName = this.getdbColumnNameForDataSourceAddress(tempAssociatedRecord.dataSourceAddress);
                        tempAssociatedRecord.customdataSource = this.getArrayDataSource(associatedControl.customdataSource, tempAssociatedRecord.dataSourceAddress["displayColumnName"], tempdbColumnName, tempAssociatedRecord.dataSourceAddress["defaultValue"]);
                    }
                }
            }
            result.push({
                objId: labelValue.objId,
                label: cell.val,
                name: cell.name,
                val: castedValue,
                htmlControlType: columnConfig.htmlControlType,
                isStateType: columnConfig.isStateType,
                columnCss: columnConfig.columnCss,
                required: true,
                sequence: controlSequence,
                dataSource: columnConfig.dataSource ? this.getArrayDataSource(columnConfig.dataSource, columnConfig.dataSourceAddress["displayColumnName"], dbColumnName, columnConfig.dataSourceAddress["defaultValue"]) : [],
                dataSourceAddress: columnConfig.dataSourceAddress,
                masterdataSource: columnConfig.dataSource,
                visibility: columnConfig.visibility ? columnConfig.visibility : true,
                readOnly: columnConfig.readOnly ? columnConfig.readOnly : false,
                togglable: columnConfig.togglable,
                isComplexTypeInlineTemplate: columnConfig.isComplexTypeInlineTemplate,
                isComplexTypeInlineTemplateConfig: columnConfig.isComplexTypeInlineTemplateConfig,
                customdataSource: columnConfig.customdataSource ? this.getArrayDataSource(columnConfig.customdataSource, columnConfig.dataSourceAddress["displayColumnName"], dbColumnName, columnConfig.dataSourceAddress["defaultValue"]) : [],
                associatedDropdownControl: columnConfig.associatedDropdownControl
            });
            controlSequence++;
        }
        return result;
    };
    matrixService.prototype.getdbColumnNameForDataSourceAddress = function (dataSourceAddress) {
        var tempdbColumnName = "";
        if (dataSourceAddress["PrimaryKeyColumn"])
            tempdbColumnName = dataSourceAddress.PrimaryKeyColumn;
        else
            tempdbColumnName = dataSourceAddress.dbColumnName;
        return tempdbColumnName;
    };
    matrixService.prototype.buildJSONObject = function (data, primaryColumnName) {
        var jsonValue = '{ ';
        if (data) {
            for (var i = 0; i < data.length; i++) {
                var dbName = data[i].name;
                var editedValue = JSON.stringify(data[i].val);
                if (primaryColumnName == dbName && (data[i].val == "" || data[i].val == undefined)) {
                    editedValue = JSON.stringify(0);
                }
                (i + 1) == data.length ? jsonValue += "\"" + dbName + "\" : " + editedValue : jsonValue += "\"" + dbName + "\" : " + editedValue + ",";
            }
        }
        jsonValue += ' }';
        return JSON.parse(jsonValue);
    };
    matrixService.prototype.getPrimaryColumnName = function (gridSettings) {
        var primaryKeyColumn = "Id";
        if (gridSettings["PrimaryKeyColumn"] != undefined && gridSettings["PrimaryKeyColumn"] != "") {
            primaryKeyColumn = gridSettings["PrimaryKeyColumn"];
        }
        return primaryKeyColumn;
    };
    matrixService.prototype.showSpecificTab = function (tempContext, tabData, inputHttpProxy) {
        var _this = this;
        if (inputHttpProxy === void 0) { inputHttpProxy = null; }
        var urlList = [];
        var urlListBodyMissing = [];
        if (tempContext.tabBuilderControl) {
            var tabInfo = tempContext.tabControlConfig.TabsList.find(function (p) { return p.TabKey == tabData.TabKey; });
            tabInfo.TabControls.forEach(function (x) {
                if (inputHttpProxy) {
                    x.httpProxy = inputHttpProxy;
                }
                if (x.gridSettings && x.gridSettings.ColumnConfiguration) {
                    x.gridSettings.ColumnConfiguration.forEach(function (p) {
                        if (p.dataSourceAddress && p.dataSourceAddress.tableName && p.dataSourceAddress.dbParameters) {
                            urlList.push({
                                url: p.dataSourceAddress.tableName,
                                body: p.dataSourceAddress.dbParameters
                            });
                        }
                        else if (p.dataSourceAddress && p.dataSourceAddress.tableName && !p.dataSourceAddress.dbParameters) {
                            urlListBodyMissing.push(p.dataSourceAddress.tableName);
                        }
                    });
                }
            });
            //execute with body
            if (urlList && urlList.length) {
                var index = -1;
                this.apiService.fetchMultipleListWithBody(urlList).subscribe(function (res) {
                    tabInfo.TabControls.forEach(function (x) {
                        if (x.gridSettings && x.gridSettings.ColumnConfiguration) {
                            x.gridSettings.ColumnConfiguration.forEach(function (p) {
                                if (p.dataSourceAddress && p.dataSourceAddress.tableName && p.dataSourceAddress.dbParameters) {
                                    ++index;
                                    p.dataSource = res[index];
                                }
                            });
                        }
                    });
                    if (urlListBodyMissing && urlListBodyMissing.length) {
                        _this.applyDataSourceInfoWithNoBody(tempContext, tabInfo, urlListBodyMissing);
                    }
                    else {
                        tempContext.displayTabInfo(tabInfo);
                    }
                }, function (error) {
                    _this.alert.error("Error in retrieving drop down info" + error.status);
                }, function () {
                });
            }
            else if (urlListBodyMissing && urlListBodyMissing.length) {
                //execute api calls without body
                this.applyDataSourceInfoWithNoBody(tempContext, tabInfo, urlListBodyMissing);
            }
            else {
                tempContext.displayTabInfo(tabInfo);
            }
        }
    };
    matrixService.prototype.applyDataSourceInfoWithNoBody = function (tempContext, tabInfo, urlListBodyMissing) {
        var _this = this;
        var index = -1;
        this.apiService.fetchMultipleList(urlListBodyMissing).subscribe(function (res) {
            tabInfo.TabControls.forEach(function (x) {
                x.gridSettings.ColumnConfiguration.forEach(function (p) {
                    if (p.dataSourceAddress && p.dataSourceAddress.tableName && !p.dataSourceAddress.dbParameters) {
                        ++index;
                        p.dataSource = res[index];
                    }
                });
            });
            tempContext.displayTabInfo(tabInfo);
        }, function (error) {
            _this.alert.error("Error in retrieving drop down info" + error.status);
        }, function () {
        });
    };
    matrixService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _a) || Object, (typeof (_b = typeof alertService_1.AlertService !== 'undefined' && alertService_1.AlertService) === 'function' && _b) || Object])
    ], matrixService);
    return matrixService;
    var _a, _b;
}());
exports.matrixService = matrixService;


/***/ }),

/***/ "./src/app/ReusableServices/miniMatrixService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var matrixService_1 = __webpack_require__("./src/app/ReusableServices/matrixService.ts");
var MiniMatrixService = (function () {
    function MiniMatrixService(matrix) {
        var _this = this;
        this.testData = {
            Countries: [
                {
                    IsActive: false,
                    Name: "TAIWAN",
                    Shares: 10
                },
                {
                    IsActive: false,
                    Name: "India",
                    Shares: 20
                }
            ],
            Sedol: [
                {
                    IsActive: false,
                    Number: 6640400,
                    Shares: 45
                },
                {
                    IsActive: false,
                    Number: 885258,
                    Shares: 95
                }]
        };
        this.testDataConfig = {
            correlationColumn: "IsActive",
            Countries: {
                ColumnConfiguration: [
                    {
                        "dbColumnName": "IsActive",
                        "htmlControlType": "checkbox",
                        "isVisible": true,
                        "isRequired": false,
                        "displayName": "TradeFlag",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": "",
                        "isAllowGridLevelEdit": true,
                        "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
                    },
                    {
                        "dbColumnName": "Name",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": false,
                        "displayName": "Name",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": "",
                        "isAllowGridLevelEdit": true,
                    },
                    {
                        "dbColumnName": "Shares",
                        "htmlControlType": "number",
                        "isVisible": true,
                        "isRequired": false,
                        "displayName": "Id",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": "",
                        "isAllowGridLevelEdit": true,
                    }
                ]
            },
            Sedol: {
                ColumnConfiguration: [
                    {
                        "dbColumnName": "IsActive",
                        "htmlControlType": "checkbox",
                        "isVisible": true,
                        "isRequired": false,
                        "displayName": "TradeFlag",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": "",
                        "isAllowGridLevelEdit": true,
                        "columnFormat": { format: "font-awesome", pattern: { false: 'fa fa-remove fa-lg', true: 'fa fa-check fa-lg' } }
                    },
                    {
                        "dbColumnName": "Number",
                        "htmlControlType": "text",
                        "isVisible": true,
                        "isRequired": false,
                        "displayName": "Number",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": "",
                        "isAllowGridLevelEdit": true,
                    },
                    {
                        "dbColumnName": "Shares",
                        "htmlControlType": "number",
                        "isVisible": true,
                        "isRequired": false,
                        "displayName": "Shared",
                        "dataSourceAddress": undefined,
                        "dataSource": undefined,
                        "regex": "",
                        "isAllowGridLevelEdit": true,
                    }
                ]
            }
        };
        this.sequence = 0;
        this.mService = matrix;
        this.correlationObjectCollection = new Array();
        this.mService.inputClickedEvent.subscribe(function (x) { _this.inputClicked(x); });
        this.pushEventToDirectivesEvent = new core_1.EventEmitter();
    }
    MiniMatrixService.prototype.getConfigAndData = function () {
        var result = this.mService.extractMultiHeader(this.testData, this.testDataConfig);
        return result;
    };
    MiniMatrixService.prototype.getTestDataConfig = function () {
        return this.testDataConfig;
    };
    MiniMatrixService.prototype.inputClicked = function (input) {
        this.pushEventToDirectivesEvent.emit(input.row);
    };
    MiniMatrixService.prototype.partialCorrelation = function (directiveId, result) {
        var match = this.correlationObjectCollection.find(function (x) { return x.directiveId === directiveId; });
        var correlationColumnName = this.testDataConfig.correlationColumn;
        if (match) {
            var savedModelData = match.modelObj.cells.find(function (x) { return x.name === correlationColumnName; });
            if (savedModelData) {
                if (result.isAllTrue) {
                    savedModelData.val = true;
                }
                else {
                    savedModelData.val = false;
                }
            }
        }
    };
    MiniMatrixService.prototype.subscribeDirective = function (modelObject) {
        this.sequence++;
        var directiveObj = {
            clickCallback: new core_1.EventEmitter(),
            partiallySelected: new core_1.EventEmitter(),
            directiveId: this.sequence,
            modelObj: modelObject,
            configObj: this.testDataConfig,
        };
        this.correlationObjectCollection.push(directiveObj);
        return directiveObj;
    };
    MiniMatrixService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof matrixService_1.matrixService !== 'undefined' && matrixService_1.matrixService) === 'function' && _a) || Object])
    ], MiniMatrixService);
    return MiniMatrixService;
    var _a;
}());
exports.MiniMatrixService = MiniMatrixService;


/***/ }),

/***/ "./src/app/ReusableServices/navigationService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var navItem_1 = __webpack_require__("./src/app/ReusableComponents/navbarVert/navItem.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var localizationService_1 = __webpack_require__("./src/app/ReusableServices/localizationService.ts");
var apiService_1 = __webpack_require__("./src/app/ReusableServices/apiService.ts");
var common_1 = __webpack_require__("./node_modules/@angular/common/index.js");
var NavigationService = (function () {
    function NavigationService(router, localizationService, apiService, loc) {
        this.router = router;
        this.localizationService = localizationService;
        this.apiService = apiService;
        this.loc = loc;
        this.mainPageFilteredArray = "";
        this.breadCrumbList = [];
        this.pageTitle = "";
        this.navigationCb = new core_1.EventEmitter();
        this.navigationLeftMenuEmitter = new core_1.EventEmitter();
        this.allowedPageArray = new Array();
        this.bredCrumbEmitter = new core_1.EventEmitter();
        this.rtService = router;
    }
    NavigationService.prototype.getMainPageNavigation = function (profile) {
        this.mainPageNavigationArray = this.getNavigationStructure(profile.Children);
        return this.mainPageNavigationArray;
    };
    NavigationService.prototype.getFiltertedPageNavigation = function (parentName) {
        var myChildren = this.mainPageNavigationArray.find(function (p) { return p.Name == parentName; }).Children;
        this.mainPageFilteredArray = JSON.stringify(myChildren);
    };
    NavigationService.prototype.getNavigationStructure = function (navigationArray) {
        var navContent = [];
        var children = [];
        if (navigationArray && navigationArray.length) {
            for (var index = 0; index < navigationArray.length; index++) {
                var temp = navigationArray[index];
                children = [];
                if (temp.Children && temp.Children.length > 0) {
                    children = this.getNavigationStructure(temp.Children);
                    var t = 0;
                }
                if (temp) {
                    if (temp.ParamValue) {
                        temp.RouteParts.push(temp.ParamValue);
                    }
                    navContent.push(new navItem_1.NavItem(temp.LookupKey, temp.Title, temp.LookupKey, temp.RouteParts, children, temp.MenuType));
                }
            }
        }
        return navContent;
    };
    NavigationService.prototype.buildNavigationMenu = function (navigationArray) {
        var navContent = [];
        var children = [];
        if (navigationArray && navigationArray.length) {
            for (var index = 0; index < navigationArray.length; index++) {
                var temp = navigationArray[index];
                children = [];
                if (temp.Children && temp.Children.length > 0) {
                    children = this.buildNavigationMenu(temp.Children);
                }
                if (temp && temp.MenuType != "NONE") {
                    if (temp.ParamValue) {
                        temp.RouteLink.push(temp.ParamValue);
                    }
                    var formattedTitle = this.localizationService.getLocalizedValueDescription(temp.LookupKey);
                    navContent.push(new navItem_1.NavItem(temp.LookupKey, formattedTitle, temp.LookupKey, temp.RouteLink, children, temp.MenuType, temp.Active));
                }
            }
        }
        return navContent;
    };
    NavigationService.prototype.getChildMenu = function (input) {
        if (input === void 0) { input = []; }
        if (this.mainPageFilteredArray) {
            var navItems = JSON.parse(this.mainPageFilteredArray);
            this.GetTempNavigationArray(navItems, input);
            this.navigationCb.emit(navItems);
            this.navigationLeftMenuEmitter.emit([]);
            return navItems;
        }
    };
    NavigationService.prototype.setCurrentPage = function (urlPath) {
        this.breadCrumbList = [];
        var routeStringList = urlPath.split(/[//]+/).filter(function (e) { return e; });
        var lenArray = routeStringList.length;
        if (lenArray > 0 && this.mainPageNavigationArray) {
            var lastRoute = routeStringList[lenArray - 1];
            var tempParamsList = lastRoute.split(";");
            routeStringList[lenArray - 1] = tempParamsList[0];
            var paramCount = 0;
            var modelName = "";
            if (Object.prototype.toString.call(tempParamsList) === '[object Array]') {
                tempParamsList.forEach(function (x) {
                    if (paramCount > 0) {
                        var formattedData = x.split("=");
                        if (formattedData[0].toLowerCase() == 'modelname') {
                            modelName = formattedData[1];
                        }
                    }
                    paramCount++;
                });
            }
            if (modelName) {
                routeStringList[lenArray - 1] = modelName;
            }
            this.buildBreadCrumbList(routeStringList, this.mainPageNavigationArray);
        }
        this.setPageTitle();
        this.bredCrumbEmitter.emit(this.breadCrumbList);
    };
    NavigationService.prototype.buildBreadCrumbList = function (routeStringList, navItemList) {
        if (routeStringList.length > 0) {
            var routeName = routeStringList[0];
            var tempNavItem = navItemList.find(function (p) { return p.Name.toLowerCase() == routeName.toLowerCase(); });
            if (tempNavItem) {
                var formattedTitle = this.localizationService.getLocalizedValueDescription(tempNavItem.LookupKey);
                this.breadCrumbList.push({ Title: formattedTitle, RouteLink: tempNavItem.RouteLink });
                routeStringList.splice(0, 1);
                if (routeStringList.length > 0) {
                    this.buildBreadCrumbList(routeStringList, tempNavItem.Children);
                }
            }
        }
    };
    NavigationService.prototype.setPageTitle = function () {
        this.pageTitle = "";
        if (this.breadCrumbList && this.breadCrumbList.length > 0) {
            var lenArray = this.breadCrumbList.length;
            this.pageTitle = this.breadCrumbList[lenArray - 1].Title;
        }
    };
    NavigationService.prototype.NavigateToPage = function (items, pageName) {
        if (!items) {
            this.router.navigate(['Datahub/Home']);
            return;
        }
        var path;
        if (pageName) {
            var item = items.find(function (x) { return x.Name === pageName; });
            if (item.Children.length > 0) {
                path = item.Children[0].RouteLink;
            }
        }
        else {
            path = items[0].RouteLink;
        }
        if (path) {
            if (path.length) {
                var link = '';
                path.forEach(function (x) {
                    link = link + '/' + x;
                });
                var arr = [];
                arr.push(link);
                if (arr)
                    this.router.navigate(arr);
            }
        }
    };
    NavigationService.prototype.NavigateByLocationUrl = function (urlPath) {
        var routeStringList = urlPath.split(/[//]+/).filter(function (e) { return e; });
        var lenArray = routeStringList.length;
        var routeArray = [];
        var childMenuArrayList = [];
        var tempCustomChildMenuList = [];
        if (routeStringList.length > 0) {
            var lastRoute = routeStringList[lenArray - 1];
            var tempParamsList = lastRoute.split(";");
            routeStringList[lenArray - 1] = tempParamsList[0];
            var count = 0;
            routeStringList.forEach(function (x) {
                routeArray.push(x);
                if (count > 0) {
                    childMenuArrayList.push(x);
                    tempCustomChildMenuList.push(x);
                }
                count++;
            });
            //Adding parameters to route navigation
            var paramCount = 0;
            var modelName = "";
            if (Object.prototype.toString.call(tempParamsList) === '[object Array]') {
                tempParamsList.forEach(function (x) {
                    if (paramCount > 0) {
                        var formattedData = x.split("=");
                        if (formattedData[0].toLowerCase() == 'modelname') {
                            modelName = formattedData[1];
                        }
                    }
                    paramCount++;
                });
            }
            if (modelName && tempCustomChildMenuList.length > 0) {
                tempCustomChildMenuList[tempCustomChildMenuList.length - 1] = modelName;
            }
            this.getChildMenu(tempCustomChildMenuList);
            this.getLeftMenuRoutes(childMenuArrayList, (modelName) ? modelName : routeStringList[lenArray - 1]);
        }
        this.setCurrentPage(urlPath);
    };
    NavigationService.prototype.GetTempNavigationArray = function (navItems, inputData) {
        if (navItems === void 0) { navItems = []; }
        if (inputData === void 0) { inputData = []; }
        if (inputData.length > 0) {
            var x = navItems.find(function (p) { return p.Name == inputData[0]; });
            if (x && x.Children) {
                x.Active = true;
                this.leftMenuItems = x;
                var y = inputData.slice(1, 2);
                if (y.length > 0) {
                    this.GetTempNavigationArray(x.Children, y);
                }
            }
        }
    };
    NavigationService.prototype.getLeftMenuRoutes = function (inputData, childName) {
        if (inputData === void 0) { inputData = []; }
        if (childName === void 0) { childName = ""; }
        var tempLeftMenuItems = [];
        if (this.leftMenuItems && this.leftMenuItems.Children && this.leftMenuItems.Children.length > 0) {
            this.getTempLeftMenuArray(this.leftMenuItems.Children, inputData);
            tempLeftMenuItems = this.leftMenuItems.Children;
            if (childName) {
                var tempItem = tempLeftMenuItems.find(function (p) { return p.Name.toLowerCase() == childName.toLowerCase(); });
                if (tempItem) {
                    tempItem.Active = true;
                }
            }
        }
        this.navigationLeftMenuEmitter.emit(tempLeftMenuItems);
        return tempLeftMenuItems;
    };
    NavigationService.prototype.getTempLeftMenuArray = function (navItems, inputData) {
        if (navItems === void 0) { navItems = []; }
        if (inputData === void 0) { inputData = []; }
        if (inputData.length > 0) {
            var x = navItems.find(function (p) { return p.Name == inputData[0]; });
            if (x && x.Children) {
                var y = inputData.slice(1, 2);
                if (y.length > 0) {
                    this.getTempLeftMenuArray(x.Children, y);
                }
            }
        }
    };
    NavigationService.prototype.getChildMenusForTileView = function (leftchildmenuName) {
        var tempLeftMenuItems = [];
        if (this.leftMenuItems && this.leftMenuItems.Children && this.leftMenuItems.Children.length > 0) {
            var tempLeftMenuItemChildren = this.leftMenuItems.Children.find(function (p) { return p.Name.toLowerCase() == leftchildmenuName.toLowerCase(); });
            if (tempLeftMenuItemChildren && tempLeftMenuItemChildren.Children) {
                tempLeftMenuItems = tempLeftMenuItemChildren.Children;
            }
        }
        //this.navigationLeftMenuEmitter.emit(tempLeftMenuItems);
        return tempLeftMenuItems;
    };
    NavigationService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _a) || Object, (typeof (_b = typeof localizationService_1.LocalizationService !== 'undefined' && localizationService_1.LocalizationService) === 'function' && _b) || Object, (typeof (_c = typeof apiService_1.ApiService !== 'undefined' && apiService_1.ApiService) === 'function' && _c) || Object, (typeof (_d = typeof common_1.Location !== 'undefined' && common_1.Location) === 'function' && _d) || Object])
    ], NavigationService);
    return NavigationService;
    var _a, _b, _c, _d;
}());
exports.NavigationService = NavigationService;


/***/ }),

/***/ "./src/app/ReusableServices/ruleService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var BasicValidators_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/StandardValidation/BasicValidators.ts");
var Validation_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/StandardValidation/Validation.ts");
var DateCompareValidator_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/CustomValidation/DateCompareValidator.ts");
var _ = __webpack_require__("./node_modules/lodash/lodash.js");
var GenericValidator_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/CustomValidation/GenericValidator.ts");
var RuleService = (function () {
    function RuleService() {
        this.minlengthValue = 1;
        this.allValidators = new Array();
        this.ruleList = new Array();
        this.resultSet = new Array();
        this.ruleErrors = new Array();
        this.errorsResultSet = new Array();
        this.targetObjects = new Array();
    }
    RuleService.prototype.clearExistingValidations = function () {
        this.allValidators = [];
        this.ruleList = [];
        this.resultSet = [];
        this.targetObjects = [];
    };
    RuleService.prototype.getRulesByModel = function (modelName, rulesConfigData) {
        return rulesConfigData.filter(function (p) { return p.apiObject === modelName; });
    };
    RuleService.prototype.associateRule = function (ruleConfigData, data) {
        var _this = this;
        ruleConfigData.ruleName.forEach(function (x) {
            _this.AddSpecificRules(x, ruleConfigData.ruleAssociates, ruleConfigData.ruleValue, data);
        });
    };
    RuleService.prototype.validateRulesByRulesConfig = function (jsonData, rulesConfig, editViewRowDataTable) {
        var result = true;
        this.errorsResultSet = [];
        editViewRowDataTable.forEach(function (p) { return p["errors"] = []; });
        if (rulesConfig && rulesConfig.length) {
            var modelName = rulesConfig[0].apiObject ? rulesConfig[0].apiObject : "";
            var tempJsonData = {};
            tempJsonData[modelName] = jsonData;
            if (!this.checkIfRulesSatisfied(tempJsonData, rulesConfig)) {
                if (this.errorsResultSet && this.errorsResultSet.length > 0) {
                    this.errorsResultSet.forEach(function (x) {
                        var tempRowTable = editViewRowDataTable.find(function (p) { return p.name == x.name; });
                        if (!tempRowTable["errors"]) {
                            tempRowTable["errors"] = [];
                        }
                        if (tempRowTable && x.message.length > 0) {
                            tempRowTable["errors"].push(x.name + "_" + x.message);
                            result = false;
                        }
                    });
                }
            }
        }
        return result;
    };
    RuleService.prototype.AddSpecificRules = function (ruleName, columns, ruleValue, data) {
        var _this = this;
        switch (ruleName.toLowerCase()) {
            case "requiredtarget":
                columns.forEach(function (x) {
                    if (_.isArray(ruleValue.targets)) {
                        ruleValue.targets.forEach(function (y) {
                            for (var prop in data) {
                                if (data[prop].hasOwnProperty(y) && y === ruleValue.ruleFunction(data[prop][x])) {
                                    var newValidator = new Validation_1.AbstractValidator();
                                    newValidator.RuleFor(y.toString(), new BasicValidators_1.RequiredValidator());
                                    _this.allValidators.push({ name: y, validator: newValidator });
                                }
                                ;
                            }
                        });
                    }
                });
                break;
            case "required":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    _this.requiredValidator = new BasicValidators_1.RequiredValidator();
                    newValidator.RuleFor(x, _this.requiredValidator);
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
            case "minlength":
            case "childminlength":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    _this.minlengthValidator = new BasicValidators_1.MinLengthValidator(ruleValue);
                    newValidator.RuleFor(x, _this.minlengthValidator);
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
            case "maxlength":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    _this.maxlengthValidator = new BasicValidators_1.MaxLengthValidator(ruleValue);
                    newValidator.RuleFor(x, _this.maxlengthValidator);
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
            case "email":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    _this.emailValidator = new BasicValidators_1.EmailValidator();
                    newValidator.RuleFor(x, _this.emailValidator);
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
            case "date":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    _this.dateValidator = new BasicValidators_1.DateValidator();
                    newValidator.RuleFor(x, _this.dateValidator);
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
            case "datecompare":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    _this.dateCompareValidator = new DateCompareValidator_1.DateCompareValidator();
                    var compareTo = ruleValue.CompareTo;
                    if (isNaN(Date.parse(compareTo))) {
                        var modelName = x.apiObject ? x.apiObject : "";
                        _this.getTargetObjects(data, modelName);
                        var dataObj = _this.targetObjects;
                        var tempData = dataObj.find(function (x) { return x[ruleValue.CompareTo]; });
                        compareTo = new Date(tempData[ruleValue.CompareTo]);
                    }
                    _this.dateCompareValidator.CompareTo = compareTo;
                    _this.dateCompareValidator.CompareOperator = ruleValue.CompareOperator;
                    _this.dateCompareValidator.IgnoreTime = ruleValue.IgnoreTime ? ruleValue.IgnoreTime : true;
                    newValidator.RuleFor(x, _this.dateCompareValidator);
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
            case "range":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    var validatorData = [parseInt(ruleValue[0]), parseInt(ruleValue[1])];
                    _this.rangeValidator = new BasicValidators_1.RangeValidator(validatorData);
                    newValidator.RuleFor(x, _this.rangeValidator);
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
            case "zipcode":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    _this.zipCodeValidator = new BasicValidators_1.ZipCodeValidator();
                    newValidator.RuleFor(x, _this.zipCodeValidator);
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
            case "number":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    _this.numberValidator = new BasicValidators_1.NumberValidator();
                    newValidator.RuleFor(x, _this.numberValidator);
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
            case "letter":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    _this.lettersOnlyValidator = new BasicValidators_1.LettersOnlyValidator();
                    newValidator.RuleFor(x, _this.lettersOnlyValidator);
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
            case "phone":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    _this.phoneValidator = new BasicValidators_1.PhoneOnlyValidator();
                    newValidator.RuleFor(x, _this.phoneValidator);
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
            case "alphanumeric":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    _this.alphanumericValidator = new BasicValidators_1.AlphaNumericValidator();
                    newValidator.RuleFor(x, _this.alphanumericValidator);
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
            case "inputmask":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    newValidator.RuleFor(x, new BasicValidators_1.PatternValidator(ruleValue));
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
            case "genericvalidation":
                columns.forEach(function (x) {
                    var newValidator = new Validation_1.AbstractValidator();
                    var genValidator = new GenericValidator_1.GenericValidator();
                    // base on your function (execution of it), generic Validator will return true or false (valid or invalid)
                    genValidator.genericFunctionResult = ruleValue.ruleFunction(data);
                    newValidator.RuleFor(x, genValidator);
                    _this.allValidators.push({ name: x, validator: newValidator });
                });
                break;
        }
    };
    RuleService.prototype.validateRules = function (inputData, modelName, ruleType, ruleApplyMode) {
        var _this = this;
        this.targetObjects = new Array();
        this.resultSet = [];
        var errors = [];
        this.getTargetObjects(inputData, modelName);
        var dataObj = this.targetObjects;
        dataObj.forEach(function (data) {
            _this.allValidators.forEach(function (x) {
                var rule = x.validator.CreateRule(x.name);
                var result = rule.Validate(data);
                _this.resultSet.push({ name: x.name, result: result.HasErrors, message: result.ErrorMessage });
                if (result.HasErrors)
                    errors.push(x.name + ": " + result.ErrorMessage);
            });
        });
        var collectiveResult;
        switch (ruleType) {
            case "OneOf":
                collectiveResult = this.resultSet.find(function (x) { return x.result === false; }) ? false : true;
                if (!collectiveResult)
                    errors = [];
                break;
            case "AllOf":
                collectiveResult = this.resultSet.find(function (x) { return x.result === true; }) ? true : false;
                break;
            default:
                collectiveResult = this.resultSet.find(function (x) { return x.result === true; }) ? true : false;
        }
        return { hasErrors: collectiveResult, errorMessage: errors, resultSet: this.resultSet };
    };
    RuleService.prototype.checkIfRulesSatisfied = function (jsonObject, rulesConfig) {
        var _this = this;
        var finalResult = true;
        this.ruleErrors = [];
        if (rulesConfig) {
            rulesConfig.forEach(function (x) {
                var ruleType = x.ruleType;
                var applicationMode = x.applyTo;
                var modelName = x.apiObject ? x.apiObject : "";
                _this.clearExistingValidations();
                _this.associateRule(x, jsonObject);
                var result = _this.validateRules(jsonObject, modelName, ruleType, applicationMode);
                if (result.hasErrors || result.errorMessage.length) {
                    if (result.errorMessage) {
                        result.errorMessage.forEach(function (x) {
                            _this.ruleErrors.push(x);
                        });
                        result.resultSet.forEach(function (y) {
                            _this.errorsResultSet.push(y);
                        });
                        finalResult = false;
                    }
                }
            });
        }
        return finalResult;
    };
    RuleService.prototype.getTargetObjects = function (data, modelName) {
        var _this = this;
        for (var colInd in data) {
            var obj = data[colInd];
            if (colInd === modelName) {
                if (Object.prototype.toString.call(obj) === '[object Array]') {
                    obj.forEach(function (x) {
                        _this.targetObjects.push(x);
                    });
                }
                if (Object.prototype.toString.call(obj) === '[object Object]') {
                    this.targetObjects.push(obj);
                }
            }
            if (Object.prototype.toString.call(obj) === '[object Array]') {
                obj.forEach(function (x) { return _this.getTargetObjects(x, modelName); });
            }
            if (Object.prototype.toString.call(obj) === '[object Object]') {
                this.getTargetObjects(obj, modelName);
            }
        }
    };
    RuleService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], RuleService);
    return RuleService;
}());
exports.RuleService = RuleService;


/***/ }),

/***/ "./src/app/ReusableServices/rulesSource/CustomValidation/DateCompareValidator.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Validation_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/StandardValidation/Validation.ts");
var genericfunctions_1 = __webpack_require__("./src/app/ReusableServices/genericfunctions.ts");
var DateCompareValidator = (function () {
    function DateCompareValidator() {
        /**
         * It forces to ignore time part of date by date compare.
         */
        this.IgnoreTime = false;
        this.tagName = 'dateCompare';
    }
    DateCompareValidator.prototype.isAcceptable = function (s) {
        var isValid = false;
        //if date to compare is not specified - defaults to compare against now
        if (isNaN(Date.parse(s))) {
            return false;
        }
        ;
        if (this.CompareTo === undefined)
            Date.now();
        var now = moment(genericfunctions_1.toUTCDate(this.CompareTo));
        var then = moment(genericfunctions_1.toUTCDate(new Date(s)));
        var diffs = then.diff(now);
        if (this.IgnoreTime)
            diffs = moment.duration(diffs).days();
        if (diffs < 0) {
            isValid = this.CompareOperator === Validation_1.CompareOperator.LessThan
                || this.CompareOperator === Validation_1.CompareOperator.LessThanEqual
                || this.CompareOperator === Validation_1.CompareOperator.NotEqual;
        }
        else if (diffs > 0) {
            isValid = this.CompareOperator === Validation_1.CompareOperator.GreaterThan
                || this.CompareOperator === Validation_1.CompareOperator.GreaterThanEqual
                || this.CompareOperator === Validation_1.CompareOperator.NotEqual;
        }
        else {
            isValid = this.CompareOperator === Validation_1.CompareOperator.LessThanEqual
                || this.CompareOperator === Validation_1.CompareOperator.Equal
                || this.CompareOperator === Validation_1.CompareOperator.GreaterThanEqual;
        }
        return isValid;
    };
    return DateCompareValidator;
}());
exports.DateCompareValidator = DateCompareValidator;


/***/ }),

/***/ "./src/app/ReusableServices/rulesSource/CustomValidation/GenericValidator.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var GenericValidator = (function () {
    function GenericValidator() {
        this.genericFunctionResult = false;
        this.tagName = 'genericValidator';
    }
    GenericValidator.prototype.isAcceptable = function (s) {
        return this.genericFunctionResult;
    };
    return GenericValidator;
}());
exports.GenericValidator = GenericValidator;


/***/ }),

/***/ "./src/app/ReusableServices/rulesSource/StandardValidation/BasicValidators.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _Score_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/_Score.ts");
var NumberFce = (function () {
    function NumberFce() {
    }
    NumberFce.GetNegDigits = function (value) {
        if (value === undefined)
            return 0;
        var digits = value.toString().split('.');
        if (digits.length > 1) {
            return digits[1].length;
        }
        return 0;
    };
    return NumberFce;
}());
/**
 * Return true if it is a valid string letter representation, otherwise false.
 */
var LettersOnlyValidator = (function () {
    function LettersOnlyValidator() {
        this.lettersRegexp = /^[A-Za-z]+$/;
        this.tagName = "lettersonly";
    }
    LettersOnlyValidator.prototype.isAcceptable = function (s) {
        if (s) {
            return this.lettersRegexp.test(s);
        }
        else {
            return true;
        }
    };
    return LettersOnlyValidator;
}());
exports.LettersOnlyValidator = LettersOnlyValidator;
var AlphaNumericValidator = (function () {
    function AlphaNumericValidator() {
        this.alphanumericRegexp = /^[a-z0-9]+$/i;
        this.tagName = "alphanumeric";
    }
    AlphaNumericValidator.prototype.isAcceptable = function (s) {
        if (s) {
            return this.alphanumericRegexp.test(s);
        }
        else {
            return true;
        }
    };
    return AlphaNumericValidator;
}());
exports.AlphaNumericValidator = AlphaNumericValidator;
var PhoneOnlyValidator = (function () {
    function PhoneOnlyValidator() {
        this.phoneRegexp = /^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$/;
        this.tagName = "phonevalidator";
    }
    PhoneOnlyValidator.prototype.isAcceptable = function (s) {
        if (s) {
            return this.phoneRegexp.test(s);
        }
        else {
            return true;
        }
    };
    return PhoneOnlyValidator;
}());
exports.PhoneOnlyValidator = PhoneOnlyValidator;
/**
 * Return true if it is a valid zip code, otherwise false.
 */
var ZipCodeValidator = (function () {
    function ZipCodeValidator() {
        this.numberRegexp = /[a-zA-Z][0-9][a-zA-Z](-| |)[0-9][a-zA-Z][0-9]/;
        this.tagName = "zipcode";
    }
    /*/^[0-9]+$/;*/
    ZipCodeValidator.prototype.isAcceptable = function (s) {
        if (s) {
            return this.numberRegexp.test(s); //s.length === 5 &&
        }
        else {
            return true;
        }
    };
    return ZipCodeValidator;
}());
exports.ZipCodeValidator = ZipCodeValidator;
/**
 * Return true if it is a valid Internet email address as defined by RFC 5322, section 3.4.1, otherwise false
 */
var EmailValidator = (function () {
    function EmailValidator() {
        // contributed by Scott Gonzalez: http://projects.scottsplayground.com/email_address_validation/
        this.emailRegexp = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
        this.tagName = "email";
    }
    EmailValidator.prototype.isAcceptable = function (s) {
        if (s) {
            return this.emailRegexp.test(s);
        }
        else {
            return true;
        }
    };
    return EmailValidator;
}());
exports.EmailValidator = EmailValidator;
/**
 * Return true if it is a valid URI, according to [RFC3986], otherwise false.
 */
var UrlValidator = (function () {
    function UrlValidator() {
        // contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
        this.urlRegexp = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
        this.tagName = "url";
    }
    UrlValidator.prototype.isAcceptable = function (s) {
        return this.urlRegexp.test(s);
    };
    return UrlValidator;
}());
exports.UrlValidator = UrlValidator;
/**
 * Return true if it is a valid Luhn card number based on http://en.wikipedia.org/wiki/Luhn/, otherwise false;
 */
var CreditCardValidator = (function () {
    function CreditCardValidator() {
        this.tagName = "creditcard";
    }
    //taken from http://jqueryvalidation.org/creditcard-method/
    CreditCardValidator.prototype.isAcceptable = function (value) {
        // accept only spaces, digits and dashes
        if (/[^0-9 \-]+/.test(value)) {
            return false;
        }
        var nCheck = 0, nDigit = 0, bEven = false, n, cDigit;
        value = value.replace(/\D/g, "");
        // Basing min and max length on
        // http://developer.ean.com/general_info/Valid_Credit_Card_Types
        if (value.length < 13 || value.length > 19) {
            return false;
        }
        for (n = value.length - 1; n >= 0; n--) {
            cDigit = value.charAt(n);
            nDigit = parseInt(cDigit, 10);
            if (bEven) {
                if ((nDigit *= 2) > 9) {
                    nDigit -= 9;
                }
            }
            nCheck += nDigit;
            bEven = !bEven;
        }
        return (nCheck % 10) === 0;
    };
    return CreditCardValidator;
}());
exports.CreditCardValidator = CreditCardValidator;
/**
 * Return true if it is not empty value, otherwise false.
 */
var RequiredValidator = (function () {
    function RequiredValidator() {
        this.tagName = "required";
    }
    RequiredValidator.prototype.isAcceptable = function (s) {
        return s !== undefined && s !== "";
    };
    return RequiredValidator;
}());
exports.RequiredValidator = RequiredValidator;
/**
 * Return true if a value is equal (using strict equal) to passed value, otherwise false.
 */
var EqualToValidator = (function () {
    /**
     *
     * @param Value
     */
    function EqualToValidator(Value) {
        this.Value = Value;
        this.tagName = "equalTo";
    }
    EqualToValidator.prototype.isAcceptable = function (s) {
        return s === this.Value;
    };
    return EqualToValidator;
}());
exports.EqualToValidator = EqualToValidator;
/**
 * Return true if it is a valid string date representation (can be parsed as date), otherwise false.
 */
var DateValidator = (function () {
    function DateValidator() {
        this.tagName = "date";
    }
    DateValidator.prototype.isAcceptable = function (s) {
        if (s) {
            return !/Invalid|NaN/.test(new Date(s).toString());
        }
        else {
            return true;
        }
    };
    return DateValidator;
}());
exports.DateValidator = DateValidator;
/**
 * Return true if it is a valid string ISO date representation (can be parsed as ISO date), otherwise false.
 */
var DateISOValidator = (function () {
    function DateISOValidator() {
        this.tagName = "dateISO";
    }
    DateISOValidator.prototype.isAcceptable = function (s) {
        return /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(s);
    };
    return DateISOValidator;
}());
exports.DateISOValidator = DateISOValidator;
/**
 * Return true if it is a valid number representation, otherwise false.
 */
var NumberValidator = (function () {
    function NumberValidator() {
        this.tagName = "number";
    }
    NumberValidator.prototype.isAcceptable = function (s) {
        return /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(s);
        //Old Value - /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(s);
        //New value - /^-?(\d+\.?\d*)$|(\d*\.?\d+)$/
    };
    return NumberValidator;
}());
exports.NumberValidator = NumberValidator;
/**
 * Return true if it is a valid digit representation, otherwise false.
 */
var DigitValidator = (function () {
    function DigitValidator() {
        this.tagName = "digit";
    }
    DigitValidator.prototype.isAcceptable = function (s) {
        return /^\d+$/.test(s);
    };
    return DigitValidator;
}());
exports.DigitValidator = DigitValidator;
/**
 * Return true if it is a valid positive or negative digit representation, otherwise false.
 */
var SignedDigitValidator = (function () {
    function SignedDigitValidator() {
        this.tagName = "signedDigit";
    }
    SignedDigitValidator.prototype.isAcceptable = function (s) {
        return /^-?\d+$/.test(s);
    };
    return SignedDigitValidator;
}());
exports.SignedDigitValidator = SignedDigitValidator;
var MinimalDefaultValue = 0;
/**
 * Return true if string length is greater or equal to MinLength property.
 */
var MinLengthValidator = (function () {
    /**
     * Default constructor
     * @param MinLength - minimal number of characters (or length of the Array)
     */
    function MinLengthValidator(MinLength) {
        this.MinLength = MinLength;
        this.tagName = "minlength";
        if (MinLength === undefined)
            this.MinLength = MinimalDefaultValue;
    }
    MinLengthValidator.prototype.isAcceptable = function (obj) {
        if (!obj)
            return false;
        return obj.length >= this.MinLength;
    };
    return MinLengthValidator;
}());
exports.MinLengthValidator = MinLengthValidator;
var MaximalDefaultValue = 0;
/**
 * Return true if string length is less or equal to MaxLength property (or length of the Array)
 */
var MaxLengthValidator = (function () {
    /**
     * Default constructor.
     * @param MaxLength - maximal number of characters.
     */
    function MaxLengthValidator(MaxLength) {
        this.MaxLength = MaxLength;
        this.tagName = "maxlength";
        if (MaxLength === undefined)
            this.MaxLength = MaximalDefaultValue;
    }
    MaxLengthValidator.prototype.isAcceptable = function (obj) {
        if (!obj)
            return false;
        return obj.length <= this.MaxLength;
    };
    return MaxLengthValidator;
}());
exports.MaxLengthValidator = MaxLengthValidator;
/**
 * Return true if string length is between MinLength and MaxLength property.
 */
var RangeLengthValidator = (function () {
    /**
     * Default constructor.
     * @param RangeLength - array [minimal number of characters, maximal number of characters]
     */
    function RangeLengthValidator(RangeLength) {
        this.RangeLength = RangeLength;
        this.tagName = "rangelength";
        if (RangeLength === undefined)
            this.RangeLength = [MinimalDefaultValue, MaximalDefaultValue];
    }
    RangeLengthValidator.prototype.isAcceptable = function (s) {
        if (!s)
            return false;
        return s.length >= this.MinLength && s.length <= this.MaxLength;
    };
    Object.defineProperty(RangeLengthValidator.prototype, "MinLength", {
        get: function () {
            return this.RangeLength[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeLengthValidator.prototype, "MaxLength", {
        get: function () {
            return this.RangeLength[1];
        },
        enumerable: true,
        configurable: true
    });
    return RangeLengthValidator;
}());
exports.RangeLengthValidator = RangeLengthValidator;
/**
 * Return true only for these conditions
 * if "Exclusive" is false, then the instance is valid if it is greater than, or equal to, the value of "minimum";
 * if "Exclusive" is true, the instance is valid if it is strictly greater than the value of "minimum".
 *
 *  @require underscore
 */
var MinValidator = (function () {
    /**
     * Default constructor.
     * @param Min - the value of "minimum"
     * @param Exclusive - true = strictly greater, otherwise greater or equal to the value of "minimum";
     */
    function MinValidator(Min, Exclusive) {
        this.Min = Min;
        this.Exclusive = Exclusive;
        this.tagName = "min";
        if (Min === undefined)
            this.Min = MinimalDefaultValue;
    }
    MinValidator.prototype.isAcceptable = function (s) {
        //if (!_.isNumber(s)) s = parseFloat(s);
        //TODO:underscore
        if (!_Score_1._Score.isNumber(s))
            s = parseFloat(s);
        return this.Exclusive ? (s > this.Min) : (s >= this.Min);
    };
    return MinValidator;
}());
exports.MinValidator = MinValidator;
/**
 * Return true if the number of items in array is lower or equal to the value of "minimum".
 *
 *  @require underscore
 */
var MinItemsValidator = (function () {
    /**
     * Default constructor.
     * @param Max - the value of "minimum"
     */
    function MinItemsValidator(Min) {
        this.Min = Min;
        this.tagName = "minItems";
        if (Min === undefined)
            this.Min = MinimalDefaultValue;
    }
    MinItemsValidator.prototype.isAcceptable = function (s) {
        //if (_.isArray(s)) return s.length >=this.Min;
        //underscore
        if (_Score_1._Score.isArray(s))
            return s.length >= this.Min;
        return false;
    };
    return MinItemsValidator;
}());
exports.MinItemsValidator = MinItemsValidator;
/**
 * Return true only for these conditions
 * if "Exclusive" is false, then the instance is valid if it is lower than, or equal to, the value of "maximum";
 * if "Exclusive" is true, the instance is valid if it is strictly lower than the value of "maximum".
 *
 *  @require underscore
 */
var MaxValidator = (function () {
    /**
     * Default constructor
     * @param Max - the value of "maximum"
     * @param Exclusive - true = strictly lower, otherwise lower or equal to the value of "maximum";
     */
    function MaxValidator(Max, Exclusive) {
        this.Max = Max;
        this.Exclusive = Exclusive;
        this.tagName = "max";
        if (Max === undefined)
            this.Max = MaximalDefaultValue;
    }
    MaxValidator.prototype.isAcceptable = function (s) {
        if (!_Score_1._Score.isNumber(s))
            s = parseFloat(s);
        return this.Exclusive ? (s < this.Max) : (s <= this.Max);
    };
    return MaxValidator;
}());
exports.MaxValidator = MaxValidator;
/**
 * Return true if an number of items in array is greater or equal to the value of "maximum".
 *
 *  @require underscore
 */
var MaxItemsValidator = (function () {
    /**
     * Default constructor.
     * @param Max - the value of "maximum"
     */
    function MaxItemsValidator(Max) {
        this.Max = Max;
        this.tagName = "maxItems";
        if (Max === undefined)
            this.Max = MaximalDefaultValue;
    }
    MaxItemsValidator.prototype.isAcceptable = function (s) {
        if (_Score_1._Score.isArray(s))
            return s.length <= this.Max;
        return false;
    };
    return MaxItemsValidator;
}());
exports.MaxItemsValidator = MaxItemsValidator;
/**
 * Return true if the array contains unique items (using strict equality), otherwise false.
 *
 *  @require underscore
 */
var UniqItemsValidator = (function () {
    function UniqItemsValidator() {
        this.tagName = "uniqItems";
    }
    UniqItemsValidator.prototype.isAcceptable = function (s) {
        if (_Score_1._Score.isArray(s))
            return _Score_1._Score.uniq(s).length === s.length;
        return false;
    };
    return UniqItemsValidator;
}());
exports.UniqItemsValidator = UniqItemsValidator;
/**
 * Return true if value is between Min and Max property.
 *
 *  @require underscore
 */
var RangeValidator = (function () {
    /**
     * Default constructor.
     * @param Range - array [the value of "minimum", the value of "maximum"]
     */
    function RangeValidator(Range) {
        this.Range = Range;
        this.tagName = "range";
        if (Range === undefined)
            this.Range = [MinimalDefaultValue, MaximalDefaultValue];
    }
    RangeValidator.prototype.isAcceptable = function (s) {
        if (!_Score_1._Score.isNumber(s))
            s = parseFloat(s);
        return s >= this.Min && s <= this.Max;
    };
    Object.defineProperty(RangeValidator.prototype, "Min", {
        /**
         * Return the value of "minimum"
         * @returns {number}
         */
        get: function () {
            return this.Range[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeValidator.prototype, "Max", {
        /**
         * Return the value of "maximum"
         * @returns {number}
         */
        get: function () {
            return this.Range[1];
        },
        enumerable: true,
        configurable: true
    });
    return RangeValidator;
}());
exports.RangeValidator = RangeValidator;
/**
 * Return true if an value is any of predefined values (using strict equality), otherwise false.
 *
 *  @require underscore
 */
var EnumValidator = (function () {
    /**
     * Default constructor.
     * @param Enum - array of values
     */
    function EnumValidator(Enum) {
        this.Enum = Enum;
        this.tagName = "enum";
        if (Enum === undefined)
            this.Enum = [];
    }
    EnumValidator.prototype.isAcceptable = function (s) {
        return _Score_1._Score.contains(this.Enum, s);
    };
    return EnumValidator;
}());
exports.EnumValidator = EnumValidator;
/**
 * Return true if an value is a specified type, otherwise false.
 *
 *  @require underscore
 */
var TypeValidator = (function () {
    /**
     * Default constructor.
     * @param Type - keywords that defines an concrete type
     */
    function TypeValidator(Type) {
        this.Type = Type;
        this.tagName = "type";
        if (this.Type === undefined)
            this.Type = "string";
    }
    TypeValidator.prototype.isAcceptable = function (s) {
        if (this.Type === "string")
            return _Score_1._Score.isString(s);
        if (this.Type === "boolean")
            return _Score_1._Score.isBoolean(s);
        if (this.Type === "number")
            return _Score_1._Score.isNumber(s);
        if (this.Type === "integer")
            return /^\d+$/.test(s);
        if (this.Type === "object")
            return _Score_1._Score.isObject(s);
        if (this.Type === "array")
            return _Score_1._Score.isArray(s);
        return false;
    };
    return TypeValidator;
}());
exports.TypeValidator = TypeValidator;
/**
 * Return true if an value is multiplier of passed number step, otherwise false.
 */
var StepValidator = (function () {
    /**
     * Default constructor.
     * @param Step - step multiplier
     */
    function StepValidator(Step) {
        this.Step = Step;
        this.StepDefaultValue = "1";
        this.tagName = "step";
        if (Step === undefined)
            this.Step = this.StepDefaultValue;
    }
    StepValidator.prototype.isAcceptable = function (s) {
        var maxNegDigits = Math.max(NumberFce.GetNegDigits(s), NumberFce.GetNegDigits(this.Step));
        var multiplier = Math.pow(10, maxNegDigits);
        return (parseInt(s, 10) * multiplier) % (parseInt(this.Step, 10) * multiplier) === 0;
    };
    return StepValidator;
}());
exports.StepValidator = StepValidator;
/**
 * Return true if a numeric instance is valid against "multipleOf" if the result of the division of the instance by this keyword's value is an integer, otherwise false.
 *
 *  @require underscore
 */
var MultipleOfValidator = (function () {
    /**
     * Default constructor
     * @param Divider
     */
    function MultipleOfValidator(Divider) {
        this.Divider = Divider;
        this.MultipleOfDefaultValue = 1;
        this.tagName = "multipleOf";
        if (Divider === undefined)
            this.Divider = this.MultipleOfDefaultValue;
    }
    MultipleOfValidator.prototype.isAcceptable = function (s) {
        if (!_Score_1._Score.isNumber(s))
            return false;
        return (s % this.Divider) % 1 === 0;
    };
    return MultipleOfValidator;
}());
exports.MultipleOfValidator = MultipleOfValidator;
/**
 * Return true if an value is valid against specified pattern, otherwise false.
 */
var PatternValidator = (function () {
    /**
     * Default constructor.
     * @param Pattern - pattern
     */
    function PatternValidator(Pattern) {
        this.Pattern = Pattern;
        this.tagName = "pattern";
    }
    PatternValidator.prototype.isAcceptable = function (s) {
        return new RegExp(this.Pattern).test(s);
    };
    return PatternValidator;
}());
exports.PatternValidator = PatternValidator;
/**
 * Return true if an value is any of predefined values (using strict equality), otherwise false.
 * Predefined values are fetched async with options service.
 *
 * @require underscore
 * @require Q
 */
var ContainsValidator = (function () {
    /**
     * Default constructor.
     * @param Options - async service that returns array of values.
     *
     *
     */
    function ContainsValidator(Options) {
        this.Options = Options;
        this.isAsync = true;
        this.tagName = "contains";
        if (Options === undefined)
            this.Options = Promise.resolve(new Array());
    }
    ContainsValidator.prototype.isAcceptable = function (s) {
        var subResult;
        //var deferred:Q.Deferred<boolean> = Q.defer<boolean>();
        var deferred = new Promise(function (x) { return x(subResult); });
        this.Options.then(function (result) {
            var hasSome = _Score_1._Score.some(result, function (item) {
                return item === s;
            });
            if (hasSome) {
                subResult = true;
                Promise.resolve(deferred);
            }
            subResult = false;
            Promise.resolve(deferred);
        });
        return deferred;
    };
    return ContainsValidator;
}());
exports.ContainsValidator = ContainsValidator;
/**
 * Return true if remote service returns true, otherwise false.
 *
 * @require underscore
 * @require Q
 * @require axios
 *
 * @example
 * ```typescript
 *  url: 'http://test/validateEmail',
 *  ```
 */
var RemoteValidator = (function () {
    /**
     * Default constructor
     * @param Options - remote service url + options
     */
    function RemoteValidator(Options) {
        this.Options = Options;
        this.isAsync = true;
        this.tagName = "remote";
        //TODO:axios
        //this.axios = require('axios');
    }
    RemoteValidator.prototype.isAcceptable = function (s) {
        var subResult;
        //var deferred:Q.Deferred<boolean> = Q.defer<boolean>();
        var deferred = new Promise(function (x) { return x(subResult); });
        this.axios.post(this.Options.url, {
            method: this.Options.type || "get",
            data: _Score_1._Score.extend({} || this.Options.data, {
                "value": s
            })
        }).then(function (response) {
            var isAcceptable = response === true || response === "true";
            subResult = isAcceptable;
            Promise.resolve(deferred);
        })
            .catch(function (response) {
            subResult = false;
            Promise.resolve(subResult);
            console.log(response);
        });
        return deferred;
    };
    return RemoteValidator;
}());
exports.RemoteValidator = RemoteValidator;


/***/ }),

/***/ "./src/app/ReusableServices/rulesSource/StandardValidation/FormSchema.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Validation_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/StandardValidation/Validation.ts");
var BasicValidators_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/StandardValidation/BasicValidators.ts");
var SchemaUtil_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/StandardValidation/SchemaUtil.ts");
/**
 * It represents the JSON schema factory for creating validation rules based on JSON form schema.
 * It uses constraints keywords from JSON Schema Validation specification.
 */
var JsonSchemaRuleFactory = (function () {
    /**
     * Default constructor
     * @param jsonSchema JSON schema for business rules.
     */
    function JsonSchemaRuleFactory(jsonSchema) {
        this.jsonSchema = jsonSchema;
    }
    /**
     * Return abstract validation rule by traversing  JSON schema.
     * @returns {IAbstractValidator<any>} return validation rule
     */
    JsonSchemaRuleFactory.prototype.CreateAbstractValidator = function () {
        return this.ParseAbstractRule(this.jsonSchema);
    };
    /**
     * Return concrete validation rule structured according to JSON schema.
     * @param name validation rule name
     * @returns {IAbstractValidationRule<any>} return validation rule
     */
    JsonSchemaRuleFactory.prototype.CreateRule = function (name) {
        return this.ParseAbstractRule(this.jsonSchema).CreateRule(name);
    };
    /**
     * Returns an concrete validation rules structured according to JSON schema.
     */
    JsonSchemaRuleFactory.prototype.ParseAbstractRule = function (formSchema) {
        //TODO:RF
        var rule = new Validation_1.AbstractValidator();
        for (var key in formSchema) {
            var item = formSchema[key];
            var type = item[SchemaUtil_1.TYPE_KEY];
            if (type === "object") {
                rule.ValidatorFor(key, this.ParseAbstractRule(item[SchemaUtil_1.PROPERTIES_KEY]));
            }
            else if (type === "array") {
                /!* _.each(this.ParseValidationAttribute(item),function(validator){ rule.RuleFor(key,validator)});*!/;
                var validators = this.ParseValidationAttribute(item);
                validators.forEach(function (validator) { rule.RuleFor(key, validator); });
                rule.ValidatorFor(key, this.ParseAbstractRule(item[SchemaUtil_1.ARRAY_KEY][SchemaUtil_1.PROPERTIES_KEY]), true);
            }
            else {
                /!*_.each(this.ParseValidationAttribute(item),function(validator){ rule.RuleFor(key,validator)});*!/;
                var validators = this.ParseValidationAttribute(item);
                validators.forEach(function (validator) { rule.RuleFor(key, validator); });
            }
        }
        return rule;
        //return;
    };
    /**
     * Return list of property validators that corresponds json items for JSON form validation tags.
     * See keywords specifications -> http://json-schema.org/latest/json-schema-validation.html
     */
    JsonSchemaRuleFactory.prototype.ParseValidationAttribute = function (item) {
        var validators = new Array();
        if (item === undefined)
            return validators;
        //5.  Validation keywords sorted by instance types
        //http://json-schema.org/latest/json-schema-validation.html
        //5.1. - Validation keywords for numeric instances (number and integer)
        // multipleOf validation
        validation = item["multipleOf"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.MultipleOfValidator(validation));
        }
        // maximum validation
        validation = item["maximum"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.MaxValidator(validation, item["exclusiveMaximum"]));
        }
        // minimum validation
        validation = item["minimum"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.MinValidator(validation, item["exclusiveMinimum"]));
        }
        //5.2. - Validation keywords for strings
        // maxLength validation
        validation = item["maxLength"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.MaxLengthValidator(validation));
        }
        // minLength validation
        validation = item["minLength"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.MinLengthValidator(validation));
        }
        // pattern validation
        validation = item["pattern"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.PatternValidator(validation));
        }
        //5.3.  Validation keywords for arrays
        //TODO: additionalItems and items
        // min items validation
        validation = item["minItems"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.MinItemsValidator(validation));
        }
        // max items validation
        validation = item["maxItems"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.MaxItemsValidator(validation));
        }
        // uniqueItems validation
        validation = item["uniqueItems"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.UniqItemsValidator());
        }
        //5.4.  Validation keywords for objects
        //TODO: maxProperties, minProperties, additionalProperties, properties and patternProperties, dependencies
        // required validation
        var validation = item["required"];
        if (validation !== undefined && validation) {
            validators.push(new BasicValidators_1.RequiredValidator());
        }
        //5.5.  Validation keywords for any instance type
        // enum validation
        validation = item["enum"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.EnumValidator(validation));
        }
        // type validation
        var validation = item["type"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.TypeValidator(validation));
        }
        //7.3.2 email
        validation = item["email"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.EmailValidator());
        }
        //7.3.6 url
        validation = item["uri"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.UrlValidator());
        }
        //TODO: allOf,anyOf,oneOf,not,definitions
        return validators;
    };
    return JsonSchemaRuleFactory;
}());
exports.JsonSchemaRuleFactory = JsonSchemaRuleFactory;
/**
 * It represents the JSON schema factory for creating validation rules based on raw JSON data annotated by validation rules.
 * It uses constraints keywords from JQuery validation plugin.
 */
var JQueryValidationRuleFactory = (function () {
    /**
     * Default constructor
     * @param metaData -  raw JSON data annotated by validation rules
     */
    function JQueryValidationRuleFactory(metaData) {
        this.metaData = metaData;
    }
    /**
     * Return abstract validation rule by traversing raw JSON data annotated by validation rules.
     * @returns {IAbstractValidator<any>} return validation rule
     */
    JQueryValidationRuleFactory.prototype.CreateAbstractValidator = function () {
        return this.ParseAbstractRule(this.metaData);
    };
    /**
     * Return an concrete validation rule by traversing raw JSON data annotated by validation rules.
     * @param name validation rule name
     * @returns {IValidationRule<any>} return validation rule
     */
    JQueryValidationRuleFactory.prototype.CreateRule = function (name) {
        return this.ParseAbstractRule(this.metaData).CreateRule(name);
    };
    /**
     * Returns an concrete validation rule structured according to JSON schema.
     */
    JQueryValidationRuleFactory.prototype.ParseAbstractRule = function (metaData) {
        //TODO:any
        /*var rule = new AbstractValidator<any>();

        for (var key in metaData) {
            var item = metaData[key];
            var rules = item[JQueryValidationRuleFactory.RULES_KEY];

            if ( _Score.isArray(item)) {
                if (item[1] !== undefined) {
                    /!* _.each(this.ParseValidationAttribute(item[1]), function (validator) {
                     rule.RuleFor(key, validator)
                     });*!/
                    var validators = this.ParseValidationAttribute(item[1]);
                    validators.forEach(validator=>{
                        rule.RuleFor(key, validator)
                    })
                }
                rule.ValidatorFor(key, this.ParseAbstractRule(item[0]), true);
            }
            else if (rules !== undefined) {
                /!*_.each(this.ParseValidationAttribute(rules),function(validator){ rule.RuleFor(key,validator)})*!/
                var validators=this.ParseValidationAttribute(rules);
                validators.forEach(validator=>{rule.RuleFor(key,validator)});
            }
            else if (_Score.isObject(item)) {
                rule.ValidatorFor(key, this.ParseAbstractRule(item));
            }
            else {
                //ignore
                continue;
            }
        }
        return rule;*/
        return;
    };
    /**
     * Return list of property validators that corresponds json items for JQuery validation pluging tags.
     * See specification - http://jqueryvalidation.org/documentation/
     */
    JQueryValidationRuleFactory.prototype.ParseValidationAttribute = function (item) {
        var validators = new Array();
        if (item === undefined)
            return validators;
        var validation = item["required"];
        if (validation !== undefined && validation) {
            validators.push(new BasicValidators_1.RequiredValidator());
        }
        var validation = item["remote"];
        if (validation !== undefined && validation) {
            validators.push(new BasicValidators_1.RemoteValidator(validation));
        }
        // maxLength validation
        validation = item["maxlength"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.MaxLengthValidator(validation));
        }
        // minLength validation
        validation = item["minlength"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.MinLengthValidator(validation));
        }
        // rangelength validation
        validation = item["rangelength"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.RangeLengthValidator(validation));
        }
        // maximum validation
        validation = item["max"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.MaxValidator(validation));
        }
        // minimum validation
        validation = item["min"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.MinValidator(validation));
        }
        // range validation
        validation = item["range"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.RangeValidator(validation));
        }
        validation = item["email"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.EmailValidator());
        }
        validation = item["url"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.UrlValidator());
        }
        validation = item["date"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.DateValidator());
        }
        validation = item["dateISO"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.DateISOValidator());
        }
        validation = item["number"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.NumberValidator());
        }
        validation = item["digits"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.DigitValidator());
        }
        validation = item["creditcard"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.CreditCardValidator());
        }
        validation = item["equalTo"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.EqualToValidator(validation));
        }
        // min items validation
        validation = item["minItems"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.MinItemsValidator(validation));
        }
        // max items validation
        validation = item["maxItems"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.MaxItemsValidator(validation));
        }
        // uniqueItems validation
        validation = item["uniqueItems"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.UniqItemsValidator());
        }
        // enum validation
        validation = item["enum"];
        if (validation !== undefined) {
            validators.push(new BasicValidators_1.EnumValidator(validation));
        }
        //           // pattern validation
        //           validation = item["pattern"];
        //           if (validation !== undefined) {
        //               validators.push(new Validators.PatternValidator(validation))
        //           }
        return validators;
    };
    JQueryValidationRuleFactory.RULES_KEY = "rules";
    JQueryValidationRuleFactory.DEFAULT_KEY = "default";
    return JQueryValidationRuleFactory;
}());
exports.JQueryValidationRuleFactory = JQueryValidationRuleFactory;


/***/ }),

/***/ "./src/app/ReusableServices/rulesSource/StandardValidation/SchemaUtil.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _Score_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/_Score.ts");
exports.TYPE_KEY = "type";
exports.PROPERTIES_KEY = "properties";
exports.DEFAULT_KEY = "default";
exports.ARRAY_KEY = "items";
var SchemaUtil = (function () {
    function SchemaUtil() {
    }
    /**
     * Returns the initial JSON data structured according to JSON schema.
     * The data are initilizied with default values.
     */
    SchemaUtil.InitValues = function (formSchema, data) {
        var data = data || {};
        for (var key in formSchema) {
            var item = formSchema[key];
            var type = item[exports.TYPE_KEY];
            if (type === "object") {
                data[key] = {};
                SchemaUtil.InitValues(item[exports.PROPERTIES_KEY], data[key]);
            }
            else if (type === "array") {
                data[key] = [];
            }
            else {
                var defaultValue = item[exports.DEFAULT_KEY];
                if (defaultValue === undefined)
                    continue;
                // Type casting
                if (type === 'boolean') {
                    if (defaultValue === '0') {
                        defaultValue = false;
                    }
                    else {
                        defaultValue = !!defaultValue;
                    }
                }
                if ((type === 'number') ||
                    (type === 'integer')) {
                    if (_Score_1._Score.isString(defaultValue)) {
                        if (!defaultValue.length) {
                            defaultValue = null;
                        }
                        else if (!isNaN(Number(defaultValue))) {
                            defaultValue = Number(defaultValue);
                        }
                    }
                }
                if ((type === 'string') &&
                    (defaultValue === '')) {
                    defaultValue = null;
                }
                //TODO: default value
                data[key] = defaultValue;
            }
        }
        return data;
    };
    return SchemaUtil;
}());
exports.SchemaUtil = SchemaUtil;


/***/ }),

/***/ "./src/app/ReusableServices/rulesSource/StandardValidation/Validation.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Utils_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/Utils.ts");
var hashMap_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/hashMap.ts");
var _Score_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/_Score.ts");
var Error = (function () {
    function Error() {
        this.HasError = false;
        this.ErrorMessage = "";
    }
    return Error;
}());
exports.Error = Error;
/**
 *
 * @ngdoc object
 * @name  ValidationFailure
 * @module Validation
 *
 *
 * @description
 * It represents validation failure.
 */
var ValidationFailure = (function () {
    function ValidationFailure(Error, IsAsync) {
        this.Error = Error;
        this.IsAsync = IsAsync;
    }
    Object.defineProperty(ValidationFailure.prototype, "HasError", {
        get: function () { return this.Error.HasError; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValidationFailure.prototype, "ErrorMessage", {
        get: function () { return this.Error.ErrorMessage; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValidationFailure.prototype, "TranslateArgs", {
        get: function () { return this.Error.TranslateArgs; },
        enumerable: true,
        configurable: true
    });
    return ValidationFailure;
}());
exports.ValidationFailure = ValidationFailure;
/**
 *
 * @ngdoc object
 * @name  ValidationResult
 * @module Validation
 *
 *
 * @description
 * It represents simple abstract error object.
 */
var ValidationResult = (function () {
    function ValidationResult(Name) {
        this.Name = Name;
        this.ErrorsChanged = new Utils_1.Signal();
    }
    Object.defineProperty(ValidationResult.prototype, "Kids", {
        get: function () {
            return this.Kids;
        },
        enumerable: true,
        configurable: true
    });
    ValidationResult.prototype.Add = function (error) {
        throw ("Cannot add to ValidationResult to leaf node.");
    };
    ValidationResult.prototype.Remove = function (index) {
        throw ("Cannot remove ValidationResult from leaf node.");
    };
    ValidationResult.prototype.DispatchErrorsChanged = function () {
        if (this.ErrorsChanged !== undefined)
            this.ErrorsChanged.dispatch(this);
    };
    Object.defineProperty(ValidationResult.prototype, "HasErrorsDirty", {
        get: function () {
            return this.IsDirty && this.HasErrors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValidationResult.prototype, "HasErrors", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValidationResult.prototype, "ErrorCount", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValidationResult.prototype, "ErrorMessage", {
        get: function () {
            return "";
        },
        enumerable: true,
        configurable: true
    });
    ValidationResult.prototype.add = function (child) { this.add(child); return true; };
    ValidationResult.prototype.remove = function (child) { this.remove(child); return true; };
    ValidationResult.prototype.getChildren = function () { return this.Kids; };
    ValidationResult.prototype.getName = function () { return this.Name; };
    ValidationResult.prototype.isItem = function () { return true; };
    return ValidationResult;
}());
exports.ValidationResult = ValidationResult;
/**
 *
 * @ngdoc object
 * @name  CompositeValidationResult
 * @module Validation
 *
 *
 * @description
 * It represents composite error object.
 */
var CompositeValidationResult = (function () {
    function CompositeValidationResult(Name) {
        this.Name = Name;
        this.Kids = new Array();
        this.ErrorsChanged = new Utils_1.Signal();
    }
    CompositeValidationResult.prototype.AddFirst = function (error) {
        this.Kids.unshift(error);
    };
    CompositeValidationResult.prototype.Add = function (error) {
        this.Kids.push(error);
    };
    CompositeValidationResult.prototype.Remove = function (index) {
        this.Kids.splice(index, 1);
    };
    CompositeValidationResult.prototype.Clear = function () {
        this.Kids.splice(0, this.Kids.length);
    };
    Object.defineProperty(CompositeValidationResult.prototype, "HasErrorsDirty", {
        get: function () {
            if (this.Optional !== undefined && _Score_1._Score.isFunction(this.Optional) && this.Optional())
                return false;
            return _Score_1._Score.some(this.Kids, function (error) {
                return error.HasErrorsDirty;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CompositeValidationResult.prototype, "HasErrors", {
        get: function () {
            if (this.Optional !== undefined && _Score_1._Score.isFunction(this.Optional) && this.Optional())
                return false;
            /*return _.some(this.Children, function (error) {
                return error.HasErrors;
            });*/
            var hasError = false;
            this.Kids.forEach(function (x) {
                if (x.HasErrors) {
                    hasError = true;
                }
            });
            return hasError;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CompositeValidationResult.prototype, "ErrorCount", {
        get: function () {
            if (!this.HasErrors)
                return 0;
            /* return _.reduce(this.Children, function (memo, error:IValidationResult) {
                 return memo + error.ErrorCount;
             }, 0);*/
            var errorCount = 0;
            for (var key in this.Kids) {
                errorCount += this.Kids[key].ErrorCount;
            }
            //return _.filter(this.children, function (error) { return error.HasErrors; }).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CompositeValidationResult.prototype, "ErrorMessage", {
        get: function () {
            if (!this.HasErrors)
                return "";
            /*return _.reduce(this.Children, function (memo, error:IValidationResult) {
                return memo + error.ErrorMessage;
            }, "");*/
            var errorMessage = "";
            for (var key in this.Kids) {
                errorMessage = errorMessage + this.Kids[key].ErrorMessage;
            }
            return errorMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CompositeValidationResult.prototype, "TranslateArgs", {
        get: function () {
            if (!this.HasErrors)
                return [];
            var newArgs = [];
            /* _.each(this.Children, function (error:IValidationResult) {
             newArgs = newArgs.concat(error.TranslateArgs);
             });*/
            this.Kids.forEach(function (error) {
                newArgs = newArgs.concat(error.TranslateArgs);
            });
            return newArgs;
        },
        enumerable: true,
        configurable: true
    });
    CompositeValidationResult.prototype.LogErrors = function (headerMessage) {
        if (headerMessage === undefined)
            headerMessage = "Output";
        console.log("---------------\n");
        console.log("--- " + headerMessage + " ----\n");
        console.log("---------------\n");
        this.traverse(this, 1);
        console.log("\n\n\n");
    };
    Object.defineProperty(CompositeValidationResult.prototype, "Errors", {
        get: function () {
            var map = {};
            /* _.each(this.Children,function (val){
                 map[val.Name] = val;
             });*/
            for (var key in this.Kids) {
                var val = this.Kids[key];
                map[val.Name] = val;
            }
            return map;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CompositeValidationResult.prototype, "FlattenErros", {
        get: function () {
            var errors = [];
            this.flattenErrors(this, errors);
            return errors;
        },
        enumerable: true,
        configurable: true
    });
    CompositeValidationResult.prototype.SetDirty = function () {
        this.SetDirtyEx(this, true);
    };
    CompositeValidationResult.prototype.SetPristine = function () {
        this.SetDirtyEx(this, false);
    };
    CompositeValidationResult.prototype.SetDirtyEx = function (node, dirty) {
        if (node.Kids.length === 0) {
            node["IsDirty"] = dirty;
        }
        else {
            for (var i = 0, len = node.Kids.length; i < len; i++) {
                //stop if there are no children with errors
                this.SetDirtyEx(node.Kids[i], dirty);
            }
        }
    };
    CompositeValidationResult.prototype.flattenErrors = function (node, errorCollection) {
        if (node.Kids.length === 0) {
            if (node.HasErrors)
                errorCollection.push(node);
        }
        else {
            for (var i = 0, len = node.Kids.length; i < len; i++) {
                //stop if there are no children with errors
                if (node.Kids[i].HasErrors)
                    this.flattenErrors(node.Kids[i], errorCollection);
            }
        }
    };
    // recursively traverse a (sub)tree
    CompositeValidationResult.prototype.traverse = function (node, indent) {
        console.log(Array(indent++).join("--") + node.Name + " (" + node.ErrorMessage + ")" + '\n\r');
        for (var i = 0, len = node.Kids.length; i < len; i++) {
            this.traverse(node.Kids[i], indent);
        }
    };
    CompositeValidationResult.prototype.add = function (child) { this.add(child); return true; };
    CompositeValidationResult.prototype.remove = function (child) { this.remove(child); return true; };
    CompositeValidationResult.prototype.getChildren = function () { return this.Kids; };
    CompositeValidationResult.prototype.getName = function () { return this.Name; };
    CompositeValidationResult.prototype.isItem = function () { return false; };
    return CompositeValidationResult;
}());
exports.CompositeValidationResult = CompositeValidationResult;
/**
 * It represents mixed validation rule for composite error object and property validation rule error.
 */
var MixedValidationResult = (function (_super) {
    __extends(MixedValidationResult, _super);
    function MixedValidationResult(Composite, PropRule) {
        _super.call(this, Composite.Name);
        this.Composite = Composite;
        this.PropRule = PropRule;
    }
    Object.defineProperty(MixedValidationResult.prototype, "Children", {
        get: function () { return this.Composite.Kids; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MixedValidationResult.prototype, "ValidationFailures", {
        get: function () { return this.PropRule.ValidationFailures; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MixedValidationResult.prototype, "HasErrorsDirty", {
        get: function () {
            if (this.Composite.HasErrorsDirty)
                return true;
            if (this.PropRule !== undefined && this.PropRule.HasErrorsDirty)
                return true;
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MixedValidationResult.prototype, "HasErrors", {
        get: function () {
            if (this.Composite.HasErrors)
                return true;
            if (this.PropRule !== undefined && this.PropRule.HasErrors)
                return true;
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MixedValidationResult.prototype, "ErrorCount", {
        get: function () {
            if (!this.Composite.HasErrors && this.PropRule !== undefined && !this.PropRule.HasErrors)
                return 0;
            return this.Composite.ErrorCount + (this.PropRule !== undefined ? this.PropRule.ErrorCount : 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MixedValidationResult.prototype, "ErrorMessage", {
        get: function () {
            if (!this.Composite.HasErrors && this.PropRule !== undefined && !this.PropRule.HasErrors)
                return "";
            this.Composite.ErrorMessage + this.PropRule !== undefined ? this.PropRule.ErrorMessage : "";
        },
        enumerable: true,
        configurable: true
    });
    return MixedValidationResult;
}(CompositeValidationResult));
exports.MixedValidationResult = MixedValidationResult;
/**
 *
 * @ngdoc object
 * @name  AbstractValidator
 * @module Validation
 *
 *
 * @description
 * It enables to create custom validator for your own abstract object (class) and to assign validation rules to its properties.
 * You can assigned these rules
 *
 * +  register property validation rules - use _RuleFor_ property
 * +  register property async validation rules - use _RuleFor_ property
 * +  register shared validation rules - use _Validation_ or _ValidationFor_ property
 * +  register custom object validator - use _ValidatorFor_ property - enables composition of child custom validators
 */
//TODO:RF
var AbstractValidator = (function () {
    function AbstractValidator() {
        //export class AbstractValidator<T> {
        this.Validators = {};
        this.AbstractValidators = {};
        this.ValidationFunctions = {};
        /**
         * Return true if this validation rule is intended for list of items, otherwise true.
         */
        this.ForList = false;
    }
    /**
     *  Register property validator for property.
     * @param prop - property name
     * @param validator - property validator
     */
    AbstractValidator.prototype.RuleFor = function (prop, validator) {
        if (this.Validators[prop] === undefined) {
            this.Validators[prop] = [];
        }
        this.Validators[prop].push(validator);
    };
    /**
     *  Register shared validation and assign property name as dependency on shared rule.
     *  Dependency = when the property is validated then the shared rule is validated also.
     * @param prop name
     * @param fce name validation function
     */
    AbstractValidator.prototype.ValidationFor = function (prop, fce) {
        if (this.ValidationFunctions[prop] === undefined) {
            this.ValidationFunctions[prop] = [];
        }
        this.ValidationFunctions[prop].push(fce);
    };
    /**
     *  Register shared validation. There are no relationship to dependent property.
     *  Dependency = when the property is validated then the shared rule is validated also.
     * @param fce name validation function
     */
    AbstractValidator.prototype.Validation = function (fce) {
        if (fce.Name === undefined)
            throw 'argument must have property Name';
        this.ValidationFor(fce.Name, fce);
    };
    /**
     * Register child validator for property - composition of validators
     * @param prop name
     * @param validator child validator
     * @param forList true if is array structure, otherwise false
     */
    AbstractValidator.prototype.ValidatorFor = function (prop, validator, forList) {
        validator.ForList = forList;
        this.AbstractValidators[prop] = validator;
    };
    //TODO:RF
    AbstractValidator.prototype.CreateAbstractRule = function (name) {
        //public CreateAbstractRule(name:string) :AbstractValidationRule<T> {
        return new AbstractValidationRule(name, this);
    };
    AbstractValidator.prototype.CreateAbstractListRule = function (name) {
        //TODO:RF
        return new AbstractListValidationRule(name, this);
        //return;
    };
    AbstractValidator.prototype.CreateRule = function (name) {
        //TODO:RF
        return new AbstractValidationRule(name, this);
        //return;
    };
    return AbstractValidator;
}());
exports.AbstractValidator = AbstractValidator;
/**
 *
 * @ngdoc object
 * @name  AbstractValidationRule
 * @module Validation
 *
 *
 * @description
 * It represents concreate validator for custom object. It enables to assign validation rules to custom object properties.
 */
//TODO:RF
var AbstractValidationRule = (function () {
    function AbstractValidationRule(Name, validator, ForList) {
        var _this = this;
        this.Name = Name;
        this.validator = validator;
        this.ForList = ForList;
        this.Rules = {};
        this.Validators = {};
        this.Children = {};
        this.ValidationResultVisitor = new ValidationResultVisitor(new CompositeValidationResult(this.Name));
        /*_.each(this.validator.ValidationFunctions, function (val:Array<IValidatorFce>) {
         _.each(val, function (validation) {
         var validator = this.Validators[validation.Name];
         if (validator === undefined) {
         validator = new Validator(validation.Name, validation.ValidationFce, validation.AsyncValidationFce);
         this.Validators[validation.Name] = validator;
         validator.AcceptVisitor(this.ValidationResultVisitor);
         //this.ValidationResult.Add(validator);
         }
         }, this)
         }, this);*/
        if (!this.ForList) {
            for (var key in this.validator.Validators) {
                var val = this.validator.Validators[key];
                this.createRuleFor(key);
                val.forEach(function (x) {
                    var rule = _this.Rules[key];
                    rule.AddValidator(x);
                });
            }
            for (var key in this.validator.ValidationFunctions) {
                var val = this.validator.ValidationFunctions[key];
                val.forEach(function (x) {
                    var validator = _this.Validators[x.Name];
                    if (validator === undefined) {
                        validator = new Validator(x.Name, x.ValidationFce, x.AsyncValidationFce);
                        _this.Validators[x.Name] = validator;
                        validator.AcceptVisitor(_this.ValidationResultVisitor);
                    }
                });
            }
            this.addChildren();
        }
    }
    Object.defineProperty(AbstractValidationRule.prototype, "ValidationResult", {
        //class AbstractValidationRule<T> {
        get: function () { return this.ValidationResultVisitor.ValidationResult; },
        set: function (value) { this.ValidationResultVisitor.ValidationResult = value; },
        enumerable: true,
        configurable: true
    });
    AbstractValidationRule.prototype.AcceptVisitor = function (visitor) {
        visitor.AddValidator(this);
    };
    AbstractValidationRule.prototype.addChildren = function () {
        /* _.each(this.validator.AbstractValidators, function(val, key){
             var validationRule;
             if (val.ForList) {
                 validationRule = val.CreateAbstractListRule(key);
             }
             else {
                 validationRule = val.CreateAbstractRule(key);
             }
             this.Children[key] = validationRule;
             validationRule.AcceptVisitor(this.ValidationResultVisitor);
             //this.ValidationResult.Add(validationRule.ValidationResult);
         },this);*/
        for (var key in this.validator.AbstractValidators) {
            var val = this.validator.AbstractValidators[key];
            var validationRule;
            if (val.ForList) {
                validationRule = val.CreateAbstractListRule(key);
            }
            else {
                validationRule = val.CreateAbstractRule(key);
            }
            this.Children[key] = validationRule;
            validationRule.AcceptVisitor(this.ValidationResultVisitor);
        }
    };
    AbstractValidationRule.prototype.SetOptional = function (fce) {
        this.ValidationResult.Optional = fce;
        /* _.each(this.Rules, function(value:IValidationResult, key:string){value.Optional = fce;});
         _.each(this.Validators, function(value:any, key:string){value.Optional = fce;});
         _.each(this.Children, function(value:any, key:string){value.SetOptional(fce);});*/
        for (var key in this.Rules) {
            var value = this.Rules[key];
            value.Optional = fce;
        }
        for (var key in this.Validators) {
            var value = this.Validators[key];
            value.Optional = fce;
        }
        for (var key in this.Children) {
            var value = this.Children[key];
            value.SetOptional(fce);
        }
    };
    AbstractValidationRule.prototype.createRuleFor = function (prop) {
        var propValidationRule = new PropertyValidationRule(prop);
        this.Rules[prop] = propValidationRule;
        propValidationRule.AcceptVisitor(this.ValidationResultVisitor);
        //this.ValidationResult.Add(propValidationRule);
    };
    /**
     * Performs validation using a validation context and returns a collection of Validation Failures.
     */
    AbstractValidationRule.prototype.Validate = function (context) {
        /* _.each(this.Children,function(val,key){
             if (context[key] === undefined) context[key] = val.ForList?[]:{};
             val.Validate(context[key]);
         },this);*/
        var _this = this;
        for (var key in this.Children) {
            var val = this.Children[key];
            if (context[key] === undefined)
                context[key] = val.ForList ? [] : {};
            val.Validate(context[key]);
        }
        for (var propName in this.Rules) {
            var rule = this.Rules[propName];
            rule.Validate(new ValidationContext(propName, context));
        }
        /*_.each (this.validator.ValidationFunctions, function (valFunctions:Array<IValidatorFce>) {
            _.each(valFunctions, function (valFce) {
                var validator = this.Validators[valFce.Name];
                if (validator !== undefined) validator.Validate(context);
            },this)
        },this);*/
        for (var key in this.validator.ValidationFunctions) {
            var valFunctions = this.validator.ValidationFunctions[key];
            valFunctions.forEach(function (x) {
                var val = x;
                var validator = _this.Validators[val.Name];
                if (validator !== undefined)
                    validator.Validate(context);
            });
        }
        ;
        return this.ValidationResult;
    };
    /**
     * Performs validation using a validation context and returns a collection of Validation Failures asynchronoulsy.
     */
    AbstractValidationRule.prototype.ValidateAsync = function (context) {
        var _this = this;
        var subResult;
        var deferred = new Promise(function (x) { return x(subResult); });
        var promises = [];
        /* _.each(this.Children,function(val,key){
             promises.push(val.ValidateAsync(context[key]));
         },this);
*/
        for (var key in this.Children) {
            var val = this.Children[key];
            promises.push(val.ValidateAsync(context[key]));
        }
        ;
        for (var propName in this.Rules) {
            var rule = this.Rules[propName];
            promises.push(rule.ValidateAsync(new ValidationContext(propName, context)));
        }
        /*_.each (this.validator.ValidationFunctions, function (valFunctions:Array<IValidatorFce>) {
            _.each(valFunctions, function (valFce) {
                var validator = this.Validators[valFce.Name];
                if (validator !== undefined) promises.push(validator.ValidateAsync(context));
            },this)
        },this);*/
        for (var key in this.validator.ValidationFunctions) {
            var valFunctions = this.validator.ValidationFunctions[key];
            valFunctions.forEach(function (valFce) {
                var validator = _this.Validators[valFce.Name];
                if (validator !== undefined)
                    promises.push(validator.ValidateAsync(context));
            });
        }
        var self = this;
        Promise.all(promises).then(function (result) {
            subResult = self.ValidationResult;
            Promise.resolve(deferred);
        });
        return deferred;
    };
    AbstractValidationRule.prototype.ValidateAll = function (context) {
        this.Validate(context);
        return this.ValidateAsync(context);
    };
    AbstractValidationRule.prototype.ValidateProperty = function (context, propName) {
        var childRule = this.Children[propName];
        if (childRule !== undefined)
            childRule.Validate(context[propName]);
        var rule = this.Rules[propName];
        if (rule !== undefined) {
            var valContext = new ValidationContext(propName, context);
            rule.Validate(valContext);
            rule.ValidateAsync(valContext);
        }
        var validationFces = this.validator.ValidationFunctions[propName];
        if (validationFces !== undefined) {
            for (var key in validationFces) {
                var valFce = validationFces[key];
                var validator = this.Validators[valFce.Name];
                if (validator !== undefined)
                    validator.Validate(context);
            }
        }
    };
    AbstractValidationRule.prototype.add = function (child) {
        throw "not implemented";
    };
    AbstractValidationRule.prototype.remove = function (child) {
        throw "not implemented";
    };
    AbstractValidationRule.prototype.getChildren = function () {
        /*  return _.map(this.Children, function (item) {
         return item;
         });*/
        var items = new Array();
        for (var key in this.Children) {
            items.push(this.Children[key]);
        }
        return items;
    };
    AbstractValidationRule.prototype.getName = function () {
        return this.Name;
    };
    AbstractValidationRule.prototype.isItem = function () {
        return this.getChildren().length === 0;
    };
    AbstractValidationRule.id = 0;
    return AbstractValidationRule;
}());
/**
 *  It represents visitor class that enables to separate validation result creation from validation execution.
 *  You can create your own Visitors for composing ValidationResults on your own.
 */
var ValidationResultVisitor = (function () {
    function ValidationResultVisitor(ValidationResult) {
        this.ValidationResult = ValidationResult;
    }
    ValidationResultVisitor.prototype.AddRule = function (rule) {
        //if (this.ValidationResult.ErrorsChanged !== undefined) rule.ErrorsChanged = this.ValidationResult.ErrorsChanged;
        this.ValidationResult.Add(rule);
    };
    ValidationResultVisitor.prototype.AddValidator = function (rule) {
        // mixed composite validation result with property validation error
        //TODO: find better and more generic way how to solve mixed validation results with the same name
        //var error:any =  _.find(this.ValidationResult.Children, function(item:IValidationResult) {return item.Name === rule.ValidationResult.Name});
        var error = this.ValidationResult.Kids.find(function (x) { return x.Name === rule.ValidationResult.Name; });
        if (error !== undefined) {
            //compose composite validation result with property validation result
            this.ValidationResult.Add(new MixedValidationResult(rule.ValidationResult, error));
        }
        else {
            this.ValidationResult.Add(rule.ValidationResult);
        }
    };
    ValidationResultVisitor.prototype.AddValidation = function (validator) {
        this.ValidationResult.Add(validator);
    };
    return ValidationResultVisitor;
}());
/**
 *
 * @ngdoc object
 * @name  AbstractListValidationRule
 * @module Validation
 *
 *
 * @description
 * It represents an validator for custom object. It enables to assign rules to custom object properties.
 */
var AbstractListValidationRule = (function (_super) {
    __extends(AbstractListValidationRule, _super);
    //private RowsObserver;
    function AbstractListValidationRule(Name, validator) {
        _super.call(this, Name, validator, true);
        this.Name = Name;
        this.validator = validator;
        this.RowsMap = new hashMap_1.HashMap();
    }
    /**
     * Performs validation using a validation context and returns a collection of Validation Failures.
     */
    AbstractListValidationRule.prototype.Validate = function (context) {
        //super.Validate(context);
        this.RefreshRows(context);
        for (var i = 0; i != context.length; i++) {
            var validationRule = this.RowsMap.get(context[i]);
            if (validationRule !== undefined)
                validationRule.Validate(context[i]);
        }
        //this.ClearValidationResult(context);
        return this.ValidationResult;
    };
    /**
     * Performs validation using a validation context and returns a collection of Validation Failures asynchronoulsy.
     */
    AbstractListValidationRule.prototype.ValidateAsync = function (context) {
        var subResult;
        var deferred = new Promise(function (x) { return x(subResult); });
        var promises = [];
        this.RefreshRows(context);
        for (var i = 0; i != context.length; i++) {
            var validationRule = this.RowsMap.get(context[i]);
            if (validationRule !== undefined)
                promises.push(validationRule.ValidateAsync(context[i]));
        }
        var self = this;
        Promise.all(promises).then(function (result) {
            //self.ClearValidationResult(context);
            subResult = self.ValidationResult;
            Promise.resolve(subResult);
        });
        return deferred;
    };
    Object.defineProperty(AbstractListValidationRule.prototype, "Rows", {
        get: function () {
            return this.RowsMap.values();
        },
        enumerable: true,
        configurable: true
    });
    AbstractListValidationRule.prototype.RefreshRows = function (list) {
        this.refreshList(list);
        //            var self = this;
        //            this.RowsObserver = new ObserveJs.ArrayObserver(list, function(splices) {
        //                // respond to changes to the elements of arr.
        //                splices.forEach(function(splice) {
        //                    //var newContext = ObserveJs.ArrayObserver.applySplices(splice, context);
        //                    var newList = list.splice.apply(list,[splice.index,splice.removed.length].concat(splice.added));
        //                    self.refreshList(newList);
        //                });
        //            });
    };
    AbstractListValidationRule.prototype.ClearRows = function (list) {
        /*
         var keysToRemove = _.difference(this.RowsMap.keys(),list);
         _.each(keysToRemove,function(key){
         if (this.has(key)) this.remove(key);
         },this.RowsMap);*/
        var removeList = new Array();
        var secondList = this.RowsMap.keys();
        secondList.forEach(function (x) {
            var ind = list.indexOf(x);
            if (!(ind < 0)) {
                removeList.push(ind);
            }
        });
        removeList.forEach(function (x) {
            secondList.splice(x, 1);
        });
    };
    AbstractListValidationRule.prototype.ClearValidationResult = function (list) {
        this.ClearRows(list);
        /*   var results =
               _.map( this.RowsMap.values(), function(item:IAbstractValidationRule<any>) {return item.ValidationResult;});*/
        var results = this.RowsMap.values().map(function (x) { return x.ValidationResult; });
        for (var i = this.ValidationResult.Kids.length - 1; i >= 0; i--) {
            var item = this.ValidationResult.Kids[i];
            if (item === undefined)
                continue;
            if (results.indexOf(item) === -1) {
                this.ValidationResult.Remove(i);
            }
        }
    };
    AbstractListValidationRule.prototype.getValidationRule = function (key, name) {
        //TODO:RF
        if (name === undefined)
            name = "Row";
        var validationRule;
        if (!this.RowsMap.has(key)) {
            validationRule = this.validator.CreateAbstractRule(name);
            this.ValidationResult.Add(validationRule.ValidationResult);
            this.RowsMap.set(key, validationRule);
        }
        else {
            validationRule = this.RowsMap.get(key);
        }
        return validationRule;
        //return;
    };
    AbstractListValidationRule.prototype.refreshList = function (list) {
        var _this = this;
        this.ClearValidationResult(list);
        list.forEach(function (item) { var rule = _this.getValidationRule(item); });
    };
    return AbstractListValidationRule;
}(AbstractValidationRule));
/**
 *
 * @ngdoc object
 * @name  ValidationContext
 * @module Validation
 *
 *
 * @description
 * It represents a data context for validation rule.
 */
var ValidationContext = (function () {
    function ValidationContext(Key, Data) {
        this.Key = Key;
        this.Data = Data;
    }
    Object.defineProperty(ValidationContext.prototype, "Value", {
        get: function () {
            return this.Data[this.Key];
        },
        enumerable: true,
        configurable: true
    });
    return ValidationContext;
}());
var MessageLocalization = (function () {
    function MessageLocalization() {
    }
    MessageLocalization.GetValidationMessage = function (validator) {
        /*var msgText = MessageLocalization.ValidationMessages[validator.tagName];
        if (msgText === undefined || msgText === "" || !_Score.isString(msgText)) {
            msgText = MessageLocalization.customMsg;
        }*/
        //return StringFce.format(msgText, validator);
        return validator.tagName + "ValidatorMessage";
    };
    MessageLocalization.customMsg = "Please, fix the field.";
    MessageLocalization.defaultMessages = {
        "requiredValidatorMessage": "This field is required.",
        "remoteValidatorMessage": "Please fix the field.",
        "emailValidatorMessage": "Please enter a valid email address.",
        "urlValidatorMessage": "Please enter a valid URL.",
        "dateValidatorMessage": "Please enter a valid date.",
        "dateISOValidatorMessage": "Please enter a valid date ( ISO ).",
        "dateCompareValidatorMessage": "Please enter valid dates.",
        "numberValidatorMessage": "Please enter a valid number.",
        "digitsValidatorMessage": "Please enter only digits.",
        "signedDigitsValidatorMessage": "Please enter only signed digits.",
        "creditcardValidatorMessage": "Please enter a valid credit card number.",
        "equalToValidatorMessage": "Please enter the same value again.",
        "maxlengthValidatorMessage": "Please enter no more than {MaxLength} characters.",
        "minlengthValidatorMessage": "Please enter at least {MinLength} characters.",
        "rangelengthValidatorMessage": "Please enter a value between {MinLength} and {MaxLength} characters long.",
        "rangeValidatorMessage": "Please enter a value between {Min} and {Max}.",
        "maxValidatorMessage": "Please enter a value less than or equal to {Max}.",
        "minValidatorMessage": "Please enter a value greater than or equal to {Min}.",
        "stepValidatorMessage": "Please enter a value with step {Step}.",
        "containsValidatorMessage": "Please enter a value from list of values. Attempted value '{AttemptedValue}'.",
        "maskValidatorMessage": "Please enter a value corresponding with {Mask}.",
        "minItemsValidatorMessage": "Please enter at least {Min} items.",
        "maxItemsValidatorMessage": "Please enter no more than {Max} items.",
        "uniqItemValidatorMessage": "Please enter unique items.",
        "enumValidatorMessage": "Please enter a value from list of permitted values.",
        "typeValidatorMessage": "Please enter a value of type '{Type}'.",
        "multipleOfValidatorMessage": "Please enter a value that is multiple of {Divider}.",
        "zipcodeValidatorMessage": "Please enter the postal code in the format A1A 1A1",
        "phoneValidatorMessage": "Please enter valid phone format +1 123-123-1234",
        "lettersonlyValidatorMessage": "Please enter only text in the field",
        "alphanumericValidatorMessage": "Please enter number or text",
        "customValidatorMessage": MessageLocalization.customMsg
    };
    MessageLocalization.ValidationMessages = MessageLocalization.defaultMessages;
    return MessageLocalization;
}());
exports.MessageLocalization = MessageLocalization;
/**
 *
 * @ngdoc object
 * @name  PropertyValidationRule
 * @module Validation
 *
 *
 * @description
 * It represents a property validation rule. The property has assigned collection of property validators.
 */
var PropertyValidationRule = (function (_super) {
    __extends(PropertyValidationRule, _super);
    function PropertyValidationRule(Name, validatorsToAdd) {
        _super.call(this, Name);
        this.Name = Name;
        this.Validators = {};
        this.ValidationFailures = {};
        for (var index in validatorsToAdd) {
            this.AddValidator(validatorsToAdd[index]);
        }
    }
    //public AsyncValidationFailures:{[name:string]: IAsyncValidationFailure} = {};
    PropertyValidationRule.prototype.AcceptVisitor = function (visitor) {
        visitor.AddRule(this);
    };
    PropertyValidationRule.prototype.AddValidator = function (validator) {
        this.Validators[validator.tagName] = validator;
        this.ValidationFailures[validator.tagName] = new ValidationFailure(new Error(), !!validator.isAsync);
    };
    Object.defineProperty(PropertyValidationRule.prototype, "Errors", {
        get: function () {
            return this.ValidationFailures;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyValidationRule.prototype, "HasErrors", {
        get: function () {
            if (this.Optional !== undefined && _Score_1._Score.isFunction(this.Optional) && this.Optional())
                return false;
            var values = new Array();
            for (var key in this.Errors) {
                values.push(this.Errors[key]);
            }
            ;
            return _Score_1._Score.some(values, function (error) {
                return error.HasError;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyValidationRule.prototype, "ErrorCount", {
        get: function () {
            return this.HasErrors ? 1 : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyValidationRule.prototype, "ErrorMessage", {
        get: function () {
            if (!this.HasErrors)
                return "";
            var values = new Array();
            for (var key in this.Errors) {
                values.push(this.Errors[key]);
            }
            ;
            var message = "";
            values.forEach(function (x) {
                message = message + x.ErrorMessage;
            });
            return message;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyValidationRule.prototype, "TranslateArgs", {
        get: function () {
            if (!this.HasErrors)
                return [];
            var newArray = [];
            /*_.each(_.values(this.Errors), function (error:IValidationFailure) {
                if (error.HasError) newArray.push(error.Error.TranslateArgs);
            });*/
            var values = new Array();
            for (var key in this.Errors) {
                values.push(this.Errors[key]);
            }
            values.forEach(function (error) {
                if (error.HasError)
                    newArray.push(error.Error.TranslateArgs);
            });
            return newArray;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Performs validation using a validation context and returns a collection of Validation Failures.
     */
    PropertyValidationRule.prototype.Validate = function (context) {
        try {
            return this.ValidateEx(context.Value);
        }
        catch (e) {
            //if (this.settings.debug && window.console) {
            console.log("Exception occurred when checking element " + context.Key + ".", e);
            //}
            throw e;
        }
    };
    PropertyValidationRule.prototype.ValidateEx = function (value) {
        var lastPriority = 0;
        var shortCircuited = false;
        var original = this.HasErrors;
        for (var index in this.ValidationFailures) {
            var validation = this.ValidationFailures[index];
            if (validation.IsAsync)
                continue;
            var validator = this.Validators[index];
            try {
                var priority = 0;
                if (shortCircuited && priority > lastPriority) {
                    validation.Error.HasError = false;
                }
                else {
                    var ruleResult = validator.isAcceptable(value);
                    var hasError = ((value === undefined || value === null) && validator.tagName != "required") ? false : !ruleResult;
                    validation.Error.HasError = hasError;
                    //validation.Error.TranslateArgs = { TranslateId:validator.tagName, MessageArgs:_.extend(validator,{AttemptedValue: value}), CustomMessage: validator.customMessage};
                    validator["AttemptedValue"] = value;
                    validation.Error.TranslateArgs = { TranslateId: validator.tagName, MessageArgs: validator, CustomMessage: validator.customMessage };
                    validation.Error.ErrorMessage = hasError ? MessageLocalization.GetValidationMessage(validation.Error.TranslateArgs.MessageArgs) : "";
                    shortCircuited = hasError;
                    lastPriority = priority;
                }
            }
            catch (e) {
                //if (this.settings.debug && window.console) {
                console.log("Exception occurred when checking element'" + validator.tagName + "' method.", e);
                //}
                throw e;
            }
        }
        if (original !== this.HasErrors)
            this.DispatchErrorsChanged();
        //return _.filter(this.ValidationFailures,function(item){return !item.IsAsync;});
        var filtered = new Array();
        for (var key in this.ValidationFailures) {
            var item = this.ValidationFailures[key];
            if (!item.IsAsync) {
                filtered.push(item);
            }
        }
        return filtered;
    };
    /**
     * Performs validation using a validation context and returns a collection of Validation Failures asynchronoulsy.
     */
    PropertyValidationRule.prototype.ValidateAsync = function (context) {
        return this.ValidateAsyncEx(context.Value);
    };
    /**
     * Performs validation using a validation context and returns a collection of Validation Failures asynchronoulsy.
     */
    PropertyValidationRule.prototype.ValidateAsyncEx = function (value) {
        var subResult;
        var deferred = new Promise(function (x) { return x(subResult); });
        var promises = [];
        var original = this.HasErrors;
        var setResultFce = function (result) {
            var hasError = !result;
            validation.Error.HasError = hasError;
            //validation.Error.TranslateArgs = { TranslateId: validator.tagName, MessageArgs: _.extend(validator, {AttemptedValue: value})};
            validator["AttemptedValue"] = value;
            validation.Error.TranslateArgs = { TranslateId: validator.tagName, MessageArgs: validator };
            validation.Error.ErrorMessage = hasError ? MessageLocalization.GetValidationMessage(validation.Error.TranslateArgs.MessageArgs) : "";
        };
        for (var index in this.ValidationFailures) {
            var validation = this.ValidationFailures[index];
            if (!validation.IsAsync)
                continue;
            var validator = this.Validators[index];
            try {
                var hasErrorPromise = ((value === undefined || value === null) && validator.tagName != "required") ? Promise.resolve(true) : validator.isAcceptable(value);
                hasErrorPromise.then(setResultFce);
                promises.push(hasErrorPromise);
            }
            catch (e) {
                //if (this.settings.debug && window.console) {
                console.log("Exception occurred when checking element'" + validator.tagName + "' method.", e);
                //}
                throw e;
            }
        }
        var self = this;
        Promise.all(promises).then(function (result) {
            if (original !== self.HasErrors)
                self.DispatchErrorsChanged();
            //subResult=_.filter(self.ValidationFailures,function(item){return item.IsAsync;});
            var subResult = new Array();
            for (var key in self.ValidationFailures) {
                var item = this.ValidationFailures[key];
                if (!item.IsAsync) {
                    subResult.push(item);
                }
            }
            Promise.resolve(deferred);
        });
        return deferred;
    };
    return PropertyValidationRule;
}(ValidationResult));
/**
 *
 * @ngdoc object
 * @name  Validator
 * @module Validation
 *
 *
 * @description
 * It represents a custom validator. It enables to define your own shared validation rules
 */
var Validator = (function (_super) {
    __extends(Validator, _super);
    function Validator(Name, ValidateFce, AsyncValidationFce) {
        _super.call(this, Name);
        this.Name = Name;
        this.ValidateFce = ValidateFce;
        this.AsyncValidationFce = AsyncValidationFce;
        this.Error = new Error();
        this.ValidationFailures = {};
        this.ValidationFailures[this.Name] = new ValidationFailure(this.Error, false);
    }
    Validator.prototype.Validate = function (context) {
        var original = this.Error.HasError;
        if (this.ValidateFce !== undefined)
            this.ValidateFce.bind(context)(this.Error);
        if (original !== this.Error.HasError)
            this.DispatchErrorsChanged();
        return this.ValidationFailures[this.Name];
    };
    Validator.prototype.ValidateAsync = function (context) {
        var subResult;
        var deferred = new Promise(function (x) { return x(subResult); });
        if (this.AsyncValidationFce === undefined) {
            subResult = this.ValidationFailures[this.Name];
            Promise.resolve(deferred);
        }
        else {
            var original = this.Error.HasError;
            var self = this;
            this.AsyncValidationFce.bind(context)(this.Error).then(function () {
                if (original !== self.Error.HasError)
                    self.DispatchErrorsChanged();
                subResult = self.ValidationFailures[self.Name];
                Promise.resolve(subResult);
            });
        }
        return deferred;
    };
    Object.defineProperty(Validator.prototype, "HasError", {
        get: function () {
            return this.HasErrors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Validator.prototype, "Errors", {
        get: function () {
            return this.ValidationFailures;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Validator.prototype, "HasErrors", {
        get: function () {
            if (this.Optional !== undefined && _Score_1._Score.isFunction(this.Optional) && this.Optional())
                return false;
            return this.Error.HasError;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Validator.prototype, "ErrorCount", {
        get: function () {
            return this.HasErrors ? 1 : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Validator.prototype, "ErrorMessage", {
        get: function () {
            if (!this.HasErrors)
                return "";
            return this.Error.ErrorMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Validator.prototype, "TranslateArgs", {
        get: function () {
            if (!this.HasErrors)
                return [];
            var newArray = [];
            newArray.push(this.Error.TranslateArgs);
            return newArray;
        },
        enumerable: true,
        configurable: true
    });
    Validator.prototype.AcceptVisitor = function (visitor) {
        visitor.AddValidation(this);
    };
    return Validator;
}(ValidationResult));
/**
 * It defines compare operators.
 */
(function (CompareOperator) {
    /**
     * must be less than
     */
    CompareOperator[CompareOperator["LessThan"] = 0] = "LessThan";
    /**
     * cannot be more than
     */
    CompareOperator[CompareOperator["LessThanEqual"] = 1] = "LessThanEqual";
    /**
     *  must be the same as
     */
    CompareOperator[CompareOperator["Equal"] = 2] = "Equal";
    /**
     * must be different from
     */
    CompareOperator[CompareOperator["NotEqual"] = 3] = "NotEqual";
    /**
     * cannot be less than
     */
    CompareOperator[CompareOperator["GreaterThanEqual"] = 4] = "GreaterThanEqual";
    /**
     * must be more than
     */
    CompareOperator[CompareOperator["GreaterThan"] = 5] = "GreaterThan";
})(exports.CompareOperator || (exports.CompareOperator = {}));
var CompareOperator = exports.CompareOperator;
/**
 *
 * @ngdoc object
 * @name  Error
 * @module Validation
 *
 *
 * @description
 * It represents basic error structure.
 */


/***/ }),

/***/ "./src/app/ReusableServices/rulesSource/Utils.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var StringFce = (function () {
    function StringFce() {
    }
    StringFce.format = function (s, args) {
        var formatted = s;
        for (var prop in args) {
            var regexp = new RegExp('\\{' + prop + '\\}', 'gi');
            formatted = formatted.replace(regexp, args[prop]);
        }
        return formatted;
    };
    return StringFce;
}());
exports.StringFce = StringFce;
/*
 It represents utility for number manipulation.
 */
var NumberFce = (function () {
    function NumberFce() {
    }
    NumberFce.GetNegDigits = function (value) {
        if (value === undefined)
            return 0;
        var digits = value.toString().split('.');
        if (digits.length > 1) {
            var negDigitsLength = digits[1].length;
            return negDigitsLength;
        }
        return 0;
    };
    return NumberFce;
}());
exports.NumberFce = NumberFce;
/*
 It represents signal (event).
 */
var Signal = (function () {
    function Signal() {
        this.listeners = [];
        this.priorities = [];
    }
    Signal.prototype.add = function (listener, priority) {
        if (priority === void 0) { priority = 0; }
        var index = this.listeners.indexOf(listener);
        if (index !== -1) {
            this.priorities[index] = priority;
            return;
        }
        for (var i = 0, l = this.priorities.length; i < l; i++) {
            if (this.priorities[i] < priority) {
                this.priorities.splice(i, 0, priority);
                this.listeners.splice(i, 0, listener);
                return;
            }
        }
        this.priorities.push(priority);
        this.listeners.push(listener);
    };
    Signal.prototype.remove = function (listener) {
        var index = this.listeners.indexOf(listener);
        if (index >= 0) {
            this.priorities.splice(index, 1);
            this.listeners.splice(index, 1);
        }
    };
    Signal.prototype.dispatch = function (parameter) {
        var indexesToRemove;
        var hasBeenCanceled = this.listeners.every(function (listener) {
            var result = listener(parameter);
            return result !== false;
        });
        return hasBeenCanceled;
    };
    Signal.prototype.clear = function () {
        this.listeners = [];
        this.priorities = [];
    };
    Signal.prototype.hasListeners = function () {
        return this.listeners.length > 0;
    };
    return Signal;
}());
exports.Signal = Signal;
/*
 It represents utility for making composite object accessible by dot notation.
 */
var CompositeDotObject = (function () {
    function CompositeDotObject() {
    }
    /*
     It transforms composite object to dot accessible composite object.
     */
    CompositeDotObject.Transform = function (component, obj) {
        if (obj === undefined)
            obj = {};
        if (component.isItem()) {
            obj[component.getName()] = component;
        }
        else {
            var children = component.getChildren();
            var parent = obj[component.getName()] = component;
            for (var comp in children) {
                CompositeDotObject.Transform(children[comp], parent);
            }
        }
        return obj;
    };
    return CompositeDotObject;
}());
exports.CompositeDotObject = CompositeDotObject;


/***/ }),

/***/ "./src/app/ReusableServices/rulesSource/_Score.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _Score = (function () {
    function _Score() {
    }
    _Score.isNumber = function (s) {
        return (typeof s === 'number');
    };
    _Score.isBoolean = function (s) {
        return (typeof s === 'boolean');
    };
    _Score.isString = function (s) {
        return (typeof s === 'string');
    };
    _Score.isObject = function (s) {
        return (typeof s === 'object');
    };
    _Score.isFunction = function (s) {
        return (Object.prototype.toString.call(s) === '[object Function]');
    };
    _Score.isArray = function (s) {
        return (Object.prototype.toString.call(s) === '[object Array]');
    };
    _Score.uniq = function (array) {
        var result = new Array();
        for (var i = 0, length = array.length; i < length; i++) {
            var value = array[i];
            var ind = result.indexOf(result);
            if (ind < 0) {
                result.push(value);
            }
        }
        return result;
    };
    _Score.contains = function (set, lookupObj) {
        var result = set.indexOf(lookupObj);
        return (result >= 0);
    };
    _Score.extend = function (obj1, obj2) {
        for (var ind in obj2) {
            obj1[ind] = obj2[ind];
        }
    };
    _Score.some = function (obj, predicate) {
        for (var index in obj) {
            if (predicate(obj[index]))
                return true;
        }
        return false;
    };
    ;
    _Score.isDate = function (input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    };
    ;
    _Score.lpad = function (str, length, padStr) {
        return _Score.pad(str, length, padStr, 'left');
    };
    ;
    _Score.rpad = function (str, length, padStr) {
        return _Score.pad(str, length, padStr, 'right');
    };
    ;
    _Score.lrpad = function (str, length, padStr) {
        return _Score.pad(str, length, padStr, 'both');
    };
    _Score.pad = function (str, length, padStr, type) {
        str = str == null ? '' : String(str);
        length = ~~length;
        var padlen = 0;
        if (!padStr)
            padStr = ' ';
        else if (padStr.length > 1)
            padStr = padStr.charAt(0);
        switch (type) {
            case 'right':
                padlen = length - str.length;
                return str + _Score.strRepeat(padStr, padlen);
            case 'both':
                padlen = length - str.length;
                return _Score.strRepeat(padStr, Math.ceil(padlen / 2)) + str
                    + _Score.strRepeat(padStr, Math.floor(padlen / 2));
            default:
                padlen = length - str.length;
                return _Score.strRepeat(padStr, padlen) + str;
        }
    };
    _Score.strRepeat = function (str, qty) {
        if (qty < 1)
            return '';
        var result = '';
        while (qty > 0) {
            if (qty & 1)
                result += str;
            qty >>= 1, str += str;
        }
        return result;
    };
    _Score.isPresent = function (obj) {
        return obj !== undefined && obj !== null;
    };
    return _Score;
}());
exports._Score = _Score;


/***/ }),

/***/ "./src/app/ReusableServices/rulesSource/hashMap.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * HashMap - HashMap Class for JavaScript
 * @author Ariel Flesler <aflesler@gmail.com>
 * @version 1.2.0
 * Homepage: https://github.com/flesler/hashmap
 */
var HashMap = (function () {
    function HashMap() {
        this.clear();
        this._data = new Array();
        this.uid = 0;
    }
    HashMap.prototype.get = function (key) {
        var data = this._data[this.hash(key)];
        return data && data[1];
    };
    HashMap.prototype.set = function (key, value) {
        // Store original key as well (for iteration)
        this._data[this.hash(key)] = [key, value];
    };
    HashMap.prototype.has = function (key) {
        return this.hash(key) in this._data;
    };
    HashMap.prototype.search = function (value) {
        for (var key in this._data) {
            if (this._data[key][1] === value) {
                return this._data[key][0];
            }
        }
        return null;
    };
    HashMap.prototype.remove = function (key) {
        delete this._data[this.hash(key)];
    };
    HashMap.prototype.type = function (key) {
        var str = Object.prototype.toString.call(key);
        var type = str.slice(8, -1).toLowerCase();
        // Some browsers yield DOMWindow for null and undefined, works fine on Node
        if (type === 'domwindow' && !key) {
            return key + '';
        }
        return type;
    };
    HashMap.prototype.keys = function () {
        var keys = new Array();
        this.forEach(function (value, key) {
            keys.push(key);
        });
        return keys;
    };
    HashMap.prototype.values = function () {
        var values = [];
        this.forEach(function (value) {
            values.push(value);
        });
        return values;
    };
    HashMap.prototype.count = function () {
        return this.keys().length;
    };
    HashMap.prototype.clear = function () {
        // TODO: Would Object.create(null) make any difference
        this._data = new Array();
    };
    HashMap.prototype.hash = function (key) {
        switch (this.type(key)) {
            case 'undefined':
            case 'null':
            case 'boolean':
            case 'number':
            case 'regexp':
                return key + '';
            case 'date':
                return ':' + key.getTime();
            case 'string':
                return '"' + key;
            case 'array':
                var hashes = [];
                for (var i = 0; i < key.length; i++)
                    hashes[i] = this.hash(key[i]);
                return '[' + hashes.join('|');
            case 'object':
            default:
                // TODO: Don't use expandos when Object.defineProperty is not available?
                if (!key._hmuid_) {
                    key._hmuid_ = ++this.uid;
                    this.hide(key, '_hmuid_');
                }
                return '{' + key._hmuid_;
        }
    };
    HashMap.prototype.forEach = function (func) {
        for (var key in this._data) {
            var data = this._data[key];
            func.call(this, data[1], data[0]);
        }
    };
    HashMap.prototype.hide = function (obj, prop) {
        // Make non iterable if supported
        if (Object.defineProperty) {
            Object.defineProperty(obj, prop, { enumerable: false });
        }
    };
    ;
    return HashMap;
}());
exports.HashMap = HashMap;


/***/ }),

/***/ "./src/app/ReusableServices/sampleService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var SampleService = (function () {
    function SampleService() {
    }
    SampleService.prototype.getData = function () {
        return 'call from sample service returned';
    };
    SampleService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], SampleService);
    return SampleService;
}());
exports.SampleService = SampleService;


/***/ }),

/***/ "./src/app/ReusableServices/slimLoadingBarService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/Observable.js");
var _Score_1 = __webpack_require__("./src/app/ReusableServices/rulesSource/_Score.ts");
(function (SlimLoadingBarEventType) {
    SlimLoadingBarEventType[SlimLoadingBarEventType["PROGRESS"] = 0] = "PROGRESS";
    SlimLoadingBarEventType[SlimLoadingBarEventType["HEIGHT"] = 1] = "HEIGHT";
    SlimLoadingBarEventType[SlimLoadingBarEventType["COLOR"] = 2] = "COLOR";
    SlimLoadingBarEventType[SlimLoadingBarEventType["VISIBLE"] = 3] = "VISIBLE";
})(exports.SlimLoadingBarEventType || (exports.SlimLoadingBarEventType = {}));
var SlimLoadingBarEventType = exports.SlimLoadingBarEventType;
var SlimLoadingBarEvent = (function () {
    function SlimLoadingBarEvent(type, value) {
        this.type = type;
        this.value = value;
    }
    return SlimLoadingBarEvent;
}());
exports.SlimLoadingBarEvent = SlimLoadingBarEvent;
/**
 * SlimLoadingBar service helps manage Slim Loading bar on the top of screen or parent component
 */
var SlimLoadingBarService = (function () {
    function SlimLoadingBarService() {
        var _this = this;
        this._progress = 0;
        this._height = '2px';
        this._color = 'firebrick';
        this._visible = true;
        this._intervalCounterId = 0;
        this.interval = 500; // in milliseconds
        this.observable = new Observable_1.Observable(function (subscriber) {
            _this.subscriber = subscriber;
        });
    }
    Object.defineProperty(SlimLoadingBarService.prototype, "progress", {
        get: function () {
            return this._progress;
        },
        set: function (value) {
            if (_Score_1._Score.isPresent(value)) {
                if (value > 0) {
                    this.visible = true;
                }
                this._progress = value;
                this.emitEvent(new SlimLoadingBarEvent(SlimLoadingBarEventType.PROGRESS, this._progress));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimLoadingBarService.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            if (_Score_1._Score.isPresent(value)) {
                this._height = value;
                this.emitEvent(new SlimLoadingBarEvent(SlimLoadingBarEventType.HEIGHT, this._height));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimLoadingBarService.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            if (_Score_1._Score.isPresent(value)) {
                this._color = value;
                this.emitEvent(new SlimLoadingBarEvent(SlimLoadingBarEventType.COLOR, this._color));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimLoadingBarService.prototype, "visible", {
        get: function () {
            return this._visible;
        },
        set: function (value) {
            if (_Score_1._Score.isPresent(value)) {
                this._visible = value;
                this.emitEvent(new SlimLoadingBarEvent(SlimLoadingBarEventType.VISIBLE, this._visible));
            }
        },
        enumerable: true,
        configurable: true
    });
    SlimLoadingBarService.prototype.emitEvent = function (event) {
        if (this.subscriber) {
            // Push up a new event
            this.subscriber.next(event);
        }
    };
    SlimLoadingBarService.prototype.start = function (onCompleted) {
        var _this = this;
        if (onCompleted === void 0) { onCompleted = null; }
        // Stop current timer
        this.stop();
        // Make it visible for sure
        this.visible = true;
        // Run the timer with milliseconds iterval
        this._intervalCounterId = setInterval(function () {
            // Increment the progress and update view component
            _this.progress++;
            // If the progress is 100% - call complete
            if (_this.progress === 100) {
                _this.complete();
            }
        }, this.interval);
    };
    SlimLoadingBarService.prototype.stop = function () {
        if (this._intervalCounterId) {
            clearInterval(this._intervalCounterId);
            this._intervalCounterId = null;
        }
    };
    SlimLoadingBarService.prototype.reset = function () {
        this.stop();
        this.progress = 0;
    };
    SlimLoadingBarService.prototype.complete = function () {
        var _this = this;
        this.progress = 100;
        this.stop();
        setTimeout(function () {
            // Hide it away
            _this.visible = false;
            setTimeout(function () {
                // Drop to 0
                _this.progress = 0;
            }, 250);
        }, 250);
    };
    SlimLoadingBarService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], SlimLoadingBarService);
    return SlimLoadingBarService;
}());
exports.SlimLoadingBarService = SlimLoadingBarService;


/***/ }),

/***/ "./src/app/ReusableServices/toasty.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright (C) 2016 Sergey Akopkokhyants
// This project is licensed under the terms of the MIT license.
// https://github.com/akserg/ng2-toasty

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var toasty_utils_1 = __webpack_require__("./src/app/ReusableComponents/standardToasty/toasty.utils.ts");
/**
 * Default configuration foa all toats and toasty container
 */
var ToastyConfig = (function () {
    function ToastyConfig() {
        // Maximum number of toasties to show at once
        this.limit = 10;
        // Whether to show the 'X' icon to close the toast
        this.showClose = true;
        // The window position where the toast pops up. Possible values
        // bottom-right, bottom-left, top-right, top-left, top-center, bottom-center, center-center
        this.position = 'bottom-right';
        // How long (in miliseconds) the toasty shows before it's removed. Set to null/0 to turn off.
        this.timeout = 5000;
        // What theme to use. Possible values:
        // default, material or bootstrap
        this.theme = 'default';
    }
    ToastyConfig = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], ToastyConfig);
    return ToastyConfig;
}());
exports.ToastyConfig = ToastyConfig;
/**
 * Toasty service helps create different kinds of Toasts
 */
var ToastyService = (function () {
    function ToastyService(config) {
        this.config = config;
        // Init the counter
        this.uniqueCounter = 0;
        // ToastData event emitter
        this.toastsEmitter = new core_1.EventEmitter();
        // Clear event emitter
        this.clearEmitter = new core_1.EventEmitter();
        this.themes = [{
                name: 'Default Theme',
                code: 'default'
            }, {
                name: 'Material Design',
                code: 'material'
            }, {
                name: 'Bootstrap 3',
                code: 'bootstrap'
            }];
        this.types = [{
                name: 'Default',
                code: 'default',
            }, {
                name: 'Info',
                code: 'info'
            }, {
                name: 'Success',
                code: 'success'
            }, {
                name: 'Wait',
                code: 'wait'
            }, {
                name: 'Error',
                code: 'error'
            }, {
                name: 'Warning',
                code: 'warning'
            }];
        this.positions = [{
                name: 'Top Left',
                code: 'top-left',
            }, {
                name: 'Top Center',
                code: 'top-center',
            }, {
                name: 'Top Right',
                code: 'top-right',
            }, {
                name: 'Bottom Left',
                code: 'bottom-left',
            }, {
                name: 'Bottom Center',
                code: 'bottom-center',
            }, {
                name: 'Bottom Right',
                code: 'bottom-right',
            }, {
                name: 'Center Center',
                code: 'center-center',
            }];
    }
    ToastyService.prototype.getToasts = function () {
        return this.toastsEmitter.asObservable();
    };
    ToastyService.prototype.getClear = function () {
        return this.clearEmitter.asObservable();
    };
    /**
     * Create Toast of a default type
     */
    ToastyService.prototype.default = function (options) {
        this.add(options, 'default');
    };
    /**
     * Create Toast of info type
     * @param  {object} options Individual toasty config overrides
     */
    ToastyService.prototype.info = function (options) {
        this.add(options, 'info');
    };
    /**
     * Create Toast of success type
     * @param  {object} options Individual toasty config overrides
     */
    ToastyService.prototype.success = function (options) {
        this.add(options, 'success');
    };
    /**
     * Create Toast of wait type
     * @param  {object} options Individual toasty config overrides
     */
    ToastyService.prototype.wait = function (options) {
        this.add(options, 'wait');
    };
    /**
     * Create Toast of error type
     * @param  {object} options Individual toasty config overrides
     */
    ToastyService.prototype.error = function (options) {
        this.add(options, 'error');
    };
    /**
     * Create Toast of warning type
     * @param  {object} options Individual toasty config overrides
     */
    ToastyService.prototype.warning = function (options) {
        this.add(options, 'warning');
    };
    // Add a new toast item
    ToastyService.prototype.add = function (options, type) {
        var toastyOptions;
        if (toasty_utils_1.isString(options) && options !== '' || toasty_utils_1.isNumber(options)) {
            toastyOptions = {
                title: options.toString()
            };
        }
        else {
            toastyOptions = options;
        }
        if (!toastyOptions || !toastyOptions.title && !toastyOptions.msg) {
            throw new Error('ng2-toasty: No toast title or message specified!');
        }
        type = type || 'default';
        // Set a unique counter for an id
        this.uniqueCounter++;
        // Set the local vs global config items
        var showClose = this._checkConfigItem(this.config, toastyOptions, 'showClose');
        // If we have a theme set, make sure it's a valid one
        var theme;
        if (toastyOptions.theme) {
            theme = ToastyService.THEMES.indexOf(toastyOptions.theme) > -1 ? toastyOptions.theme : this.config.theme;
        }
        else {
            theme = this.config.theme;
        }
        var toast = {
            id: this.uniqueCounter,
            title: toastyOptions.title,
            msg: toastyOptions.msg,
            showClose: showClose,
            type: 'toasty-type-' + type,
            theme: 'toasty-theme-' + theme,
            onAdd: toastyOptions.onAdd && toasty_utils_1.isFunction(toastyOptions.onAdd) ? toastyOptions.onAdd : null,
            onRemove: toastyOptions.onRemove && toasty_utils_1.isFunction(toastyOptions.onRemove) ? toastyOptions.onRemove : null
        };
        // If there's a timeout individually or globally, set the toast to timeout
        // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.
        toast.timeout = toastyOptions.hasOwnProperty('timeout') ? toastyOptions.timeout : this.config.timeout;
        // Push up a new toast item
        // this.toastsSubscriber.next(toast);
        this.toastsEmitter.next(toast);
        // If we have a onAdd function, call it here
        if (toastyOptions.onAdd && toasty_utils_1.isFunction(toastyOptions.onAdd)) {
            toastyOptions.onAdd.call(this, toast);
        }
    };
    // Clear all toasts
    ToastyService.prototype.clearAll = function () {
        this.clearEmitter.next(null);
    };
    // Clear the specific one
    ToastyService.prototype.clear = function (id) {
        this.clearEmitter.next(id);
    };
    // Checks whether the local option is set, if not,
    // checks the global config
    ToastyService.prototype._checkConfigItem = function (config, options, property) {
        if (options[property] === false) {
            return false;
        }
        else if (!options[property]) {
            return config[property];
        }
        else {
            return true;
        }
    };
    // Allowed THEMES
    ToastyService.THEMES = ['default', 'material', 'bootstrap'];
    ToastyService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [ToastyConfig])
    ], ToastyService);
    return ToastyService;
}());
exports.ToastyService = ToastyService;


/***/ }),

/***/ "./src/app/ReusableServices/uploadService.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var appSettingsService_1 = __webpack_require__("./src/app/ReusableServices/appSettingsService.ts");
var httpAbstract_1 = __webpack_require__("./src/app/ReusableServices/httpAbstract.ts");
var Subject_1 = __webpack_require__("./node_modules/rxjs/Subject.js");
var FileUploadItem = (function () {
    function FileUploadItem(uploader, id, originalName, fileName, size) {
        this.uploader = uploader;
        this.id = id;
        this.file = null;
        this.originalName = originalName;
        this.fileName = fileName,
            this.size = size;
        this.progress = 0;
        this.zone = new core_1.NgZone({ enableLongStackTrace: false });
        this.startTime = new Date().getTime();
        this.endTime = 0;
        this.speedAverage = 0;
        this.speedAverageHumanized = null;
        this.isUploading = false;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
    }
    FileUploadItem.prototype.upload = function () {
        try {
            this.uploader.uploadFile(this);
        }
        catch (e) {
            this.uploader._onCompleteItem(this, {}, 0);
            this.uploader._onErrorItem(this, {}, 0);
        }
    };
    FileUploadItem.prototype.remove = function () {
        this.uploader.removeFromQueue(this);
    };
    FileUploadItem.prototype.onProgress = function (progress) {
        return { progress: progress };
    };
    FileUploadItem.prototype.onSuccess = function (response, status) {
        this.endTime = new Date().getTime();
        this.speedAverage = this.size / (this.endTime - this.startTime) * 1000;
        this.speedAverage = parseInt(this.speedAverage, 10);
        this.speedAverageHumanized = humanizeBytes(this.speedAverage);
        this.status = status;
        this.response = response;
        return { response: response, status: status };
    };
    FileUploadItem.prototype.onError = function (response, status) {
        return { response: response, status: status };
    };
    FileUploadItem.prototype.onComplete = function (response, status) {
        return { response: response, status: status };
    };
    FileUploadItem.prototype._onProgress = function (progress) {
        var _this = this;
        this.zone.run(function () {
            _this.progress = progress;
        });
        this.onProgress(progress);
    };
    FileUploadItem.prototype._onSuccess = function (response, status) {
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = true;
        this.isCancel = false;
        this.isError = false;
        this.progress = 100;
        this.onSuccess(response, status);
    };
    FileUploadItem.prototype._onError = function (response, status) {
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = true;
        this.progress = 0;
        this.onError(response, status);
    };
    FileUploadItem.prototype._onComplete = function (response, status) {
        this.onComplete(response, status);
    };
    return FileUploadItem;
}());
exports.FileUploadItem = FileUploadItem;
var Ng2Uploader = (function () {
    function Ng2Uploader(abstractHttp, appSettingsService) {
        this.abstractHttp = abstractHttp;
        this.appSettingsService = appSettingsService;
        this.contentType = 'application/json; charset=utf-8';
        this.base = this.appSettingsService.appSettings.apiSettings.apiURL_BASE + '/api/tdam/datahub/ae';
        this.fileUploadApiControllerUrl = '/files';
        this.method = 'POST';
        this.customHeaders = {};
        this.encodeHeaders = true;
        this.authTokenPrefix = 'Bearer';
        this.authToken = undefined;
        this.fieldName = 'file';
        this.queue = [];
        this.progress = 0;
        this.response = [];
        this._emitter = new core_1.EventEmitter();
        this._previewEmitter = new core_1.EventEmitter();
        this.validateFileEventEmitter = new core_1.EventEmitter();
        this.addRemoveFilesEventEmitter = new core_1.EventEmitter();
        this.notifyUploadComplete = new Subject_1.Subject();
        this.defaultOptions = {
            withCredentials: true,
            allowedExtensions: {},
            multiple: false,
            maxUploads: 10,
            maxUploadSize: 2147483648,
            data: { removeAfterUpload: true },
            autoUpload: false,
            fileName: null,
            folderPath: "/import",
            applicationID: null
        };
        this.options = {};
        this.httpAbs = abstractHttp;
        this.httpAbs.setBaseAddress(this.base);
        this.setOptions(this.defaultOptions);
    }
    Ng2Uploader.prototype.setOptions = function (opt) {
        this.options = {
            withCredentials: opt.withCredentials != null ? opt.withCredentials : this.options.withCredentials,
            allowedExtensions: opt.allowedExtensions != null ? opt.allowedExtensions : this.options.allowedExtensions,
            multiple: opt.multiple != null ? opt.multiple : this.options.multiple,
            maxUploads: opt.maxUploads != null ? opt.maxUploads : this.options.maxUploads,
            maxUploadSize: opt.maxUploadSize != null ? opt.maxUploadSize : this.options.maxUploadSize,
            data: opt.data != null ? opt.data : this.options.data,
            autoUpload: opt.autoUpload != null ? opt.autoUpload : this.options.autoUpload,
            fileName: opt.fileName != null ? opt.fileName : this.options.fileName,
            folderPath: opt.folderPath != null ? opt.folderPath : this.options.folderPath,
            applicationID: opt.applicationID != null ? opt.applicationID : this.options.applicationID,
        };
    };
    Ng2Uploader.prototype.uploadFilesInQueue = function () {
        var _this = this;
        var newFiles = this.queue.filter(function (f) { return !f.isUploaded; });
        newFiles.forEach(function (f) {
            _this.uploadFile(f);
        });
    };
    ;
    Ng2Uploader.prototype.getReadyItems = function () {
        return this.queue
            .filter(function (item) { return (!item.isUploading); })
            .sort(function (item1, item2) { return item1.index - item2.index; });
    };
    Ng2Uploader.prototype.uploadFile = function (fileItem) {
        var _this = this;
        var index = this.getIndexOfItem(fileItem);
        var item = this.queue[index];
        item.isUploading = true;
        var xhr = new XMLHttpRequest();
        var form = new FormData();
        form.append(this.fieldName, item.file, item.fileName);
        Object.keys(this.options.data).forEach(function (k) {
            form.append(k, _this.options.data[k]);
        });
        xhr.upload.onprogress = function (event) {
            var progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);
            _this._onProgressItem(fileItem, progress);
        };
        xhr.upload.onabort = function () {
            _this._onCompleteItem(fileItem, xhr.response, xhr.status);
        };
        xhr.upload.onerror = function () {
            _this._onErrorItem(item, xhr.response, xhr.status);
            _this._onCompleteItem(fileItem, xhr.response, xhr.status);
        };
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                var gist = _this._isSuccessCode(xhr.status) ? 'Success' : 'Error';
                var method = '_on' + gist + 'Item';
                _this[method](fileItem, xhr.response, xhr.status);
                _this._onCompleteItem(fileItem, xhr.response, xhr.status);
            }
        };
        var fileUploadParams = this.options.folderPath;
        if (this.options.applicationID) {
            fileUploadParams = fileUploadParams + "/" + this.options.applicationID;
        }
        xhr.open(this.method, this.httpAbs.baseUrl + this.fileUploadApiControllerUrl + fileUploadParams, true);
        xhr.withCredentials = this.options.withCredentials;
        if (this.customHeaders) {
            Object.keys(this.customHeaders).forEach(function (key) {
                xhr.setRequestHeader(key, _this.customHeaders[key]);
            });
        }
        if (this.authToken) {
            xhr.setRequestHeader('Authorization', this.authTokenPrefix + " " + this.authToken);
        }
        xhr.send(form);
    };
    Ng2Uploader.prototype._onCompleteItem = function (item, response, status) {
        item._onComplete(status, response);
        this.onCompleteItem(item, response, status);
        this.progress = this.getTotalProgress();
        if (this.getNotUploadedItems().length == 0) {
            var fileInfo = JSON.parse(response).fileInfo[0];
            this.notifyUploadComplete.next(fileInfo);
        }
    };
    Ng2Uploader.prototype._onErrorItem = function (item, response, status) {
        item._onError(response, status);
        this.onErrorItem(item, response, status);
    };
    Ng2Uploader.prototype._isSuccessCode = function (status) {
        return (status >= 200 && status < 300) || status === 304;
    };
    Ng2Uploader.prototype.getTotalProgress = function (value) {
        if (value === void 0) { value = 0; }
        var notUploaded = this.getNotUploadedItems().length;
        var uploaded = notUploaded ? this.queue.length - notUploaded : this.queue.length;
        var ratio = (this.queue.length > 0) ? 100 / this.queue.length : 0;
        var current = value * ratio / 100;
        return Math.round(uploaded * ratio + current);
    };
    Ng2Uploader.prototype.addFilesToQueue = function (files) {
        var _this = this;
        var count = this.queue.length;
        files.forEach(function (file, i) {
            if (_this.isFile(file) && !_this.inQueue(file)) {
                var uploadingFile = new FileUploadItem(_this, _this.generateRandomIndex(), file.name, _this.options.fileName != null ? _this.options.fileName : file.name, file.size);
                uploadingFile.file = file;
                _this.queue.push(uploadingFile);
                _this._onAfterAddingFile(uploadingFile);
            }
        });
        this.addRemoveFilesEventEmitter.emit();
        if (this.queue.length !== count) {
            this.progress = this.getTotalProgress();
        }
        if (this.options.autoUpload) {
            this.uploadFilesInQueue();
        }
    };
    Ng2Uploader.prototype.removeFromQueue = function (item) {
        var fileInfo = JSON.parse(item.response).fileInfo[0];
        return this.httpAbs.removeBulkRecords(this.fileUploadApiControllerUrl + '/remove', JSON.stringify(fileInfo), '', this.contentType);
    };
    Ng2Uploader.prototype.clearQueue = function () {
        var _this = this;
        var apiParams = [];
        this.queue.forEach(function (item) {
            if (item.isUploaded && item.response) {
                var fileInfo = JSON.parse(item.response).fileInfo[0];
                apiParams.push({ url: _this.fileUploadApiControllerUrl + '/remove', headerKey: JSON.stringify(fileInfo), headerValue: '' });
            }
        });
        if (apiParams.length > 0) {
            return this.httpAbs.removeMultiple(apiParams, this.contentType);
        }
        else {
            return "";
        }
    };
    Ng2Uploader.prototype.getIndexOfItem = function (item) {
        return typeof item === 'number' ? item : this.queue.indexOf(item);
    };
    Ng2Uploader.prototype.getNotUploadedItems = function () {
        return this.queue.filter(function (item) { return !item.isUploaded; });
    };
    Ng2Uploader.prototype.inQueue = function (file) {
        var fileInQueue = this.queue.filter(function (f) { return f === file; });
        return fileInQueue.length ? true : false;
    };
    Ng2Uploader.prototype.isFile = function (file) {
        return file !== null && (file instanceof Blob || (file.name && file.size));
    };
    Ng2Uploader.prototype.generateRandomIndex = function () {
        return Math.random().toString(36).substring(7);
    };
    Ng2Uploader.prototype.onProgressItem = function (fileItem, progress) {
        return { fileItem: fileItem, progress: progress };
    };
    Ng2Uploader.prototype.onProgressAll = function (progress) {
        return { progress: progress };
    };
    Ng2Uploader.prototype.onSuccessItem = function (item, response, status) {
        return { item: item, response: response, status: status };
    };
    Ng2Uploader.prototype.onErrorItem = function (item, response, status) {
        return { item: item, response: response, status: status };
    };
    Ng2Uploader.prototype.onCompleteItem = function (item, response, status) {
        return { item: item, response: response, status: status };
    };
    Ng2Uploader.prototype.onAfterAddingFile = function (item) {
        return { item: item };
    };
    Ng2Uploader.prototype._onProgressItem = function (item, progress) {
        var total = this.getTotalProgress(progress);
        this.progress = total;
        item._onProgress(progress);
        this.onProgressItem(item, progress);
        this.onProgressAll(total);
    };
    Ng2Uploader.prototype._onSuccessItem = function (item, response, status) {
        item._onSuccess(response, status);
        this.onSuccessItem(item, response, status);
    };
    Ng2Uploader.prototype._onAfterAddingFile = function (item) {
        this.onAfterAddingFile(item);
    };
    Ng2Uploader = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof httpAbstract_1.HttpAbstract !== 'undefined' && httpAbstract_1.HttpAbstract) === 'function' && _a) || Object, (typeof (_b = typeof appSettingsService_1.AppSettingsService !== 'undefined' && appSettingsService_1.AppSettingsService) === 'function' && _b) || Object])
    ], Ng2Uploader);
    return Ng2Uploader;
    var _a, _b;
}());
exports.Ng2Uploader = Ng2Uploader;
function humanizeBytes(bytes) {
    if (bytes === 0) {
        return '0 Byte';
    }
    var k = 1024;
    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
    var i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i] + '/s';
}


/***/ }),

/***/ "./src/app/app.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var navigationService_1 = __webpack_require__("./src/app/ReusableServices/navigationService.ts");
var AppComponent = (function () {
    function AppComponent(document, navService) {
        this.document = document;
        this.navService = navService;
        this.title = 'Data hub';
        //Added navService object as it is used in app.html to display PageTitle. Please do not remove this
    }
    AppComponent = __decorate([
        core_1.Component({
            selector: 'my-app',
            template: __webpack_require__("./src/app/app.html"),
            styles: [__webpack_require__("./src/app/Datahub/assets/default.scss"), __webpack_require__("./src/app/Datahub/assets/theme_standard.scss")]
        }),
        __param(0, core_1.Inject(platform_browser_1.DOCUMENT)), 
        __metadata('design:paramtypes', [Object, (typeof (_a = typeof navigationService_1.NavigationService !== 'undefined' && navigationService_1.NavigationService) === 'function' && _a) || Object])
    ], AppComponent);
    return AppComponent;
    var _a;
}());
exports.AppComponent = AppComponent;


/***/ }),

/***/ "./src/app/app.html":
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <!--Navigation and padding-->\r\n    <navBar></navBar>\r\n    <!--<navBarVert></navBarVert>-->\r\n\r\n    <!--Alert container-->\r\n    <tdamNotifications></tdamNotifications>\r\n\r\n    <div class=\"container-fluid\">\r\n        <div class=\"row\">\r\n            <!--<div class=\"col-md-1\"></div>-->\r\n            <div class=\"col-md-12\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-header\">\r\n                        <h4 class=\"card-title mb-0\">{{navService.pageTitle}}</h4>\r\n                    </div>\r\n                    <div class=\"card-block\">\r\n                       <spinner></spinner>\r\n                        <router-outlet></router-outlet>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\"></div>\r\n            <div class=\"col-md-4 text-md-center\">\r\n                TDAM DataHub <br/>\r\n                <a href=\"mailto:tdam-ops-sys@tdam.com?subject=TDAM DataHub Web Support\">Support</a>\r\n            </div>\r\n            <div class=\"col-md-4\"></div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/app.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var core_1 = __webpack_require__("./node_modules/@angular/core/index.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/index.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/index.js");
var app_routing_1 = __webpack_require__("./src/app/app.routing.ts");
var app_component_1 = __webpack_require__("./src/app/app.component.ts");
var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var SharedModule_1 = __webpack_require__("./src/app/ReusableComponents/SharedModule.ts");
var http_1 = __webpack_require__("./node_modules/@angular/http/index.js");
var admin_module_1 = __webpack_require__("./src/app/Datahub/routes/admin/admin.module.ts");
var home_Module_1 = __webpack_require__("./src/app/Datahub/routes/home/home.Module.ts");
var CORSBrowserXHr_1 = __webpack_require__("./src/app/CORSBrowserXHr.ts");
var applications_module_1 = __webpack_require__("./src/app/Datahub/routes/applications/applications.module.ts");
var accessdenied_module_1 = __webpack_require__("./src/app/Datahub/routes/accessdenied/accessdenied.module.ts");
var pagenotfound_module_1 = __webpack_require__("./src/app/Datahub/routes/pagenotfound/pagenotfound.module.ts");
var pageRedirect_module_1 = __webpack_require__("./src/app/Datahub/routes/pageRedirect/pageRedirect.module.ts");
var dashboard_module_1 = __webpack_require__("./src/app/Datahub/routes/dashboard/dashboard.module.ts");
var userProfile_module_1 = __webpack_require__("./src/app/Datahub/routes/userProfile/userProfile.module.ts");
var AppModule = (function () {
    function AppModule() {
    }
    AppModule = __decorate([
        core_1.NgModule({
            imports: [
                platform_browser_1.BrowserModule, http_1.HttpModule,
                forms_1.FormsModule, router_1.RouterModule,
                app_routing_1.routing, SharedModule_1.SharedModule, home_Module_1.HomeModule, admin_module_1.AdminModule, applications_module_1.ApplicationsModule, accessdenied_module_1.AccessDeniedModule, pagenotfound_module_1.PageNotFoundModule, pageRedirect_module_1.PageRedirectModule, dashboard_module_1.DashboardModule, userProfile_module_1.UserProfileModule
            ],
            declarations: [app_component_1.AppComponent],
            providers: [{ provide: http_1.BrowserXhr, useClass: CORSBrowserXHr_1.CORSBrowserXHr }],
            bootstrap: [app_component_1.AppComponent]
        }), 
        __metadata('design:paramtypes', [])
    ], AppModule);
    return AppModule;
}());
exports.AppModule = AppModule;


/***/ }),

/***/ "./src/app/app.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var router_1 = __webpack_require__("./node_modules/@angular/router/index.js");
var home_1 = __webpack_require__("./src/app/Datahub/routes/home/home.ts");
var AuthGuard_1 = __webpack_require__("./src/app/ReusableServices/AuthGuard.ts");
var pagenotfound_1 = __webpack_require__("./src/app/Datahub/routes/pagenotfound/pagenotfound.ts");
exports.routes = [
    { path: '', pathMatch: 'full', redirectTo: 'Datahub/Home' },
    { path: 'Datahub/Home', component: home_1.Home, name: "Home", canActivate: [AuthGuard_1.AuthGuard] },
    { path: 'Datahub', redirectTo: 'Datahub/Home' },
    { path: '**', component: pagenotfound_1.PageNotFound }
];
var appRoutes = exports.routes.slice();
exports.routing = router_1.RouterModule.forRoot(appRoutes);


/***/ }),

/***/ "./src/main.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var platform_browser_dynamic_1 = __webpack_require__("./node_modules/@angular/platform-browser-dynamic/index.js");
var app_module_1 = __webpack_require__("./src/app/app.module.ts");
platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule).then(function(MODULE_REF) {
  if (false) {
    module["hot"]["accept"]();
    
    if (MODULE_REF.instance["hmrOnInit"]) {
      module["hot"]["data"] && MODULE_REF.instance["hmrOnInit"](module["hot"]["data"]);
    }
    if (MODULE_REF.instance["hmrOnStatus"]) {
      module["hot"]["apply"](function(status) {
        MODULE_REF.instance["hmrOnStatus"](status);
      });
    }
    if (MODULE_REF.instance["hmrOnCheck"]) {
      module["hot"]["check"](function(err, outdatedModules) {
        MODULE_REF.instance["hmrOnCheck"](err, outdatedModules);
      });
    }
    if (MODULE_REF.instance["hmrOnDecline"]) {
      module["hot"]["decline"](function(dependencies) {
        MODULE_REF.instance["hmrOnDecline"](dependencies);
      });
    }
    module["hot"]["dispose"](function(store) {
      MODULE_REF.instance["hmrOnDestroy"] && MODULE_REF.instance["hmrOnDestroy"](store);
      MODULE_REF.destroy();
      MODULE_REF.instance["hmrAfterDestroy"] && MODULE_REF.instance["hmrAfterDestroy"](store);
    });
  }
  return MODULE_REF;
});


/***/ })

},["./src/main.ts"]);
//# sourceMappingURL=app.map